//
// Early-binding C++ API for SDAI (C++ wrappers)
//
#ifndef __RDF_LTD__AP214_H
#define __RDF_LTD__AP214_H

#include    <assert.h>
#include    <list>
#include    <string>

#include	"ifcengine.h"

namespace AP214
{
    ///
    typedef int_t SdaiModel;
    typedef int_t SdaiInstance;

    typedef const char* TextValue;
    typedef int_t       IntValue;

    class StringValue : public std::string
    {
    public:
        StringValue(TextValue str) : std::string(str) {}
        operator const char* () const { return c_str(); }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename T> class Nullable
    {
    protected:
        T* m_value;

    public:
        Nullable<T>() : m_value(NULL) {}
        Nullable<T>(T value) { m_value = new T(value); }
        Nullable<T>(const Nullable<T>& src) { if (src.m_value) m_value = new T(*src.m_value); else m_value = NULL; }

        virtual ~Nullable<T>() { if (m_value) { delete m_value; } };

        bool IsNull() const { return !m_value; }
        T Value() const { assert(m_value); if (m_value) return *m_value; else return (T) 0; }

        virtual Nullable<T>& operator=(const Nullable<T>& src)
        {
            if (m_value) { delete m_value; }
            m_value = NULL;
            if (src.m_value) { m_value = new T(*(src.m_value)); }
            return *this;
        }
    };

    //
    //
    enum class LOGICAL_VALUE { False = 0, True, Unknown };
    static TextValue LOGICAL_VALUE_[] = {"F", "T", "U", NULL};

    //
    //
    static int EnumerationNameToIndex(TextValue rEnumValues[], TextValue value)
    {
        if (value) {
            for (int i = 0; rEnumValues[i]; i++) {
                if (0 == _stricmp(value, rEnumValues[i])) {
                    return i;
                }
            }
        }
        return -1;
    }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    class Select
    {
    protected:
        SdaiInstance m_instance;
        TextValue m_attrName;

    private:
        void* m_adb;
        Select* m_outerSelect;

    public:
        void* ADB()
        {
            if (m_outerSelect) {
                return m_outerSelect->ADB();
            }

            if (!m_adb && m_instance && m_attrName) {
                if (!sdaiGetAttrBN(m_instance, m_attrName, sdaiADB, &m_adb)) {
                    sdaiDeleteADB(m_adb);
                    m_adb = NULL;
                }
            }

            return m_adb;
        }

    protected:
        Select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL)
            : m_instance(instance), m_attrName(attrName), m_adb(adb), m_outerSelect(NULL)
        {
            assert(instance);
        }

        Select(Select* outer)
            : m_instance(NULL), m_attrName(NULL), m_adb(NULL), m_outerSelect(outer)
        {
            assert(outer);
            if (m_outerSelect) {
                m_instance = m_outerSelect->m_instance;
            }
        }

        void SetADB(void* adb)
        {
            if (m_outerSelect) {
                m_outerSelect->SetADB(adb);
            }
            else {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance && m_attrName) {
                    sdaiPutAttrBN(m_instance, m_attrName, sdaiADB, m_adb);
                }
            }
        }

        //
        template <typename T> Nullable<T> getSimpleValue(TextValue typeName, IntValue sdaiType)
        {
            Nullable<T> ret;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    T val = (T) 0;
                    if (sdaiGetADBValue(adb, sdaiType, &val)) {
                        ret = val;
                    }
                }
            }
            return ret;
        }

        //
        template <typename T> void putSimpleValue(TextValue typeName, IntValue sdaiType, T value)
        {
            void* adb = sdaiCreateADB(sdaiType, &value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        TextValue getTextValue(TextValue typeName, IntValue sdaiType)
        {
            TextValue ret = NULL;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiType, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiType, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        int getEnumerationValue(TextValue typeName, TextValue rEnumValues[])
        {
            int ret = -1;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    TextValue value = NULL;
                    if (sdaiGetADBValue(adb, sdaiENUM, &value)) {
                        ret = EnumerationNameToIndex(rEnumValues, value);
                    }
                }
            }
            return ret;
        }

        //
        void putEnumerationValue(TextValue typeName, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiENUM, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        SdaiInstance getEntityInstance(TextValue typeName)
        {
            SdaiInstance ret = 0;
            if (auto adb = ADB()) {
                SdaiInstance inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (typeName == NULL || sdaiIsKindOfBN(inst, typeName)) {
                        ret = inst;
                    }
                }
            }
            return ret;
        }

        //
        void putEntityInstance(TextValue typeName, SdaiInstance inst)
        {
            if (inst == 0 || sdaiIsKindOfBN(inst, typeName)) {
                auto adb = sdaiCreateADB(sdaiINSTANCE, (void*) inst);
                SetADB(adb);
            }
            else {
                assert(0);
            }
        }

        //
        SdaiAggr getAggrValue(TextValue typeName)
        {
            SdaiAggr ret = NULL;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiAGGR, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putAggrValue(TextValue typeName, SdaiAggr value)
        {
            void* adb = sdaiCreateADB(sdaiAGGR, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        bool IsADBType(TextValue typeName)
        {
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (0 == _stricmp(path, typeName)) {
                    return true;
                }
            }
            return false;
        }

        bool IsADBEntity(TextValue typeName)
        {
            if (void* adb = ADB()) {
                IntValue inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (sdaiIsKindOfBN(inst, typeName)) {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 

    template <typename TArrayElem, typename TList> void ArrayToList(TArrayElem arrayElems[], IntValue numOfElems, TList& lst)
    {
        for (IntValue i = 0; i < numOfElems; i++) {
            lst.push_back(arrayElems[i]);
        }
    }

    template <typename TList> class AggrSerializer
    {
    public:
        //
        void FromAttr(TList& lst, SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = NULL;
            sdaiGetAttrBN(instance, attrName, sdaiAGGR, &aggr);
            if (aggr) {
                FromSdaiAggr(lst, instance, aggr);
            }
        }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance inst, SdaiAggr aggr) = 0; 
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) = 0;
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerSimple : public AggrSerializer<TList>
    {
    public:
        AggrSerializerSimple() { assert(sdaiType == sdaiINTEGER || sdaiType == sdaiREAL || sdaiType == sdaiBOOLEAN); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TElem val = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& v : lst) {
                TElem val = v;
                sdaiAppend(aggr, sdaiType, &val);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerText : public AggrSerializer<TList>
    {
    public:
        AggrSerializerText() { assert(sdaiType == sdaiSTRING || sdaiType == sdaiBINARY); }

        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue val;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                TextValue v = val;
                sdaiAppend(aggr, sdaiType, v);
            }
            return aggr;
        }

    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem> class AggrSerializerInstance : public AggrSerializer <TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            auto  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiInstance val = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiINSTANCE, &val);
                TElem elem(val);
                if (val) {
                    lst.push_back(val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            auto aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                SdaiInstance v = val;
                sdaiAppend(aggr, sdaiINSTANCE, (void*) v);
            }
            return aggr;
        }
    };


    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, TextValue* rEnumValues, IntValue sdaiType> class AggrSerializerEnum : public AggrSerializer<TList>
    {
    public:
        AggrSerializerEnum() { assert(sdaiType == sdaiENUM || sdaiType == sdaiLOGICAL); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*instance*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue value = NULL;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &value);
                int val = EnumerationNameToIndex(rEnumValues, value);
                if (val >= 0) {
                    lst.push_back((TElem) val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& val : lst) {
                TextValue value = rEnumValues[(IntValue) val];
                sdaiAppend(aggr, sdaiType, value);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TNestedAggr, typename TNestedSerializer> class AggrSerializerAggr : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiAggr nested = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiAGGR, &nested);
                if (nested) {
                    lst.push_back(TNestedAggr());
                    TNestedSerializer nestedSerializer;
                    nestedSerializer.FromSdaiAggr(lst.back(), instance, nested);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (TNestedAggr& val : lst) {
                TNestedSerializer nestedSerializer;
                SdaiAggr nested = nestedSerializer.ToSdaiAggr(val, instance, NULL);
                sdaiAppend(aggr, sdaiAGGR, nested);
            }
            return aggr;
        }
    };

    template<typename TList, typename TElem> class AggrSerializerSelect : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                void* adb = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiADB, &adb);
                if (adb) {
                    lst.push_back(TElem(instance, NULL, adb));
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                void* adb = val.ADB();
                if (adb) {
                    sdaiAppend(aggr, sdaiADB, adb);
                }
            }
            return aggr;
        }
    };


    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    class Entity
    {
    protected:
        SdaiInstance m_instance;

    public:
        Entity(SdaiInstance instance, TextValue entityName)
        {
            m_instance = instance;

            if (m_instance != 0 && entityName != NULL) {
                if (!sdaiIsKindOfBN(m_instance, entityName)) {
                    m_instance = 0;
                }
            }
        }


        /// <summary>
        /// Conversion  to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        operator SdaiInstance() const { return m_instance; }

    protected:
        //
        //
        int getENUM(TextValue attrName, TextValue rEnumValues[])
        {
            TextValue value = NULL;
            sdaiGetAttrBN(m_instance, attrName, sdaiENUM, (void*) &value);
            return EnumerationNameToIndex(rEnumValues, value);
        }
    };


    //
    // Entities forward declarations
    //

    class abs_function;
    class acos_function;
    class action;
    class action_assignment;
    class action_directive;
    class action_method;
    class action_method_relationship;
    class action_property;
    class action_property_representation;
    class action_relationship;
    class action_request_assignment;
    class action_request_solution;
    class action_request_status;
    class action_resource;
    class action_resource_requirement;
    class action_resource_type;
    class action_status;
    class address;
    class advanced_brep_shape_representation;
    class advanced_face;
    class alternate_product_relationship;
    class amount_of_substance_measure_with_unit;
    class amount_of_substance_unit;
    class and_expression;
    class angular_dimension;
    class angular_location;
    class angular_size;
    class angularity_tolerance;
    class annotation_curve_occurrence;
    class annotation_fill_area;
    class annotation_fill_area_occurrence;
    class annotation_occurrence;
    class annotation_occurrence_associativity;
    class annotation_occurrence_relationship;
    class annotation_plane;
    class annotation_subfigure_occurrence;
    class annotation_symbol;
    class annotation_symbol_occurrence;
    class annotation_text;
    class annotation_text_character;
    class annotation_text_occurrence;
    class apex;
    class application_context;
    class application_context_element;
    class application_context_relationship;
    class application_protocol_definition;
    class applied_action_assignment;
    class applied_action_request_assignment;
    class applied_approval_assignment;
    class applied_area;
    class applied_certification_assignment;
    class applied_classification_assignment;
    class applied_contract_assignment;
    class applied_date_and_time_assignment;
    class applied_date_assignment;
    class applied_document_reference;
    class applied_document_usage_constraint_assignment;
    class applied_effectivity_assignment;
    class applied_event_occurrence_assignment;
    class applied_external_identification_assignment;
    class applied_group_assignment;
    class applied_identification_assignment;
    class applied_ineffectivity_assignment;
    class applied_name_assignment;
    class applied_organization_assignment;
    class applied_organizational_project_assignment;
    class applied_person_and_organization_assignment;
    class applied_presented_item;
    class applied_security_classification_assignment;
    class applied_time_interval_assignment;
    class approval;
    class approval_assignment;
    class approval_date_time;
    class approval_person_organization;
    class approval_relationship;
    class approval_role;
    class approval_status;
    class approximation_tolerance;
    class approximation_tolerance_deviation;
    class approximation_tolerance_parameter;
    class area_in_set;
    class area_measure_with_unit;
    class area_unit;
    class asin_function;
    class assembly_component_usage;
    class assembly_component_usage_substitute;
    class atan_function;
    class attribute_classification_assignment;
    class attribute_language_assignment;
    class attribute_value_assignment;
    class attribute_value_role;
    class axis1_placement;
    class axis2_placement_2d;
    class axis2_placement_3d;
    class b_spline_curve;
    class b_spline_curve_with_knots;
    class b_spline_surface;
    class b_spline_surface_with_knots;
    class background_colour;
    class barring_hole;
    class bead;
    class bead_end;
    class bezier_curve;
    class bezier_surface;
    class binary_boolean_expression;
    class binary_function_call;
    class binary_generic_expression;
    class binary_numeric_expression;
    class block;
    class boolean_defined_function;
    class boolean_expression;
    class boolean_literal;
    class boolean_result;
    class boolean_variable;
    class boss;
    class boss_top;
    class boundary_curve;
    class bounded_curve;
    class bounded_pcurve;
    class bounded_surface;
    class bounded_surface_curve;
    class box_domain;
    class boxed_half_space;
    class brep_with_voids;
    class calendar_date;
    class camera_image;
    class camera_image_2d_with_scale;
    class camera_image_3d_with_scale;
    class camera_model;
    class camera_model_d2;
    class camera_model_d3;
    class camera_model_d3_with_hlhsr;
    class camera_usage;
    class cartesian_point;
    class cartesian_transformation_operator;
    class cartesian_transformation_operator_2d;
    class cartesian_transformation_operator_3d;
    class celsius_temperature_measure_with_unit;
    class centre_of_symmetry;
    class certification;
    class certification_assignment;
    class certification_type;
    class chamfer;
    class chamfer_offset;
    class character_glyph_symbol;
    class characterized_class;
    class characterized_object;
    class circle;
    class circular_closed_profile;
    class circular_pattern;
    class circular_runout_tolerance;
    class class_;
    class class_system;
    class class_usage_effectivity_context_assignment;
    class classification_assignment;
    class classification_role;
    class closed_path_profile;
    class closed_shell;
    class coaxiality_tolerance;
    class colour;
    class colour_rgb;
    class colour_specification;
    class common_datum;
    class comparison_equal;
    class comparison_expression;
    class comparison_greater;
    class comparison_greater_equal;
    class comparison_less;
    class comparison_less_equal;
    class comparison_not_equal;
    class composite_curve;
    class composite_curve_on_surface;
    class composite_curve_segment;
    class composite_hole;
    class composite_shape_aspect;
    class composite_text;
    class composite_text_with_associated_curves;
    class composite_text_with_blanking_box;
    class composite_text_with_extent;
    class compound_feature;
    class compound_representation_item;
    class compound_shape_representation;
    class concat_expression;
    class concentricity_tolerance;
    class concept_feature_operator;
    class concept_feature_relationship;
    class concept_feature_relationship_with_condition;
    class conditional_concept_feature;
    class configurable_item;
    class configuration_definition;
    class configuration_design;
    class configuration_effectivity;
    class configuration_interpolation;
    class configuration_item;
    class configured_effectivity_assignment;
    class configured_effectivity_context_assignment;
    class conic;
    class conical_surface;
    class connected_edge_set;
    class connected_face_set;
    class connected_face_sub_set;
    class constructive_geometry_representation;
    class constructive_geometry_representation_relationship;
    class contact_ratio_representation;
    class context_dependent_invisibility;
    class context_dependent_over_riding_styled_item;
    class context_dependent_shape_representation;
    class context_dependent_unit;
    class contract;
    class contract_assignment;
    class contract_type;
    class conversion_based_unit;
    class coordinated_universal_time_offset;
    class cos_function;
    class csg_shape_representation;
    class csg_solid;
    class curve;
    class curve_bounded_surface;
    class curve_dimension;
    class curve_replica;
    class curve_style;
    class curve_style_font;
    class curve_style_font_pattern;
    class curve_style_rendering;
    class curve_swept_solid_shape_representation;
    class cylindrical_pair;
    class cylindrical_pair_range;
    class cylindrical_pair_value;
    class cylindrical_surface;
    class cylindricity_tolerance;
    class data_environment;
    class date;
    class date_and_time;
    class date_and_time_assignment;
    class date_assignment;
    class date_role;
    class date_time_role;
    class dated_effectivity;
    class datum;
    class datum_feature;
    class datum_feature_callout;
    class datum_reference;
    class datum_target;
    class datum_target_callout;
    class default_tolerance_table;
    class default_tolerance_table_cell;
    class defined_character_glyph;
    class defined_function;
    class defined_symbol;
    class definitional_representation;
    class degenerate_pcurve;
    class degenerate_toroidal_surface;
    class derived_shape_aspect;
    class derived_unit;
    class derived_unit_element;
    class derived_unit_variable;
    class description_attribute;
    class descriptive_representation_item;
    class diameter_dimension;
    class dimension_callout;
    class dimension_callout_component_relationship;
    class dimension_callout_relationship;
    class dimension_curve;
    class dimension_curve_directed_callout;
    class dimension_curve_terminator;
    class dimension_pair;
    class dimension_related_tolerance_zone_element;
    class dimension_text_associativity;
    class dimensional_characteristic_representation;
    class dimensional_exponents;
    class dimensional_location;
    class dimensional_location_with_path;
    class dimensional_size;
    class dimensional_size_with_path;
    class directed_action;
    class directed_angle;
    class directed_dimensional_location;
    class direction;
    class direction_shape_representation;
    class div_expression;
    class document;
    class document_file;
    class document_product_association;
    class document_product_equivalence;
    class document_reference;
    class document_relationship;
    class document_representation_type;
    class document_type;
    class document_usage_constraint;
    class document_usage_constraint_assignment;
    class document_usage_role;
    class draughting_annotation_occurrence;
    class draughting_callout;
    class draughting_callout_relationship;
    class draughting_elements;
    class draughting_model;
    class draughting_model_item_association;
    class draughting_pre_defined_colour;
    class draughting_pre_defined_curve_font;
    class draughting_pre_defined_text_font;
    class draughting_specification_reference;
    class draughting_subfigure_representation;
    class draughting_symbol_representation;
    class draughting_text_literal_with_delineation;
    class draughting_title;
    class drawing_definition;
    class drawing_revision;
    class drawing_revision_sequence;
    class drawing_sheet_layout;
    class drawing_sheet_revision;
    class drawing_sheet_revision_usage;
    class edge;
    class edge_based_wireframe_model;
    class edge_based_wireframe_shape_representation;
    class edge_curve;
    class edge_loop;
    class edge_round;
    class effectivity;
    class effectivity_assignment;
    class effectivity_context_assignment;
    class effectivity_context_role;
    class effectivity_relationship;
    class electric_current_measure_with_unit;
    class electric_current_unit;
    class element_delivery;
    class elementary_surface;
    class ellipse;
    class environment;
    class equals_expression;
    class evaluated_degenerate_pcurve;
    class event_occurrence;
    class event_occurrence_assignment;
    class event_occurrence_context_assignment;
    class event_occurrence_context_role;
    class event_occurrence_role;
    class exclusive_product_concept_feature_category;
    class executed_action;
    class exp_function;
    class expression;
    class expression_conversion_based_unit;
    class extension;
    class external_identification_assignment;
    class external_source;
    class externally_defined_character_glyph;
    class externally_defined_class;
    class externally_defined_curve_font;
    class externally_defined_dimension_definition;
    class externally_defined_feature_definition;
    class externally_defined_general_property;
    class externally_defined_hatch_style;
    class externally_defined_item;
    class externally_defined_item_relationship;
    class externally_defined_style;
    class externally_defined_symbol;
    class externally_defined_text_font;
    class externally_defined_tile_style;
    class extruded_area_solid;
    class extruded_face_solid;
    class face;
    class face_based_surface_model;
    class face_bound;
    class face_outer_bound;
    class face_shape_representation;
    class face_surface;
    class faceted_brep;
    class faceted_brep_shape_representation;
    class feature_component_definition;
    class feature_component_relationship;
    class feature_definition;
    class feature_in_panel;
    class feature_pattern;
    class featured_shape;
    class fill_area_style;
    class fill_area_style_colour;
    class fill_area_style_hatching;
    class fill_area_style_tile_symbol_with_style;
    class fill_area_style_tiles;
    class fillet;
    class flatness_tolerance;
    class format_function;
    class founded_item;
    class founded_kinematic_path;
    class fully_constrained_pair;
    class functionally_defined_transformation;
    class gear_pair;
    class gear_pair_range;
    class gear_pair_value;
    class general_feature;
    class general_material_property;
    class general_property;
    class general_property_association;
    class general_property_relationship;
    class generic_character_glyph_symbol;
    class generic_expression;
    class generic_literal;
    class generic_variable;
    class geometric_alignment;
    class geometric_curve_set;
    class geometric_intersection;
    class geometric_item_specific_usage;
    class geometric_representation_context;
    class geometric_representation_item;
    class geometric_set;
    class geometric_tolerance;
    class geometric_tolerance_relationship;
    class geometric_tolerance_with_datum_reference;
    class geometric_tolerance_with_defined_unit;
    class geometrical_tolerance_callout;
    class geometrically_bounded_2d_wireframe_representation;
    class geometrically_bounded_surface_shape_representation;
    class geometrically_bounded_wireframe_shape_representation;
    class global_uncertainty_assigned_context;
    class global_unit_assigned_context;
    class group;
    class group_assignment;
    class group_relationship;
    class half_space_solid;
    class hardness_representation;
    class hidden_element_over_riding_styled_item;
    class hole_bottom;
    class hole_in_panel;
    class homokinetic_pair;
    class hyperbola;
    class id_attribute;
    class identification_assignment;
    class identification_role;
    class inclusion_product_concept_feature;
    class index_expression;
    class initial_state;
    class instanced_feature;
    class int_literal;
    class int_numeric_variable;
    class int_value_function;
    class integer_defined_function;
    class interpolated_configuration_sequence;
    class intersection_curve;
    class interval_expression;
    class invisibility;
    class item_defined_transformation;
    class item_identified_representation_usage;
    class joggle;
    class joggle_termination;
    class kinematic_analysis_consistency;
    class kinematic_analysis_result;
    class kinematic_control;
    class kinematic_frame_background_representation;
    class kinematic_frame_background_representation_association;
    class kinematic_frame_based_transformation;
    class kinematic_ground_representation;
    class kinematic_joint;
    class kinematic_link;
    class kinematic_link_representation;
    class kinematic_link_representation_association;
    class kinematic_link_representation_relation;
    class kinematic_pair;
    class kinematic_path;
    class kinematic_property_definition;
    class kinematic_property_representation_relation;
    class kinematic_structure;
    class known_source;
    class language;
    class language_assignment;
    class leader_curve;
    class leader_directed_callout;
    class leader_directed_dimension;
    class leader_terminator;
    class length_function;
    class length_measure_with_unit;
    class length_unit;
    class light_source;
    class light_source_ambient;
    class light_source_directional;
    class light_source_positional;
    class light_source_spot;
    class like_expression;
    class limits_and_fits;
    class line;
    class line_profile_tolerance;
    class linear_dimension;
    class literal_number;
    class local_time;
    class location_shape_representation;
    class locator;
    class log_function;
    class log10_function;
    class log2_function;
    class loop;
    class lot_effectivity;
    class luminous_intensity_measure_with_unit;
    class luminous_intensity_unit;
    class make_from_usage_option;
    class manifold_solid_brep;
    class manifold_subsurface_shape_representation;
    class manifold_surface_shape_representation;
    class mapped_item;
    class mass_measure_with_unit;
    class mass_unit;
    class material_designation;
    class material_designation_characterization;
    class material_property;
    class material_property_representation;
    class maximum_function;
    class measure_qualification;
    class measure_representation_item;
    class measure_with_unit;
    class mechanical_design_geometric_presentation_area;
    class mechanical_design_geometric_presentation_representation;
    class mechanism;
    class mechanism_base_placement;
    class minimum_function;
    class minus_expression;
    class minus_function;
    class mod_expression;
    class modified_geometric_tolerance;
    class modified_pattern;
    class moments_of_inertia_representation;
    class motion_link_relationship;
    class mult_expression;
    class multi_language_attribute_assignment;
    class multiple_arity_boolean_expression;
    class multiple_arity_function_call;
    class multiple_arity_generic_expression;
    class multiple_arity_numeric_expression;
    class name_assignment;
    class name_attribute;
    class named_unit;
    class named_unit_variable;
    class next_assembly_usage_occurrence;
    class ngon_closed_profile;
    class non_manifold_surface_shape_representation;
    class not_expression;
    class numeric_defined_function;
    class numeric_expression;
    class numeric_variable;
    class object_role;
    class odd_function;
    class offset_curve_2d;
    class offset_curve_3d;
    class offset_surface;
    class one_direction_repeat_factor;
    class open_path_profile;
    class open_shell;
    class or_expression;
    class ordinate_dimension;
    class organization;
    class organization_assignment;
    class organization_relationship;
    class organization_role;
    class organizational_address;
    class organizational_project;
    class organizational_project_assignment;
    class organizational_project_relationship;
    class organizational_project_role;
    class oriented_closed_shell;
    class oriented_edge;
    class oriented_face;
    class oriented_open_shell;
    class oriented_path;
    class oriented_surface;
    class outer_boundary_curve;
    class over_riding_styled_item;
    class package_product_concept_feature;
    class pair_actuator;
    class pair_value;
    class parabola;
    class parallel_offset;
    class parallelism_tolerance;
    class parametric_representation_context;
    class partial_circular_profile;
    class path;
    class path_feature_component;
    class path_shape_representation;
    class pattern_offset_membership;
    class pattern_omit_membership;
    class pcurve;
    class perpendicular_to;
    class perpendicularity_tolerance;
    class person;
    class person_and_organization;
    class person_and_organization_address;
    class person_and_organization_assignment;
    class person_and_organization_role;
    class personal_address;
    class physically_modelled_product_definition;
    class placed_datum_target_feature;
    class placed_feature;
    class placement;
    class planar_box;
    class planar_curve_pair;
    class planar_curve_pair_range;
    class planar_extent;
    class planar_pair;
    class planar_pair_range;
    class planar_pair_value;
    class planar_shape_representation;
    class plane;
    class plane_angle_measure_with_unit;
    class plane_angle_unit;
    class plus_expression;
    class plus_minus_tolerance;
    class pocket;
    class pocket_bottom;
    class point;
    class point_on_curve;
    class point_on_planar_curve_pair;
    class point_on_planar_curve_pair_range;
    class point_on_planar_curve_pair_value;
    class point_on_surface;
    class point_on_surface_pair;
    class point_on_surface_pair_range;
    class point_on_surface_pair_value;
    class point_placement_shape_representation;
    class point_replica;
    class point_style;
    class poly_loop;
    class polyline;
    class position_tolerance;
    class power_expression;
    class pre_defined_colour;
    class pre_defined_curve_font;
    class pre_defined_dimension_symbol;
    class pre_defined_geometrical_tolerance_symbol;
    class pre_defined_item;
    class pre_defined_marker;
    class pre_defined_point_marker_symbol;
    class pre_defined_presentation_style;
    class pre_defined_surface_condition_symbol;
    class pre_defined_symbol;
    class pre_defined_terminator_symbol;
    class pre_defined_text_font;
    class precision_qualifier;
    class presentation_area;
    class presentation_layer_assignment;
    class presentation_representation;
    class presentation_set;
    class presentation_size;
    class presentation_style_assignment;
    class presentation_style_by_context;
    class presentation_view;
    class presented_item;
    class presented_item_representation;
    class prismatic_pair;
    class prismatic_pair_range;
    class prismatic_pair_value;
    class process_operation;
    class process_plan;
    class process_product_association;
    class process_property_association;
    class product;
    class product_category;
    class product_category_relationship;
    class product_class;
    class product_concept;
    class product_concept_context;
    class product_concept_feature;
    class product_concept_feature_association;
    class product_concept_feature_category;
    class product_concept_feature_category_usage;
    class product_concept_relationship;
    class product_context;
    class product_definition;
    class product_definition_context;
    class product_definition_context_association;
    class product_definition_context_role;
    class product_definition_effectivity;
    class product_definition_formation;
    class product_definition_formation_relationship;
    class product_definition_formation_with_specified_source;
    class product_definition_occurrence_relationship;
    class product_definition_process;
    class product_definition_relationship;
    class product_definition_resource;
    class product_definition_shape;
    class product_definition_substitute;
    class product_definition_usage;
    class product_definition_with_associated_documents;
    class product_identification;
    class product_process_plan;
    class product_related_product_category;
    class product_specification;
    class projected_zone_definition;
    class projection_curve;
    class projection_directed_callout;
    class promissory_usage_occurrence;
    class property_definition;
    class property_definition_relationship;
    class property_definition_representation;
    class property_process;
    class qualified_representation_item;
    class qualitative_uncertainty;
    class quantified_assembly_component_usage;
    class quasi_uniform_curve;
    class quasi_uniform_surface;
    class rack_and_pinion_pair;
    class rack_and_pinion_pair_range;
    class rack_and_pinion_pair_value;
    class radius_dimension;
    class ratio_measure_with_unit;
    class ratio_unit;
    class rational_b_spline_curve;
    class rational_b_spline_surface;
    class real_defined_function;
    class real_literal;
    class real_numeric_variable;
    class rectangular_closed_profile;
    class rectangular_composite_surface;
    class rectangular_pattern;
    class rectangular_trimmed_surface;
    class referenced_modified_datum;
    class relative_event_occurrence;
    class rep_item_group;
    class reparametrised_composite_curve_segment;
    class replicate_feature;
    class representation;
    class representation_context;
    class representation_item;
    class representation_map;
    class representation_relationship;
    class representation_relationship_with_transformation;
    class requirement_for_action_resource;
    class resource_property;
    class resource_property_representation;
    class resource_requirement_type;
    class resulting_path;
    class retention;
    class revolute_pair;
    class revolute_pair_range;
    class revolute_pair_value;
    class revolved_area_solid;
    class revolved_face_solid;
    class rib;
    class right_angular_wedge;
    class right_circular_cone;
    class right_circular_cylinder;
    class role_association;
    class rolling_curve_pair;
    class rolling_curve_pair_value;
    class rolling_surface_pair;
    class rolling_surface_pair_value;
    class rotation_about_direction;
    class round_hole;
    class rounded_u_profile;
    class roundness_tolerance;
    class ruled_surface_swept_area_solid;
    class runout_zone_definition;
    class runout_zone_orientation;
    class runout_zone_orientation_reference_direction;
    class screw_pair;
    class screw_pair_range;
    class screw_pair_value;
    class seam_curve;
    class seam_edge;
    class security_classification;
    class security_classification_assignment;
    class security_classification_level;
    class serial_numbered_effectivity;
    class shape_aspect;
    class shape_aspect_associativity;
    class shape_aspect_deriving_relationship;
    class shape_aspect_relationship;
    class shape_aspect_transition;
    class shape_defining_relationship;
    class shape_definition_representation;
    class shape_dimension_representation;
    class shape_representation;
    class shape_representation_relationship;
    class shape_representation_with_parameters;
    class shell_based_surface_model;
    class si_unit;
    class simple_boolean_expression;
    class simple_generic_expression;
    class simple_numeric_expression;
    class simple_pair_range;
    class simple_string_expression;
    class sin_function;
    class slash_expression;
    class sliding_curve_pair;
    class sliding_curve_pair_value;
    class sliding_surface_pair;
    class sliding_surface_pair_value;
    class slot;
    class slot_end;
    class solid_angle_measure_with_unit;
    class solid_angle_unit;
    class solid_model;
    class solid_replica;
    class specified_higher_usage_occurrence;
    class sphere;
    class spherical_pair;
    class spherical_pair_range;
    class spherical_pair_value;
    class spherical_surface;
    class sql_mappable_defined_function;
    class square_root_function;
    class square_u_profile;
    class standard_uncertainty;
    class straightness_tolerance;
    class string_defined_function;
    class string_expression;
    class string_literal;
    class string_variable;
    class structured_dimension_callout;
    class styled_item;
    class subedge;
    class subface;
    class substring_expression;
    class surface;
    class surface_condition_callout;
    class surface_curve;
    class surface_curve_swept_area_solid;
    class surface_of_linear_extrusion;
    class surface_of_revolution;
    class surface_pair;
    class surface_pair_range;
    class surface_patch;
    class surface_profile_tolerance;
    class surface_rendering_properties;
    class surface_replica;
    class surface_side_style;
    class surface_style_boundary;
    class surface_style_control_grid;
    class surface_style_fill_area;
    class surface_style_parameter_line;
    class surface_style_reflectance_ambient;
    class surface_style_reflectance_ambient_diffuse;
    class surface_style_reflectance_ambient_diffuse_specular;
    class surface_style_rendering;
    class surface_style_rendering_with_properties;
    class surface_style_segmentation_curve;
    class surface_style_silhouette;
    class surface_style_transparent;
    class surface_style_usage;
    class surface_texture_representation;
    class swept_area_solid;
    class swept_disk_solid;
    class swept_face_solid;
    class swept_surface;
    class symbol_colour;
    class symbol_representation;
    class symbol_representation_map;
    class symbol_style;
    class symbol_target;
    class symmetric_shape_aspect;
    class symmetry_tolerance;
    class tactile_appearance_representation;
    class tan_function;
    class tangent;
    class taper;
    class tee_profile;
    class terminator_symbol;
    class text_literal;
    class text_literal_with_associated_curves;
    class text_literal_with_blanking_box;
    class text_literal_with_delineation;
    class text_literal_with_extent;
    class text_string_representation;
    class text_style;
    class text_style_for_defined_font;
    class text_style_with_box_characteristics;
    class text_style_with_mirror;
    class text_style_with_spacing;
    class thermodynamic_temperature_measure_with_unit;
    class thermodynamic_temperature_unit;
    class thread;
    class time_interval;
    class time_interval_assignment;
    class time_interval_based_effectivity;
    class time_interval_role;
    class time_interval_with_bounds;
    class time_measure_with_unit;
    class time_unit;
    class tolerance_value;
    class tolerance_zone;
    class tolerance_zone_definition;
    class tolerance_zone_form;
    class topological_representation_item;
    class toroidal_surface;
    class torus;
    class total_runout_tolerance;
    class transition_feature;
    class trimmed_curve;
    class two_direction_repeat_factor;
    class type_qualifier;
    class unary_boolean_expression;
    class unary_function_call;
    class unary_generic_expression;
    class unary_numeric_expression;
    class uncertainty_assigned_representation;
    class uncertainty_measure_with_unit;
    class uncertainty_qualifier;
    class unconstrained_pair;
    class unconstrained_pair_value;
    class uniform_curve;
    class uniform_surface;
    class universal_pair;
    class universal_pair_range;
    class universal_pair_value;
    class value_function;
    class value_range;
    class value_representation_item;
    class variable;
    class variable_semantics;
    class vector;
    class vector_style;
    class vee_profile;
    class versioned_action_request;
    class versioned_action_request_relationship;
    class vertex;
    class vertex_loop;
    class vertex_point;
    class view_volume;
    class visual_appearance_representation;
    class volume_measure_with_unit;
    class volume_unit;
    class xor_expression;

    class action_item;
    class action_item_get;
    class action_item_put;
    class action_request_item;
    class action_request_item_get;
    class action_request_item_put;
    class annotation_plane_element;
    class annotation_plane_element_get;
    class annotation_plane_element_put;
    class annotation_symbol_occurrence_item;
    class annotation_symbol_occurrence_item_get;
    class annotation_symbol_occurrence_item_put;
    class annotation_text_occurrence_item;
    class annotation_text_occurrence_item_get;
    class annotation_text_occurrence_item_put;
    class approval_item;
    class approval_item_get;
    class approval_item_put;
    class area_or_view;
    class area_or_view_get;
    class area_or_view_put;
    class attribute_language_item;
    class attribute_language_item_get;
    class attribute_language_item_put;
    class attribute_type;
    class attribute_type_get;
    class attribute_type_put;
    class axis2_placement;
    class axis2_placement_get;
    class axis2_placement_put;
    class boolean_operand;
    class boolean_operand_get;
    class boolean_operand_put;
    class box_characteristic_select;
    class box_characteristic_select_get;
    class box_characteristic_select_put;
    class category_usage_item;
    class category_usage_item_get;
    class category_usage_item_put;
    class certification_item;
    class certification_item_get;
    class certification_item_put;
    class character_spacing_select;
    class character_spacing_select_get;
    class character_spacing_select_put;
    class character_style_select;
    class character_style_select_get;
    class character_style_select_put;
    class characterized_action_definition;
    class characterized_action_definition_get;
    class characterized_action_definition_put;
    class characterized_definition;
    class characterized_definition_get;
    class characterized_definition_put;
    class characterized_material_property;
    class characterized_material_property_get;
    class characterized_material_property_put;
    class characterized_product_definition;
    class characterized_product_definition_get;
    class characterized_product_definition_put;
    class characterized_resource_definition;
    class characterized_resource_definition_get;
    class characterized_resource_definition_put;
    class class_usage_effectivity_context_item;
    class class_usage_effectivity_context_item_get;
    class class_usage_effectivity_context_item_put;
    class classification_item;
    class classification_item_get;
    class classification_item_put;
    class compound_item_definition;
    class compound_item_definition_get;
    class compound_item_definition_put;
    class configuration_design_item;
    class configuration_design_item_get;
    class configuration_design_item_put;
    class configured_effectivity_context_item;
    class configured_effectivity_context_item_get;
    class configured_effectivity_context_item_put;
    class configured_effectivity_item;
    class configured_effectivity_item_get;
    class configured_effectivity_item_put;
    class contract_item;
    class contract_item_get;
    class contract_item_put;
    class csg_primitive;
    class csg_primitive_get;
    class csg_primitive_put;
    class csg_select;
    class csg_select_get;
    class csg_select_put;
    class curve_font_or_scaled_curve_font_select;
    class curve_font_or_scaled_curve_font_select_get;
    class curve_font_or_scaled_curve_font_select_put;
    class curve_on_surface;
    class curve_on_surface_get;
    class curve_on_surface_put;
    class curve_or_render;
    class curve_or_render_get;
    class curve_or_render_put;
    class curve_style_font_select;
    class curve_style_font_select_get;
    class curve_style_font_select_put;
    class date_and_time_item;
    class date_and_time_item_get;
    class date_and_time_item_put;
    class date_item;
    class date_item_get;
    class date_item_put;
    class date_time_or_event_occurrence;
    class date_time_or_event_occurrence_get;
    class date_time_or_event_occurrence_put;
    class date_time_select;
    class date_time_select_get;
    class date_time_select_put;
    class defined_glyph_select;
    class defined_glyph_select_get;
    class defined_glyph_select_put;
    class defined_symbol_select;
    class defined_symbol_select_get;
    class defined_symbol_select_put;
    class derived_property_select;
    class derived_property_select_get;
    class derived_property_select_put;
    class description_attribute_select;
    class description_attribute_select_get;
    class description_attribute_select_put;
    class dimensional_characteristic;
    class dimensional_characteristic_get;
    class dimensional_characteristic_put;
    class direction_count_select;
    class direction_count_select_get;
    class direction_count_select_put;
    class document_reference_item;
    class document_reference_item_get;
    class document_reference_item_put;
    class draughting_callout_element;
    class draughting_callout_element_get;
    class draughting_callout_element_put;
    class draughting_model_item_association_select;
    class draughting_model_item_association_select_get;
    class draughting_model_item_association_select_put;
    class draughting_titled_item;
    class draughting_titled_item_get;
    class draughting_titled_item_put;
    class effectivity_item;
    class effectivity_item_get;
    class effectivity_item_put;
    class event_occurrence_item;
    class event_occurrence_item_get;
    class event_occurrence_item_put;
    class external_identification_item;
    class external_identification_item_get;
    class external_identification_item_put;
    class fill_area_style_tile_shape_select;
    class fill_area_style_tile_shape_select_get;
    class fill_area_style_tile_shape_select_put;
    class fill_style_select;
    class fill_style_select_get;
    class fill_style_select_put;
    class font_select;
    class font_select_get;
    class font_select_put;
    class founded_item_select;
    class founded_item_select_get;
    class founded_item_select_put;
    class geometric_set_select;
    class geometric_set_select_get;
    class geometric_set_select_put;
    class group_item;
    class group_item_get;
    class group_item_put;
    class id_attribute_select;
    class id_attribute_select_get;
    class id_attribute_select_put;
    class identification_item;
    class identification_item_get;
    class identification_item_put;
    class invisibility_context;
    class invisibility_context_get;
    class invisibility_context_put;
    class invisible_item;
    class invisible_item_get;
    class invisible_item_put;
    class kinematic_analysis_definition;
    class kinematic_analysis_definition_get;
    class kinematic_analysis_definition_put;
    class kinematic_frame_background;
    class kinematic_frame_background_get;
    class kinematic_frame_background_put;
    class kinematic_result;
    class kinematic_result_get;
    class kinematic_result_put;
    class language_item;
    class language_item_get;
    class language_item_put;
    class layered_item;
    class layered_item_get;
    class layered_item_put;
    class marker_select;
    class marker_select_get;
    class marker_select_put;
    class measure_value;
    class measure_value_get;
    class measure_value_put;
    class motion_parameter_measure;
    class motion_parameter_measure_get;
    class motion_parameter_measure_put;
    class multi_language_attribute_item;
    class multi_language_attribute_item_get;
    class multi_language_attribute_item_put;
    class name_attribute_select;
    class name_attribute_select_get;
    class name_attribute_select_put;
    class name_item;
    class name_item_get;
    class name_item_put;
    class organization_item;
    class organization_item_get;
    class organization_item_put;
    class organizational_project_item;
    class organizational_project_item_get;
    class organizational_project_item_put;
    class pcurve_or_surface;
    class pcurve_or_surface_get;
    class pcurve_or_surface_put;
    class person_and_organization_item;
    class person_and_organization_item_get;
    class person_and_organization_item_put;
    class person_organization_select;
    class person_organization_select_get;
    class person_organization_select_put;
    class plane_or_planar_box;
    class plane_or_planar_box_get;
    class plane_or_planar_box_put;
    class presentation_representation_select;
    class presentation_representation_select_get;
    class presentation_representation_select_put;
    class presentation_size_assignment_select;
    class presentation_size_assignment_select_get;
    class presentation_size_assignment_select_put;
    class presentation_style_select;
    class presentation_style_select_get;
    class presentation_style_select_put;
    class presented_item_select;
    class presented_item_select_get;
    class presented_item_select_put;
    class product_or_formation_or_definition;
    class product_or_formation_or_definition_get;
    class product_or_formation_or_definition_put;
    class property_or_shape_select;
    class property_or_shape_select_get;
    class property_or_shape_select_put;
    class rendering_properties_select;
    class rendering_properties_select_get;
    class rendering_properties_select_put;
    class represented_definition;
    class represented_definition_get;
    class represented_definition_put;
    class reversible_topology;
    class reversible_topology_get;
    class reversible_topology_put;
    class reversible_topology_item;
    class reversible_topology_item_get;
    class reversible_topology_item_put;
    class rigid_placement;
    class rigid_placement_get;
    class rigid_placement_put;
    class role_select;
    class role_select_get;
    class role_select_put;
    class rotational_range_measure;
    class rotational_range_measure_get;
    class rotational_range_measure_put;
    class security_classification_item;
    class security_classification_item_get;
    class security_classification_item_put;
    class shape_definition;
    class shape_definition_get;
    class shape_definition_put;
    class shell;
    class shell_get;
    class shell_put;
    class size_select;
    class size_select_get;
    class size_select_put;
    class source_item;
    class source_item_get;
    class source_item_put;
    class spatial_rotation;
    class spatial_rotation_get;
    class spatial_rotation_put;
    class specified_item;
    class specified_item_get;
    class specified_item_put;
    class style_context_select;
    class style_context_select_get;
    class style_context_select_put;
    class supported_item;
    class supported_item_get;
    class supported_item_put;
    class surface_side_style_select;
    class surface_side_style_select_get;
    class surface_side_style_select_put;
    class surface_style_element_select;
    class surface_style_element_select_get;
    class surface_style_element_select_put;
    class symbol_style_select;
    class symbol_style_select_get;
    class symbol_style_select_put;
    class text_or_character;
    class text_or_character_get;
    class text_or_character_put;
    class text_string_representation_item;
    class text_string_representation_item_get;
    class text_string_representation_item_put;
    class time_interval_item;
    class time_interval_item_get;
    class time_interval_item_put;
    class tolerance_deviation_select;
    class tolerance_deviation_select_get;
    class tolerance_deviation_select_put;
    class tolerance_method_definition;
    class tolerance_method_definition_get;
    class tolerance_method_definition_put;
    class tolerance_parameter_select;
    class tolerance_parameter_select_get;
    class tolerance_parameter_select_put;
    class tolerance_select;
    class tolerance_select_get;
    class tolerance_select_put;
    class transformation;
    class transformation_get;
    class transformation_put;
    class translational_range_measure;
    class translational_range_measure_get;
    class translational_range_measure_put;
    class trimming_select;
    class trimming_select_get;
    class trimming_select_put;
    class unit;
    class unit_get;
    class unit_put;
    class value_qualifier;
    class value_qualifier_get;
    class value_qualifier_put;
    class vector_or_direction;
    class vector_or_direction_get;
    class vector_or_direction_put;

        //
        // Enumerations
        //

    enum class ahead_or_behind
    {
        ahead = 0,
        exact = 1,
        behind = 2,
        ___unk = -1
    };

    enum class angle_relator
    {
        equal = 0,
        large = 1,
        small = 2,
        ___unk = -1
    };

    enum class approximation_method
    {
        chordal_deviation = 0,
        chordal_length = 1,
        ___unk = -1
    };

    enum class b_spline_curve_form
    {
        polyline_form = 0,
        circular_arc = 1,
        elliptic_arc = 2,
        parabolic_arc = 3,
        hyperbolic_arc = 4,
        unspecified = 5,
        ___unk = -1
    };

    enum class b_spline_surface_form
    {
        plane_surf = 0,
        cylindrical_surf = 1,
        conical_surf = 2,
        spherical_surf = 3,
        toroidal_surf = 4,
        surf_of_revolution = 5,
        ruled_surf = 6,
        generalised_cone = 7,
        quadric_surf = 8,
        surf_of_linear_extrusion = 9,
        unspecified = 10,
        ___unk = -1
    };

    enum class boolean_operator
    {
        union_ = 0,
        intersection = 1,
        difference = 2,
        ___unk = -1
    };

    enum class central_or_parallel
    {
        central = 0,
        parallel = 1,
        ___unk = -1
    };

    enum class dimension_extent_usage
    {
        origin = 0,
        target = 1,
        ___unk = -1
    };

    enum class interpolation_type
    {
        undefined = 0,
        synchronous = 1,
        linear = 2,
        ___unk = -1
    };

    enum class knot_type
    {
        uniform_knots = 0,
        quasi_uniform_knots = 1,
        piecewise_bezier_knots = 2,
        unspecified = 3,
        ___unk = -1
    };

    enum class limit_condition
    {
        maximum_material_condition = 0,
        least_material_condition = 1,
        regardless_of_feature_size = 2,
        ___unk = -1
    };

    enum class marker_type
    {
        dot = 0,
        x = 1,
        plus = 2,
        asterisk = 3,
        ring = 4,
        square = 5,
        triangle = 6,
        ___unk = -1
    };

    enum class null_style
    {
        null_ = 0,
        ___unk = -1
    };

    enum class preferred_surface_curve_representation
    {
        curve_3d = 0,
        pcurve_s1 = 1,
        pcurve_s2 = 2,
        ___unk = -1
    };

    enum class product_or_presentation_space
    {
        product_shape_space = 0,
        presentation_area_space = 1,
        ___unk = -1
    };

    enum class shading_curve_method
    {
        constant_colour = 0,
        linear_colour = 1,
        ___unk = -1
    };

    enum class shading_surface_method
    {
        constant_shading = 0,
        colour_shading = 1,
        dot_shading = 2,
        normal_shading = 3,
        ___unk = -1
    };

    enum class si_prefix
    {
        exa = 0,
        peta = 1,
        tera = 2,
        giga = 3,
        mega = 4,
        kilo = 5,
        hecto = 6,
        deca = 7,
        deci = 8,
        centi = 9,
        milli = 10,
        micro = 11,
        nano = 12,
        pico = 13,
        femto = 14,
        atto = 15,
        ___unk = -1
    };

    enum class si_unit_name
    {
        metre = 0,
        gram = 1,
        second = 2,
        ampere = 3,
        kelvin = 4,
        mole = 5,
        candela = 6,
        radian = 7,
        steradian = 8,
        hertz = 9,
        newton = 10,
        pascal = 11,
        joule = 12,
        watt = 13,
        coulomb = 14,
        volt = 15,
        farad = 16,
        ohm = 17,
        siemens = 18,
        weber = 19,
        tesla = 20,
        henry = 21,
        degree_celsius = 22,
        lumen = 23,
        lux = 24,
        becquerel = 25,
        gray = 26,
        sievert = 27,
        ___unk = -1
    };

    enum class source
    {
        made = 0,
        bought = 1,
        not_known = 2,
        ___unk = -1
    };

    enum class surface_side
    {
        positive = 0,
        negative = 1,
        both = 2,
        ___unk = -1
    };

    enum class text_path
    {
        left = 0,
        right = 1,
        up = 2,
        down = 3,
        ___unk = -1
    };

    enum class transition_code
    {
        discontinuous = 0,
        continuous = 1,
        cont_same_gradient = 2,
        cont_same_gradient_same_curvature = 3,
        ___unk = -1
    };

    enum class trimming_preference
    {
        cartesian = 0,
        parameter = 1,
        unspecified = 2,
        ___unk = -1
    };

    enum class unlimited_range
    {
        unlimited = 0,
        ___unk = -1
    };

    enum class ypr_enumeration
    {
        yaw = 0,
        pitch = 1,
        roll = 2,
        ___unk = -1
    };
    //
    static TextValue ahead_or_behind_[] = {"ahead", "exact", "behind", NULL};
    static TextValue angle_relator_[] = {"equal", "large", "small", NULL};
    static TextValue approximation_method_[] = {"chordal_deviation", "chordal_length", NULL};
    static TextValue b_spline_curve_form_[] = {"polyline_form", "circular_arc", "elliptic_arc", "parabolic_arc", "hyperbolic_arc", "unspecified", NULL};
    static TextValue b_spline_surface_form_[] = {"plane_surf", "cylindrical_surf", "conical_surf", "spherical_surf", "toroidal_surf", "surf_of_revolution", "ruled_surf", "generalised_cone", "quadric_surf", "surf_of_linear_extrusion", "unspecified", NULL};
    static TextValue boolean_operator_[] = {"union", "intersection", "difference", NULL};
    static TextValue central_or_parallel_[] = {"central", "parallel", NULL};
    static TextValue dimension_extent_usage_[] = {"origin", "target", NULL};
    static TextValue interpolation_type_[] = {"undefined", "synchronous", "linear", NULL};
    static TextValue knot_type_[] = {"uniform_knots", "quasi_uniform_knots", "piecewise_bezier_knots", "unspecified", NULL};
    static TextValue limit_condition_[] = {"maximum_material_condition", "least_material_condition", "regardless_of_feature_size", NULL};
    static TextValue marker_type_[] = {"dot", "x", "plus", "asterisk", "ring", "square", "triangle", NULL};
    static TextValue null_style_[] = {"null", NULL};
    static TextValue preferred_surface_curve_representation_[] = {"curve_3d", "pcurve_s1", "pcurve_s2", NULL};
    static TextValue product_or_presentation_space_[] = {"product_shape_space", "presentation_area_space", NULL};
    static TextValue shading_curve_method_[] = {"constant_colour", "linear_colour", NULL};
    static TextValue shading_surface_method_[] = {"constant_shading", "colour_shading", "dot_shading", "normal_shading", NULL};
    static TextValue si_prefix_[] = {"exa", "peta", "tera", "giga", "mega", "kilo", "hecto", "deca", "deci", "centi", "milli", "micro", "nano", "pico", "femto", "atto", NULL};
    static TextValue si_unit_name_[] = {"metre", "gram", "second", "ampere", "kelvin", "mole", "candela", "radian", "steradian", "hertz", "newton", "pascal", "joule", "watt", "coulomb", "volt", "farad", "ohm", "siemens", "weber", "tesla", "henry", "degree_celsius", "lumen", "lux", "becquerel", "gray", "sievert", NULL};
    static TextValue source_[] = {"made", "bought", "not_known", NULL};
    static TextValue surface_side_[] = {"positive", "negative", "both", NULL};
    static TextValue text_path_[] = {"left", "right", "up", "down", NULL};
    static TextValue transition_code_[] = {"discontinuous", "continuous", "cont_same_gradient", "cont_same_gradient_same_curvature", NULL};
    static TextValue trimming_preference_[] = {"cartesian", "parameter", "unspecified", NULL};
    static TextValue unlimited_range_[] = {"unlimited", NULL};
    static TextValue ypr_enumeration_[] = {"yaw", "pitch", "roll", NULL};

    //
    // Defined types
    // 
    typedef double amount_of_substance_measure;
    typedef double area_measure;
    typedef double ratio_measure;
    typedef double positive_ratio_measure;
    typedef double box_height;
    typedef double plane_angle_measure;
    typedef double box_rotate_angle;
    typedef plane_angle_measure box_slant_angle;
    typedef positive_ratio_measure box_width;
    typedef double celsius_temperature_measure;
    typedef double context_dependent_measure;
    typedef double count_measure;
    typedef double length_measure;
    typedef double non_negative_length_measure;
    typedef double positive_length_measure;
    typedef double curve_tolerance_deviation;
    typedef double curve_tolerance_parameter;
    typedef IntValue day_in_month_number;
    typedef TextValue descriptive_measure;
    typedef IntValue dimension_count;
    typedef double electric_current_measure;
    typedef IntValue hour_in_day;
    typedef TextValue identifier;
    typedef TextValue label;
    typedef std::list<reversible_topology_item> list_of_reversible_topology_item;
    template <typename TList> class list_of_reversible_topology_itemSerializer : public AggrSerializerSelect<TList, reversible_topology_item> {};
    typedef std::list<representation_item> list_representation_item;
    template <typename TList> class list_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef double luminous_intensity_measure;
    typedef double mass_measure;
    typedef IntValue minute_in_hour;
    typedef IntValue month_in_year_number;
    typedef double numeric_measure;
    typedef double parameter_value;
    typedef plane_angle_measure positive_plane_angle_measure;
    typedef TextValue presentable_text;
    typedef double second_in_minute;
    typedef std::list<reversible_topology_item> set_of_reversible_topology_item;
    template <typename TList> class set_of_reversible_topology_itemSerializer : public AggrSerializerSelect<TList, reversible_topology_item> {};
    typedef std::list<representation_item> set_representation_item;
    template <typename TList> class set_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef double solid_angle_measure;
    typedef positive_length_measure surface_tolerance_deviation;
    typedef double surface_tolerance_parameter;
    typedef TextValue text;
    typedef label text_alignment;
    typedef label text_delineation;
    typedef double thermodynamic_temperature_measure;
    typedef double time_measure;
    typedef IntValue u_direction_count;
    typedef IntValue v_direction_count;
    typedef double volume_measure;
    typedef IntValue year_number;
    typedef std::list<plane_angle_measure> ypr_rotation;
    template <typename TList> class ypr_rotationSerializer : public AggrSerializerSimple<TList, plane_angle_measure, sdaiREAL> {};

    class action_item : public Select
    {
    public:
        action_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class action_item_get : public Select
    {
    public:
        action_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class action_item_put : public Select
    {
    public:
        action_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class action_request_item : public Select
    {
    public:
        action_request_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);
    };


    class action_request_item_get : public Select
    {
    public:
        action_request_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class action_request_item_put : public Select
    {
    public:
        action_request_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organizational_project(organizational_project inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_resource_property(resource_property inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_representation(shape_representation inst);
    };


    class annotation_plane_element : public Select
    {
    public:
        annotation_plane_element(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element(Select* outer) : Select(outer) {}

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);
    };


    class annotation_plane_element_get : public Select
    {
    public:
        annotation_plane_element_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element_get(Select* outer) : Select(outer) {}
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_plane_element_put : public Select
    {
    public:
        annotation_plane_element_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element_put(Select* outer) : Select(outer) {}
        void put_draughting_callout(draughting_callout inst);
        void put_styled_item(styled_item inst);
    };


    class annotation_symbol_occurrence_item : public Select
    {
    public:
        annotation_symbol_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item(Select* outer) : Select(outer) {}

        bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        annotation_symbol get_annotation_symbol();
        void put_annotation_symbol(annotation_symbol inst);

        bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        defined_symbol get_defined_symbol();
        void put_defined_symbol(defined_symbol inst);
    };


    class annotation_symbol_occurrence_item_get : public Select
    {
    public:
        annotation_symbol_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        annotation_symbol get_annotation_symbol();
        bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        defined_symbol get_defined_symbol();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_symbol_occurrence_item_put : public Select
    {
    public:
        annotation_symbol_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_annotation_symbol(annotation_symbol inst);
        void put_defined_symbol(defined_symbol inst);
    };


    class annotation_text_occurrence_item : public Select
    {
    public:
        annotation_text_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item(Select* outer) : Select(outer) {}

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        void put_defined_character_glyph(defined_character_glyph inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);
    };


    class annotation_text_occurrence_item_get : public Select
    {
    public:
        annotation_text_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_text_occurrence_item_put : public Select
    {
    public:
        annotation_text_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_text_literal(text_literal inst);
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_defined_character_glyph(defined_character_glyph inst);
        void put_composite_text(composite_text inst);
    };


    class approval_item : public Select
    {
    public:
        approval_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class approval_item_get : public Select
    {
    public:
        approval_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class approval_item_put : public Select
    {
    public:
        approval_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_property(action_property inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organizational_project(organizational_project inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_resource_property(resource_property inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class area_or_view : public Select
    {
    public:
        area_or_view(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view(Select* outer) : Select(outer) {}

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        void put_presentation_view(presentation_view inst);
    };


    class area_or_view_get : public Select
    {
    public:
        area_or_view_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view_get(Select* outer) : Select(outer) {}
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class area_or_view_put : public Select
    {
    public:
        area_or_view_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view_put(Select* outer) : Select(outer) {}
        void put_presentation_area(presentation_area inst);
        void put_presentation_view(presentation_view inst);
    };


    class attribute_language_item : public Select
    {
    public:
        attribute_language_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        void put_attribute_value_assignment(attribute_value_assignment inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_data_environment() { return IsADBEntity("data_environment"); }
        data_environment get_data_environment();
        void put_data_environment(data_environment inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_draughting_title() { return IsADBEntity("draughting_title"); }
        draughting_title get_draughting_title();
        void put_draughting_title(draughting_title inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        void put_effectivity_relationship(effectivity_relationship inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        void put_geometric_tolerance(geometric_tolerance inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        void put_identification_role(identification_role inst);

        bool is_kinematic_pair() { return IsADBEntity("kinematic_pair"); }
        kinematic_pair get_kinematic_pair();
        void put_kinematic_pair(kinematic_pair inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        void put_name_assignment(name_assignment inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_pair_actuator() { return IsADBEntity("pair_actuator"); }
        pair_actuator get_pair_actuator();
        void put_pair_actuator(pair_actuator inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_process_product_association() { return IsADBEntity("process_product_association"); }
        process_product_association get_process_product_association();
        void put_process_product_association(process_product_association inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        void put_product_concept_relationship(product_concept_relationship inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        void put_product_related_product_category(product_related_product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        void put_representation_relationship(representation_relationship inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        void put_resource_requirement_type(resource_requirement_type inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        void put_time_interval_role(time_interval_role inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        void put_uncertainty_qualifier(uncertainty_qualifier inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);

        bool is_versioned_action_request_relationship() { return IsADBEntity("versioned_action_request_relationship"); }
        versioned_action_request_relationship get_versioned_action_request_relationship();
        void put_versioned_action_request_relationship(versioned_action_request_relationship inst);
    };


    class attribute_language_item_get : public Select
    {
    public:
        attribute_language_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_data_environment() { return IsADBEntity("data_environment"); }
        data_environment get_data_environment();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_draughting_title() { return IsADBEntity("draughting_title"); }
        draughting_title get_draughting_title();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        bool is_kinematic_pair() { return IsADBEntity("kinematic_pair"); }
        kinematic_pair get_kinematic_pair();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_pair_actuator() { return IsADBEntity("pair_actuator"); }
        pair_actuator get_pair_actuator();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_process_product_association() { return IsADBEntity("process_product_association"); }
        process_product_association get_process_product_association();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        bool is_versioned_action_request_relationship() { return IsADBEntity("versioned_action_request_relationship"); }
        versioned_action_request_relationship get_versioned_action_request_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class attribute_language_item_put : public Select
    {
    public:
        attribute_language_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_application_context(application_context inst);
        void put_approval_relationship(approval_relationship inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_attribute_value_assignment(attribute_value_assignment inst);
        void put_certification(certification inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_data_environment(data_environment inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_relationship(document_relationship inst);
        void put_draughting_title(draughting_title inst);
        void put_effectivity(effectivity inst);
        void put_effectivity_relationship(effectivity_relationship inst);
        void put_event_occurrence(event_occurrence inst);
        void put_external_source(external_source inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_geometric_tolerance(geometric_tolerance inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_identification_role(identification_role inst);
        void put_kinematic_pair(kinematic_pair inst);
        void put_mapped_item(mapped_item inst);
        void put_name_assignment(name_assignment inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organization_role(organization_role inst);
        void put_organizational_project(organizational_project inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_pair_actuator(pair_actuator inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_process_product_association(process_product_association inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_relationship(product_concept_relationship inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_product_related_product_category(product_related_product_category inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_representation(representation inst);
        void put_representation_relationship(representation_relationship inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_resource_requirement_type(resource_requirement_type inst);
        void put_security_classification(security_classification inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_styled_item(styled_item inst);
        void put_time_interval_role(time_interval_role inst);
        void put_topological_representation_item(topological_representation_item inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
        void put_versioned_action_request(versioned_action_request inst);
        void put_versioned_action_request_relationship(versioned_action_request_relationship inst);
    };


    class attribute_type : public Select
    {
    public:
        attribute_type(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type(Select* outer) : Select(outer) {}

        bool is_label() { return IsADBType("LABEL"); }
        label get_label() { return getTextValue("LABEL", sdaiSTRING); }
        void put_label(label value) { putTextValue("LABEL", sdaiSTRING, value); }

        bool is_text() { return IsADBType("TEXT"); }
        text get_text() { return getTextValue("TEXT", sdaiSTRING); }
        void put_text(text value) { putTextValue("TEXT", sdaiSTRING, value); }
    };


    class attribute_type_get : public Select
    {
    public:
        attribute_type_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type_get(Select* outer) : Select(outer) {}
        bool is_label() { return IsADBType("LABEL"); }
        label get_label() { return getTextValue("LABEL", sdaiSTRING); }
        bool is_text() { return IsADBType("TEXT"); }
        text get_text() { return getTextValue("TEXT", sdaiSTRING); }

        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class attribute_type_put : public Select
    {
    public:
        attribute_type_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type_put(Select* outer) : Select(outer) {}
        void put_label(label value) { putTextValue("LABEL", sdaiSTRING, value); }
        void put_text(text value) { putTextValue("TEXT", sdaiSTRING, value); }
    };


    class axis2_placement : public Select
    {
    public:
        axis2_placement(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement(Select* outer) : Select(outer) {}

        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();
        void put_axis2_placement_2d(axis2_placement_2d inst);

        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class axis2_placement_get : public Select
    {
    public:
        axis2_placement_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement_get(Select* outer) : Select(outer) {}
        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();
        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class axis2_placement_put : public Select
    {
    public:
        axis2_placement_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement_put(Select* outer) : Select(outer) {}
        void put_axis2_placement_2d(axis2_placement_2d inst);
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class csg_primitive : public Select
    {
    public:
        csg_primitive(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive(Select* outer) : Select(outer) {}

        bool is_sphere() { return IsADBEntity("sphere"); }
        sphere get_sphere();
        void put_sphere(sphere inst);

        bool is_block() { return IsADBEntity("block"); }
        block get_block();
        void put_block(block inst);

        bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        right_angular_wedge get_right_angular_wedge();
        void put_right_angular_wedge(right_angular_wedge inst);

        bool is_torus() { return IsADBEntity("torus"); }
        torus get_torus();
        void put_torus(torus inst);

        bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        right_circular_cone get_right_circular_cone();
        void put_right_circular_cone(right_circular_cone inst);

        bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        right_circular_cylinder get_right_circular_cylinder();
        void put_right_circular_cylinder(right_circular_cylinder inst);
    };


    class csg_primitive_get : public Select
    {
    public:
        csg_primitive_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive_get(Select* outer) : Select(outer) {}
        bool is_sphere() { return IsADBEntity("sphere"); }
        sphere get_sphere();
        bool is_block() { return IsADBEntity("block"); }
        block get_block();
        bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        right_angular_wedge get_right_angular_wedge();
        bool is_torus() { return IsADBEntity("torus"); }
        torus get_torus();
        bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        right_circular_cone get_right_circular_cone();
        bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        right_circular_cylinder get_right_circular_cylinder();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class csg_primitive_put : public Select
    {
    public:
        csg_primitive_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive_put(Select* outer) : Select(outer) {}
        void put_sphere(sphere inst);
        void put_block(block inst);
        void put_right_angular_wedge(right_angular_wedge inst);
        void put_torus(torus inst);
        void put_right_circular_cone(right_circular_cone inst);
        void put_right_circular_cylinder(right_circular_cylinder inst);
    };


    class boolean_operand : public Select
    {
    public:
        boolean_operand(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand(Select* outer) : Select(outer) {}

        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        void put_solid_model(solid_model inst);

        bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        half_space_solid get_half_space_solid();
        void put_half_space_solid(half_space_solid inst);

        csg_primitive _csg_primitive() { return csg_primitive(this); }

        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        void put_boolean_result(boolean_result inst);
    };


    class boolean_operand_get : public Select
    {
    public:
        boolean_operand_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand_get(Select* outer) : Select(outer) {}
        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        half_space_solid get_half_space_solid();
        csg_primitive_get get_csg_primitive() { return csg_primitive_get(this); }
        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class boolean_operand_put : public Select
    {
    public:
        boolean_operand_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand_put(Select* outer) : Select(outer) {}
        void put_solid_model(solid_model inst);
        void put_half_space_solid(half_space_solid inst);
        csg_primitive_put put_csg_primitive() { return csg_primitive_put(this); }
        void put_boolean_result(boolean_result inst);
    };


    class box_characteristic_select : public Select
    {
    public:
        box_characteristic_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select(Select* outer) : Select(outer) {}

        bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        Nullable<box_height> get_box_height() { return getSimpleValue<box_height>("BOX_HEIGHT", sdaiREAL); }
        void put_box_height(box_height value) { putSimpleValue("BOX_HEIGHT", sdaiREAL, value); }

        bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        Nullable<box_width> get_box_width() { return getSimpleValue<box_width>("BOX_WIDTH", sdaiREAL); }
        void put_box_width(box_width value) { putSimpleValue("BOX_WIDTH", sdaiREAL, value); }

        bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        Nullable<box_slant_angle> get_box_slant_angle() { return getSimpleValue<box_slant_angle>("BOX_SLANT_ANGLE", sdaiREAL); }
        void put_box_slant_angle(box_slant_angle value) { putSimpleValue("BOX_SLANT_ANGLE", sdaiREAL, value); }

        bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        Nullable<box_rotate_angle> get_box_rotate_angle() { return getSimpleValue<box_rotate_angle>("BOX_ROTATE_ANGLE", sdaiREAL); }
        void put_box_rotate_angle(box_rotate_angle value) { putSimpleValue("BOX_ROTATE_ANGLE", sdaiREAL, value); }
    };


    class box_characteristic_select_get : public Select
    {
    public:
        box_characteristic_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select_get(Select* outer) : Select(outer) {}
        bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        Nullable<box_height> get_box_height() { return getSimpleValue<box_height>("BOX_HEIGHT", sdaiREAL); }
        bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        Nullable<box_width> get_box_width() { return getSimpleValue<box_width>("BOX_WIDTH", sdaiREAL); }
        bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        Nullable<box_slant_angle> get_box_slant_angle() { return getSimpleValue<box_slant_angle>("BOX_SLANT_ANGLE", sdaiREAL); }
        bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        Nullable<box_rotate_angle> get_box_rotate_angle() { return getSimpleValue<box_rotate_angle>("BOX_ROTATE_ANGLE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class box_characteristic_select_put : public Select
    {
    public:
        box_characteristic_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select_put(Select* outer) : Select(outer) {}
        void put_box_height(box_height value) { putSimpleValue("BOX_HEIGHT", sdaiREAL, value); }
        void put_box_width(box_width value) { putSimpleValue("BOX_WIDTH", sdaiREAL, value); }
        void put_box_slant_angle(box_slant_angle value) { putSimpleValue("BOX_SLANT_ANGLE", sdaiREAL, value); }
        void put_box_rotate_angle(box_rotate_angle value) { putSimpleValue("BOX_ROTATE_ANGLE", sdaiREAL, value); }
    };


    class category_usage_item : public Select
    {
    public:
        category_usage_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item(Select* outer) : Select(outer) {}

        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        void put_product_class(product_class inst);
    };


    class category_usage_item_get : public Select
    {
    public:
        category_usage_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item_get(Select* outer) : Select(outer) {}
        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class category_usage_item_put : public Select
    {
    public:
        category_usage_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item_put(Select* outer) : Select(outer) {}
        void put_product_class(product_class inst);
    };


    class certification_item : public Select
    {
    public:
        certification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class certification_item_get : public Select
    {
    public:
        certification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class certification_item_put : public Select
    {
    public:
        certification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class character_spacing_select : public Select
    {
    public:
        character_spacing_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select(Select* outer) : Select(outer) {}

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class character_spacing_select_get : public Select
    {
    public:
        character_spacing_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select_get(Select* outer) : Select(outer) {}
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class character_spacing_select_put : public Select
    {
    public:
        character_spacing_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select_put(Select* outer) : Select(outer) {}
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }
        void put_measure_with_unit(measure_with_unit inst);
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class character_style_select : public Select
    {
    public:
        character_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select(Select* outer) : Select(outer) {}

        bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        text_style_for_defined_font get_text_style_for_defined_font();
        void put_text_style_for_defined_font(text_style_for_defined_font inst);
    };


    class character_style_select_get : public Select
    {
    public:
        character_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select_get(Select* outer) : Select(outer) {}
        bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        text_style_for_defined_font get_text_style_for_defined_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class character_style_select_put : public Select
    {
    public:
        character_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select_put(Select* outer) : Select(outer) {}
        void put_text_style_for_defined_font(text_style_for_defined_font inst);
    };


    class characterized_action_definition : public Select
    {
    public:
        characterized_action_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        void put_action_method_relationship(action_method_relationship inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);
    };


    class characterized_action_definition_get : public Select
    {
    public:
        characterized_action_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_action_definition_put : public Select
    {
    public:
        characterized_action_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_method_relationship(action_method_relationship inst);
        void put_action_relationship(action_relationship inst);
    };


    class characterized_product_definition : public Select
    {
    public:
        characterized_product_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class characterized_product_definition_get : public Select
    {
    public:
        characterized_product_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_product_definition_put : public Select
    {
    public:
        characterized_product_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class shape_definition : public Select
    {
    public:
        shape_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition(Select* outer) : Select(outer) {}

        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        void put_product_definition_shape(product_definition_shape inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class shape_definition_get : public Select
    {
    public:
        shape_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition_get(Select* outer) : Select(outer) {}
        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class shape_definition_put : public Select
    {
    public:
        shape_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition_put(Select* outer) : Select(outer) {}
        void put_product_definition_shape(product_definition_shape inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class characterized_definition : public Select
    {
    public:
        characterized_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition(Select* outer) : Select(outer) {}

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        characterized_product_definition _characterized_product_definition() { return characterized_product_definition(this); }

        shape_definition _shape_definition() { return shape_definition(this); }
    };


    class characterized_definition_get : public Select
    {
    public:
        characterized_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition_get(Select* outer) : Select(outer) {}
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        characterized_product_definition_get get_characterized_product_definition() { return characterized_product_definition_get(this); }
        shape_definition_get get_shape_definition() { return shape_definition_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_definition_put : public Select
    {
    public:
        characterized_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition_put(Select* outer) : Select(outer) {}
        void put_characterized_object(characterized_object inst);
        characterized_product_definition_put put_characterized_product_definition() { return characterized_product_definition_put(this); }
        shape_definition_put put_shape_definition() { return shape_definition_put(this); }
    };


    class characterized_material_property : public Select
    {
    public:
        characterized_material_property(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property(Select* outer) : Select(outer) {}

        bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        material_property_representation get_material_property_representation();
        void put_material_property_representation(material_property_representation inst);
    };


    class characterized_material_property_get : public Select
    {
    public:
        characterized_material_property_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property_get(Select* outer) : Select(outer) {}
        bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        material_property_representation get_material_property_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_material_property_put : public Select
    {
    public:
        characterized_material_property_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property_put(Select* outer) : Select(outer) {}
        void put_material_property_representation(material_property_representation inst);
    };


    class characterized_resource_definition : public Select
    {
    public:
        characterized_resource_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_resource_definition(Select* outer) : Select(outer) {}

        bool is_action_resource() { return IsADBEntity("action_resource"); }
        action_resource get_action_resource();
        void put_action_resource(action_resource inst);

        bool is_action_resource_requirement() { return IsADBEntity("action_resource_requirement"); }
        action_resource_requirement get_action_resource_requirement();
        void put_action_resource_requirement(action_resource_requirement inst);
    };


    class characterized_resource_definition_get : public Select
    {
    public:
        characterized_resource_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_resource_definition_get(Select* outer) : Select(outer) {}
        bool is_action_resource() { return IsADBEntity("action_resource"); }
        action_resource get_action_resource();
        bool is_action_resource_requirement() { return IsADBEntity("action_resource_requirement"); }
        action_resource_requirement get_action_resource_requirement();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_resource_definition_put : public Select
    {
    public:
        characterized_resource_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_resource_definition_put(Select* outer) : Select(outer) {}
        void put_action_resource(action_resource inst);
        void put_action_resource_requirement(action_resource_requirement inst);
    };


    class class_usage_effectivity_context_item : public Select
    {
    public:
        class_usage_effectivity_context_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class class_usage_effectivity_context_item_get : public Select
    {
    public:
        class_usage_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class class_usage_effectivity_context_item_put : public Select
    {
    public:
        class_usage_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
    };


    class classification_item : public Select
    {
    public:
        classification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        void put_document_type(document_type inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_feature_definition() { return IsADBEntity("feature_definition"); }
        feature_definition get_feature_definition();
        void put_feature_definition(feature_definition inst);

        bool is_general_feature() { return IsADBEntity("general_feature"); }
        general_feature get_general_feature();
        void put_general_feature(general_feature inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_plus_minus_tolerance() { return IsADBEntity("plus_minus_tolerance"); }
        plus_minus_tolerance get_plus_minus_tolerance();
        void put_plus_minus_tolerance(plus_minus_tolerance inst);

        bool is_process_operation() { return IsADBEntity("process_operation"); }
        process_operation get_process_operation();
        void put_process_operation(process_operation inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class classification_item_get : public Select
    {
    public:
        classification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_feature_definition() { return IsADBEntity("feature_definition"); }
        feature_definition get_feature_definition();
        bool is_general_feature() { return IsADBEntity("general_feature"); }
        general_feature get_general_feature();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_plus_minus_tolerance() { return IsADBEntity("plus_minus_tolerance"); }
        plus_minus_tolerance get_plus_minus_tolerance();
        bool is_process_operation() { return IsADBEntity("process_operation"); }
        process_operation get_process_operation();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class classification_item_put : public Select
    {
    public:
        classification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_approval_status(approval_status inst);
        void put_class_(class_ inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_file(document_file inst);
        void put_document_type(document_type inst);
        void put_effectivity(effectivity inst);
        void put_executed_action(executed_action inst);
        void put_feature_definition(feature_definition inst);
        void put_general_feature(general_feature inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_organizational_project(organizational_project inst);
        void put_plus_minus_tolerance(plus_minus_tolerance inst);
        void put_process_operation(process_operation inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_resource_property(resource_property inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_aspect(shape_aspect inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class compound_item_definition : public Select
    {
    public:
        compound_item_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition(Select* outer) : Select(outer) {}

        bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }

        //TList may be list_representation_item or list of converible elements
        template <typename TList> void get_list_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); list_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be list_representation_item or list of converible elements
        template <typename TList> void put_list_representation_item(TList& lst) { list_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_list_representation_item(TArrayElem arr[], size_t n) { list_representation_item lst; ArrayToList(arr, n, lst); put_list_representation_item(lst); }

        bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }

        //TList may be set_representation_item or list of converible elements
        template <typename TList> void get_set_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); set_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be set_representation_item or list of converible elements
        template <typename TList> void put_set_representation_item(TList& lst) { set_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_set_representation_item(TArrayElem arr[], size_t n) { set_representation_item lst; ArrayToList(arr, n, lst); put_set_representation_item(lst); }
    };


    class compound_item_definition_get : public Select
    {
    public:
        compound_item_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition_get(Select* outer) : Select(outer) {}
        bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }

        //TList may be list_representation_item or list of converible elements
        template <typename TList> void get_list_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); list_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }

        //TList may be set_representation_item or list of converible elements
        template <typename TList> void get_set_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); set_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
    };


    class compound_item_definition_put : public Select
    {
    public:
        compound_item_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition_put(Select* outer) : Select(outer) {}

                //TList may be list_representation_item or list of converible elements
        template <typename TList> void put_list_representation_item(TList& lst) { list_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_list_representation_item(TArrayElem arr[], size_t n) { list_representation_item lst; ArrayToList(arr, n, lst); put_list_representation_item(lst); }

                //TList may be set_representation_item or list of converible elements
        template <typename TList> void put_set_representation_item(TList& lst) { set_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_set_representation_item(TArrayElem arr[], size_t n) { set_representation_item lst; ArrayToList(arr, n, lst); put_set_representation_item(lst); }
    };


    class configuration_design_item : public Select
    {
    public:
        configuration_design_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class configuration_design_item_get : public Select
    {
    public:
        configuration_design_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configuration_design_item_put : public Select
    {
    public:
        configuration_design_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class configured_effectivity_context_item : public Select
    {
    public:
        configured_effectivity_context_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item(Select* outer) : Select(outer) {}

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);
    };


    class configured_effectivity_context_item_get : public Select
    {
    public:
        configured_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item_get(Select* outer) : Select(outer) {}
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configured_effectivity_context_item_put : public Select
    {
    public:
        configured_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item_put(Select* outer) : Select(outer) {}
        void put_product_concept_feature_association(product_concept_feature_association inst);
    };


    class configured_effectivity_item : public Select
    {
    public:
        configured_effectivity_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item(Select* outer) : Select(outer) {}

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_process_plan() { return IsADBEntity("process_plan"); }
        process_plan get_process_plan();
        void put_process_plan(process_plan inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_process_plan() { return IsADBEntity("product_process_plan"); }
        product_process_plan get_product_process_plan();
        void put_product_process_plan(product_process_plan inst);
    };


    class configured_effectivity_item_get : public Select
    {
    public:
        configured_effectivity_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item_get(Select* outer) : Select(outer) {}
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_process_plan() { return IsADBEntity("process_plan"); }
        process_plan get_process_plan();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_process_plan() { return IsADBEntity("product_process_plan"); }
        product_process_plan get_product_process_plan();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configured_effectivity_item_put : public Select
    {
    public:
        configured_effectivity_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item_put(Select* outer) : Select(outer) {}
        void put_action_relationship(action_relationship inst);
        void put_process_plan(process_plan inst);
        void put_product_definition(product_definition inst);
        void put_product_process_plan(product_process_plan inst);
    };


    class contract_item : public Select
    {
    public:
        contract_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item(Select* outer) : Select(outer) {}

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class contract_item_get : public Select
    {
    public:
        contract_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item_get(Select* outer) : Select(outer) {}
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class contract_item_put : public Select
    {
    public:
        contract_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item_put(Select* outer) : Select(outer) {}
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class csg_select : public Select
    {
    public:
        csg_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select(Select* outer) : Select(outer) {}

        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        void put_boolean_result(boolean_result inst);

        csg_primitive _csg_primitive() { return csg_primitive(this); }
    };


    class csg_select_get : public Select
    {
    public:
        csg_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select_get(Select* outer) : Select(outer) {}
        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        csg_primitive_get get_csg_primitive() { return csg_primitive_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class csg_select_put : public Select
    {
    public:
        csg_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select_put(Select* outer) : Select(outer) {}
        void put_boolean_result(boolean_result inst);
        csg_primitive_put put_csg_primitive() { return csg_primitive_put(this); }
    };


    class curve_style_font_select : public Select
    {
    public:
        curve_style_font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select(Select* outer) : Select(outer) {}

        bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        curve_style_font get_curve_style_font();
        void put_curve_style_font(curve_style_font inst);

        bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        pre_defined_curve_font get_pre_defined_curve_font();
        void put_pre_defined_curve_font(pre_defined_curve_font inst);

        bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        externally_defined_curve_font get_externally_defined_curve_font();
        void put_externally_defined_curve_font(externally_defined_curve_font inst);
    };


    class curve_style_font_select_get : public Select
    {
    public:
        curve_style_font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select_get(Select* outer) : Select(outer) {}
        bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        curve_style_font get_curve_style_font();
        bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        pre_defined_curve_font get_pre_defined_curve_font();
        bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        externally_defined_curve_font get_externally_defined_curve_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_style_font_select_put : public Select
    {
    public:
        curve_style_font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select_put(Select* outer) : Select(outer) {}
        void put_curve_style_font(curve_style_font inst);
        void put_pre_defined_curve_font(pre_defined_curve_font inst);
        void put_externally_defined_curve_font(externally_defined_curve_font inst);
    };


    class curve_font_or_scaled_curve_font_select : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select(Select* outer) : Select(outer) {}

        curve_style_font_select _curve_style_font_select() { return curve_style_font_select(this); }
    };


    class curve_font_or_scaled_curve_font_select_get : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select_get(Select* outer) : Select(outer) {}
        curve_style_font_select_get get_curve_style_font_select() { return curve_style_font_select_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_font_or_scaled_curve_font_select_put : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select_put(Select* outer) : Select(outer) {}
        curve_style_font_select_put put_curve_style_font_select() { return curve_style_font_select_put(this); }
    };


    class curve_on_surface : public Select
    {
    public:
        curve_on_surface(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface(Select* outer) : Select(outer) {}

        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        void put_pcurve(pcurve inst);

        bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        surface_curve get_surface_curve();
        void put_surface_curve(surface_curve inst);

        bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        composite_curve_on_surface get_composite_curve_on_surface();
        void put_composite_curve_on_surface(composite_curve_on_surface inst);
    };


    class curve_on_surface_get : public Select
    {
    public:
        curve_on_surface_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface_get(Select* outer) : Select(outer) {}
        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        surface_curve get_surface_curve();
        bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        composite_curve_on_surface get_composite_curve_on_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_on_surface_put : public Select
    {
    public:
        curve_on_surface_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface_put(Select* outer) : Select(outer) {}
        void put_pcurve(pcurve inst);
        void put_surface_curve(surface_curve inst);
        void put_composite_curve_on_surface(composite_curve_on_surface inst);
    };


    class curve_or_render : public Select
    {
    public:
        curve_or_render(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render(Select* outer) : Select(outer) {}

        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        void put_curve_style(curve_style inst);

        bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        curve_style_rendering get_curve_style_rendering();
        void put_curve_style_rendering(curve_style_rendering inst);
    };


    class curve_or_render_get : public Select
    {
    public:
        curve_or_render_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render_get(Select* outer) : Select(outer) {}
        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        curve_style_rendering get_curve_style_rendering();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_or_render_put : public Select
    {
    public:
        curve_or_render_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render_put(Select* outer) : Select(outer) {}
        void put_curve_style(curve_style inst);
        void put_curve_style_rendering(curve_style_rendering inst);
    };


    class date_and_time_item : public Select
    {
    public:
        date_and_time_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_and_time_item_get : public Select
    {
    public:
        date_and_time_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_and_time_item_put : public Select
    {
    public:
        date_and_time_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_effectivity(effectivity inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_item : public Select
    {
    public:
        date_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_item_get : public Select
    {
    public:
        date_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_item_put : public Select
    {
    public:
        date_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_effectivity(effectivity inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_time_select : public Select
    {
    public:
        date_time_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select(Select* outer) : Select(outer) {}

        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        void put_date(date inst);

        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        void put_date_and_time(date_and_time inst);

        bool is_local_time() { return IsADBEntity("local_time"); }
        local_time get_local_time();
        void put_local_time(local_time inst);
    };


    class date_time_select_get : public Select
    {
    public:
        date_time_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select_get(Select* outer) : Select(outer) {}
        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        bool is_local_time() { return IsADBEntity("local_time"); }
        local_time get_local_time();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_time_select_put : public Select
    {
    public:
        date_time_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select_put(Select* outer) : Select(outer) {}
        void put_date(date inst);
        void put_date_and_time(date_and_time inst);
        void put_local_time(local_time inst);
    };


    class date_time_or_event_occurrence : public Select
    {
    public:
        date_time_or_event_occurrence(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence(Select* outer) : Select(outer) {}

        date_time_select _date_time_select() { return date_time_select(this); }

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);
    };


    class date_time_or_event_occurrence_get : public Select
    {
    public:
        date_time_or_event_occurrence_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence_get(Select* outer) : Select(outer) {}
        date_time_select_get get_date_time_select() { return date_time_select_get(this); }
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_time_or_event_occurrence_put : public Select
    {
    public:
        date_time_or_event_occurrence_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence_put(Select* outer) : Select(outer) {}
        date_time_select_put put_date_time_select() { return date_time_select_put(this); }
        void put_event_occurrence(event_occurrence inst);
    };


    class defined_glyph_select : public Select
    {
    public:
        defined_glyph_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_glyph_select(Select* outer) : Select(outer) {}

        bool is_externally_defined_character_glyph() { return IsADBEntity("externally_defined_character_glyph"); }
        externally_defined_character_glyph get_externally_defined_character_glyph();
        void put_externally_defined_character_glyph(externally_defined_character_glyph inst);
    };


    class defined_glyph_select_get : public Select
    {
    public:
        defined_glyph_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_glyph_select_get(Select* outer) : Select(outer) {}
        bool is_externally_defined_character_glyph() { return IsADBEntity("externally_defined_character_glyph"); }
        externally_defined_character_glyph get_externally_defined_character_glyph();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class defined_glyph_select_put : public Select
    {
    public:
        defined_glyph_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_glyph_select_put(Select* outer) : Select(outer) {}
        void put_externally_defined_character_glyph(externally_defined_character_glyph inst);
    };


    class defined_symbol_select : public Select
    {
    public:
        defined_symbol_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select(Select* outer) : Select(outer) {}

        bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        pre_defined_symbol get_pre_defined_symbol();
        void put_pre_defined_symbol(pre_defined_symbol inst);

        bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        externally_defined_symbol get_externally_defined_symbol();
        void put_externally_defined_symbol(externally_defined_symbol inst);
    };


    class defined_symbol_select_get : public Select
    {
    public:
        defined_symbol_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select_get(Select* outer) : Select(outer) {}
        bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        pre_defined_symbol get_pre_defined_symbol();
        bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        externally_defined_symbol get_externally_defined_symbol();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class defined_symbol_select_put : public Select
    {
    public:
        defined_symbol_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select_put(Select* outer) : Select(outer) {}
        void put_pre_defined_symbol(pre_defined_symbol inst);
        void put_externally_defined_symbol(externally_defined_symbol inst);
    };


    class derived_property_select : public Select
    {
    public:
        derived_property_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select(Select* outer) : Select(outer) {}

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);
    };


    class derived_property_select_get : public Select
    {
    public:
        derived_property_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select_get(Select* outer) : Select(outer) {}
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class derived_property_select_put : public Select
    {
    public:
        derived_property_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select_put(Select* outer) : Select(outer) {}
        void put_property_definition(property_definition inst);
        void put_action_property(action_property inst);
        void put_resource_property(resource_property inst);
    };


    class description_attribute_select : public Select
    {
    public:
        description_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select(Select* outer) : Select(outer) {}

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_approval_role() { return IsADBEntity("approval_role"); }
        approval_role get_approval_role();
        void put_approval_role(approval_role inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);
    };


    class description_attribute_select_get : public Select
    {
    public:
        description_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_approval_role() { return IsADBEntity("approval_role"); }
        approval_role get_approval_role();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class description_attribute_select_put : public Select
    {
    public:
        description_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action_request_solution(action_request_solution inst);
        void put_application_context(application_context inst);
        void put_approval_role(approval_role inst);
        void put_configuration_design(configuration_design inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);
        void put_effectivity(effectivity inst);
        void put_external_source(external_source inst);
        void put_organization_role(organization_role inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_person_and_organization(person_and_organization inst);
        void put_property_definition_representation(property_definition_representation inst);
        void put_representation(representation inst);
    };


    class dimensional_characteristic : public Select
    {
    public:
        dimensional_characteristic(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic(Select* outer) : Select(outer) {}

        bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        dimensional_location get_dimensional_location();
        void put_dimensional_location(dimensional_location inst);

        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        void put_dimensional_size(dimensional_size inst);
    };


    class dimensional_characteristic_get : public Select
    {
    public:
        dimensional_characteristic_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic_get(Select* outer) : Select(outer) {}
        bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        dimensional_location get_dimensional_location();
        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class dimensional_characteristic_put : public Select
    {
    public:
        dimensional_characteristic_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic_put(Select* outer) : Select(outer) {}
        void put_dimensional_location(dimensional_location inst);
        void put_dimensional_size(dimensional_size inst);
    };


    class direction_count_select : public Select
    {
    public:
        direction_count_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select(Select* outer) : Select(outer) {}

        bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        Nullable<u_direction_count> get_u_direction_count() { return getSimpleValue<u_direction_count>("U_DIRECTION_COUNT", sdaiINTEGER); }
        void put_u_direction_count(u_direction_count value) { putSimpleValue("U_DIRECTION_COUNT", sdaiINTEGER, value); }

        bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        Nullable<v_direction_count> get_v_direction_count() { return getSimpleValue<v_direction_count>("V_DIRECTION_COUNT", sdaiINTEGER); }
        void put_v_direction_count(v_direction_count value) { putSimpleValue("V_DIRECTION_COUNT", sdaiINTEGER, value); }
    };


    class direction_count_select_get : public Select
    {
    public:
        direction_count_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select_get(Select* outer) : Select(outer) {}
        bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        Nullable<u_direction_count> get_u_direction_count() { return getSimpleValue<u_direction_count>("U_DIRECTION_COUNT", sdaiINTEGER); }
        bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        Nullable<v_direction_count> get_v_direction_count() { return getSimpleValue<v_direction_count>("V_DIRECTION_COUNT", sdaiINTEGER); }

        Nullable<IntValue> as_int() { IntValue val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
    };


    class direction_count_select_put : public Select
    {
    public:
        direction_count_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select_put(Select* outer) : Select(outer) {}
        void put_u_direction_count(u_direction_count value) { putSimpleValue("U_DIRECTION_COUNT", sdaiINTEGER, value); }
        void put_v_direction_count(v_direction_count value) { putSimpleValue("V_DIRECTION_COUNT", sdaiINTEGER, value); }
    };


    class document_reference_item : public Select
    {
    public:
        document_reference_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item(Select* outer) : Select(outer) {}

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        externally_defined_dimension_definition get_externally_defined_dimension_definition();
        void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst);

        bool is_feature_definition() { return IsADBEntity("feature_definition"); }
        feature_definition get_feature_definition();
        void put_feature_definition(feature_definition inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        void put_person(person inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_process_plan() { return IsADBEntity("process_plan"); }
        process_plan get_process_plan();
        void put_process_plan(process_plan inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_process() { return IsADBEntity("product_definition_process"); }
        product_definition_process get_product_definition_process();
        void put_product_definition_process(product_definition_process inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        void put_product_related_product_category(product_related_product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        void put_resource_requirement_type(resource_requirement_type inst);

        bool is_retention() { return IsADBEntity("retention"); }
        retention get_retention();
        void put_retention(retention inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class document_reference_item_get : public Select
    {
    public:
        document_reference_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item_get(Select* outer) : Select(outer) {}
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        externally_defined_dimension_definition get_externally_defined_dimension_definition();
        bool is_feature_definition() { return IsADBEntity("feature_definition"); }
        feature_definition get_feature_definition();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_process_plan() { return IsADBEntity("process_plan"); }
        process_plan get_process_plan();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_process() { return IsADBEntity("product_definition_process"); }
        product_definition_process get_product_definition_process();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        bool is_retention() { return IsADBEntity("retention"); }
        retention get_retention();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class document_reference_item_put : public Select
    {
    public:
        document_reference_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item_put(Select* outer) : Select(outer) {}
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_relationship(action_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_approval(approval inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_executed_action(executed_action inst);
        void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst);
        void put_feature_definition(feature_definition inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_organization(organization inst);
        void put_organizational_project(organizational_project inst);
        void put_person(person inst);
        void put_presentation_area(presentation_area inst);
        void put_process_plan(process_plan inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_process(product_definition_process inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_product_related_product_category(product_related_product_category inst);
        void put_property_definition(property_definition inst);
        void put_representation(representation inst);
        void put_resource_requirement_type(resource_requirement_type inst);
        void put_retention(retention inst);
        void put_security_classification(security_classification inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class draughting_callout_element : public Select
    {
    public:
        draughting_callout_element(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element(Select* outer) : Select(outer) {}

        bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        annotation_text_occurrence get_annotation_text_occurrence();
        void put_annotation_text_occurrence(annotation_text_occurrence inst);

        bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        annotation_symbol_occurrence get_annotation_symbol_occurrence();
        void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst);

        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class draughting_callout_element_get : public Select
    {
    public:
        draughting_callout_element_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element_get(Select* outer) : Select(outer) {}
        bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        annotation_text_occurrence get_annotation_text_occurrence();
        bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        annotation_symbol_occurrence get_annotation_symbol_occurrence();
        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_callout_element_put : public Select
    {
    public:
        draughting_callout_element_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element_put(Select* outer) : Select(outer) {}
        void put_annotation_text_occurrence(annotation_text_occurrence inst);
        void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst);
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class draughting_model_item_association_select : public Select
    {
    public:
        draughting_model_item_association_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select(Select* outer) : Select(outer) {}

        bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        annotation_occurrence get_annotation_occurrence();
        void put_annotation_occurrence(annotation_occurrence inst);

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_model_item_association_select_get : public Select
    {
    public:
        draughting_model_item_association_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select_get(Select* outer) : Select(outer) {}
        bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        annotation_occurrence get_annotation_occurrence();
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_model_item_association_select_put : public Select
    {
    public:
        draughting_model_item_association_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select_put(Select* outer) : Select(outer) {}
        void put_annotation_occurrence(annotation_occurrence inst);
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_titled_item : public Select
    {
    public:
        draughting_titled_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item(Select* outer) : Select(outer) {}

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        drawing_sheet_revision get_drawing_sheet_revision();
        void put_drawing_sheet_revision(drawing_sheet_revision inst);
    };


    class draughting_titled_item_get : public Select
    {
    public:
        draughting_titled_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item_get(Select* outer) : Select(outer) {}
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        drawing_sheet_revision get_drawing_sheet_revision();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_titled_item_put : public Select
    {
    public:
        draughting_titled_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item_put(Select* outer) : Select(outer) {}
        void put_drawing_revision(drawing_revision inst);
        void put_drawing_sheet_revision(drawing_sheet_revision inst);
    };


    class effectivity_item : public Select
    {
    public:
        effectivity_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        void put_action_method_relationship(action_method_relationship inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);
    };


    class effectivity_item_get : public Select
    {
    public:
        effectivity_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class effectivity_item_put : public Select
    {
    public:
        effectivity_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_method_relationship(action_method_relationship inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_representation(shape_representation inst);
    };


    class event_occurrence_item : public Select
    {
    public:
        event_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class event_occurrence_item_get : public Select
    {
    public:
        event_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class event_occurrence_item_put : public Select
    {
    public:
        event_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class external_identification_item : public Select
    {
    public:
        external_identification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item(Select* outer) : Select(outer) {}

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        externally_defined_class get_externally_defined_class();
        void put_externally_defined_class(externally_defined_class inst);

        bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        externally_defined_general_property get_externally_defined_general_property();
        void put_externally_defined_general_property(externally_defined_general_property inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class external_identification_item_get : public Select
    {
    public:
        external_identification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item_get(Select* outer) : Select(outer) {}
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        externally_defined_class get_externally_defined_class();
        bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        externally_defined_general_property get_externally_defined_general_property();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class external_identification_item_put : public Select
    {
    public:
        external_identification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item_put(Select* outer) : Select(outer) {}
        void put_document_file(document_file inst);
        void put_externally_defined_class(externally_defined_class inst);
        void put_externally_defined_general_property(externally_defined_general_property inst);
        void put_product_definition(product_definition inst);
    };


    class fill_area_style_tile_shape_select : public Select
    {
    public:
        fill_area_style_tile_shape_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select(Select* outer) : Select(outer) {}

        bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style();
        void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst);
    };


    class fill_area_style_tile_shape_select_get : public Select
    {
    public:
        fill_area_style_tile_shape_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select_get(Select* outer) : Select(outer) {}
        bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class fill_area_style_tile_shape_select_put : public Select
    {
    public:
        fill_area_style_tile_shape_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select_put(Select* outer) : Select(outer) {}
        void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst);
    };


    class fill_style_select : public Select
    {
    public:
        fill_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select(Select* outer) : Select(outer) {}

        bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        fill_area_style_colour get_fill_area_style_colour();
        void put_fill_area_style_colour(fill_area_style_colour inst);

        bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        externally_defined_tile_style get_externally_defined_tile_style();
        void put_externally_defined_tile_style(externally_defined_tile_style inst);

        bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        fill_area_style_tiles get_fill_area_style_tiles();
        void put_fill_area_style_tiles(fill_area_style_tiles inst);

        bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        externally_defined_hatch_style get_externally_defined_hatch_style();
        void put_externally_defined_hatch_style(externally_defined_hatch_style inst);

        bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        fill_area_style_hatching get_fill_area_style_hatching();
        void put_fill_area_style_hatching(fill_area_style_hatching inst);
    };


    class fill_style_select_get : public Select
    {
    public:
        fill_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select_get(Select* outer) : Select(outer) {}
        bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        fill_area_style_colour get_fill_area_style_colour();
        bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        externally_defined_tile_style get_externally_defined_tile_style();
        bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        fill_area_style_tiles get_fill_area_style_tiles();
        bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        externally_defined_hatch_style get_externally_defined_hatch_style();
        bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        fill_area_style_hatching get_fill_area_style_hatching();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class fill_style_select_put : public Select
    {
    public:
        fill_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select_put(Select* outer) : Select(outer) {}
        void put_fill_area_style_colour(fill_area_style_colour inst);
        void put_externally_defined_tile_style(externally_defined_tile_style inst);
        void put_fill_area_style_tiles(fill_area_style_tiles inst);
        void put_externally_defined_hatch_style(externally_defined_hatch_style inst);
        void put_fill_area_style_hatching(fill_area_style_hatching inst);
    };


    class font_select : public Select
    {
    public:
        font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select(Select* outer) : Select(outer) {}

        bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        pre_defined_text_font get_pre_defined_text_font();
        void put_pre_defined_text_font(pre_defined_text_font inst);

        bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        externally_defined_text_font get_externally_defined_text_font();
        void put_externally_defined_text_font(externally_defined_text_font inst);
    };


    class font_select_get : public Select
    {
    public:
        font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select_get(Select* outer) : Select(outer) {}
        bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        pre_defined_text_font get_pre_defined_text_font();
        bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        externally_defined_text_font get_externally_defined_text_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class font_select_put : public Select
    {
    public:
        font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select_put(Select* outer) : Select(outer) {}
        void put_pre_defined_text_font(pre_defined_text_font inst);
        void put_externally_defined_text_font(externally_defined_text_font inst);
    };


    class founded_item_select : public Select
    {
    public:
        founded_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select(Select* outer) : Select(outer) {}

        bool is_founded_item() { return IsADBEntity("founded_item"); }
        founded_item get_founded_item();
        void put_founded_item(founded_item inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);
    };


    class founded_item_select_get : public Select
    {
    public:
        founded_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select_get(Select* outer) : Select(outer) {}
        bool is_founded_item() { return IsADBEntity("founded_item"); }
        founded_item get_founded_item();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class founded_item_select_put : public Select
    {
    public:
        founded_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select_put(Select* outer) : Select(outer) {}
        void put_founded_item(founded_item inst);
        void put_representation_item(representation_item inst);
    };


    class geometric_set_select : public Select
    {
    public:
        geometric_set_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select(Select* outer) : Select(outer) {}

        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        void put_point(point inst);

        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        void put_curve(curve inst);

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);
    };


    class geometric_set_select_get : public Select
    {
    public:
        geometric_set_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select_get(Select* outer) : Select(outer) {}
        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class geometric_set_select_put : public Select
    {
    public:
        geometric_set_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select_put(Select* outer) : Select(outer) {}
        void put_point(point inst);
        void put_curve(curve inst);
        void put_surface(surface inst);
    };


    class group_item : public Select
    {
    public:
        group_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        group_item(Select* outer) : Select(outer) {}

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);
    };


    class group_item_get : public Select
    {
    public:
        group_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        group_item_get(Select* outer) : Select(outer) {}
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class group_item_put : public Select
    {
    public:
        group_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        group_item_put(Select* outer) : Select(outer) {}
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_mapped_item(mapped_item inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_shape_aspect(shape_aspect inst);
        void put_styled_item(styled_item inst);
        void put_topological_representation_item(topological_representation_item inst);
    };


    class id_attribute_select : public Select
    {
    public:
        id_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        void put_address(address inst);

        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        void put_product_category(product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);
    };


    class id_attribute_select_get : public Select
    {
    public:
        id_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class id_attribute_select_put : public Select
    {
    public:
        id_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_address(address inst);
        void put_product_category(product_category inst);
        void put_property_definition(property_definition inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_application_context(application_context inst);
        void put_group(group inst);
        void put_organizational_project(organizational_project inst);
        void put_representation(representation inst);
    };


    class identification_item : public Select
    {
    public:
        identification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        void put_dimensional_size(dimensional_size inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        void put_document_type(document_type inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        void put_measure_representation_item(measure_representation_item inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class identification_item_get : public Select
    {
    public:
        identification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class identification_item_put : public Select
    {
    public:
        identification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_approval_status(approval_status inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_item(configuration_item inst);
        void put_dimensional_size(dimensional_size inst);
        void put_document_file(document_file inst);
        void put_document_type(document_type inst);
        void put_draughting_model(draughting_model inst);
        void put_effectivity(effectivity inst);
        void put_general_property(general_property inst);
        void put_measure_representation_item(measure_representation_item inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization(organization inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class invisibility_context : public Select
    {
    public:
        invisibility_context(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context(Select* outer) : Select(outer) {}

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);
    };


    class invisibility_context_get : public Select
    {
    public:
        invisibility_context_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context_get(Select* outer) : Select(outer) {}
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class invisibility_context_put : public Select
    {
    public:
        invisibility_context_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context_put(Select* outer) : Select(outer) {}
        void put_presentation_representation(presentation_representation inst);
        void put_presentation_set(presentation_set inst);
    };


    class invisible_item : public Select
    {
    public:
        invisible_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item(Select* outer) : Select(outer) {}

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);
    };


    class invisible_item_get : public Select
    {
    public:
        invisible_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item_get(Select* outer) : Select(outer) {}
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class invisible_item_put : public Select
    {
    public:
        invisible_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item_put(Select* outer) : Select(outer) {}
        void put_draughting_callout(draughting_callout inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_representation(representation inst);
        void put_styled_item(styled_item inst);
    };


    class kinematic_analysis_definition : public Select
    {
    public:
        kinematic_analysis_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_analysis_definition(Select* outer) : Select(outer) {}

        bool is_interpolated_configuration_sequence() { return IsADBEntity("interpolated_configuration_sequence"); }
        interpolated_configuration_sequence get_interpolated_configuration_sequence();
        void put_interpolated_configuration_sequence(interpolated_configuration_sequence inst);
    };


    class kinematic_analysis_definition_get : public Select
    {
    public:
        kinematic_analysis_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_analysis_definition_get(Select* outer) : Select(outer) {}
        bool is_interpolated_configuration_sequence() { return IsADBEntity("interpolated_configuration_sequence"); }
        interpolated_configuration_sequence get_interpolated_configuration_sequence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class kinematic_analysis_definition_put : public Select
    {
    public:
        kinematic_analysis_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_analysis_definition_put(Select* outer) : Select(outer) {}
        void put_interpolated_configuration_sequence(interpolated_configuration_sequence inst);
    };


    class kinematic_frame_background : public Select
    {
    public:
        kinematic_frame_background(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_frame_background(Select* outer) : Select(outer) {}

        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        void put_point(point inst);

        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        void put_curve(curve inst);

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);
    };


    class kinematic_frame_background_get : public Select
    {
    public:
        kinematic_frame_background_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_frame_background_get(Select* outer) : Select(outer) {}
        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class kinematic_frame_background_put : public Select
    {
    public:
        kinematic_frame_background_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_frame_background_put(Select* outer) : Select(outer) {}
        void put_point(point inst);
        void put_curve(curve inst);
        void put_surface(surface inst);
    };


    class kinematic_result : public Select
    {
    public:
        kinematic_result(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_result(Select* outer) : Select(outer) {}

        bool is_interpolated_configuration_sequence() { return IsADBEntity("interpolated_configuration_sequence"); }
        interpolated_configuration_sequence get_interpolated_configuration_sequence();
        void put_interpolated_configuration_sequence(interpolated_configuration_sequence inst);

        bool is_resulting_path() { return IsADBEntity("resulting_path"); }
        resulting_path get_resulting_path();
        void put_resulting_path(resulting_path inst);
    };


    class kinematic_result_get : public Select
    {
    public:
        kinematic_result_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_result_get(Select* outer) : Select(outer) {}
        bool is_interpolated_configuration_sequence() { return IsADBEntity("interpolated_configuration_sequence"); }
        interpolated_configuration_sequence get_interpolated_configuration_sequence();
        bool is_resulting_path() { return IsADBEntity("resulting_path"); }
        resulting_path get_resulting_path();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class kinematic_result_put : public Select
    {
    public:
        kinematic_result_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        kinematic_result_put(Select* outer) : Select(outer) {}
        void put_interpolated_configuration_sequence(interpolated_configuration_sequence inst);
        void put_resulting_path(resulting_path inst);
    };


    class language_item : public Select
    {
    public:
        language_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        language_item(Select* outer) : Select(outer) {}

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);
    };


    class language_item_get : public Select
    {
    public:
        language_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        language_item_get(Select* outer) : Select(outer) {}
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class language_item_put : public Select
    {
    public:
        language_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        language_item_put(Select* outer) : Select(outer) {}
        void put_representation(representation inst);
    };


    class layered_item : public Select
    {
    public:
        layered_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item(Select* outer) : Select(outer) {}

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);
    };


    class layered_item_get : public Select
    {
    public:
        layered_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item_get(Select* outer) : Select(outer) {}
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class layered_item_put : public Select
    {
    public:
        layered_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item_put(Select* outer) : Select(outer) {}
        void put_presentation_representation(presentation_representation inst);
        void put_representation_item(representation_item inst);
    };


    class marker_select : public Select
    {
    public:
        marker_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select(Select* outer) : Select(outer) {}

        bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        Nullable<marker_type> get_marker_type() { int v = getEnumerationValue("MARKER_TYPE", marker_type_); if (v >= 0) return (marker_type) v; else return Nullable<marker_type>(); }
        void put_marker_type(marker_type value) { TextValue val = marker_type_[(int) value]; putEnumerationValue("MARKER_TYPE", val); }

        bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        pre_defined_marker get_pre_defined_marker();
        void put_pre_defined_marker(pre_defined_marker inst);
    };


    class marker_select_get : public Select
    {
    public:
        marker_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select_get(Select* outer) : Select(outer) {}
        bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        Nullable<marker_type> get_marker_type() { int v = getEnumerationValue("MARKER_TYPE", marker_type_); if (v >= 0) return (marker_type) v; else return Nullable<marker_type>(); }
        bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        pre_defined_marker get_pre_defined_marker();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class marker_select_put : public Select
    {
    public:
        marker_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select_put(Select* outer) : Select(outer) {}
        void put_marker_type(marker_type value) { TextValue val = marker_type_[(int) value]; putEnumerationValue("MARKER_TYPE", val); }
        void put_pre_defined_marker(pre_defined_marker inst);
    };


    class measure_value : public Select
    {
    public:
        measure_value(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value(Select* outer) : Select(outer) {}

        bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        Nullable<amount_of_substance_measure> get_amount_of_substance_measure() { return getSimpleValue<amount_of_substance_measure>("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL); }
        void put_amount_of_substance_measure(amount_of_substance_measure value) { putSimpleValue("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL, value); }

        bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        Nullable<area_measure> get_area_measure() { return getSimpleValue<area_measure>("AREA_MEASURE", sdaiREAL); }
        void put_area_measure(area_measure value) { putSimpleValue("AREA_MEASURE", sdaiREAL, value); }

        bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        Nullable<celsius_temperature_measure> get_celsius_temperature_measure() { return getSimpleValue<celsius_temperature_measure>("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL); }
        void put_celsius_temperature_measure(celsius_temperature_measure value) { putSimpleValue("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL, value); }

        bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        Nullable<context_dependent_measure> get_context_dependent_measure() { return getSimpleValue<context_dependent_measure>("CONTEXT_DEPENDENT_MEASURE", sdaiREAL); }
        void put_context_dependent_measure(context_dependent_measure value) { putSimpleValue("CONTEXT_DEPENDENT_MEASURE", sdaiREAL, value); }

        bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        Nullable<count_measure> get_count_measure() { return getSimpleValue<count_measure>("COUNT_MEASURE", sdaiREAL); }
        void put_count_measure(count_measure value) { putSimpleValue("COUNT_MEASURE", sdaiREAL, value); }

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }

        bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        Nullable<electric_current_measure> get_electric_current_measure() { return getSimpleValue<electric_current_measure>("ELECTRIC_CURRENT_MEASURE", sdaiREAL); }
        void put_electric_current_measure(electric_current_measure value) { putSimpleValue("ELECTRIC_CURRENT_MEASURE", sdaiREAL, value); }

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        Nullable<luminous_intensity_measure> get_luminous_intensity_measure() { return getSimpleValue<luminous_intensity_measure>("LUMINOUS_INTENSITY_MEASURE", sdaiREAL); }
        void put_luminous_intensity_measure(luminous_intensity_measure value) { putSimpleValue("LUMINOUS_INTENSITY_MEASURE", sdaiREAL, value); }

        bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        Nullable<mass_measure> get_mass_measure() { return getSimpleValue<mass_measure>("MASS_MEASURE", sdaiREAL); }
        void put_mass_measure(mass_measure value) { putSimpleValue("MASS_MEASURE", sdaiREAL, value); }

        bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        Nullable<numeric_measure> get_numeric_measure() { return getSimpleValue<numeric_measure>("NUMERIC_MEASURE", sdaiREAL); }
        void put_numeric_measure(numeric_measure value) { putSimpleValue("NUMERIC_MEASURE", sdaiREAL, value); }

        bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        Nullable<non_negative_length_measure> get_non_negative_length_measure() { return getSimpleValue<non_negative_length_measure>("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_non_negative_length_measure(non_negative_length_measure value) { putSimpleValue("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }

        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        Nullable<positive_plane_angle_measure> get_positive_plane_angle_measure() { return getSimpleValue<positive_plane_angle_measure>("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_positive_plane_angle_measure(positive_plane_angle_measure value) { putSimpleValue("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        Nullable<positive_ratio_measure> get_positive_ratio_measure() { return getSimpleValue<positive_ratio_measure>("POSITIVE_RATIO_MEASURE", sdaiREAL); }
        void put_positive_ratio_measure(positive_ratio_measure value) { putSimpleValue("POSITIVE_RATIO_MEASURE", sdaiREAL, value); }

        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }

        bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        Nullable<solid_angle_measure> get_solid_angle_measure() { return getSimpleValue<solid_angle_measure>("SOLID_ANGLE_MEASURE", sdaiREAL); }
        void put_solid_angle_measure(solid_angle_measure value) { putSimpleValue("SOLID_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        Nullable<thermodynamic_temperature_measure> get_thermodynamic_temperature_measure() { return getSimpleValue<thermodynamic_temperature_measure>("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL); }
        void put_thermodynamic_temperature_measure(thermodynamic_temperature_measure value) { putSimpleValue("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL, value); }

        bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        Nullable<time_measure> get_time_measure() { return getSimpleValue<time_measure>("TIME_MEASURE", sdaiREAL); }
        void put_time_measure(time_measure value) { putSimpleValue("TIME_MEASURE", sdaiREAL, value); }

        bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        Nullable<volume_measure> get_volume_measure() { return getSimpleValue<volume_measure>("VOLUME_MEASURE", sdaiREAL); }
        void put_volume_measure(volume_measure value) { putSimpleValue("VOLUME_MEASURE", sdaiREAL, value); }
    };


    class measure_value_get : public Select
    {
    public:
        measure_value_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value_get(Select* outer) : Select(outer) {}
        bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        Nullable<amount_of_substance_measure> get_amount_of_substance_measure() { return getSimpleValue<amount_of_substance_measure>("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL); }
        bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        Nullable<area_measure> get_area_measure() { return getSimpleValue<area_measure>("AREA_MEASURE", sdaiREAL); }
        bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        Nullable<celsius_temperature_measure> get_celsius_temperature_measure() { return getSimpleValue<celsius_temperature_measure>("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL); }
        bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        Nullable<context_dependent_measure> get_context_dependent_measure() { return getSimpleValue<context_dependent_measure>("CONTEXT_DEPENDENT_MEASURE", sdaiREAL); }
        bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        Nullable<count_measure> get_count_measure() { return getSimpleValue<count_measure>("COUNT_MEASURE", sdaiREAL); }
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        Nullable<electric_current_measure> get_electric_current_measure() { return getSimpleValue<electric_current_measure>("ELECTRIC_CURRENT_MEASURE", sdaiREAL); }
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        Nullable<luminous_intensity_measure> get_luminous_intensity_measure() { return getSimpleValue<luminous_intensity_measure>("LUMINOUS_INTENSITY_MEASURE", sdaiREAL); }
        bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        Nullable<mass_measure> get_mass_measure() { return getSimpleValue<mass_measure>("MASS_MEASURE", sdaiREAL); }
        bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        Nullable<numeric_measure> get_numeric_measure() { return getSimpleValue<numeric_measure>("NUMERIC_MEASURE", sdaiREAL); }
        bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        Nullable<non_negative_length_measure> get_non_negative_length_measure() { return getSimpleValue<non_negative_length_measure>("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        Nullable<positive_plane_angle_measure> get_positive_plane_angle_measure() { return getSimpleValue<positive_plane_angle_measure>("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL); }
        bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        Nullable<positive_ratio_measure> get_positive_ratio_measure() { return getSimpleValue<positive_ratio_measure>("POSITIVE_RATIO_MEASURE", sdaiREAL); }
        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        Nullable<solid_angle_measure> get_solid_angle_measure() { return getSimpleValue<solid_angle_measure>("SOLID_ANGLE_MEASURE", sdaiREAL); }
        bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        Nullable<thermodynamic_temperature_measure> get_thermodynamic_temperature_measure() { return getSimpleValue<thermodynamic_temperature_measure>("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL); }
        bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        Nullable<time_measure> get_time_measure() { return getSimpleValue<time_measure>("TIME_MEASURE", sdaiREAL); }
        bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        Nullable<volume_measure> get_volume_measure() { return getSimpleValue<volume_measure>("VOLUME_MEASURE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class measure_value_put : public Select
    {
    public:
        measure_value_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value_put(Select* outer) : Select(outer) {}
        void put_amount_of_substance_measure(amount_of_substance_measure value) { putSimpleValue("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL, value); }
        void put_area_measure(area_measure value) { putSimpleValue("AREA_MEASURE", sdaiREAL, value); }
        void put_celsius_temperature_measure(celsius_temperature_measure value) { putSimpleValue("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL, value); }
        void put_context_dependent_measure(context_dependent_measure value) { putSimpleValue("CONTEXT_DEPENDENT_MEASURE", sdaiREAL, value); }
        void put_count_measure(count_measure value) { putSimpleValue("COUNT_MEASURE", sdaiREAL, value); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
        void put_electric_current_measure(electric_current_measure value) { putSimpleValue("ELECTRIC_CURRENT_MEASURE", sdaiREAL, value); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_luminous_intensity_measure(luminous_intensity_measure value) { putSimpleValue("LUMINOUS_INTENSITY_MEASURE", sdaiREAL, value); }
        void put_mass_measure(mass_measure value) { putSimpleValue("MASS_MEASURE", sdaiREAL, value); }
        void put_numeric_measure(numeric_measure value) { putSimpleValue("NUMERIC_MEASURE", sdaiREAL, value); }
        void put_non_negative_length_measure(non_negative_length_measure value) { putSimpleValue("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_positive_plane_angle_measure(positive_plane_angle_measure value) { putSimpleValue("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        void put_positive_ratio_measure(positive_ratio_measure value) { putSimpleValue("POSITIVE_RATIO_MEASURE", sdaiREAL, value); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }
        void put_solid_angle_measure(solid_angle_measure value) { putSimpleValue("SOLID_ANGLE_MEASURE", sdaiREAL, value); }
        void put_thermodynamic_temperature_measure(thermodynamic_temperature_measure value) { putSimpleValue("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL, value); }
        void put_time_measure(time_measure value) { putSimpleValue("TIME_MEASURE", sdaiREAL, value); }
        void put_volume_measure(volume_measure value) { putSimpleValue("VOLUME_MEASURE", sdaiREAL, value); }
    };


    class motion_parameter_measure : public Select
    {
    public:
        motion_parameter_measure(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        motion_parameter_measure(Select* outer) : Select(outer) {}

        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);
    };


    class motion_parameter_measure_get : public Select
    {
    public:
        motion_parameter_measure_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        motion_parameter_measure_get(Select* outer) : Select(outer) {}
        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class motion_parameter_measure_put : public Select
    {
    public:
        motion_parameter_measure_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        motion_parameter_measure_put(Select* outer) : Select(outer) {}
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
        void put_measure_with_unit(measure_with_unit inst);
    };


    class multi_language_attribute_item : public Select
    {
    public:
        multi_language_attribute_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_data_environment() { return IsADBEntity("data_environment"); }
        data_environment get_data_environment();
        void put_data_environment(data_environment inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_draughting_title() { return IsADBEntity("draughting_title"); }
        draughting_title get_draughting_title();
        void put_draughting_title(draughting_title inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        void put_effectivity_relationship(effectivity_relationship inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        void put_geometric_tolerance(geometric_tolerance inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        void put_identification_role(identification_role inst);

        bool is_kinematic_pair() { return IsADBEntity("kinematic_pair"); }
        kinematic_pair get_kinematic_pair();
        void put_kinematic_pair(kinematic_pair inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        void put_name_assignment(name_assignment inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_pair_actuator() { return IsADBEntity("pair_actuator"); }
        pair_actuator get_pair_actuator();
        void put_pair_actuator(pair_actuator inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_process_product_association() { return IsADBEntity("process_product_association"); }
        process_product_association get_process_product_association();
        void put_process_product_association(process_product_association inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        void put_product_concept_relationship(product_concept_relationship inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        void put_product_related_product_category(product_related_product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        void put_representation_relationship(representation_relationship inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        void put_resource_requirement_type(resource_requirement_type inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        void put_time_interval_role(time_interval_role inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        void put_uncertainty_qualifier(uncertainty_qualifier inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);

        bool is_versioned_action_request_relationship() { return IsADBEntity("versioned_action_request_relationship"); }
        versioned_action_request_relationship get_versioned_action_request_relationship();
        void put_versioned_action_request_relationship(versioned_action_request_relationship inst);
    };


    class multi_language_attribute_item_get : public Select
    {
    public:
        multi_language_attribute_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_data_environment() { return IsADBEntity("data_environment"); }
        data_environment get_data_environment();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_draughting_title() { return IsADBEntity("draughting_title"); }
        draughting_title get_draughting_title();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        bool is_kinematic_pair() { return IsADBEntity("kinematic_pair"); }
        kinematic_pair get_kinematic_pair();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_pair_actuator() { return IsADBEntity("pair_actuator"); }
        pair_actuator get_pair_actuator();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_process_product_association() { return IsADBEntity("process_product_association"); }
        process_product_association get_process_product_association();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_resource_requirement_type() { return IsADBEntity("resource_requirement_type"); }
        resource_requirement_type get_resource_requirement_type();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        bool is_versioned_action_request_relationship() { return IsADBEntity("versioned_action_request_relationship"); }
        versioned_action_request_relationship get_versioned_action_request_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class multi_language_attribute_item_put : public Select
    {
    public:
        multi_language_attribute_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_application_context(application_context inst);
        void put_approval_relationship(approval_relationship inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_data_environment(data_environment inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_relationship(document_relationship inst);
        void put_draughting_title(draughting_title inst);
        void put_effectivity(effectivity inst);
        void put_effectivity_relationship(effectivity_relationship inst);
        void put_event_occurrence(event_occurrence inst);
        void put_external_source(external_source inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_geometric_tolerance(geometric_tolerance inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_identification_role(identification_role inst);
        void put_kinematic_pair(kinematic_pair inst);
        void put_mapped_item(mapped_item inst);
        void put_name_assignment(name_assignment inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organization_role(organization_role inst);
        void put_organizational_project(organizational_project inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_pair_actuator(pair_actuator inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_process_product_association(process_product_association inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_relationship(product_concept_relationship inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_product_related_product_category(product_related_product_category inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_representation(representation inst);
        void put_representation_relationship(representation_relationship inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_resource_requirement_type(resource_requirement_type inst);
        void put_security_classification(security_classification inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_styled_item(styled_item inst);
        void put_time_interval_role(time_interval_role inst);
        void put_topological_representation_item(topological_representation_item inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
        void put_versioned_action_request(versioned_action_request inst);
        void put_versioned_action_request_relationship(versioned_action_request_relationship inst);
    };


    class name_attribute_select : public Select
    {
    public:
        name_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select(Select* outer) : Select(outer) {}

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        void put_address(address inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);
    };


    class name_attribute_select_get : public Select
    {
    public:
        name_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class name_attribute_select_put : public Select
    {
    public:
        name_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action_request_solution(action_request_solution inst);
        void put_address(address inst);
        void put_configuration_design(configuration_design inst);
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);
        void put_derived_unit(derived_unit inst);
        void put_effectivity(effectivity inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition_representation(property_definition_representation inst);
    };


    class name_item : public Select
    {
    public:
        name_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item(Select* outer) : Select(outer) {}

        bool is_kinematic_joint() { return IsADBEntity("kinematic_joint"); }
        kinematic_joint get_kinematic_joint();
        void put_kinematic_joint(kinematic_joint inst);

        bool is_kinematic_link() { return IsADBEntity("kinematic_link"); }
        kinematic_link get_kinematic_link();
        void put_kinematic_link(kinematic_link inst);

        bool is_kinematic_structure() { return IsADBEntity("kinematic_structure"); }
        kinematic_structure get_kinematic_structure();
        void put_kinematic_structure(kinematic_structure inst);
    };


    class name_item_get : public Select
    {
    public:
        name_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item_get(Select* outer) : Select(outer) {}
        bool is_kinematic_joint() { return IsADBEntity("kinematic_joint"); }
        kinematic_joint get_kinematic_joint();
        bool is_kinematic_link() { return IsADBEntity("kinematic_link"); }
        kinematic_link get_kinematic_link();
        bool is_kinematic_structure() { return IsADBEntity("kinematic_structure"); }
        kinematic_structure get_kinematic_structure();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class name_item_put : public Select
    {
    public:
        name_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item_put(Select* outer) : Select(outer) {}
        void put_kinematic_joint(kinematic_joint inst);
        void put_kinematic_link(kinematic_link inst);
        void put_kinematic_structure(kinematic_structure inst);
    };


    class organization_item : public Select
    {
    public:
        organization_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        void put_document_type(document_type inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class organization_item_get : public Select
    {
    public:
        organization_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class organization_item_put : public Select
    {
    public:
        organization_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval(approval inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_document_type(document_type inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_effectivity(effectivity inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization(organization inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class organizational_project_item : public Select
    {
    public:
        organizational_project_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organizational_project_item(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class organizational_project_item_get : public Select
    {
    public:
        organizational_project_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organizational_project_item_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class organizational_project_item_put : public Select
    {
    public:
        organizational_project_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organizational_project_item_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_configuration_item(configuration_item inst);
        void put_executed_action(executed_action inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class pcurve_or_surface : public Select
    {
    public:
        pcurve_or_surface(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface(Select* outer) : Select(outer) {}

        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        void put_pcurve(pcurve inst);

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);
    };


    class pcurve_or_surface_get : public Select
    {
    public:
        pcurve_or_surface_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface_get(Select* outer) : Select(outer) {}
        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class pcurve_or_surface_put : public Select
    {
    public:
        pcurve_or_surface_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface_put(Select* outer) : Select(outer) {}
        void put_pcurve(pcurve inst);
        void put_surface(surface inst);
    };


    class person_and_organization_item : public Select
    {
    public:
        person_and_organization_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        void put_document_type(document_type inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class person_and_organization_item_get : public Select
    {
    public:
        person_and_organization_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_type() { return IsADBEntity("document_type"); }
        document_type get_document_type();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class person_and_organization_item_put : public Select
    {
    public:
        person_and_organization_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_document_type(document_type inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization(organization inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class person_organization_select : public Select
    {
    public:
        person_organization_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select(Select* outer) : Select(outer) {}

        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        void put_person(person inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);
    };


    class person_organization_select_get : public Select
    {
    public:
        person_organization_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select_get(Select* outer) : Select(outer) {}
        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class person_organization_select_put : public Select
    {
    public:
        person_organization_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select_put(Select* outer) : Select(outer) {}
        void put_person(person inst);
        void put_organization(organization inst);
        void put_person_and_organization(person_and_organization inst);
    };


    class plane_or_planar_box : public Select
    {
    public:
        plane_or_planar_box(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box(Select* outer) : Select(outer) {}

        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        void put_plane(plane inst);

        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();
        void put_planar_box(planar_box inst);
    };


    class plane_or_planar_box_get : public Select
    {
    public:
        plane_or_planar_box_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box_get(Select* outer) : Select(outer) {}
        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class plane_or_planar_box_put : public Select
    {
    public:
        plane_or_planar_box_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box_put(Select* outer) : Select(outer) {}
        void put_plane(plane inst);
        void put_planar_box(planar_box inst);
    };


    class presentation_representation_select : public Select
    {
    public:
        presentation_representation_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select(Select* outer) : Select(outer) {}

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);
    };


    class presentation_representation_select_get : public Select
    {
    public:
        presentation_representation_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select_get(Select* outer) : Select(outer) {}
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_representation_select_put : public Select
    {
    public:
        presentation_representation_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select_put(Select* outer) : Select(outer) {}
        void put_presentation_representation(presentation_representation inst);
        void put_presentation_set(presentation_set inst);
    };


    class presentation_size_assignment_select : public Select
    {
    public:
        presentation_size_assignment_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select(Select* outer) : Select(outer) {}

        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        void put_presentation_view(presentation_view inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        area_in_set get_area_in_set();
        void put_area_in_set(area_in_set inst);
    };


    class presentation_size_assignment_select_get : public Select
    {
    public:
        presentation_size_assignment_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select_get(Select* outer) : Select(outer) {}
        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        area_in_set get_area_in_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_size_assignment_select_put : public Select
    {
    public:
        presentation_size_assignment_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select_put(Select* outer) : Select(outer) {}
        void put_presentation_view(presentation_view inst);
        void put_presentation_area(presentation_area inst);
        void put_area_in_set(area_in_set inst);
    };


    class presentation_style_select : public Select
    {
    public:
        presentation_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select(Select* outer) : Select(outer) {}

        bool is_pre_defined_presentation_style() { return IsADBEntity("pre_defined_presentation_style"); }
        pre_defined_presentation_style get_pre_defined_presentation_style();
        void put_pre_defined_presentation_style(pre_defined_presentation_style inst);

        bool is_point_style() { return IsADBEntity("point_style"); }
        point_style get_point_style();
        void put_point_style(point_style inst);

        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        void put_curve_style(curve_style inst);

        bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        surface_style_usage get_surface_style_usage();
        void put_surface_style_usage(surface_style_usage inst);

        bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        symbol_style get_symbol_style();
        void put_symbol_style(symbol_style inst);

        bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        fill_area_style get_fill_area_style();
        void put_fill_area_style(fill_area_style inst);

        bool is_text_style() { return IsADBEntity("text_style"); }
        text_style get_text_style();
        void put_text_style(text_style inst);

        bool is_approximation_tolerance() { return IsADBEntity("approximation_tolerance"); }
        approximation_tolerance get_approximation_tolerance();
        void put_approximation_tolerance(approximation_tolerance inst);

        bool is_externally_defined_style() { return IsADBEntity("externally_defined_style"); }
        externally_defined_style get_externally_defined_style();
        void put_externally_defined_style(externally_defined_style inst);

        bool is_null_style() { return IsADBType("NULL_STYLE"); }
        Nullable<null_style> get_null_style() { int v = getEnumerationValue("NULL_STYLE", null_style_); if (v >= 0) return (null_style) v; else return Nullable<null_style>(); }
        void put_null_style(null_style value) { TextValue val = null_style_[(int) value]; putEnumerationValue("NULL_STYLE", val); }
    };


    class presentation_style_select_get : public Select
    {
    public:
        presentation_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select_get(Select* outer) : Select(outer) {}
        bool is_pre_defined_presentation_style() { return IsADBEntity("pre_defined_presentation_style"); }
        pre_defined_presentation_style get_pre_defined_presentation_style();
        bool is_point_style() { return IsADBEntity("point_style"); }
        point_style get_point_style();
        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        surface_style_usage get_surface_style_usage();
        bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        symbol_style get_symbol_style();
        bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        fill_area_style get_fill_area_style();
        bool is_text_style() { return IsADBEntity("text_style"); }
        text_style get_text_style();
        bool is_approximation_tolerance() { return IsADBEntity("approximation_tolerance"); }
        approximation_tolerance get_approximation_tolerance();
        bool is_externally_defined_style() { return IsADBEntity("externally_defined_style"); }
        externally_defined_style get_externally_defined_style();
        bool is_null_style() { return IsADBType("NULL_STYLE"); }
        Nullable<null_style> get_null_style() { int v = getEnumerationValue("NULL_STYLE", null_style_); if (v >= 0) return (null_style) v; else return Nullable<null_style>(); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_style_select_put : public Select
    {
    public:
        presentation_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select_put(Select* outer) : Select(outer) {}
        void put_pre_defined_presentation_style(pre_defined_presentation_style inst);
        void put_point_style(point_style inst);
        void put_curve_style(curve_style inst);
        void put_surface_style_usage(surface_style_usage inst);
        void put_symbol_style(symbol_style inst);
        void put_fill_area_style(fill_area_style inst);
        void put_text_style(text_style inst);
        void put_approximation_tolerance(approximation_tolerance inst);
        void put_externally_defined_style(externally_defined_style inst);
        void put_null_style(null_style value) { TextValue val = null_style_[(int) value]; putEnumerationValue("NULL_STYLE", val); }
    };


    class presented_item_select : public Select
    {
    public:
        presented_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class presented_item_select_get : public Select
    {
    public:
        presented_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presented_item_select_put : public Select
    {
    public:
        presented_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_relationship(action_relationship inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class product_or_formation_or_definition : public Select
    {
    public:
        product_or_formation_or_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition(Select* outer) : Select(outer) {}

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class product_or_formation_or_definition_get : public Select
    {
    public:
        product_or_formation_or_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition_get(Select* outer) : Select(outer) {}
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class product_or_formation_or_definition_put : public Select
    {
    public:
        product_or_formation_or_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition_put(Select* outer) : Select(outer) {}
        void put_product(product inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition(product_definition inst);
    };


    class property_or_shape_select : public Select
    {
    public:
        property_or_shape_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        property_or_shape_select(Select* outer) : Select(outer) {}

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        shape_definition _shape_definition() { return shape_definition(this); }
    };


    class property_or_shape_select_get : public Select
    {
    public:
        property_or_shape_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        property_or_shape_select_get(Select* outer) : Select(outer) {}
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        shape_definition_get get_shape_definition() { return shape_definition_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class property_or_shape_select_put : public Select
    {
    public:
        property_or_shape_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        property_or_shape_select_put(Select* outer) : Select(outer) {}
        void put_property_definition(property_definition inst);
        shape_definition_put put_shape_definition() { return shape_definition_put(this); }
    };


    class rendering_properties_select : public Select
    {
    public:
        rendering_properties_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select(Select* outer) : Select(outer) {}

        bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        surface_style_reflectance_ambient get_surface_style_reflectance_ambient();
        void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst);

        bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        surface_style_transparent get_surface_style_transparent();
        void put_surface_style_transparent(surface_style_transparent inst);
    };


    class rendering_properties_select_get : public Select
    {
    public:
        rendering_properties_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select_get(Select* outer) : Select(outer) {}
        bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        surface_style_reflectance_ambient get_surface_style_reflectance_ambient();
        bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        surface_style_transparent get_surface_style_transparent();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class rendering_properties_select_put : public Select
    {
    public:
        rendering_properties_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select_put(Select* outer) : Select(outer) {}
        void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst);
        void put_surface_style_transparent(surface_style_transparent inst);
    };


    class represented_definition : public Select
    {
    public:
        represented_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition(Select* outer) : Select(outer) {}

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class represented_definition_get : public Select
    {
    public:
        represented_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition_get(Select* outer) : Select(outer) {}
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class represented_definition_put : public Select
    {
    public:
        represented_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition_put(Select* outer) : Select(outer) {}
        void put_general_property(general_property inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class reversible_topology_item : public Select
    {
    public:
        reversible_topology_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item(Select* outer) : Select(outer) {}

        bool is_edge() { return IsADBEntity("edge"); }
        edge get_edge();
        void put_edge(edge inst);

        bool is_path() { return IsADBEntity("path"); }
        path get_path();
        void put_path(path inst);

        bool is_face() { return IsADBEntity("face"); }
        face get_face();
        void put_face(face inst);

        bool is_face_bound() { return IsADBEntity("face_bound"); }
        face_bound get_face_bound();
        void put_face_bound(face_bound inst);

        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        void put_closed_shell(closed_shell inst);

        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        void put_open_shell(open_shell inst);
    };


    class reversible_topology_item_get : public Select
    {
    public:
        reversible_topology_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item_get(Select* outer) : Select(outer) {}
        bool is_edge() { return IsADBEntity("edge"); }
        edge get_edge();
        bool is_path() { return IsADBEntity("path"); }
        path get_path();
        bool is_face() { return IsADBEntity("face"); }
        face get_face();
        bool is_face_bound() { return IsADBEntity("face_bound"); }
        face_bound get_face_bound();
        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class reversible_topology_item_put : public Select
    {
    public:
        reversible_topology_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item_put(Select* outer) : Select(outer) {}
        void put_edge(edge inst);
        void put_path(path inst);
        void put_face(face inst);
        void put_face_bound(face_bound inst);
        void put_closed_shell(closed_shell inst);
        void put_open_shell(open_shell inst);
    };


    class reversible_topology : public Select
    {
    public:
        reversible_topology(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology(Select* outer) : Select(outer) {}

        reversible_topology_item _reversible_topology_item() { return reversible_topology_item(this); }

        bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_list_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); list_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_list_of_reversible_topology_item(TList& lst) { list_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

        bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_set_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); set_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_set_of_reversible_topology_item(TList& lst) { set_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
    };


    class reversible_topology_get : public Select
    {
    public:
        reversible_topology_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_get(Select* outer) : Select(outer) {}
        reversible_topology_item_get get_reversible_topology_item() { return reversible_topology_item_get(this); }
        bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_list_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); list_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_set_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); set_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class reversible_topology_put : public Select
    {
    public:
        reversible_topology_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_put(Select* outer) : Select(outer) {}
        reversible_topology_item_put put_reversible_topology_item() { return reversible_topology_item_put(this); }

                //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_list_of_reversible_topology_item(TList& lst) { list_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

                //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_set_of_reversible_topology_item(TList& lst) { set_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
    };


    class rigid_placement : public Select
    {
    public:
        rigid_placement(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rigid_placement(Select* outer) : Select(outer) {}

        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class rigid_placement_get : public Select
    {
    public:
        rigid_placement_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rigid_placement_get(Select* outer) : Select(outer) {}
        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class rigid_placement_put : public Select
    {
    public:
        rigid_placement_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rigid_placement_put(Select* outer) : Select(outer) {}
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class role_select : public Select
    {
    public:
        role_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select(Select* outer) : Select(outer) {}

        bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        action_assignment get_action_assignment();
        void put_action_assignment(action_assignment inst);

        bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        action_request_assignment get_action_request_assignment();
        void put_action_request_assignment(action_request_assignment inst);

        bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        approval_assignment get_approval_assignment();
        void put_approval_assignment(approval_assignment inst);

        bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        approval_date_time get_approval_date_time();
        void put_approval_date_time(approval_date_time inst);

        bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        certification_assignment get_certification_assignment();
        void put_certification_assignment(certification_assignment inst);

        bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        contract_assignment get_contract_assignment();
        void put_contract_assignment(contract_assignment inst);

        bool is_document_reference() { return IsADBEntity("document_reference"); }
        document_reference get_document_reference();
        void put_document_reference(document_reference inst);

        bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        effectivity_assignment get_effectivity_assignment();
        void put_effectivity_assignment(effectivity_assignment inst);

        bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        group_assignment get_group_assignment();
        void put_group_assignment(group_assignment inst);

        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        void put_name_assignment(name_assignment inst);

        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        void put_security_classification_assignment(security_classification_assignment inst);
    };


    class role_select_get : public Select
    {
    public:
        role_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select_get(Select* outer) : Select(outer) {}
        bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        action_assignment get_action_assignment();
        bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        action_request_assignment get_action_request_assignment();
        bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        approval_assignment get_approval_assignment();
        bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        approval_date_time get_approval_date_time();
        bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        certification_assignment get_certification_assignment();
        bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        contract_assignment get_contract_assignment();
        bool is_document_reference() { return IsADBEntity("document_reference"); }
        document_reference get_document_reference();
        bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        effectivity_assignment get_effectivity_assignment();
        bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        group_assignment get_group_assignment();
        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class role_select_put : public Select
    {
    public:
        role_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select_put(Select* outer) : Select(outer) {}
        void put_action_assignment(action_assignment inst);
        void put_action_request_assignment(action_request_assignment inst);
        void put_approval_assignment(approval_assignment inst);
        void put_approval_date_time(approval_date_time inst);
        void put_certification_assignment(certification_assignment inst);
        void put_contract_assignment(contract_assignment inst);
        void put_document_reference(document_reference inst);
        void put_effectivity_assignment(effectivity_assignment inst);
        void put_group_assignment(group_assignment inst);
        void put_name_assignment(name_assignment inst);
        void put_security_classification_assignment(security_classification_assignment inst);
    };


    class rotational_range_measure : public Select
    {
    public:
        rotational_range_measure(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rotational_range_measure(Select* outer) : Select(outer) {}

        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_unlimited_range() { return IsADBType("UNLIMITED_RANGE"); }
        Nullable<unlimited_range> get_unlimited_range() { int v = getEnumerationValue("UNLIMITED_RANGE", unlimited_range_); if (v >= 0) return (unlimited_range) v; else return Nullable<unlimited_range>(); }
        void put_unlimited_range(unlimited_range value) { TextValue val = unlimited_range_[(int) value]; putEnumerationValue("UNLIMITED_RANGE", val); }
    };


    class rotational_range_measure_get : public Select
    {
    public:
        rotational_range_measure_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rotational_range_measure_get(Select* outer) : Select(outer) {}
        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        bool is_unlimited_range() { return IsADBType("UNLIMITED_RANGE"); }
        Nullable<unlimited_range> get_unlimited_range() { int v = getEnumerationValue("UNLIMITED_RANGE", unlimited_range_); if (v >= 0) return (unlimited_range) v; else return Nullable<unlimited_range>(); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class rotational_range_measure_put : public Select
    {
    public:
        rotational_range_measure_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rotational_range_measure_put(Select* outer) : Select(outer) {}
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        void put_unlimited_range(unlimited_range value) { TextValue val = unlimited_range_[(int) value]; putEnumerationValue("UNLIMITED_RANGE", val); }
    };


    class security_classification_item : public Select
    {
    public:
        security_classification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class security_classification_item_get : public Select
    {
    public:
        security_classification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class security_classification_item_put : public Select
    {
    public:
        security_classification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_property(action_property inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organizational_project(organizational_project inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_resource_property(resource_property inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class shell : public Select
    {
    public:
        shell(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell(Select* outer) : Select(outer) {}

        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        void put_open_shell(open_shell inst);

        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        void put_closed_shell(closed_shell inst);
    };


    class shell_get : public Select
    {
    public:
        shell_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell_get(Select* outer) : Select(outer) {}
        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class shell_put : public Select
    {
    public:
        shell_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell_put(Select* outer) : Select(outer) {}
        void put_open_shell(open_shell inst);
        void put_closed_shell(closed_shell inst);
    };


    class size_select : public Select
    {
    public:
        size_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select(Select* outer) : Select(outer) {}

        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class size_select_get : public Select
    {
    public:
        size_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select_get(Select* outer) : Select(outer) {}
        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class size_select_put : public Select
    {
    public:
        size_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select_put(Select* outer) : Select(outer) {}
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_measure_with_unit(measure_with_unit inst);
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class source_item : public Select
    {
    public:
        source_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item(Select* outer) : Select(outer) {}

        bool is_identifier() { return IsADBType("IDENTIFIER"); }
        identifier get_identifier() { return getTextValue("IDENTIFIER", sdaiSTRING); }
        void put_identifier(identifier value) { putTextValue("IDENTIFIER", sdaiSTRING, value); }
    };


    class source_item_get : public Select
    {
    public:
        source_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item_get(Select* outer) : Select(outer) {}
        bool is_identifier() { return IsADBType("IDENTIFIER"); }
        identifier get_identifier() { return getTextValue("IDENTIFIER", sdaiSTRING); }

        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class source_item_put : public Select
    {
    public:
        source_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item_put(Select* outer) : Select(outer) {}
        void put_identifier(identifier value) { putTextValue("IDENTIFIER", sdaiSTRING, value); }
    };


    class spatial_rotation : public Select
    {
    public:
        spatial_rotation(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        spatial_rotation(Select* outer) : Select(outer) {}

        bool is_ypr_rotation() { return IsADBType("YPR_ROTATION"); }

        //TList may be ypr_rotation or list of converible elements
        template <typename TList> void get_ypr_rotation(TList& lst) { SdaiAggr aggr = getAggrValue("YPR_ROTATION"); ypr_rotationSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be ypr_rotation or list of converible elements
        template <typename TList> void put_ypr_rotation(TList& lst) { ypr_rotationSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("YPR_ROTATION", aggr); }

                //TArrayElem[] may be plane_angle_measure[] or array of convertible elements
        template <typename TArrayElem> void put_ypr_rotation(TArrayElem arr[], size_t n) { ypr_rotation lst; ArrayToList(arr, n, lst); put_ypr_rotation(lst); }

        bool is_rotation_about_direction() { return IsADBEntity("rotation_about_direction"); }
        rotation_about_direction get_rotation_about_direction();
        void put_rotation_about_direction(rotation_about_direction inst);
    };


    class spatial_rotation_get : public Select
    {
    public:
        spatial_rotation_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        spatial_rotation_get(Select* outer) : Select(outer) {}
        bool is_ypr_rotation() { return IsADBType("YPR_ROTATION"); }

        //TList may be ypr_rotation or list of converible elements
        template <typename TList> void get_ypr_rotation(TList& lst) { SdaiAggr aggr = getAggrValue("YPR_ROTATION"); ypr_rotationSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_rotation_about_direction() { return IsADBEntity("rotation_about_direction"); }
        rotation_about_direction get_rotation_about_direction();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class spatial_rotation_put : public Select
    {
    public:
        spatial_rotation_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        spatial_rotation_put(Select* outer) : Select(outer) {}

                //TList may be ypr_rotation or list of converible elements
        template <typename TList> void put_ypr_rotation(TList& lst) { ypr_rotationSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("YPR_ROTATION", aggr); }

                //TArrayElem[] may be plane_angle_measure[] or array of convertible elements
        template <typename TArrayElem> void put_ypr_rotation(TArrayElem arr[], size_t n) { ypr_rotation lst; ArrayToList(arr, n, lst); put_ypr_rotation(lst); }
        void put_rotation_about_direction(rotation_about_direction inst);
    };


    class specified_item : public Select
    {
    public:
        specified_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        specified_item(Select* outer) : Select(outer) {}

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);
    };


    class specified_item_get : public Select
    {
    public:
        specified_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        specified_item_get(Select* outer) : Select(outer) {}
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class specified_item_put : public Select
    {
    public:
        specified_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        specified_item_put(Select* outer) : Select(outer) {}
        void put_drawing_revision(drawing_revision inst);
    };


    class style_context_select : public Select
    {
    public:
        style_context_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select(Select* outer) : Select(outer) {}

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        shape_representation_relationship get_shape_representation_relationship();
        void put_shape_representation_relationship(shape_representation_relationship inst);
    };


    class style_context_select_get : public Select
    {
    public:
        style_context_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select_get(Select* outer) : Select(outer) {}
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        shape_representation_relationship get_shape_representation_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class style_context_select_put : public Select
    {
    public:
        style_context_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select_put(Select* outer) : Select(outer) {}
        void put_group(group inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_presentation_set(presentation_set inst);
        void put_representation(representation inst);
        void put_representation_item(representation_item inst);
        void put_shape_representation_relationship(shape_representation_relationship inst);
    };


    class supported_item : public Select
    {
    public:
        supported_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        supported_item(Select* outer) : Select(outer) {}

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);
    };


    class supported_item_get : public Select
    {
    public:
        supported_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        supported_item_get(Select* outer) : Select(outer) {}
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class supported_item_put : public Select
    {
    public:
        supported_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        supported_item_put(Select* outer) : Select(outer) {}
        void put_action_directive(action_directive inst);
        void put_action(action inst);
        void put_action_method(action_method inst);
    };


    class surface_side_style_select : public Select
    {
    public:
        surface_side_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select(Select* outer) : Select(outer) {}

        bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        surface_side_style get_surface_side_style();
        void put_surface_side_style(surface_side_style inst);
    };


    class surface_side_style_select_get : public Select
    {
    public:
        surface_side_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select_get(Select* outer) : Select(outer) {}
        bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        surface_side_style get_surface_side_style();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class surface_side_style_select_put : public Select
    {
    public:
        surface_side_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select_put(Select* outer) : Select(outer) {}
        void put_surface_side_style(surface_side_style inst);
    };


    class surface_style_element_select : public Select
    {
    public:
        surface_style_element_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select(Select* outer) : Select(outer) {}

        bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        surface_style_fill_area get_surface_style_fill_area();
        void put_surface_style_fill_area(surface_style_fill_area inst);

        bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        surface_style_boundary get_surface_style_boundary();
        void put_surface_style_boundary(surface_style_boundary inst);

        bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        surface_style_silhouette get_surface_style_silhouette();
        void put_surface_style_silhouette(surface_style_silhouette inst);

        bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        surface_style_segmentation_curve get_surface_style_segmentation_curve();
        void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst);

        bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        surface_style_control_grid get_surface_style_control_grid();
        void put_surface_style_control_grid(surface_style_control_grid inst);

        bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        surface_style_parameter_line get_surface_style_parameter_line();
        void put_surface_style_parameter_line(surface_style_parameter_line inst);

        bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        surface_style_rendering get_surface_style_rendering();
        void put_surface_style_rendering(surface_style_rendering inst);
    };


    class surface_style_element_select_get : public Select
    {
    public:
        surface_style_element_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select_get(Select* outer) : Select(outer) {}
        bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        surface_style_fill_area get_surface_style_fill_area();
        bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        surface_style_boundary get_surface_style_boundary();
        bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        surface_style_silhouette get_surface_style_silhouette();
        bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        surface_style_segmentation_curve get_surface_style_segmentation_curve();
        bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        surface_style_control_grid get_surface_style_control_grid();
        bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        surface_style_parameter_line get_surface_style_parameter_line();
        bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        surface_style_rendering get_surface_style_rendering();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class surface_style_element_select_put : public Select
    {
    public:
        surface_style_element_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select_put(Select* outer) : Select(outer) {}
        void put_surface_style_fill_area(surface_style_fill_area inst);
        void put_surface_style_boundary(surface_style_boundary inst);
        void put_surface_style_silhouette(surface_style_silhouette inst);
        void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst);
        void put_surface_style_control_grid(surface_style_control_grid inst);
        void put_surface_style_parameter_line(surface_style_parameter_line inst);
        void put_surface_style_rendering(surface_style_rendering inst);
    };


    class symbol_style_select : public Select
    {
    public:
        symbol_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select(Select* outer) : Select(outer) {}

        bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        symbol_colour get_symbol_colour();
        void put_symbol_colour(symbol_colour inst);
    };


    class symbol_style_select_get : public Select
    {
    public:
        symbol_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select_get(Select* outer) : Select(outer) {}
        bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        symbol_colour get_symbol_colour();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class symbol_style_select_put : public Select
    {
    public:
        symbol_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select_put(Select* outer) : Select(outer) {}
        void put_symbol_colour(symbol_colour inst);
    };


    class text_or_character : public Select
    {
    public:
        text_or_character(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character(Select* outer) : Select(outer) {}

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        void put_defined_character_glyph(defined_character_glyph inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);
    };


    class text_or_character_get : public Select
    {
    public:
        text_or_character_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character_get(Select* outer) : Select(outer) {}
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class text_or_character_put : public Select
    {
    public:
        text_or_character_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character_put(Select* outer) : Select(outer) {}
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_defined_character_glyph(defined_character_glyph inst);
        void put_composite_text(composite_text inst);
        void put_text_literal(text_literal inst);
    };


    class text_string_representation_item : public Select
    {
    public:
        text_string_representation_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item(Select* outer) : Select(outer) {}

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        void put_defined_character_glyph(defined_character_glyph inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);

        axis2_placement _axis2_placement() { return axis2_placement(this); }
    };


    class text_string_representation_item_get : public Select
    {
    public:
        text_string_representation_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item_get(Select* outer) : Select(outer) {}
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_defined_character_glyph() { return IsADBEntity("defined_character_glyph"); }
        defined_character_glyph get_defined_character_glyph();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        axis2_placement_get get_axis2_placement() { return axis2_placement_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class text_string_representation_item_put : public Select
    {
    public:
        text_string_representation_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item_put(Select* outer) : Select(outer) {}
        void put_text_literal(text_literal inst);
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_defined_character_glyph(defined_character_glyph inst);
        void put_composite_text(composite_text inst);
        axis2_placement_put put_axis2_placement() { return axis2_placement_put(this); }
    };


    class time_interval_item : public Select
    {
    public:
        time_interval_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        void put_class_system(class_system inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        void put_requirement_for_action_resource(requirement_for_action_resource inst);

        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        void put_resource_property(resource_property inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class time_interval_item_get : public Select
    {
    public:
        time_interval_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_class_system() { return IsADBEntity("class_system"); }
        class_system get_class_system();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_configured_effectivity_assignment() { return IsADBEntity("configured_effectivity_assignment"); }
        configured_effectivity_assignment get_configured_effectivity_assignment();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_concept_feature_category_usage() { return IsADBEntity("product_concept_feature_category_usage"); }
        product_concept_feature_category_usage get_product_concept_feature_category_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_requirement_for_action_resource() { return IsADBEntity("requirement_for_action_resource"); }
        requirement_for_action_resource get_requirement_for_action_resource();
        bool is_resource_property() { return IsADBEntity("resource_property"); }
        resource_property get_resource_property();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class time_interval_item_put : public Select
    {
    public:
        time_interval_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_class_system(class_system inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_configured_effectivity_assignment(configured_effectivity_assignment inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_draughting_model(draughting_model inst);
        void put_drawing_revision(drawing_revision inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_material_designation(material_designation inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_presentation_area(presentation_area inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_association(product_concept_feature_association inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_concept_feature_category_usage(product_concept_feature_category_usage inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition(property_definition inst);
        void put_requirement_for_action_resource(requirement_for_action_resource inst);
        void put_resource_property(resource_property inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class tolerance_deviation_select : public Select
    {
    public:
        tolerance_deviation_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_deviation_select(Select* outer) : Select(outer) {}

        bool is_curve_tolerance_deviation() { return IsADBType("CURVE_TOLERANCE_DEVIATION"); }
        Nullable<curve_tolerance_deviation> get_curve_tolerance_deviation() { return getSimpleValue<curve_tolerance_deviation>("CURVE_TOLERANCE_DEVIATION", sdaiREAL); }
        void put_curve_tolerance_deviation(curve_tolerance_deviation value) { putSimpleValue("CURVE_TOLERANCE_DEVIATION", sdaiREAL, value); }

        bool is_surface_tolerance_deviation() { return IsADBType("SURFACE_TOLERANCE_DEVIATION"); }
        Nullable<surface_tolerance_deviation> get_surface_tolerance_deviation() { return getSimpleValue<surface_tolerance_deviation>("SURFACE_TOLERANCE_DEVIATION", sdaiREAL); }
        void put_surface_tolerance_deviation(surface_tolerance_deviation value) { putSimpleValue("SURFACE_TOLERANCE_DEVIATION", sdaiREAL, value); }
    };


    class tolerance_deviation_select_get : public Select
    {
    public:
        tolerance_deviation_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_deviation_select_get(Select* outer) : Select(outer) {}
        bool is_curve_tolerance_deviation() { return IsADBType("CURVE_TOLERANCE_DEVIATION"); }
        Nullable<curve_tolerance_deviation> get_curve_tolerance_deviation() { return getSimpleValue<curve_tolerance_deviation>("CURVE_TOLERANCE_DEVIATION", sdaiREAL); }
        bool is_surface_tolerance_deviation() { return IsADBType("SURFACE_TOLERANCE_DEVIATION"); }
        Nullable<surface_tolerance_deviation> get_surface_tolerance_deviation() { return getSimpleValue<surface_tolerance_deviation>("SURFACE_TOLERANCE_DEVIATION", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class tolerance_deviation_select_put : public Select
    {
    public:
        tolerance_deviation_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_deviation_select_put(Select* outer) : Select(outer) {}
        void put_curve_tolerance_deviation(curve_tolerance_deviation value) { putSimpleValue("CURVE_TOLERANCE_DEVIATION", sdaiREAL, value); }
        void put_surface_tolerance_deviation(surface_tolerance_deviation value) { putSimpleValue("SURFACE_TOLERANCE_DEVIATION", sdaiREAL, value); }
    };


    class tolerance_method_definition : public Select
    {
    public:
        tolerance_method_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition(Select* outer) : Select(outer) {}

        bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        tolerance_value get_tolerance_value();
        void put_tolerance_value(tolerance_value inst);

        bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        limits_and_fits get_limits_and_fits();
        void put_limits_and_fits(limits_and_fits inst);
    };


    class tolerance_method_definition_get : public Select
    {
    public:
        tolerance_method_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition_get(Select* outer) : Select(outer) {}
        bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        tolerance_value get_tolerance_value();
        bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        limits_and_fits get_limits_and_fits();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class tolerance_method_definition_put : public Select
    {
    public:
        tolerance_method_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition_put(Select* outer) : Select(outer) {}
        void put_tolerance_value(tolerance_value inst);
        void put_limits_and_fits(limits_and_fits inst);
    };


    class tolerance_parameter_select : public Select
    {
    public:
        tolerance_parameter_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_parameter_select(Select* outer) : Select(outer) {}

        bool is_curve_tolerance_parameter() { return IsADBType("CURVE_TOLERANCE_PARAMETER"); }
        Nullable<curve_tolerance_parameter> get_curve_tolerance_parameter() { return getSimpleValue<curve_tolerance_parameter>("CURVE_TOLERANCE_PARAMETER", sdaiREAL); }
        void put_curve_tolerance_parameter(curve_tolerance_parameter value) { putSimpleValue("CURVE_TOLERANCE_PARAMETER", sdaiREAL, value); }

        bool is_surface_tolerance_parameter() { return IsADBType("SURFACE_TOLERANCE_PARAMETER"); }
        Nullable<surface_tolerance_parameter> get_surface_tolerance_parameter() { return getSimpleValue<surface_tolerance_parameter>("SURFACE_TOLERANCE_PARAMETER", sdaiREAL); }
        void put_surface_tolerance_parameter(surface_tolerance_parameter value) { putSimpleValue("SURFACE_TOLERANCE_PARAMETER", sdaiREAL, value); }
    };


    class tolerance_parameter_select_get : public Select
    {
    public:
        tolerance_parameter_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_parameter_select_get(Select* outer) : Select(outer) {}
        bool is_curve_tolerance_parameter() { return IsADBType("CURVE_TOLERANCE_PARAMETER"); }
        Nullable<curve_tolerance_parameter> get_curve_tolerance_parameter() { return getSimpleValue<curve_tolerance_parameter>("CURVE_TOLERANCE_PARAMETER", sdaiREAL); }
        bool is_surface_tolerance_parameter() { return IsADBType("SURFACE_TOLERANCE_PARAMETER"); }
        Nullable<surface_tolerance_parameter> get_surface_tolerance_parameter() { return getSimpleValue<surface_tolerance_parameter>("SURFACE_TOLERANCE_PARAMETER", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class tolerance_parameter_select_put : public Select
    {
    public:
        tolerance_parameter_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_parameter_select_put(Select* outer) : Select(outer) {}
        void put_curve_tolerance_parameter(curve_tolerance_parameter value) { putSimpleValue("CURVE_TOLERANCE_PARAMETER", sdaiREAL, value); }
        void put_surface_tolerance_parameter(surface_tolerance_parameter value) { putSimpleValue("SURFACE_TOLERANCE_PARAMETER", sdaiREAL, value); }
    };


    class tolerance_select : public Select
    {
    public:
        tolerance_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_select(Select* outer) : Select(outer) {}

        bool is_approximation_tolerance_deviation() { return IsADBEntity("approximation_tolerance_deviation"); }
        approximation_tolerance_deviation get_approximation_tolerance_deviation();
        void put_approximation_tolerance_deviation(approximation_tolerance_deviation inst);

        bool is_approximation_tolerance_parameter() { return IsADBEntity("approximation_tolerance_parameter"); }
        approximation_tolerance_parameter get_approximation_tolerance_parameter();
        void put_approximation_tolerance_parameter(approximation_tolerance_parameter inst);
    };


    class tolerance_select_get : public Select
    {
    public:
        tolerance_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_select_get(Select* outer) : Select(outer) {}
        bool is_approximation_tolerance_deviation() { return IsADBEntity("approximation_tolerance_deviation"); }
        approximation_tolerance_deviation get_approximation_tolerance_deviation();
        bool is_approximation_tolerance_parameter() { return IsADBEntity("approximation_tolerance_parameter"); }
        approximation_tolerance_parameter get_approximation_tolerance_parameter();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class tolerance_select_put : public Select
    {
    public:
        tolerance_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_select_put(Select* outer) : Select(outer) {}
        void put_approximation_tolerance_deviation(approximation_tolerance_deviation inst);
        void put_approximation_tolerance_parameter(approximation_tolerance_parameter inst);
    };


    class transformation : public Select
    {
    public:
        transformation(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation(Select* outer) : Select(outer) {}

        bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        item_defined_transformation get_item_defined_transformation();
        void put_item_defined_transformation(item_defined_transformation inst);

        bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        functionally_defined_transformation get_functionally_defined_transformation();
        void put_functionally_defined_transformation(functionally_defined_transformation inst);
    };


    class transformation_get : public Select
    {
    public:
        transformation_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation_get(Select* outer) : Select(outer) {}
        bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        item_defined_transformation get_item_defined_transformation();
        bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        functionally_defined_transformation get_functionally_defined_transformation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class transformation_put : public Select
    {
    public:
        transformation_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation_put(Select* outer) : Select(outer) {}
        void put_item_defined_transformation(item_defined_transformation inst);
        void put_functionally_defined_transformation(functionally_defined_transformation inst);
    };


    class translational_range_measure : public Select
    {
    public:
        translational_range_measure(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        translational_range_measure(Select* outer) : Select(outer) {}

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_unlimited_range() { return IsADBType("UNLIMITED_RANGE"); }
        Nullable<unlimited_range> get_unlimited_range() { int v = getEnumerationValue("UNLIMITED_RANGE", unlimited_range_); if (v >= 0) return (unlimited_range) v; else return Nullable<unlimited_range>(); }
        void put_unlimited_range(unlimited_range value) { TextValue val = unlimited_range_[(int) value]; putEnumerationValue("UNLIMITED_RANGE", val); }
    };


    class translational_range_measure_get : public Select
    {
    public:
        translational_range_measure_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        translational_range_measure_get(Select* outer) : Select(outer) {}
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_unlimited_range() { return IsADBType("UNLIMITED_RANGE"); }
        Nullable<unlimited_range> get_unlimited_range() { int v = getEnumerationValue("UNLIMITED_RANGE", unlimited_range_); if (v >= 0) return (unlimited_range) v; else return Nullable<unlimited_range>(); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class translational_range_measure_put : public Select
    {
    public:
        translational_range_measure_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        translational_range_measure_put(Select* outer) : Select(outer) {}
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_unlimited_range(unlimited_range value) { TextValue val = unlimited_range_[(int) value]; putEnumerationValue("UNLIMITED_RANGE", val); }
    };


    class trimming_select : public Select
    {
    public:
        trimming_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select(Select* outer) : Select(outer) {}

        bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        cartesian_point get_cartesian_point();
        void put_cartesian_point(cartesian_point inst);

        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
    };


    class trimming_select_get : public Select
    {
    public:
        trimming_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select_get(Select* outer) : Select(outer) {}
        bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        cartesian_point get_cartesian_point();
        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class trimming_select_put : public Select
    {
    public:
        trimming_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select_put(Select* outer) : Select(outer) {}
        void put_cartesian_point(cartesian_point inst);
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
    };


    class unit : public Select
    {
    public:
        unit(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit(Select* outer) : Select(outer) {}

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        void put_named_unit(named_unit inst);
    };


    class unit_get : public Select
    {
    public:
        unit_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit_get(Select* outer) : Select(outer) {}
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class unit_put : public Select
    {
    public:
        unit_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit_put(Select* outer) : Select(outer) {}
        void put_derived_unit(derived_unit inst);
        void put_named_unit(named_unit inst);
    };


    class value_qualifier : public Select
    {
    public:
        value_qualifier(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier(Select* outer) : Select(outer) {}

        bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        precision_qualifier get_precision_qualifier();
        void put_precision_qualifier(precision_qualifier inst);

        bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        type_qualifier get_type_qualifier();
        void put_type_qualifier(type_qualifier inst);

        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
    };


    class value_qualifier_get : public Select
    {
    public:
        value_qualifier_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier_get(Select* outer) : Select(outer) {}
        bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        precision_qualifier get_precision_qualifier();
        bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        type_qualifier get_type_qualifier();
        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class value_qualifier_put : public Select
    {
    public:
        value_qualifier_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier_put(Select* outer) : Select(outer) {}
        void put_precision_qualifier(precision_qualifier inst);
        void put_type_qualifier(type_qualifier inst);
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
    };


    class vector_or_direction : public Select
    {
    public:
        vector_or_direction(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction(Select* outer) : Select(outer) {}

        bool is_vector() { return IsADBEntity("vector"); }
        vector get_vector();
        void put_vector(vector inst);

        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();
        void put_direction(direction inst);
    };


    class vector_or_direction_get : public Select
    {
    public:
        vector_or_direction_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction_get(Select* outer) : Select(outer) {}
        bool is_vector() { return IsADBEntity("vector"); }
        vector get_vector();
        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class vector_or_direction_put : public Select
    {
    public:
        vector_or_direction_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction_put(Select* outer) : Select(outer) {}
        void put_vector(vector inst);
        void put_direction(direction inst);
    };


        //
        // Unnamed aggregations
        //
    typedef std::list<versioned_action_request> set_of_versioned_action_request;
    template <typename TList> class set_of_versioned_action_requestSerializer : public AggrSerializerInstance<TList, versioned_action_request> {};
    typedef std::list<supported_item> set_of_supported_item;
    template <typename TList> class set_of_supported_itemSerializer : public AggrSerializerSelect<TList, supported_item> {};
    typedef std::list<characterized_action_definition> set_of_characterized_action_definition;
    template <typename TList> class set_of_characterized_action_definitionSerializer : public AggrSerializerSelect<TList, characterized_action_definition> {};
    typedef std::list<representation_item> set_of_representation_item;
    template <typename TList> class set_of_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef std::list<face_bound> set_of_face_bound;
    template <typename TList> class set_of_face_boundSerializer : public AggrSerializerInstance<TList, face_bound> {};
    typedef std::list<generic_expression> list_of_generic_expression;
    template <typename TList> class list_of_generic_expressionSerializer : public AggrSerializerInstance<TList, generic_expression> {};
    typedef std::list<draughting_callout_element> set_of_draughting_callout_element;
    template <typename TList> class set_of_draughting_callout_elementSerializer : public AggrSerializerSelect<TList, draughting_callout_element> {};
    typedef std::list<datum_reference> set_of_datum_reference;
    template <typename TList> class set_of_datum_referenceSerializer : public AggrSerializerInstance<TList, datum_reference> {};
    typedef std::list<presentation_style_assignment> set_of_presentation_style_assignment;
    template <typename TList> class set_of_presentation_style_assignmentSerializer : public AggrSerializerInstance<TList, presentation_style_assignment> {};
    typedef std::list<curve> set_of_curve;
    template <typename TList> class set_of_curveSerializer : public AggrSerializerInstance<TList, curve> {};
    typedef std::list<annotation_plane_element> set_of_annotation_plane_element;
    template <typename TList> class set_of_annotation_plane_elementSerializer : public AggrSerializerSelect<TList, annotation_plane_element> {};
    typedef std::list<shape_aspect_relationship> set_of_shape_aspect_relationship;
    template <typename TList> class set_of_shape_aspect_relationshipSerializer : public AggrSerializerInstance<TList, shape_aspect_relationship> {};
    typedef std::list<application_context_element> set_of_application_context_element;
    template <typename TList> class set_of_application_context_elementSerializer : public AggrSerializerInstance<TList, application_context_element> {};
    typedef std::list<action_item> set_of_action_item;
    template <typename TList> class set_of_action_itemSerializer : public AggrSerializerSelect<TList, action_item> {};
    typedef std::list<action_request_item> set_of_action_request_item;
    template <typename TList> class set_of_action_request_itemSerializer : public AggrSerializerSelect<TList, action_request_item> {};
    typedef std::list<approval_item> set_of_approval_item;
    template <typename TList> class set_of_approval_itemSerializer : public AggrSerializerSelect<TList, approval_item> {};
    typedef std::list<certification_item> set_of_certification_item;
    template <typename TList> class set_of_certification_itemSerializer : public AggrSerializerSelect<TList, certification_item> {};
    typedef std::list<classification_item> set_of_classification_item;
    template <typename TList> class set_of_classification_itemSerializer : public AggrSerializerSelect<TList, classification_item> {};
    typedef std::list<contract_item> set_of_contract_item;
    template <typename TList> class set_of_contract_itemSerializer : public AggrSerializerSelect<TList, contract_item> {};
    typedef std::list<date_and_time_item> set_of_date_and_time_item;
    template <typename TList> class set_of_date_and_time_itemSerializer : public AggrSerializerSelect<TList, date_and_time_item> {};
    typedef std::list<date_item> set_of_date_item;
    template <typename TList> class set_of_date_itemSerializer : public AggrSerializerSelect<TList, date_item> {};
    typedef std::list<document_reference_item> set_of_document_reference_item;
    template <typename TList> class set_of_document_reference_itemSerializer : public AggrSerializerSelect<TList, document_reference_item> {};
    typedef std::list<effectivity_item> set_of_effectivity_item;
    template <typename TList> class set_of_effectivity_itemSerializer : public AggrSerializerSelect<TList, effectivity_item> {};
    typedef std::list<event_occurrence_item> set_of_event_occurrence_item;
    template <typename TList> class set_of_event_occurrence_itemSerializer : public AggrSerializerSelect<TList, event_occurrence_item> {};
    typedef std::list<external_identification_item> set_of_external_identification_item;
    template <typename TList> class set_of_external_identification_itemSerializer : public AggrSerializerSelect<TList, external_identification_item> {};
    typedef std::list<group_item> set_of_group_item;
    template <typename TList> class set_of_group_itemSerializer : public AggrSerializerSelect<TList, group_item> {};
    typedef std::list<identification_item> set_of_identification_item;
    template <typename TList> class set_of_identification_itemSerializer : public AggrSerializerSelect<TList, identification_item> {};
    typedef std::list<name_item> set_of_name_item;
    template <typename TList> class set_of_name_itemSerializer : public AggrSerializerSelect<TList, name_item> {};
    typedef std::list<organization_item> set_of_organization_item;
    template <typename TList> class set_of_organization_itemSerializer : public AggrSerializerSelect<TList, organization_item> {};
    typedef std::list<organizational_project_item> set_of_organizational_project_item;
    template <typename TList> class set_of_organizational_project_itemSerializer : public AggrSerializerSelect<TList, organizational_project_item> {};
    typedef std::list<person_and_organization_item> set_of_person_and_organization_item;
    template <typename TList> class set_of_person_and_organization_itemSerializer : public AggrSerializerSelect<TList, person_and_organization_item> {};
    typedef std::list<presented_item_select> set_of_presented_item_select;
    template <typename TList> class set_of_presented_item_selectSerializer : public AggrSerializerSelect<TList, presented_item_select> {};
    typedef std::list<security_classification_item> set_of_security_classification_item;
    template <typename TList> class set_of_security_classification_itemSerializer : public AggrSerializerSelect<TList, security_classification_item> {};
    typedef std::list<time_interval_item> set_of_time_interval_item;
    template <typename TList> class set_of_time_interval_itemSerializer : public AggrSerializerSelect<TList, time_interval_item> {};
    typedef std::list<tolerance_deviation_select> set_of_tolerance_deviation_select;
    template <typename TList> class set_of_tolerance_deviation_selectSerializer : public AggrSerializerSelect<TList, tolerance_deviation_select> {};
    typedef std::list<tolerance_parameter_select> set_of_tolerance_parameter_select;
    template <typename TList> class set_of_tolerance_parameter_selectSerializer : public AggrSerializerSelect<TList, tolerance_parameter_select> {};
    typedef std::list<derived_unit_element> set_of_derived_unit_element;
    template <typename TList> class set_of_derived_unit_elementSerializer : public AggrSerializerInstance<TList, derived_unit_element> {};
    typedef std::list<attribute_language_item> set_of_attribute_language_item;
    template <typename TList> class set_of_attribute_language_itemSerializer : public AggrSerializerSelect<TList, attribute_language_item> {};
    typedef std::list<cartesian_point> list_of_cartesian_point;
    template <typename TList> class list_of_cartesian_pointSerializer : public AggrSerializerInstance<TList, cartesian_point> {};
    typedef std::list<IntValue> ListOfIntValue;
    template <typename TList> class ListOfIntValueSerializer : public AggrSerializerSimple<TList, IntValue, sdaiINTEGER> {};
    typedef std::list<parameter_value> list_of_parameter_value;
    template <typename TList> class list_of_parameter_valueSerializer : public AggrSerializerSimple<TList, parameter_value, sdaiREAL> {};
    typedef std::list<list_of_cartesian_point> list_of_list_of_cartesian_point;
    template <typename TList> class list_of_list_of_cartesian_pointSerializer : public AggrSerializerAggr<TList, list_of_cartesian_point, list_of_cartesian_pointSerializer<list_of_cartesian_point>> {};
    typedef std::list<composite_curve_segment> list_of_composite_curve_segment;
    template <typename TList> class list_of_composite_curve_segmentSerializer : public AggrSerializerInstance<TList, composite_curve_segment> {};
    typedef std::list<pcurve_or_surface> list_of_pcurve_or_surface;
    template <typename TList> class list_of_pcurve_or_surfaceSerializer : public AggrSerializerSelect<TList, pcurve_or_surface> {};
    typedef std::list<oriented_closed_shell> set_of_oriented_closed_shell;
    template <typename TList> class set_of_oriented_closed_shellSerializer : public AggrSerializerInstance<TList, oriented_closed_shell> {};
    typedef std::list<mapped_item> set_of_mapped_item;
    template <typename TList> class set_of_mapped_itemSerializer : public AggrSerializerInstance<TList, mapped_item> {};
    typedef std::list<length_measure> list_of_length_measure;
    template <typename TList> class list_of_length_measureSerializer : public AggrSerializerSimple<TList, length_measure, sdaiREAL> {};
    typedef std::list<class_usage_effectivity_context_item> set_of_class_usage_effectivity_context_item;
    template <typename TList> class set_of_class_usage_effectivity_context_itemSerializer : public AggrSerializerSelect<TList, class_usage_effectivity_context_item> {};
    typedef std::list<face> set_of_face;
    template <typename TList> class set_of_faceSerializer : public AggrSerializerInstance<TList, face> {};
    typedef std::list<composite_curve> bag_of_composite_curve;
    template <typename TList> class bag_of_composite_curveSerializer : public AggrSerializerInstance<TList, composite_curve> {};
    typedef std::list<text_or_character> set_of_text_or_character;
    template <typename TList> class set_of_text_or_characterSerializer : public AggrSerializerSelect<TList, text_or_character> {};
    typedef std::list<product_concept_feature_association> set_of_product_concept_feature_association;
    template <typename TList> class set_of_product_concept_feature_associationSerializer : public AggrSerializerInstance<TList, product_concept_feature_association> {};
    typedef std::list<pair_value> set_of_pair_value;
    template <typename TList> class set_of_pair_valueSerializer : public AggrSerializerInstance<TList, pair_value> {};
    typedef std::list<configured_effectivity_item> set_of_configured_effectivity_item;
    template <typename TList> class set_of_configured_effectivity_itemSerializer : public AggrSerializerSelect<TList, configured_effectivity_item> {};
    typedef std::list<configured_effectivity_context_item> set_of_configured_effectivity_context_item;
    template <typename TList> class set_of_configured_effectivity_context_itemSerializer : public AggrSerializerSelect<TList, configured_effectivity_context_item> {};
    typedef std::list<edge> set_of_edge;
    template <typename TList> class set_of_edgeSerializer : public AggrSerializerInstance<TList, edge> {};
    typedef std::list<invisible_item> set_of_invisible_item;
    template <typename TList> class set_of_invisible_itemSerializer : public AggrSerializerSelect<TList, invisible_item> {};
    typedef std::list<style_context_select> list_of_style_context_select;
    template <typename TList> class list_of_style_context_selectSerializer : public AggrSerializerSelect<TList, style_context_select> {};
    typedef std::list<boundary_curve> set_of_boundary_curve;
    template <typename TList> class set_of_boundary_curveSerializer : public AggrSerializerInstance<TList, boundary_curve> {};
    typedef std::list<curve_style_font_pattern> list_of_curve_style_font_pattern;
    template <typename TList> class list_of_curve_style_font_patternSerializer : public AggrSerializerInstance<TList, curve_style_font_pattern> {};
    typedef std::list<property_definition_representation> set_of_property_definition_representation;
    template <typename TList> class set_of_property_definition_representationSerializer : public AggrSerializerInstance<TList, property_definition_representation> {};
    typedef std::list<double> list_of_double;
    template <typename TList> class list_of_doubleSerializer : public AggrSerializerSimple<TList, double, sdaiREAL> {};
    typedef std::list<document_representation_type> set_of_document_representation_type;
    template <typename TList> class set_of_document_representation_typeSerializer : public AggrSerializerInstance<TList, document_representation_type> {};
    typedef std::list<specified_item> set_of_specified_item;
    template <typename TList> class set_of_specified_itemSerializer : public AggrSerializerSelect<TList, specified_item> {};
    typedef std::list<draughting_titled_item> set_of_draughting_titled_item;
    template <typename TList> class set_of_draughting_titled_itemSerializer : public AggrSerializerSelect<TList, draughting_titled_item> {};
    typedef std::list<area_in_set> set_of_area_in_set;
    template <typename TList> class set_of_area_in_setSerializer : public AggrSerializerInstance<TList, area_in_set> {};
    typedef std::list<connected_edge_set> set_of_connected_edge_set;
    template <typename TList> class set_of_connected_edge_setSerializer : public AggrSerializerInstance<TList, connected_edge_set> {};
    typedef std::list<oriented_edge> list_of_oriented_edge;
    template <typename TList> class list_of_oriented_edgeSerializer : public AggrSerializerInstance<TList, oriented_edge> {};
    typedef std::list<connected_face_set> set_of_connected_face_set;
    template <typename TList> class set_of_connected_face_setSerializer : public AggrSerializerInstance<TList, connected_face_set> {};
    typedef std::list<fill_style_select> set_of_fill_style_select;
    template <typename TList> class set_of_fill_style_selectSerializer : public AggrSerializerSelect<TList, fill_style_select> {};
    typedef std::list<fill_area_style_tile_shape_select> set_of_fill_area_style_tile_shape_select;
    template <typename TList> class set_of_fill_area_style_tile_shape_selectSerializer : public AggrSerializerSelect<TList, fill_area_style_tile_shape_select> {};
    typedef std::list<geometric_set_select> set_of_geometric_set_select;
    template <typename TList> class set_of_geometric_set_selectSerializer : public AggrSerializerSelect<TList, geometric_set_select> {};
    typedef std::list<representation> set_of_representation;
    template <typename TList> class set_of_representationSerializer : public AggrSerializerInstance<TList, representation> {};
    typedef std::list<uncertainty_measure_with_unit> set_of_uncertainty_measure_with_unit;
    template <typename TList> class set_of_uncertainty_measure_with_unitSerializer : public AggrSerializerInstance<TList, uncertainty_measure_with_unit> {};
    typedef std::list<unit> set_of_unit;
    template <typename TList> class set_of_unitSerializer : public AggrSerializerSelect<TList, unit> {};
    typedef std::list<configuration_interpolation> set_of_configuration_interpolation;
    template <typename TList> class set_of_configuration_interpolationSerializer : public AggrSerializerInstance<TList, configuration_interpolation> {};
    typedef std::list<kinematic_result> set_of_kinematic_result;
    template <typename TList> class set_of_kinematic_resultSerializer : public AggrSerializerSelect<TList, kinematic_result> {};
    typedef std::list<kinematic_analysis_definition> set_of_kinematic_analysis_definition;
    template <typename TList> class set_of_kinematic_analysis_definitionSerializer : public AggrSerializerSelect<TList, kinematic_analysis_definition> {};
    typedef std::list<kinematic_joint> set_of_kinematic_joint;
    template <typename TList> class set_of_kinematic_jointSerializer : public AggrSerializerInstance<TList, kinematic_joint> {};
    typedef std::list<language_item> set_of_language_item;
    template <typename TList> class set_of_language_itemSerializer : public AggrSerializerSelect<TList, language_item> {};
    typedef std::list<characterized_definition> set_of_characterized_definition;
    template <typename TList> class set_of_characterized_definitionSerializer : public AggrSerializerSelect<TList, characterized_definition> {};
    typedef std::list<value_qualifier> set_of_value_qualifier;
    template <typename TList> class set_of_value_qualifierSerializer : public AggrSerializerSelect<TList, value_qualifier> {};
    typedef std::list<multi_language_attribute_item> set_of_multi_language_attribute_item;
    template <typename TList> class set_of_multi_language_attribute_itemSerializer : public AggrSerializerSelect<TList, multi_language_attribute_item> {};
    typedef std::list<organization> set_of_organization;
    template <typename TList> class set_of_organizationSerializer : public AggrSerializerInstance<TList, organization> {};
    typedef std::list<StringValue> list_of_label;
    template <typename TList> class list_of_labelSerializer : public AggrSerializerText<list_of_label, label, sdaiSTRING> {};
    typedef std::list<person> set_of_person;
    template <typename TList> class set_of_personSerializer : public AggrSerializerInstance<TList, person> {};
    typedef std::list<document> set_of_document;
    template <typename TList> class set_of_documentSerializer : public AggrSerializerInstance<TList, document> {};
    typedef std::list<layered_item> set_of_layered_item;
    template <typename TList> class set_of_layered_itemSerializer : public AggrSerializerSelect<TList, layered_item> {};
    typedef std::list<presentation_style_select> set_of_presentation_style_select;
    template <typename TList> class set_of_presentation_style_selectSerializer : public AggrSerializerSelect<TList, presentation_style_select> {};
    typedef std::list<product_context> set_of_product_context;
    template <typename TList> class set_of_product_contextSerializer : public AggrSerializerInstance<TList, product_context> {};
    typedef std::list<category_usage_item> set_of_category_usage_item;
    template <typename TList> class set_of_category_usage_itemSerializer : public AggrSerializerSelect<TList, category_usage_item> {};
    typedef std::list<process_product_association> set_of_process_product_association;
    template <typename TList> class set_of_process_product_associationSerializer : public AggrSerializerInstance<TList, process_product_association> {};
    typedef std::list<product> set_of_product;
    template <typename TList> class set_of_productSerializer : public AggrSerializerInstance<TList, product> {};
    typedef std::list<shape_aspect> set_of_shape_aspect;
    template <typename TList> class set_of_shape_aspectSerializer : public AggrSerializerInstance<TList, shape_aspect> {};
    typedef std::list<process_property_association> set_of_process_property_association;
    template <typename TList> class set_of_process_property_associationSerializer : public AggrSerializerInstance<TList, process_property_association> {};
    typedef std::list<list_of_double> list_of_list_of_double;
    template <typename TList> class list_of_list_of_doubleSerializer : public AggrSerializerAggr<TList, list_of_double, list_of_doubleSerializer<list_of_double>> {};
    typedef std::list<surface_patch> list_of_surface_patch;
    template <typename TList> class list_of_surface_patchSerializer : public AggrSerializerInstance<TList, surface_patch> {};
    typedef std::list<list_of_surface_patch> list_of_list_of_surface_patch;
    template <typename TList> class list_of_list_of_surface_patchSerializer : public AggrSerializerAggr<TList, list_of_surface_patch, list_of_surface_patchSerializer<list_of_surface_patch>> {};
    typedef std::list<action_resource> set_of_action_resource;
    template <typename TList> class set_of_action_resourceSerializer : public AggrSerializerInstance<TList, action_resource> {};
    typedef std::list<shell> set_of_shell;
    template <typename TList> class set_of_shellSerializer : public AggrSerializerSelect<TList, shell> {};
    typedef std::list<rectangular_composite_surface> bag_of_rectangular_composite_surface;
    template <typename TList> class bag_of_rectangular_composite_surfaceSerializer : public AggrSerializerInstance<TList, rectangular_composite_surface> {};
    typedef std::list<surface_style_element_select> set_of_surface_style_element_select;
    template <typename TList> class set_of_surface_style_element_selectSerializer : public AggrSerializerSelect<TList, surface_style_element_select> {};
    typedef std::list<direction_count_select> set_of_direction_count_select;
    template <typename TList> class set_of_direction_count_selectSerializer : public AggrSerializerSelect<TList, direction_count_select> {};
    typedef std::list<rendering_properties_select> set_of_rendering_properties_select;
    template <typename TList> class set_of_rendering_properties_selectSerializer : public AggrSerializerSelect<TList, rendering_properties_select> {};
    typedef std::list<box_characteristic_select> set_of_box_characteristic_select;
    template <typename TList> class set_of_box_characteristic_selectSerializer : public AggrSerializerSelect<TList, box_characteristic_select> {};
    typedef std::list<geometric_tolerance> set_of_geometric_tolerance;
    template <typename TList> class set_of_geometric_toleranceSerializer : public AggrSerializerInstance<TList, geometric_tolerance> {};
    typedef std::list<trimming_select> set_of_trimming_select;
    template <typename TList> class set_of_trimming_selectSerializer : public AggrSerializerSelect<TList, trimming_select> {};

        //
        // Entities
        // 


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_expression : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class numeric_expression : public virtual expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_generic_expression")
        {}


        generic_expression get_operand();
        void put_operand(generic_expression inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_numeric_expression : public virtual numeric_expression, public virtual unary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_function_call
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_function_call : public virtual unary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_function_call(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_function_call")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of abs_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class abs_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of abs_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        abs_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "abs_function")
        {}

                /// <summary>
                /// Create new instace of abs_function and returns object of this C++ class to interact with
                /// </summary>
        static abs_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "abs_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of acos_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class acos_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of acos_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        acos_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "acos_function")
        {}

                /// <summary>
                /// Create new instace of acos_function and returns object of this C++ class to interact with
                /// </summary>
        static acos_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "acos_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action")
        {}

                /// <summary>
                /// Create new instace of action and returns object of this C++ class to interact with
                /// </summary>
        static action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_method get_chosen_method();
        void put_chosen_method(action_method inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_assignment")
        {}


        action get_assigned_action();
        void put_assigned_action(action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_directive
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_directive : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_directive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_directive(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_directive")
        {}

                /// <summary>
                /// Create new instace of action_directive and returns object of this C++ class to interact with
                /// </summary>
        static action_directive Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_directive"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        text get_analysis() { text val = NULL; if (sdaiGetAttrBN(m_instance, "analysis", sdaiSTRING, &val)) return val; else return NULL; }
        void put_analysis(text value) { sdaiPutAttrBN(m_instance, "analysis", sdaiSTRING, value); }

        text get_comment() { text val = NULL; if (sdaiGetAttrBN(m_instance, "comment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_comment(text value) { sdaiPutAttrBN(m_instance, "comment", sdaiSTRING, value); }

        //TList may be set_of_versioned_action_request or list of converible elements
        template <typename TList> void get_requests(TList& lst) { set_of_versioned_action_requestSerializer<TList> sr; sr.FromAttr(lst, m_instance, "requests"); }

        //TList may be set_of_versioned_action_request or list of converible elements
        template <typename TList> void put_requests(TList& lst) { set_of_versioned_action_requestSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "requests"); }

        //TArrayElem[] may be versioned_action_request[] or array of convertible elements
        template <typename TArrayElem> void put_requests(TArrayElem arr[], size_t n) { set_of_versioned_action_request lst; ArrayToList(arr, n, lst); put_requests(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method")
        {}

                /// <summary>
                /// Create new instace of action_method and returns object of this C++ class to interact with
                /// </summary>
        static action_method Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_method"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        text get_consequence() { text val = NULL; if (sdaiGetAttrBN(m_instance, "consequence", sdaiSTRING, &val)) return val; else return NULL; }
        void put_consequence(text value) { sdaiPutAttrBN(m_instance, "consequence", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method_relationship")
        {}

                /// <summary>
                /// Create new instace of action_method_relationship and returns object of this C++ class to interact with
                /// </summary>
        static action_method_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_method_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_method get_relating_method();
        void put_relating_method(action_method inst);

        action_method get_related_method();
        void put_related_method(action_method inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_property : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_property")
        {}

                /// <summary>
                /// Create new instace of action_property and returns object of this C++ class to interact with
                /// </summary>
        static action_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_property"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_action_definition_get get_definition() { return characterized_action_definition_get(m_instance, "definition", NULL); }
        characterized_action_definition_put put_definition() { return characterized_action_definition_put(m_instance, "definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_property_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_property_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_property_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_property_representation")
        {}

                /// <summary>
                /// Create new instace of action_property_representation and returns object of this C++ class to interact with
                /// </summary>
        static action_property_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_property_representation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_property get_property();
        void put_property(action_property inst);

        representation get_representation();
        void put_representation(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_relationship")
        {}

                /// <summary>
                /// Create new instace of action_relationship and returns object of this C++ class to interact with
                /// </summary>
        static action_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action get_relating_action();
        void put_relating_action(action inst);

        action get_related_action();
        void put_related_action(action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_assignment")
        {}


        versioned_action_request get_assigned_action_request();
        void put_assigned_action_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_solution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_solution : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_solution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_solution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_solution")
        {}

                /// <summary>
                /// Create new instace of action_request_solution and returns object of this C++ class to interact with
                /// </summary>
        static action_request_solution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_request_solution"); assert(inst); return inst; }

        action_method get_method();
        void put_method(action_method inst);

        versioned_action_request get_request();
        void put_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_status")
        {}

                /// <summary>
                /// Create new instace of action_request_status and returns object of this C++ class to interact with
                /// </summary>
        static action_request_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_request_status"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        versioned_action_request get_assigned_request();
        void put_assigned_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_resource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_resource : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_resource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_resource")
        {}

                /// <summary>
                /// Create new instace of action_resource and returns object of this C++ class to interact with
                /// </summary>
        static action_resource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_resource"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_supported_item or list of converible elements
        template <typename TList> void get_usage(TList& lst) { set_of_supported_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "usage"); }

        //TList may be set_of_supported_item or list of converible elements
        template <typename TList> void put_usage(TList& lst) { set_of_supported_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "usage"); }

        action_resource_type get_kind();
        void put_kind(action_resource_type inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_resource_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_resource_requirement : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_resource_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_resource_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_resource_requirement")
        {}

                /// <summary>
                /// Create new instace of action_resource_requirement and returns object of this C++ class to interact with
                /// </summary>
        static action_resource_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_resource_requirement"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        resource_requirement_type get_kind();
        void put_kind(resource_requirement_type inst);

        //TList may be set_of_characterized_action_definition or list of converible elements
        template <typename TList> void get_OPERATIONS(TList& lst) { set_of_characterized_action_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OPERATIONS"); }

        //TList may be set_of_characterized_action_definition or list of converible elements
        template <typename TList> void put_OPERATIONS(TList& lst) { set_of_characterized_action_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "OPERATIONS"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_resource_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_resource_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_resource_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_resource_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_resource_type")
        {}

                /// <summary>
                /// Create new instace of action_resource_type and returns object of this C++ class to interact with
                /// </summary>
        static action_resource_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_resource_type"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_status")
        {}

                /// <summary>
                /// Create new instace of action_status and returns object of this C++ class to interact with
                /// </summary>
        static action_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_status"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        executed_action get_assigned_action();
        void put_assigned_action(executed_action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class address : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "address")
        {}

                /// <summary>
                /// Create new instace of address and returns object of this C++ class to interact with
                /// </summary>
        static address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "address"); assert(inst); return inst; }

        label get_internal_location() { label val = NULL; if (sdaiGetAttrBN(m_instance, "internal_location", sdaiSTRING, &val)) return val; else return NULL; }
        void put_internal_location(label value) { sdaiPutAttrBN(m_instance, "internal_location", sdaiSTRING, value); }

        label get_street_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "street_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_street_number(label value) { sdaiPutAttrBN(m_instance, "street_number", sdaiSTRING, value); }

        label get_street() { label val = NULL; if (sdaiGetAttrBN(m_instance, "street", sdaiSTRING, &val)) return val; else return NULL; }
        void put_street(label value) { sdaiPutAttrBN(m_instance, "street", sdaiSTRING, value); }

        label get_postal_box() { label val = NULL; if (sdaiGetAttrBN(m_instance, "postal_box", sdaiSTRING, &val)) return val; else return NULL; }
        void put_postal_box(label value) { sdaiPutAttrBN(m_instance, "postal_box", sdaiSTRING, value); }

        label get_town() { label val = NULL; if (sdaiGetAttrBN(m_instance, "town", sdaiSTRING, &val)) return val; else return NULL; }
        void put_town(label value) { sdaiPutAttrBN(m_instance, "town", sdaiSTRING, value); }

        label get_region() { label val = NULL; if (sdaiGetAttrBN(m_instance, "region", sdaiSTRING, &val)) return val; else return NULL; }
        void put_region(label value) { sdaiPutAttrBN(m_instance, "region", sdaiSTRING, value); }

        label get_postal_code() { label val = NULL; if (sdaiGetAttrBN(m_instance, "postal_code", sdaiSTRING, &val)) return val; else return NULL; }
        void put_postal_code(label value) { sdaiPutAttrBN(m_instance, "postal_code", sdaiSTRING, value); }

        label get_country() { label val = NULL; if (sdaiGetAttrBN(m_instance, "country", sdaiSTRING, &val)) return val; else return NULL; }
        void put_country(label value) { sdaiPutAttrBN(m_instance, "country", sdaiSTRING, value); }

        label get_facsimile_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "facsimile_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_facsimile_number(label value) { sdaiPutAttrBN(m_instance, "facsimile_number", sdaiSTRING, value); }

        label get_telephone_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "telephone_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_telephone_number(label value) { sdaiPutAttrBN(m_instance, "telephone_number", sdaiSTRING, value); }

        label get_electronic_mail_address() { label val = NULL; if (sdaiGetAttrBN(m_instance, "electronic_mail_address", sdaiSTRING, &val)) return val; else return NULL; }
        void put_electronic_mail_address(label value) { sdaiPutAttrBN(m_instance, "electronic_mail_address", sdaiSTRING, value); }

        label get_telex_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "telex_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_telex_number(label value) { sdaiPutAttrBN(m_instance, "telex_number", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation")
        {}

                /// <summary>
                /// Create new instace of representation and returns object of this C++ class to interact with
                /// </summary>
        static representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_items(TArrayElem arr[], size_t n) { set_of_representation_item lst; ArrayToList(arr, n, lst); put_items(lst); }

        representation_context get_context_of_items();
        void put_context_of_items(representation_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation")
        {}

                /// <summary>
                /// Create new instace of shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of advanced_brep_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class advanced_brep_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of advanced_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        advanced_brep_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "advanced_brep_shape_representation")
        {}

                /// <summary>
                /// Create new instace of advanced_brep_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static advanced_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "advanced_brep_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_item")
        {}

                /// <summary>
                /// Create new instace of representation_item and returns object of this C++ class to interact with
                /// </summary>
        static representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_item"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of topological_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class topological_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of topological_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        topological_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "topological_representation_item")
        {}

                /// <summary>
                /// Create new instace of topological_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static topological_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "topological_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face")
        {}

                /// <summary>
                /// Create new instace of face and returns object of this C++ class to interact with
                /// </summary>
        static face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face"); assert(inst); return inst; }

        //TList may be set_of_face_bound or list of converible elements
        template <typename TList> void get_bounds(TList& lst) { set_of_face_boundSerializer<TList> sr; sr.FromAttr(lst, m_instance, "bounds"); }

        //TList may be set_of_face_bound or list of converible elements
        template <typename TList> void put_bounds(TList& lst) { set_of_face_boundSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "bounds"); }

        //TArrayElem[] may be face_bound[] or array of convertible elements
        template <typename TArrayElem> void put_bounds(TArrayElem arr[], size_t n) { set_of_face_bound lst; ArrayToList(arr, n, lst); put_bounds(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_representation_item")
        {}

                /// <summary>
                /// Create new instace of geometric_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_surface : public virtual face, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_surface")
        {}

                /// <summary>
                /// Create new instace of face_surface and returns object of this C++ class to interact with
                /// </summary>
        static face_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_surface"); assert(inst); return inst; }

        surface get_face_geometry();
        void put_face_geometry(surface inst);

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of advanced_face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class advanced_face : public virtual face_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of advanced_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        advanced_face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "advanced_face")
        {}

                /// <summary>
                /// Create new instace of advanced_face and returns object of this C++ class to interact with
                /// </summary>
        static advanced_face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "advanced_face"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of alternate_product_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class alternate_product_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of alternate_product_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        alternate_product_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "alternate_product_relationship")
        {}

                /// <summary>
                /// Create new instace of alternate_product_relationship and returns object of this C++ class to interact with
                /// </summary>
        static alternate_product_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "alternate_product_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_definition() { text val = NULL; if (sdaiGetAttrBN(m_instance, "definition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_definition(text value) { sdaiPutAttrBN(m_instance, "definition", sdaiSTRING, value); }

        product get_alternate();
        void put_alternate(product inst);

        product get_base_();
        void put_base_(product inst);

        text get_basis() { text val = NULL; if (sdaiGetAttrBN(m_instance, "basis", sdaiSTRING, &val)) return val; else return NULL; }
        void put_basis(text value) { sdaiPutAttrBN(m_instance, "basis", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_with_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_with_unit"); assert(inst); return inst; }

        measure_value_get get_value_component() { return measure_value_get(m_instance, "value_component", NULL); }
        measure_value_put put_value_component() { return measure_value_put(m_instance, "value_component", NULL); }

        unit_get get_unit_component() { return unit_get(m_instance, "unit_component", NULL); }
        unit_put put_unit_component() { return unit_put(m_instance, "unit_component", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of amount_of_substance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class amount_of_substance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of amount_of_substance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        amount_of_substance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "amount_of_substance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of amount_of_substance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static amount_of_substance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "amount_of_substance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of named_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class named_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of named_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        named_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "named_unit")
        {}

                /// <summary>
                /// Create new instace of named_unit and returns object of this C++ class to interact with
                /// </summary>
        static named_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "named_unit"); assert(inst); return inst; }

        dimensional_exponents get_dimensions();
        void put_dimensions(dimensional_exponents inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of amount_of_substance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class amount_of_substance_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of amount_of_substance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        amount_of_substance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "amount_of_substance_unit")
        {}

                /// <summary>
                /// Create new instace of amount_of_substance_unit and returns object of this C++ class to interact with
                /// </summary>
        static amount_of_substance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "amount_of_substance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_expression : public virtual expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_generic_expression")
        {}


        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void get_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "operands"); }

        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void put_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "operands"); }

        //TArrayElem[] may be generic_expression[] or array of convertible elements
        template <typename TArrayElem> void put_operands(TArrayElem arr[], size_t n) { list_of_generic_expression lst; ArrayToList(arr, n, lst); put_operands(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_boolean_expression : public virtual boolean_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of and_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class and_expression : public virtual multiple_arity_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of and_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        and_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "and_expression")
        {}

                /// <summary>
                /// Create new instace of and_expression and returns object of this C++ class to interact with
                /// </summary>
        static and_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "and_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_callout : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_callout")
        {}

                /// <summary>
                /// Create new instace of draughting_callout and returns object of this C++ class to interact with
                /// </summary>
        static draughting_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_callout"); assert(inst); return inst; }

        //TList may be set_of_draughting_callout_element or list of converible elements
        template <typename TList> void get_contents(TList& lst) { set_of_draughting_callout_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "contents"); }

        //TList may be set_of_draughting_callout_element or list of converible elements
        template <typename TList> void put_contents(TList& lst) { set_of_draughting_callout_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "contents"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve_directed_callout")
        {}

                /// <summary>
                /// Create new instace of dimension_curve_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_dimension")
        {}

                /// <summary>
                /// Create new instace of angular_dimension and returns object of this C++ class to interact with
                /// </summary>
        static angular_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        shape_aspect get_relating_shape_aspect();
        void put_relating_shape_aspect(shape_aspect inst);

        shape_aspect get_related_shape_aspect();
        void put_related_shape_aspect(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_location : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_location")
        {}

                /// <summary>
                /// Create new instace of dimensional_location and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_location"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_location : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_location")
        {}

                /// <summary>
                /// Create new instace of angular_location and returns object of this C++ class to interact with
                /// </summary>
        static angular_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_location"); assert(inst); return inst; }

        Nullable<angle_relator> get_angle_selection() { int v = getENUM("angle_selection", angle_relator_); if (v >= 0) return (angle_relator) v; else return Nullable<angle_relator>(); }
        void put_angle_selection(angle_relator value) { TextValue val = angle_relator_[(int) value]; sdaiPutAttrBN(m_instance, "angle_selection", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_size : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_size")
        {}

                /// <summary>
                /// Create new instace of dimensional_size and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_size"); assert(inst); return inst; }

        shape_aspect get_applies_to();
        void put_applies_to(shape_aspect inst);

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_size : public virtual dimensional_size
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_size")
        {}

                /// <summary>
                /// Create new instace of angular_size and returns object of this C++ class to interact with
                /// </summary>
        static angular_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_size"); assert(inst); return inst; }

        Nullable<angle_relator> get_angle_selection() { int v = getENUM("angle_selection", angle_relator_); if (v >= 0) return (angle_relator) v; else return Nullable<angle_relator>(); }
        void put_angle_selection(angle_relator value) { TextValue val = angle_relator_[(int) value]; sdaiPutAttrBN(m_instance, "angle_selection", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        measure_with_unit get_magnitude();
        void put_magnitude(measure_with_unit inst);

        shape_aspect get_toleranced_shape_aspect();
        void put_toleranced_shape_aspect(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_with_datum_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_with_datum_reference : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_with_datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_with_datum_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_with_datum_reference")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_with_datum_reference and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_with_datum_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_with_datum_reference"); assert(inst); return inst; }

        //TList may be set_of_datum_reference or list of converible elements
        template <typename TList> void get_datum_system(TList& lst) { set_of_datum_referenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "datum_system"); }

        //TList may be set_of_datum_reference or list of converible elements
        template <typename TList> void put_datum_system(TList& lst) { set_of_datum_referenceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "datum_system"); }

        //TArrayElem[] may be datum_reference[] or array of convertible elements
        template <typename TArrayElem> void put_datum_system(TArrayElem arr[], size_t n) { set_of_datum_reference lst; ArrayToList(arr, n, lst); put_datum_system(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angularity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angularity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angularity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angularity_tolerance")
        {}

                /// <summary>
                /// Create new instace of angularity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static angularity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angularity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class styled_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "styled_item")
        {}

                /// <summary>
                /// Create new instace of styled_item and returns object of this C++ class to interact with
                /// </summary>
        static styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "styled_item"); assert(inst); return inst; }

        //TList may be set_of_presentation_style_assignment or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_presentation_style_assignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_presentation_style_assignment or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_presentation_style_assignmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }

        //TArrayElem[] may be presentation_style_assignment[] or array of convertible elements
        template <typename TArrayElem> void put_styles(TArrayElem arr[], size_t n) { set_of_presentation_style_assignment lst; ArrayToList(arr, n, lst); put_styles(lst); }

        representation_item get_item();
        void put_item(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence : public virtual styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_curve_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_curve_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_curve_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_curve_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_curve_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_curve_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_curve_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_curve_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_fill_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_fill_area : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_fill_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_fill_area")
        {}

                /// <summary>
                /// Create new instace of annotation_fill_area and returns object of this C++ class to interact with
                /// </summary>
        static annotation_fill_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_fill_area"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_boundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_fill_area_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_fill_area_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_fill_area_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_fill_area_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_fill_area_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_fill_area_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_fill_area_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_fill_area_occurrence"); assert(inst); return inst; }

        point get_fill_style_target();
        void put_fill_style_target(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence_relationship")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence_relationship and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        annotation_occurrence get_relating_annotation_occurrence();
        void put_relating_annotation_occurrence(annotation_occurrence inst);

        annotation_occurrence get_related_annotation_occurrence();
        void put_related_annotation_occurrence(annotation_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence_associativity : public virtual annotation_occurrence_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence_associativity")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence_associativity and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_plane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_plane : public virtual annotation_occurrence, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_plane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_plane")
        {}

                /// <summary>
                /// Create new instace of annotation_plane and returns object of this C++ class to interact with
                /// </summary>
        static annotation_plane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_plane"); assert(inst); return inst; }

        //TList may be set_of_annotation_plane_element or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_annotation_plane_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_annotation_plane_element or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_annotation_plane_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_symbol_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_symbol_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_symbol_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_symbol_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_symbol_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_symbol_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_symbol_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_symbol_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_subfigure_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_subfigure_occurrence : public virtual annotation_symbol_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_subfigure_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_subfigure_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_subfigure_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_subfigure_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_subfigure_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_subfigure_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mapped_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mapped_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mapped_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mapped_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mapped_item")
        {}

                /// <summary>
                /// Create new instace of mapped_item and returns object of this C++ class to interact with
                /// </summary>
        static mapped_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mapped_item"); assert(inst); return inst; }

        representation_map get_mapping_source();
        void put_mapping_source(representation_map inst);

        representation_item get_mapping_target();
        void put_mapping_target(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_symbol : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_symbol")
        {}

                /// <summary>
                /// Create new instace of annotation_symbol and returns object of this C++ class to interact with
                /// </summary>
        static annotation_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text")
        {}

                /// <summary>
                /// Create new instace of annotation_text and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text_character
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text_character : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text_character
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text_character(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text_character")
        {}

                /// <summary>
                /// Create new instace of annotation_text_character and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text_character Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text_character"); assert(inst); return inst; }

        text_alignment get_alignment() { text_alignment val = NULL; if (sdaiGetAttrBN(m_instance, "alignment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_alignment(text_alignment value) { sdaiPutAttrBN(m_instance, "alignment", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_text_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect")
        {}

                /// <summary>
                /// Create new instace of shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_shape get_of_shape();
        void put_of_shape(product_definition_shape inst);

        Nullable<LOGICAL_VALUE> get_product_definitional() { int v = getENUM("product_definitional", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_product_definitional(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "product_definitional", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of derived_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static derived_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_deriving_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "deriving_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of apex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class apex : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of apex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        apex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "apex")
        {}

                /// <summary>
                /// Create new instace of apex and returns object of this C++ class to interact with
                /// </summary>
        static apex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "apex"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_context : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_context")
        {}

                /// <summary>
                /// Create new instace of application_context and returns object of this C++ class to interact with
                /// </summary>
        static application_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_context"); assert(inst); return inst; }

        label get_application() { label val = NULL; if (sdaiGetAttrBN(m_instance, "application", sdaiSTRING, &val)) return val; else return NULL; }
        void put_application(label value) { sdaiPutAttrBN(m_instance, "application", sdaiSTRING, value); }

        //TList may be set_of_application_context_element or list of converible elements
        template <typename TList> void get_context_elements(TList& lst) { set_of_application_context_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "context_elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_context_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_context_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_context_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_context_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_context_element")
        {}

                /// <summary>
                /// Create new instace of application_context_element and returns object of this C++ class to interact with
                /// </summary>
        static application_context_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_context_element"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        application_context get_frame_of_reference();
        void put_frame_of_reference(application_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_context_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_context_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_context_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_context_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_context_relationship")
        {}

                /// <summary>
                /// Create new instace of application_context_relationship and returns object of this C++ class to interact with
                /// </summary>
        static application_context_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_context_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        application_context get_relating_context();
        void put_relating_context(application_context inst);

        application_context get_related_context();
        void put_related_context(application_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_protocol_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_protocol_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_protocol_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_protocol_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_protocol_definition")
        {}

                /// <summary>
                /// Create new instace of application_protocol_definition and returns object of this C++ class to interact with
                /// </summary>
        static application_protocol_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_protocol_definition"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        label get_application_interpreted_model_schema_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "application_interpreted_model_schema_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_application_interpreted_model_schema_name(label value) { sdaiPutAttrBN(m_instance, "application_interpreted_model_schema_name", sdaiSTRING, value); }

        Nullable<year_number> get_application_protocol_year() { year_number val = (year_number) 0; if (sdaiGetAttrBN(m_instance, "application_protocol_year", sdaiINTEGER, &val)) return val; else return Nullable<year_number>(); }
        void put_application_protocol_year(year_number value) { sdaiPutAttrBN(m_instance, "application_protocol_year", sdaiINTEGER, &value); }

        application_context get_application();
        void put_application(application_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_action_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_action_assignment : public virtual action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_action_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_action_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_action_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_action_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_action_assignment"); assert(inst); return inst; }

        //TList may be set_of_action_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_action_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_action_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_action_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_action_request_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_action_request_assignment : public virtual action_request_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_action_request_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_action_request_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_action_request_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_action_request_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_action_request_assignment"); assert(inst); return inst; }

        //TList may be set_of_action_request_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_action_request_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_action_request_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_action_request_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_assignment")
        {}


        approval get_assigned_approval();
        void put_assigned_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_approval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_approval_assignment : public virtual approval_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_approval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_approval_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_approval_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_approval_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_approval_assignment"); assert(inst); return inst; }

        //TList may be set_of_approval_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_approval_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_approval_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_approval_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_area : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_area")
        {}

                /// <summary>
                /// Create new instace of applied_area and returns object of this C++ class to interact with
                /// </summary>
        static applied_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification_assignment")
        {}


        certification get_assigned_certification();
        void put_assigned_certification(certification inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_certification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_certification_assignment : public virtual certification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_certification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_certification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_certification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_certification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_certification_assignment"); assert(inst); return inst; }

        //TList may be set_of_certification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_certification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_certification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_certification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "classification_assignment")
        {}


        group get_assigned_class();
        void put_assigned_class(group inst);

        classification_role get_role();
        void put_role(classification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_classification_assignment : public virtual classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_classification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_classification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_classification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_classification_assignment"); assert(inst); return inst; }

        //TList may be set_of_classification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_classification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_classification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_classification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract_assignment")
        {}


        contract get_assigned_contract();
        void put_assigned_contract(contract inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_contract_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_contract_assignment : public virtual contract_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_contract_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_contract_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_contract_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_contract_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_contract_assignment"); assert(inst); return inst; }

        //TList may be set_of_contract_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_contract_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_contract_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_contract_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_and_time_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_and_time_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_and_time_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_and_time_assignment")
        {}


        date_and_time get_assigned_date_and_time();
        void put_assigned_date_and_time(date_and_time inst);

        date_time_role get_role();
        void put_role(date_time_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_date_and_time_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_date_and_time_assignment : public virtual date_and_time_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_date_and_time_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_date_and_time_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_date_and_time_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_date_and_time_assignment"); assert(inst); return inst; }

        //TList may be set_of_date_and_time_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_date_and_time_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_date_and_time_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_date_and_time_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_assignment")
        {}


        date get_assigned_date();
        void put_assigned_date(date inst);

        date_role get_role();
        void put_role(date_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_date_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_date_assignment : public virtual date_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_date_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_date_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_date_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_date_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_date_assignment"); assert(inst); return inst; }

        //TList may be set_of_date_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_date_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_date_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_date_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_reference : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_reference")
        {}


        document get_assigned_document();
        void put_assigned_document(document inst);

        label get_source() { label val = NULL; if (sdaiGetAttrBN(m_instance, "source", sdaiSTRING, &val)) return val; else return NULL; }
        void put_source(label value) { sdaiPutAttrBN(m_instance, "source", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_document_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_document_reference : public virtual document_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_document_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_document_reference")
        {}

                /// <summary>
                /// Create new instace of applied_document_reference and returns object of this C++ class to interact with
                /// </summary>
        static applied_document_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_document_reference"); assert(inst); return inst; }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_constraint_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_constraint_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_constraint_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_constraint_assignment")
        {}


        document_usage_constraint get_assigned_document_usage();
        void put_assigned_document_usage(document_usage_constraint inst);

        document_usage_role get_role();
        void put_role(document_usage_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_document_usage_constraint_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_document_usage_constraint_assignment : public virtual document_usage_constraint_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_document_usage_constraint_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_document_usage_constraint_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_document_usage_constraint_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_document_usage_constraint_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_document_usage_constraint_assignment"); assert(inst); return inst; }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_assignment")
        {}


        effectivity get_assigned_effectivity();
        void put_assigned_effectivity(effectivity inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_effectivity_assignment : public virtual effectivity_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_effectivity_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_effectivity_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_effectivity_assignment"); assert(inst); return inst; }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_assignment")
        {}


        event_occurrence get_assigned_event_occurrence();
        void put_assigned_event_occurrence(event_occurrence inst);

        event_occurrence_role get_role();
        void put_role(event_occurrence_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_event_occurrence_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_event_occurrence_assignment : public virtual event_occurrence_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_event_occurrence_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_event_occurrence_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_event_occurrence_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_event_occurrence_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_event_occurrence_assignment"); assert(inst); return inst; }

        //TList may be set_of_event_occurrence_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_event_occurrence_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_event_occurrence_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_event_occurrence_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class identification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "identification_assignment")
        {}


        identifier get_assigned_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "assigned_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_assigned_id(identifier value) { sdaiPutAttrBN(m_instance, "assigned_id", sdaiSTRING, value); }

        identification_role get_role();
        void put_role(identification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_identification_assignment : public virtual identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_identification_assignment")
        {}


        external_source get_source();
        void put_source(external_source inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_external_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_external_identification_assignment : public virtual external_identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_external_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_external_identification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_external_identification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_external_identification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_external_identification_assignment"); assert(inst); return inst; }

        //TList may be set_of_external_identification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_external_identification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_external_identification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_external_identification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group_assignment")
        {}


        group get_assigned_group();
        void put_assigned_group(group inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_group_assignment : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_group_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_group_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_group_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_group_assignment"); assert(inst); return inst; }

        //TList may be set_of_group_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_group_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_group_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_group_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_identification_assignment : public virtual identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_identification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_identification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_identification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_identification_assignment"); assert(inst); return inst; }

        //TList may be set_of_identification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_identification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_identification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_identification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_ineffectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_ineffectivity_assignment : public virtual effectivity_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_ineffectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_ineffectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_ineffectivity_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_ineffectivity_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_ineffectivity_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_ineffectivity_assignment"); assert(inst); return inst; }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of name_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class name_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        name_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "name_assignment")
        {}


        label get_assigned_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "assigned_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_assigned_name(label value) { sdaiPutAttrBN(m_instance, "assigned_name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_name_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_name_assignment : public virtual name_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_name_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_name_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_name_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_name_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_name_assignment"); assert(inst); return inst; }

        //TList may be set_of_name_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_name_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_name_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_name_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_assignment")
        {}


        organization get_assigned_organization();
        void put_assigned_organization(organization inst);

        organization_role get_role();
        void put_role(organization_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_organization_assignment : public virtual organization_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_organization_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_organization_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_organization_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_organization_assignment"); assert(inst); return inst; }

        //TList may be set_of_organization_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_organization_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_organization_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_organization_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_assignment")
        {}


        organizational_project get_assigned_organizational_project();
        void put_assigned_organizational_project(organizational_project inst);

        organizational_project_role get_role();
        void put_role(organizational_project_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_organizational_project_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_organizational_project_assignment : public virtual organizational_project_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_organizational_project_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_organizational_project_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_organizational_project_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_organizational_project_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_organizational_project_assignment"); assert(inst); return inst; }

        //TList may be set_of_organizational_project_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_organizational_project_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_organizational_project_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_organizational_project_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_assignment")
        {}


        person_and_organization get_assigned_person_and_organization();
        void put_assigned_person_and_organization(person_and_organization inst);

        person_and_organization_role get_role();
        void put_role(person_and_organization_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_person_and_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_person_and_organization_assignment : public virtual person_and_organization_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_person_and_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_person_and_organization_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_person_and_organization_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_person_and_organization_assignment"); assert(inst); return inst; }

        //TList may be set_of_person_and_organization_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_person_and_organization_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_person_and_organization_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_person_and_organization_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presented_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presented_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presented_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presented_item")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_presented_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_presented_item : public virtual presented_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_presented_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_presented_item")
        {}

                /// <summary>
                /// Create new instace of applied_presented_item and returns object of this C++ class to interact with
                /// </summary>
        static applied_presented_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_presented_item"); assert(inst); return inst; }

        //TList may be set_of_presented_item_select or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_presented_item_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_presented_item_select or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_presented_item_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification_assignment")
        {}


        security_classification get_assigned_security_classification();
        void put_assigned_security_classification(security_classification inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_security_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_security_classification_assignment : public virtual security_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_security_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_security_classification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_security_classification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_security_classification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_security_classification_assignment"); assert(inst); return inst; }

        //TList may be set_of_security_classification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_security_classification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_security_classification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_security_classification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_assignment")
        {}


        time_interval get_assigned_time_interval();
        void put_assigned_time_interval(time_interval inst);

        time_interval_role get_role();
        void put_role(time_interval_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_time_interval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_time_interval_assignment : public virtual time_interval_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_time_interval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_time_interval_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_time_interval_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_time_interval_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_time_interval_assignment"); assert(inst); return inst; }

        //TList may be set_of_time_interval_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_time_interval_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_time_interval_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_time_interval_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval")
        {}

                /// <summary>
                /// Create new instace of approval and returns object of this C++ class to interact with
                /// </summary>
        static approval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval"); assert(inst); return inst; }

        approval_status get_status();
        void put_status(approval_status inst);

        label get_level() { label val = NULL; if (sdaiGetAttrBN(m_instance, "level", sdaiSTRING, &val)) return val; else return NULL; }
        void put_level(label value) { sdaiPutAttrBN(m_instance, "level", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_date_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_date_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_date_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_date_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_date_time")
        {}

                /// <summary>
                /// Create new instace of approval_date_time and returns object of this C++ class to interact with
                /// </summary>
        static approval_date_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_date_time"); assert(inst); return inst; }

        date_time_select_get get_date_time() { return date_time_select_get(m_instance, "date_time", NULL); }
        date_time_select_put put_date_time() { return date_time_select_put(m_instance, "date_time", NULL); }

        approval get_dated_approval();
        void put_dated_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_person_organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_person_organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_person_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_person_organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_person_organization")
        {}

                /// <summary>
                /// Create new instace of approval_person_organization and returns object of this C++ class to interact with
                /// </summary>
        static approval_person_organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_person_organization"); assert(inst); return inst; }

        person_organization_select_get get_person_organization() { return person_organization_select_get(m_instance, "person_organization", NULL); }
        person_organization_select_put put_person_organization() { return person_organization_select_put(m_instance, "person_organization", NULL); }

        approval get_authorized_approval();
        void put_authorized_approval(approval inst);

        approval_role get_role();
        void put_role(approval_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_relationship")
        {}

                /// <summary>
                /// Create new instace of approval_relationship and returns object of this C++ class to interact with
                /// </summary>
        static approval_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        approval get_relating_approval();
        void put_relating_approval(approval inst);

        approval get_related_approval();
        void put_related_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_role")
        {}

                /// <summary>
                /// Create new instace of approval_role and returns object of this C++ class to interact with
                /// </summary>
        static approval_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_role"); assert(inst); return inst; }

        label get_role() { label val = NULL; if (sdaiGetAttrBN(m_instance, "role", sdaiSTRING, &val)) return val; else return NULL; }
        void put_role(label value) { sdaiPutAttrBN(m_instance, "role", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_status")
        {}

                /// <summary>
                /// Create new instace of approval_status and returns object of this C++ class to interact with
                /// </summary>
        static approval_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_status"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of founded_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class founded_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of founded_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        founded_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "founded_item")
        {}

                /// <summary>
                /// Create new instace of founded_item and returns object of this C++ class to interact with
                /// </summary>
        static founded_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "founded_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approximation_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approximation_tolerance : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approximation_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approximation_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approximation_tolerance")
        {}

                /// <summary>
                /// Create new instace of approximation_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static approximation_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approximation_tolerance"); assert(inst); return inst; }

        tolerance_select_get get_tolerance() { return tolerance_select_get(m_instance, "tolerance", NULL); }
        tolerance_select_put put_tolerance() { return tolerance_select_put(m_instance, "tolerance", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approximation_tolerance_deviation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approximation_tolerance_deviation : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approximation_tolerance_deviation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approximation_tolerance_deviation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approximation_tolerance_deviation")
        {}

                /// <summary>
                /// Create new instace of approximation_tolerance_deviation and returns object of this C++ class to interact with
                /// </summary>
        static approximation_tolerance_deviation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approximation_tolerance_deviation"); assert(inst); return inst; }

        Nullable<approximation_method> get_tessellation_type() { int v = getENUM("tessellation_type", approximation_method_); if (v >= 0) return (approximation_method) v; else return Nullable<approximation_method>(); }
        void put_tessellation_type(approximation_method value) { TextValue val = approximation_method_[(int) value]; sdaiPutAttrBN(m_instance, "tessellation_type", sdaiENUM, val); }

        //TList may be set_of_tolerance_deviation_select or list of converible elements
        template <typename TList> void get_tolerances(TList& lst) { set_of_tolerance_deviation_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "tolerances"); }

        //TList may be set_of_tolerance_deviation_select or list of converible elements
        template <typename TList> void put_tolerances(TList& lst) { set_of_tolerance_deviation_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "tolerances"); }

        Nullable<product_or_presentation_space> get_definition_space() { int v = getENUM("definition_space", product_or_presentation_space_); if (v >= 0) return (product_or_presentation_space) v; else return Nullable<product_or_presentation_space>(); }
        void put_definition_space(product_or_presentation_space value) { TextValue val = product_or_presentation_space_[(int) value]; sdaiPutAttrBN(m_instance, "definition_space", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approximation_tolerance_parameter
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approximation_tolerance_parameter : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approximation_tolerance_parameter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approximation_tolerance_parameter(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approximation_tolerance_parameter")
        {}

                /// <summary>
                /// Create new instace of approximation_tolerance_parameter and returns object of this C++ class to interact with
                /// </summary>
        static approximation_tolerance_parameter Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approximation_tolerance_parameter"); assert(inst); return inst; }

        //TList may be set_of_tolerance_parameter_select or list of converible elements
        template <typename TList> void get_tolerances(TList& lst) { set_of_tolerance_parameter_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "tolerances"); }

        //TList may be set_of_tolerance_parameter_select or list of converible elements
        template <typename TList> void put_tolerances(TList& lst) { set_of_tolerance_parameter_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "tolerances"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_in_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_in_set : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_in_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_in_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_in_set")
        {}

                /// <summary>
                /// Create new instace of area_in_set and returns object of this C++ class to interact with
                /// </summary>
        static area_in_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_in_set"); assert(inst); return inst; }

        presentation_area get_area();
        void put_area(presentation_area inst);

        presentation_set get_in_set();
        void put_in_set(presentation_set inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of area_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static area_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_unit")
        {}

                /// <summary>
                /// Create new instace of derived_unit and returns object of this C++ class to interact with
                /// </summary>
        static derived_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_unit"); assert(inst); return inst; }

        //TList may be set_of_derived_unit_element or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_derived_unit_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_derived_unit_element or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_derived_unit_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }

        //TArrayElem[] may be derived_unit_element[] or array of convertible elements
        template <typename TArrayElem> void put_elements(TArrayElem arr[], size_t n) { set_of_derived_unit_element lst; ArrayToList(arr, n, lst); put_elements(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_unit")
        {}

                /// <summary>
                /// Create new instace of area_unit and returns object of this C++ class to interact with
                /// </summary>
        static area_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of asin_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class asin_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of asin_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        asin_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "asin_function")
        {}

                /// <summary>
                /// Create new instace of asin_function and returns object of this C++ class to interact with
                /// </summary>
        static asin_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "asin_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition get_relating_product_definition();
        void put_relating_product_definition(product_definition inst);

        product_definition get_related_product_definition();
        void put_related_product_definition(product_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_usage : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_usage")
        {}

                /// <summary>
                /// Create new instace of product_definition_usage and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of assembly_component_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class assembly_component_usage : public virtual product_definition_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        assembly_component_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "assembly_component_usage")
        {}

                /// <summary>
                /// Create new instace of assembly_component_usage and returns object of this C++ class to interact with
                /// </summary>
        static assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "assembly_component_usage"); assert(inst); return inst; }

        identifier get_reference_designator() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "reference_designator", sdaiSTRING, &val)) return val; else return NULL; }
        void put_reference_designator(identifier value) { sdaiPutAttrBN(m_instance, "reference_designator", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of assembly_component_usage_substitute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class assembly_component_usage_substitute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of assembly_component_usage_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        assembly_component_usage_substitute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "assembly_component_usage_substitute")
        {}

                /// <summary>
                /// Create new instace of assembly_component_usage_substitute and returns object of this C++ class to interact with
                /// </summary>
        static assembly_component_usage_substitute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "assembly_component_usage_substitute"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_definition() { text val = NULL; if (sdaiGetAttrBN(m_instance, "definition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_definition(text value) { sdaiPutAttrBN(m_instance, "definition", sdaiSTRING, value); }

        assembly_component_usage get_base_();
        void put_base_(assembly_component_usage inst);

        assembly_component_usage get_substitute();
        void put_substitute(assembly_component_usage inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_generic_expression")
        {}


        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void get_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "operands"); }

        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void put_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "operands"); }

        //TArrayElem[] may be generic_expression[] or array of convertible elements
        template <typename TArrayElem> void put_operands(TArrayElem arr[], size_t n) { list_of_generic_expression lst; ArrayToList(arr, n, lst); put_operands(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_numeric_expression : public virtual numeric_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_function_call
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_function_call : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_function_call(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_function_call")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of atan_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class atan_function : public virtual binary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of atan_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        atan_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "atan_function")
        {}

                /// <summary>
                /// Create new instace of atan_function and returns object of this C++ class to interact with
                /// </summary>
        static atan_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "atan_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_classification_assignment")
        {}


        group get_assigned_class();
        void put_assigned_class(group inst);

        label get_attribute_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_name(label value) { sdaiPutAttrBN(m_instance, "attribute_name", sdaiSTRING, value); }

        classification_role get_role();
        void put_role(classification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_language_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_language_assignment : public virtual attribute_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_language_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_language_assignment")
        {}

                /// <summary>
                /// Create new instace of attribute_language_assignment and returns object of this C++ class to interact with
                /// </summary>
        static attribute_language_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "attribute_language_assignment"); assert(inst); return inst; }

        //TList may be set_of_attribute_language_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_attribute_language_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_attribute_language_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_attribute_language_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_value_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_value_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_value_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_value_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_value_assignment")
        {}


        label get_attribute_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_name(label value) { sdaiPutAttrBN(m_instance, "attribute_name", sdaiSTRING, value); }

        attribute_type_get get_attribute_value() { return attribute_type_get(m_instance, "attribute_value", NULL); }
        attribute_type_put put_attribute_value() { return attribute_type_put(m_instance, "attribute_value", NULL); }

        attribute_value_role get_role();
        void put_role(attribute_value_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_value_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_value_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_value_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_value_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_value_role")
        {}

                /// <summary>
                /// Create new instace of attribute_value_role and returns object of this C++ class to interact with
                /// </summary>
        static attribute_value_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "attribute_value_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placement : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placement")
        {}

                /// <summary>
                /// Create new instace of placement and returns object of this C++ class to interact with
                /// </summary>
        static placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placement"); assert(inst); return inst; }

        cartesian_point get_location();
        void put_location(cartesian_point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis1_placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis1_placement : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis1_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis1_placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis1_placement")
        {}

                /// <summary>
                /// Create new instace of axis1_placement and returns object of this C++ class to interact with
                /// </summary>
        static axis1_placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis1_placement"); assert(inst); return inst; }

        direction get_axis();
        void put_axis(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis2_placement_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis2_placement_2d : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis2_placement_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis2_placement_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis2_placement_2d")
        {}

                /// <summary>
                /// Create new instace of axis2_placement_2d and returns object of this C++ class to interact with
                /// </summary>
        static axis2_placement_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis2_placement_2d"); assert(inst); return inst; }

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis2_placement_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis2_placement_3d : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis2_placement_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis2_placement_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis2_placement_3d")
        {}

                /// <summary>
                /// Create new instace of axis2_placement_3d and returns object of this C++ class to interact with
                /// </summary>
        static axis2_placement_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis2_placement_3d"); assert(inst); return inst; }

        direction get_axis();
        void put_axis(direction inst);

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve")
        {}

                /// <summary>
                /// Create new instace of curve and returns object of this C++ class to interact with
                /// </summary>
        static curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_curve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_curve")
        {}

                /// <summary>
                /// Create new instace of bounded_curve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_curve")
        {}

                /// <summary>
                /// Create new instace of b_spline_curve and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_curve"); assert(inst); return inst; }

        Nullable<IntValue> get_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_degree(IntValue value) { sdaiPutAttrBN(m_instance, "degree", sdaiINTEGER, &value); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_control_points_list(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "control_points_list"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_control_points_list(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "control_points_list"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_control_points_list(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_control_points_list(lst); }

        Nullable<b_spline_curve_form> get_curve_form() { int v = getENUM("curve_form", b_spline_curve_form_); if (v >= 0) return (b_spline_curve_form) v; else return Nullable<b_spline_curve_form>(); }
        void put_curve_form(b_spline_curve_form value) { TextValue val = b_spline_curve_form_[(int) value]; sdaiPutAttrBN(m_instance, "curve_form", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_closed_curve() { int v = getENUM("closed_curve", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_closed_curve(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "closed_curve", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_curve_with_knots
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_curve_with_knots : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_curve_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_curve_with_knots(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_curve_with_knots")
        {}

                /// <summary>
                /// Create new instace of b_spline_curve_with_knots and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_curve_with_knots Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_curve_with_knots"); assert(inst); return inst; }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_knot_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "knot_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_knot_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_knot_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_knot_multiplicities(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_knots(lst); }

        Nullable<knot_type> get_knot_spec() { int v = getENUM("knot_spec", knot_type_); if (v >= 0) return (knot_type) v; else return Nullable<knot_type>(); }
        void put_knot_spec(knot_type value) { TextValue val = knot_type_[(int) value]; sdaiPutAttrBN(m_instance, "knot_spec", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface")
        {}

                /// <summary>
                /// Create new instace of surface and returns object of this C++ class to interact with
                /// </summary>
        static surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_surface")
        {}

                /// <summary>
                /// Create new instace of bounded_surface and returns object of this C++ class to interact with
                /// </summary>
        static bounded_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_surface")
        {}

                /// <summary>
                /// Create new instace of b_spline_surface and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_surface"); assert(inst); return inst; }

        Nullable<IntValue> get_u_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "u_degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_u_degree(IntValue value) { sdaiPutAttrBN(m_instance, "u_degree", sdaiINTEGER, &value); }

        Nullable<IntValue> get_v_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "v_degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_v_degree(IntValue value) { sdaiPutAttrBN(m_instance, "v_degree", sdaiINTEGER, &value); }

        //TList may be list_of_list_of_cartesian_point or list of converible elements
        template <typename TList> void get_control_points_list(TList& lst) { list_of_list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "control_points_list"); }

        //TList may be list_of_list_of_cartesian_point or list of converible elements
        template <typename TList> void put_control_points_list(TList& lst) { list_of_list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "control_points_list"); }

        Nullable<b_spline_surface_form> get_surface_form() { int v = getENUM("surface_form", b_spline_surface_form_); if (v >= 0) return (b_spline_surface_form) v; else return Nullable<b_spline_surface_form>(); }
        void put_surface_form(b_spline_surface_form value) { TextValue val = b_spline_surface_form_[(int) value]; sdaiPutAttrBN(m_instance, "surface_form", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_u_closed() { int v = getENUM("u_closed", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_u_closed(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "u_closed", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_v_closed() { int v = getENUM("v_closed", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_v_closed(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "v_closed", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_surface_with_knots
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_surface_with_knots : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_surface_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_surface_with_knots(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_surface_with_knots")
        {}

                /// <summary>
                /// Create new instace of b_spline_surface_with_knots and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_surface_with_knots Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_surface_with_knots"); assert(inst); return inst; }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_u_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "u_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_u_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "u_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_u_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_u_multiplicities(lst); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_v_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "v_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_v_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "v_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_v_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_v_multiplicities(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_u_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "u_knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_u_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "u_knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_u_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_u_knots(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_v_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "v_knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_v_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "v_knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_v_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_v_knots(lst); }

        Nullable<knot_type> get_knot_spec() { int v = getENUM("knot_spec", knot_type_); if (v >= 0) return (knot_type) v; else return Nullable<knot_type>(); }
        void put_knot_spec(knot_type value) { TextValue val = knot_type_[(int) value]; sdaiPutAttrBN(m_instance, "knot_spec", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour")
        {}

                /// <summary>
                /// Create new instace of colour and returns object of this C++ class to interact with
                /// </summary>
        static colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of background_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class background_colour : public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of background_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        background_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "background_colour")
        {}

                /// <summary>
                /// Create new instace of background_colour and returns object of this C++ class to interact with
                /// </summary>
        static background_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "background_colour"); assert(inst); return inst; }

        area_or_view_get get_presentation() { return area_or_view_get(m_instance, "presentation", NULL); }
        area_or_view_put put_presentation() { return area_or_view_put(m_instance, "presentation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characterized_object
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characterized_object : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characterized_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characterized_object(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characterized_object")
        {}

                /// <summary>
                /// Create new instace of characterized_object and returns object of this C++ class to interact with
                /// </summary>
        static characterized_object Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characterized_object"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of feature_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class feature_definition : public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        feature_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "feature_definition")
        {}

                /// <summary>
                /// Create new instace of feature_definition and returns object of this C++ class to interact with
                /// </summary>
        static feature_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "feature_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of barring_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class barring_hole : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of barring_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        barring_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "barring_hole")
        {}

                /// <summary>
                /// Create new instace of barring_hole and returns object of this C++ class to interact with
                /// </summary>
        static barring_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "barring_hole"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bead
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bead : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bead
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bead(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bead")
        {}

                /// <summary>
                /// Create new instace of bead and returns object of this C++ class to interact with
                /// </summary>
        static bead Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bead"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bead_end
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bead_end : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bead_end
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bead_end(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bead_end")
        {}

                /// <summary>
                /// Create new instace of bead_end and returns object of this C++ class to interact with
                /// </summary>
        static bead_end Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bead_end"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bezier_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bezier_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bezier_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bezier_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bezier_curve")
        {}

                /// <summary>
                /// Create new instace of bezier_curve and returns object of this C++ class to interact with
                /// </summary>
        static bezier_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bezier_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bezier_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bezier_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bezier_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bezier_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bezier_surface")
        {}

                /// <summary>
                /// Create new instace of bezier_surface and returns object of this C++ class to interact with
                /// </summary>
        static bezier_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bezier_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_boolean_expression : public virtual boolean_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of block
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class block : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        block(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "block")
        {}

                /// <summary>
                /// Create new instace of block and returns object of this C++ class to interact with
                /// </summary>
        static block Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "block"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);

        Nullable<positive_length_measure> get_x() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "x", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_x(positive_length_measure value) { sdaiPutAttrBN(m_instance, "x", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_y() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "y", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_y(positive_length_measure value) { sdaiPutAttrBN(m_instance, "y", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_z() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "z", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_z(positive_length_measure value) { sdaiPutAttrBN(m_instance, "z", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class defined_function : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_defined_function : public virtual defined_function, public virtual boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_generic_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_boolean_expression : public virtual boolean_expression, public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_literal : public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_literal")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_literal : public virtual simple_boolean_expression, public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_literal")
        {}

                /// <summary>
                /// Create new instace of boolean_literal and returns object of this C++ class to interact with
                /// </summary>
        static boolean_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_literal"); assert(inst); return inst; }

        Nullable<bool> get_the_value() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "the_value", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_the_value(bool value) { sdaiPutAttrBN(m_instance, "the_value", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_result
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_result : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_result(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_result")
        {}

                /// <summary>
                /// Create new instace of boolean_result and returns object of this C++ class to interact with
                /// </summary>
        static boolean_result Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_result"); assert(inst); return inst; }

        Nullable<boolean_operator> get_operator_() { int v = getENUM("operator_", boolean_operator_); if (v >= 0) return (boolean_operator) v; else return Nullable<boolean_operator>(); }
        void put_operator_(boolean_operator value) { TextValue val = boolean_operator_[(int) value]; sdaiPutAttrBN(m_instance, "operator_", sdaiENUM, val); }

        boolean_operand_get get_first_operand() { return boolean_operand_get(m_instance, "first_operand", NULL); }
        boolean_operand_put put_first_operand() { return boolean_operand_put(m_instance, "first_operand", NULL); }

        boolean_operand_get get_second_operand() { return boolean_operand_get(m_instance, "second_operand", NULL); }
        boolean_operand_put put_second_operand() { return boolean_operand_put(m_instance, "second_operand", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_variable : public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_variable")
        {}


        environment get_interpretation();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class variable : public virtual generic_variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "variable")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_variable : public virtual simple_boolean_expression, public virtual variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_variable")
        {}

                /// <summary>
                /// Create new instace of boolean_variable and returns object of this C++ class to interact with
                /// </summary>
        static boolean_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boss
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boss : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boss
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boss(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boss")
        {}

                /// <summary>
                /// Create new instace of boss and returns object of this C++ class to interact with
                /// </summary>
        static boss Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boss"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boss_top
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boss_top : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boss_top
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boss_top(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boss_top")
        {}

                /// <summary>
                /// Create new instace of boss_top and returns object of this C++ class to interact with
                /// </summary>
        static boss_top Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boss_top"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve")
        {}

                /// <summary>
                /// Create new instace of composite_curve and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve"); assert(inst); return inst; }

        //TList may be list_of_composite_curve_segment or list of converible elements
        template <typename TList> void get_segments(TList& lst) { list_of_composite_curve_segmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segments"); }

        //TList may be list_of_composite_curve_segment or list of converible elements
        template <typename TList> void put_segments(TList& lst) { list_of_composite_curve_segmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segments"); }

        //TArrayElem[] may be composite_curve_segment[] or array of convertible elements
        template <typename TArrayElem> void put_segments(TArrayElem arr[], size_t n) { list_of_composite_curve_segment lst; ArrayToList(arr, n, lst); put_segments(lst); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve_on_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve_on_surface : public virtual composite_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve_on_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve_on_surface")
        {}

                /// <summary>
                /// Create new instace of composite_curve_on_surface and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve_on_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve_on_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boundary_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boundary_curve : public virtual composite_curve_on_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boundary_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boundary_curve")
        {}

                /// <summary>
                /// Create new instace of boundary_curve and returns object of this C++ class to interact with
                /// </summary>
        static boundary_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boundary_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pcurve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pcurve")
        {}

                /// <summary>
                /// Create new instace of pcurve and returns object of this C++ class to interact with
                /// </summary>
        static pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pcurve"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        definitional_representation get_reference_to_curve();
        void put_reference_to_curve(definitional_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_pcurve : public virtual pcurve, public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_pcurve")
        {}

                /// <summary>
                /// Create new instace of bounded_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_pcurve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_curve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_curve")
        {}

                /// <summary>
                /// Create new instace of surface_curve and returns object of this C++ class to interact with
                /// </summary>
        static surface_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_curve"); assert(inst); return inst; }

        curve get_curve_3d();
        void put_curve_3d(curve inst);

        //TList may be list_of_pcurve_or_surface or list of converible elements
        template <typename TList> void get_associated_geometry(TList& lst) { list_of_pcurve_or_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_geometry"); }

        //TList may be list_of_pcurve_or_surface or list of converible elements
        template <typename TList> void put_associated_geometry(TList& lst) { list_of_pcurve_or_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_geometry"); }

        Nullable<preferred_surface_curve_representation> get_master_representation() { int v = getENUM("master_representation", preferred_surface_curve_representation_); if (v >= 0) return (preferred_surface_curve_representation) v; else return Nullable<preferred_surface_curve_representation>(); }
        void put_master_representation(preferred_surface_curve_representation value) { TextValue val = preferred_surface_curve_representation_[(int) value]; sdaiPutAttrBN(m_instance, "master_representation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_surface_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_surface_curve : public virtual surface_curve, public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_surface_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_surface_curve")
        {}

                /// <summary>
                /// Create new instace of bounded_surface_curve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_surface_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_surface_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of box_domain
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class box_domain : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of box_domain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        box_domain(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "box_domain")
        {}

                /// <summary>
                /// Create new instace of box_domain and returns object of this C++ class to interact with
                /// </summary>
        static box_domain Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "box_domain"); assert(inst); return inst; }

        cartesian_point get_corner();
        void put_corner(cartesian_point inst);

        Nullable<positive_length_measure> get_xlength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "xlength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_xlength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "xlength", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_ylength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "ylength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_ylength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "ylength", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_zlength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "zlength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_zlength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "zlength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of half_space_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class half_space_solid : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of half_space_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        half_space_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "half_space_solid")
        {}

                /// <summary>
                /// Create new instace of half_space_solid and returns object of this C++ class to interact with
                /// </summary>
        static half_space_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "half_space_solid"); assert(inst); return inst; }

        surface get_base_surface();
        void put_base_surface(surface inst);

        Nullable<bool> get_agreement_flag() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "agreement_flag", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_agreement_flag(bool value) { sdaiPutAttrBN(m_instance, "agreement_flag", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boxed_half_space
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boxed_half_space : public virtual half_space_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boxed_half_space
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boxed_half_space(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boxed_half_space")
        {}

                /// <summary>
                /// Create new instace of boxed_half_space and returns object of this C++ class to interact with
                /// </summary>
        static boxed_half_space Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boxed_half_space"); assert(inst); return inst; }

        box_domain get_enclosure();
        void put_enclosure(box_domain inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_model")
        {}

                /// <summary>
                /// Create new instace of solid_model and returns object of this C++ class to interact with
                /// </summary>
        static solid_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_model"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_solid_brep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_solid_brep : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_solid_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_solid_brep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_solid_brep")
        {}

                /// <summary>
                /// Create new instace of manifold_solid_brep and returns object of this C++ class to interact with
                /// </summary>
        static manifold_solid_brep Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_solid_brep"); assert(inst); return inst; }

        closed_shell get_outer();
        void put_outer(closed_shell inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of brep_with_voids
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class brep_with_voids : public virtual manifold_solid_brep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of brep_with_voids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        brep_with_voids(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "brep_with_voids")
        {}

                /// <summary>
                /// Create new instace of brep_with_voids and returns object of this C++ class to interact with
                /// </summary>
        static brep_with_voids Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "brep_with_voids"); assert(inst); return inst; }

        //TList may be set_of_oriented_closed_shell or list of converible elements
        template <typename TList> void get_voids(TList& lst) { set_of_oriented_closed_shellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "voids"); }

        //TList may be set_of_oriented_closed_shell or list of converible elements
        template <typename TList> void put_voids(TList& lst) { set_of_oriented_closed_shellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "voids"); }

        //TArrayElem[] may be oriented_closed_shell[] or array of convertible elements
        template <typename TArrayElem> void put_voids(TArrayElem arr[], size_t n) { set_of_oriented_closed_shell lst; ArrayToList(arr, n, lst); put_voids(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date")
        {}

                /// <summary>
                /// Create new instace of date and returns object of this C++ class to interact with
                /// </summary>
        static date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date"); assert(inst); return inst; }

        Nullable<year_number> get_year_component() { year_number val = (year_number) 0; if (sdaiGetAttrBN(m_instance, "year_component", sdaiINTEGER, &val)) return val; else return Nullable<year_number>(); }
        void put_year_component(year_number value) { sdaiPutAttrBN(m_instance, "year_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of calendar_date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class calendar_date : public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of calendar_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        calendar_date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "calendar_date")
        {}

                /// <summary>
                /// Create new instace of calendar_date and returns object of this C++ class to interact with
                /// </summary>
        static calendar_date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "calendar_date"); assert(inst); return inst; }

        Nullable<day_in_month_number> get_day_component() { day_in_month_number val = (day_in_month_number) 0; if (sdaiGetAttrBN(m_instance, "day_component", sdaiINTEGER, &val)) return val; else return Nullable<day_in_month_number>(); }
        void put_day_component(day_in_month_number value) { sdaiPutAttrBN(m_instance, "day_component", sdaiINTEGER, &value); }

        Nullable<month_in_year_number> get_month_component() { month_in_year_number val = (month_in_year_number) 0; if (sdaiGetAttrBN(m_instance, "month_component", sdaiINTEGER, &val)) return val; else return Nullable<month_in_year_number>(); }
        void put_month_component(month_in_year_number value) { sdaiPutAttrBN(m_instance, "month_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_image
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_image : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_image
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_image(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_image")
        {}

                /// <summary>
                /// Create new instace of camera_image and returns object of this C++ class to interact with
                /// </summary>
        static camera_image Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_image"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_image_2d_with_scale
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_image_2d_with_scale : public virtual camera_image
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_image_2d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_image_2d_with_scale(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_image_2d_with_scale")
        {}

                /// <summary>
                /// Create new instace of camera_image_2d_with_scale and returns object of this C++ class to interact with
                /// </summary>
        static camera_image_2d_with_scale Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_image_2d_with_scale"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_image_3d_with_scale
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_image_3d_with_scale : public virtual camera_image
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_image_3d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_image_3d_with_scale(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_image_3d_with_scale")
        {}

                /// <summary>
                /// Create new instace of camera_image_3d_with_scale and returns object of this C++ class to interact with
                /// </summary>
        static camera_image_3d_with_scale Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_image_3d_with_scale"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d2
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d2 : public virtual camera_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d2
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d2(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d2")
        {}

                /// <summary>
                /// Create new instace of camera_model_d2 and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d2 Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d2"); assert(inst); return inst; }

        planar_box get_view_window();
        void put_view_window(planar_box inst);

        Nullable<bool> get_view_window_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "view_window_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_view_window_clipping(bool value) { sdaiPutAttrBN(m_instance, "view_window_clipping", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3 : public virtual camera_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3 and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3 Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3"); assert(inst); return inst; }

        axis2_placement_3d get_view_reference_system();
        void put_view_reference_system(axis2_placement_3d inst);

        view_volume get_perspective_of_volume();
        void put_perspective_of_volume(view_volume inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3_with_hlhsr
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3_with_hlhsr : public virtual camera_model_d3
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3_with_hlhsr
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3_with_hlhsr(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3_with_hlhsr")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3_with_hlhsr and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3_with_hlhsr Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3_with_hlhsr"); assert(inst); return inst; }

        Nullable<bool> get_hidden_line_surface_removal() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "hidden_line_surface_removal", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_hidden_line_surface_removal(bool value) { sdaiPutAttrBN(m_instance, "hidden_line_surface_removal", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_map
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_map : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_map(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_map")
        {}

                /// <summary>
                /// Create new instace of representation_map and returns object of this C++ class to interact with
                /// </summary>
        static representation_map Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_map"); assert(inst); return inst; }

        representation_item get_mapping_origin();
        void put_mapping_origin(representation_item inst);

        representation get_mapped_representation();
        void put_mapped_representation(representation inst);

        //TList may be set_of_mapped_item or list of converible elements
        template <typename TList> void get_map_usage(TList& lst) { set_of_mapped_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "map_usage"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_usage : public virtual representation_map
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_usage")
        {}

                /// <summary>
                /// Create new instace of camera_usage and returns object of this C++ class to interact with
                /// </summary>
        static camera_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point")
        {}

                /// <summary>
                /// Create new instace of point and returns object of this C++ class to interact with
                /// </summary>
        static point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_point : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_point")
        {}

                /// <summary>
                /// Create new instace of cartesian_point and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_point"); assert(inst); return inst; }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void get_coordinates(TList& lst) { list_of_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "coordinates"); }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void put_coordinates(TList& lst) { list_of_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "coordinates"); }

        //TArrayElem[] may be length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_coordinates(TArrayElem arr[], size_t n) { list_of_length_measure lst; ArrayToList(arr, n, lst); put_coordinates(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of functionally_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class functionally_defined_transformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of functionally_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        functionally_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "functionally_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of functionally_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static functionally_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "functionally_defined_transformation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator : public virtual geometric_representation_item, public virtual functionally_defined_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator"); assert(inst); return inst; }

        direction get_axis1();
        void put_axis1(direction inst);

        direction get_axis2();
        void put_axis2(direction inst);

        cartesian_point get_local_origin();
        void put_local_origin(cartesian_point inst);

        Nullable<double> get_scale() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "scale", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_scale(double value) { sdaiPutAttrBN(m_instance, "scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator_2d : public virtual cartesian_transformation_operator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator_2d")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator_2d and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator_2d"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator_3d : public virtual cartesian_transformation_operator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator_3d")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator_3d and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator_3d"); assert(inst); return inst; }

        direction get_axis3();
        void put_axis3(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of celsius_temperature_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class celsius_temperature_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of celsius_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        celsius_temperature_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "celsius_temperature_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of celsius_temperature_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static celsius_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "celsius_temperature_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of centre_of_symmetry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class centre_of_symmetry : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of centre_of_symmetry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        centre_of_symmetry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "centre_of_symmetry")
        {}

                /// <summary>
                /// Create new instace of centre_of_symmetry and returns object of this C++ class to interact with
                /// </summary>
        static centre_of_symmetry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "centre_of_symmetry"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification")
        {}

                /// <summary>
                /// Create new instace of certification and returns object of this C++ class to interact with
                /// </summary>
        static certification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "certification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        certification_type get_kind();
        void put_kind(certification_type inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification_type")
        {}

                /// <summary>
                /// Create new instace of certification_type and returns object of this C++ class to interact with
                /// </summary>
        static certification_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "certification_type"); assert(inst); return inst; }

        label get_description() { label val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(label value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of transition_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class transition_feature : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of transition_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        transition_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "transition_feature")
        {}

                /// <summary>
                /// Create new instace of transition_feature and returns object of this C++ class to interact with
                /// </summary>
        static transition_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "transition_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of chamfer
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class chamfer : public virtual transition_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        chamfer(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "chamfer")
        {}

                /// <summary>
                /// Create new instace of chamfer and returns object of this C++ class to interact with
                /// </summary>
        static chamfer Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "chamfer"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of chamfer_offset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class chamfer_offset : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of chamfer_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        chamfer_offset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "chamfer_offset")
        {}

                /// <summary>
                /// Create new instace of chamfer_offset and returns object of this C++ class to interact with
                /// </summary>
        static chamfer_offset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "chamfer_offset"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_representation")
        {}

                /// <summary>
                /// Create new instace of symbol_representation and returns object of this C++ class to interact with
                /// </summary>
        static symbol_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_character_glyph_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_character_glyph_symbol : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_character_glyph_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_character_glyph_symbol")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_symbol : public virtual generic_character_glyph_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_symbol")
        {}

                /// <summary>
                /// Create new instace of character_glyph_symbol and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_symbol"); assert(inst); return inst; }

        planar_extent get_character_box();
        void put_character_box(planar_extent inst);

        Nullable<ratio_measure> get_baseline_ratio() { ratio_measure val = (ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "baseline_ratio", sdaiREAL, &val)) return val; else return Nullable<ratio_measure>(); }
        void put_baseline_ratio(ratio_measure value) { sdaiPutAttrBN(m_instance, "baseline_ratio", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group")
        {}

                /// <summary>
                /// Create new instace of group and returns object of this C++ class to interact with
                /// </summary>
        static group Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "group"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_ : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_")
        {}

                /// <summary>
                /// Create new instace of class_ and returns object of this C++ class to interact with
                /// </summary>
        static class_ Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characterized_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characterized_class : public virtual characterized_object, public virtual class_
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characterized_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characterized_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characterized_class")
        {}

                /// <summary>
                /// Create new instace of characterized_class and returns object of this C++ class to interact with
                /// </summary>
        static characterized_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characterized_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conic : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conic")
        {}

                /// <summary>
                /// Create new instace of conic and returns object of this C++ class to interact with
                /// </summary>
        static conic Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conic"); assert(inst); return inst; }

        axis2_placement_get get_position() { return axis2_placement_get(m_instance, "position", NULL); }
        axis2_placement_put put_position() { return axis2_placement_put(m_instance, "position", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circle : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circle")
        {}

                /// <summary>
                /// Create new instace of circle and returns object of this C++ class to interact with
                /// </summary>
        static circle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circle"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circular_closed_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circular_closed_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circular_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circular_closed_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circular_closed_profile")
        {}

                /// <summary>
                /// Create new instace of circular_closed_profile and returns object of this C++ class to interact with
                /// </summary>
        static circular_closed_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circular_closed_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of replicate_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class replicate_feature : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of replicate_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        replicate_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "replicate_feature")
        {}

                /// <summary>
                /// Create new instace of replicate_feature and returns object of this C++ class to interact with
                /// </summary>
        static replicate_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "replicate_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circular_pattern : public virtual replicate_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circular_pattern")
        {}

                /// <summary>
                /// Create new instace of circular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static circular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circular_pattern"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circular_runout_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circular_runout_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circular_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circular_runout_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circular_runout_tolerance")
        {}

                /// <summary>
                /// Create new instace of circular_runout_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static circular_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circular_runout_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_system
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_system : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_system(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_system")
        {}

                /// <summary>
                /// Create new instace of class_system and returns object of this C++ class to interact with
                /// </summary>
        static class_system Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_system"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_context_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_context_assignment")
        {}


        effectivity_assignment get_assigned_effectivity_assignment();
        void put_assigned_effectivity_assignment(effectivity_assignment inst);

        effectivity_context_role get_role();
        void put_role(effectivity_context_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_usage_effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_usage_effectivity_context_assignment : public virtual effectivity_context_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_usage_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_usage_effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_usage_effectivity_context_assignment")
        {}

                /// <summary>
                /// Create new instace of class_usage_effectivity_context_assignment and returns object of this C++ class to interact with
                /// </summary>
        static class_usage_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_usage_effectivity_context_assignment"); assert(inst); return inst; }

        //TList may be set_of_class_usage_effectivity_context_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_class_usage_effectivity_context_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_class_usage_effectivity_context_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_class_usage_effectivity_context_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of classification_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class classification_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of classification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        classification_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "classification_role")
        {}

                /// <summary>
                /// Create new instace of classification_role and returns object of this C++ class to interact with
                /// </summary>
        static classification_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "classification_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of closed_path_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class closed_path_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of closed_path_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        closed_path_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "closed_path_profile")
        {}

                /// <summary>
                /// Create new instace of closed_path_profile and returns object of this C++ class to interact with
                /// </summary>
        static closed_path_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "closed_path_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_face_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_face_set : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_face_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_face_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_face_set")
        {}

                /// <summary>
                /// Create new instace of connected_face_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_face_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_face_set"); assert(inst); return inst; }

        //TList may be set_of_face or list of converible elements
        template <typename TList> void get_cfs_faces(TList& lst) { set_of_faceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "cfs_faces"); }

        //TList may be set_of_face or list of converible elements
        template <typename TList> void put_cfs_faces(TList& lst) { set_of_faceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "cfs_faces"); }

        //TArrayElem[] may be face[] or array of convertible elements
        template <typename TArrayElem> void put_cfs_faces(TArrayElem arr[], size_t n) { set_of_face lst; ArrayToList(arr, n, lst); put_cfs_faces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of closed_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class closed_shell : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        closed_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "closed_shell")
        {}

                /// <summary>
                /// Create new instace of closed_shell and returns object of this C++ class to interact with
                /// </summary>
        static closed_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "closed_shell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of coaxiality_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class coaxiality_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of coaxiality_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        coaxiality_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "coaxiality_tolerance")
        {}

                /// <summary>
                /// Create new instace of coaxiality_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static coaxiality_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "coaxiality_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour_specification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour_specification : public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour_specification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour_specification")
        {}

                /// <summary>
                /// Create new instace of colour_specification and returns object of this C++ class to interact with
                /// </summary>
        static colour_specification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour_specification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour_rgb
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour_rgb : public virtual colour_specification
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour_rgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour_rgb(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour_rgb")
        {}

                /// <summary>
                /// Create new instace of colour_rgb and returns object of this C++ class to interact with
                /// </summary>
        static colour_rgb Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour_rgb"); assert(inst); return inst; }

        Nullable<double> get_red() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "red", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_red(double value) { sdaiPutAttrBN(m_instance, "red", sdaiREAL, &value); }

        Nullable<double> get_green() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "green", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_green(double value) { sdaiPutAttrBN(m_instance, "green", sdaiREAL, &value); }

        Nullable<double> get_blue() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "blue", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_blue(double value) { sdaiPutAttrBN(m_instance, "blue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of composite_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static composite_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_component_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "component_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum")
        {}

                /// <summary>
                /// Create new instace of datum and returns object of this C++ class to interact with
                /// </summary>
        static datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum"); assert(inst); return inst; }

        identifier get_identification() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "identification", sdaiSTRING, &val)) return val; else return NULL; }
        void put_identification(identifier value) { sdaiPutAttrBN(m_instance, "identification", sdaiSTRING, value); }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_established_by_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "established_by_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of common_datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class common_datum : public virtual composite_shape_aspect, public virtual datum
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of common_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        common_datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "common_datum")
        {}

                /// <summary>
                /// Create new instace of common_datum and returns object of this C++ class to interact with
                /// </summary>
        static common_datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "common_datum"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_expression : public virtual boolean_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_equal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_equal : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_equal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_equal")
        {}

                /// <summary>
                /// Create new instace of comparison_equal and returns object of this C++ class to interact with
                /// </summary>
        static comparison_equal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_equal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_greater
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_greater : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_greater
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_greater(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_greater")
        {}

                /// <summary>
                /// Create new instace of comparison_greater and returns object of this C++ class to interact with
                /// </summary>
        static comparison_greater Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_greater"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_greater_equal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_greater_equal : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_greater_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_greater_equal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_greater_equal")
        {}

                /// <summary>
                /// Create new instace of comparison_greater_equal and returns object of this C++ class to interact with
                /// </summary>
        static comparison_greater_equal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_greater_equal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_less
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_less : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_less
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_less(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_less")
        {}

                /// <summary>
                /// Create new instace of comparison_less and returns object of this C++ class to interact with
                /// </summary>
        static comparison_less Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_less"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_less_equal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_less_equal : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_less_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_less_equal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_less_equal")
        {}

                /// <summary>
                /// Create new instace of comparison_less_equal and returns object of this C++ class to interact with
                /// </summary>
        static comparison_less_equal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_less_equal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_not_equal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_not_equal : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_not_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_not_equal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_not_equal")
        {}

                /// <summary>
                /// Create new instace of comparison_not_equal and returns object of this C++ class to interact with
                /// </summary>
        static comparison_not_equal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "comparison_not_equal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve_segment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve_segment : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve_segment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve_segment")
        {}

                /// <summary>
                /// Create new instace of composite_curve_segment and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve_segment"); assert(inst); return inst; }

        Nullable<transition_code> get_transition() { int v = getENUM("transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "transition", sdaiENUM, val); }

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }

        curve get_parent_curve();
        void put_parent_curve(curve inst);

        //TList may be bag_of_composite_curve or list of converible elements
        template <typename TList> void get_using_curves(TList& lst) { bag_of_composite_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "using_curves"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of compound_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class compound_feature : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of compound_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        compound_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "compound_feature")
        {}

                /// <summary>
                /// Create new instace of compound_feature and returns object of this C++ class to interact with
                /// </summary>
        static compound_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "compound_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_hole : public virtual compound_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_hole")
        {}

                /// <summary>
                /// Create new instace of composite_hole and returns object of this C++ class to interact with
                /// </summary>
        static composite_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_hole"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text")
        {}

                /// <summary>
                /// Create new instace of composite_text and returns object of this C++ class to interact with
                /// </summary>
        static composite_text Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text"); assert(inst); return inst; }

        //TList may be set_of_text_or_character or list of converible elements
        template <typename TList> void get_collected_text(TList& lst) { set_of_text_or_characterSerializer<TList> sr; sr.FromAttr(lst, m_instance, "collected_text"); }

        //TList may be set_of_text_or_character or list of converible elements
        template <typename TList> void put_collected_text(TList& lst) { set_of_text_or_characterSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "collected_text"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_associated_curves
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_associated_curves : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_associated_curves(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_associated_curves")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_associated_curves and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_associated_curves"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_curves"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_curves"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_associated_curves(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_associated_curves(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_blanking_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_blanking_box : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_blanking_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_blanking_box")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_blanking_box and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_blanking_box"); assert(inst); return inst; }

        planar_box get_blanking();
        void put_blanking(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_extent : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_extent")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_extent and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_extent"); assert(inst); return inst; }

        planar_extent get_extent();
        void put_extent(planar_extent inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of compound_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class compound_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of compound_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        compound_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "compound_representation_item")
        {}

                /// <summary>
                /// Create new instace of compound_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static compound_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "compound_representation_item"); assert(inst); return inst; }

        compound_item_definition_get get_item_element() { return compound_item_definition_get(m_instance, "item_element", NULL); }
        compound_item_definition_put put_item_element() { return compound_item_definition_put(m_instance, "item_element", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of compound_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class compound_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of compound_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        compound_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "compound_shape_representation")
        {}

                /// <summary>
                /// Create new instace of compound_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static compound_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "compound_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of string_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class string_expression : public virtual expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of string_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        string_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "string_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concat_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concat_expression : public virtual string_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concat_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concat_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concat_expression")
        {}

                /// <summary>
                /// Create new instace of concat_expression and returns object of this C++ class to interact with
                /// </summary>
        static concat_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concat_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concentricity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concentricity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concentricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concentricity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concentricity_tolerance")
        {}

                /// <summary>
                /// Create new instace of concentricity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static concentricity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concentricity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_operator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_operator : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_operator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_operator")
        {}

                /// <summary>
                /// Create new instace of concept_feature_operator and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_operator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_operator"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_relationship")
        {}

                /// <summary>
                /// Create new instace of concept_feature_relationship and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept_feature get_relating_product_concept_feature();
        void put_relating_product_concept_feature(product_concept_feature inst);

        product_concept_feature get_related_product_concept_feature();
        void put_related_product_concept_feature(product_concept_feature inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_relationship_with_condition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_relationship_with_condition : public virtual concept_feature_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_relationship_with_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_relationship_with_condition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_relationship_with_condition")
        {}

                /// <summary>
                /// Create new instace of concept_feature_relationship_with_condition and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_relationship_with_condition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_relationship_with_condition"); assert(inst); return inst; }

        concept_feature_operator get_conditional_operator();
        void put_conditional_operator(concept_feature_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conditional_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conditional_concept_feature : public virtual product_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conditional_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conditional_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conditional_concept_feature")
        {}

                /// <summary>
                /// Create new instace of conditional_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static conditional_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conditional_concept_feature"); assert(inst); return inst; }

        concept_feature_relationship_with_condition get_condition();
        void put_condition(concept_feature_relationship_with_condition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_item")
        {}

                /// <summary>
                /// Create new instace of configuration_item and returns object of this C++ class to interact with
                /// </summary>
        static configuration_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_item"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_item_concept();
        void put_item_concept(product_concept inst);

        label get_purpose() { label val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(label value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configurable_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configurable_item : public virtual configuration_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configurable_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configurable_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configurable_item")
        {}

                /// <summary>
                /// Create new instace of configurable_item and returns object of this C++ class to interact with
                /// </summary>
        static configurable_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configurable_item"); assert(inst); return inst; }

        //TList may be set_of_product_concept_feature_association or list of converible elements
        template <typename TList> void get_item_concept_feature(TList& lst) { set_of_product_concept_feature_associationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "item_concept_feature"); }

        //TList may be set_of_product_concept_feature_association or list of converible elements
        template <typename TList> void put_item_concept_feature(TList& lst) { set_of_product_concept_feature_associationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        //TArrayElem[] may be product_concept_feature_association[] or array of convertible elements
        template <typename TArrayElem> void put_item_concept_feature(TArrayElem arr[], size_t n) { set_of_product_concept_feature_association lst; ArrayToList(arr, n, lst); put_item_concept_feature(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_definition")
        {}

                /// <summary>
                /// Create new instace of configuration_definition and returns object of this C++ class to interact with
                /// </summary>
        static configuration_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_definition"); assert(inst); return inst; }

        //TList may be set_of_pair_value or list of converible elements
        template <typename TList> void get_pair_values(TList& lst) { set_of_pair_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "pair_values"); }

        //TList may be set_of_pair_value or list of converible elements
        template <typename TList> void put_pair_values(TList& lst) { set_of_pair_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "pair_values"); }

        //TArrayElem[] may be pair_value[] or array of convertible elements
        template <typename TArrayElem> void put_pair_values(TArrayElem arr[], size_t n) { set_of_pair_value lst; ArrayToList(arr, n, lst); put_pair_values(lst); }

        motion_parameter_measure_get get_t_parameter() { return motion_parameter_measure_get(m_instance, "t_parameter", NULL); }
        motion_parameter_measure_put put_t_parameter() { return motion_parameter_measure_put(m_instance, "t_parameter", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_design
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_design : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_design
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_design(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_design")
        {}

                /// <summary>
                /// Create new instace of configuration_design and returns object of this C++ class to interact with
                /// </summary>
        static configuration_design Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_design"); assert(inst); return inst; }

        configuration_item get_configuration();
        void put_configuration(configuration_item inst);

        configuration_design_item_get get_design() { return configuration_design_item_get(m_instance, "design", NULL); }
        configuration_design_item_put put_design() { return configuration_design_item_put(m_instance, "design", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity")
        {}

                /// <summary>
                /// Create new instace of effectivity and returns object of this C++ class to interact with
                /// </summary>
        static effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_effectivity")
        {}

                /// <summary>
                /// Create new instace of product_definition_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_effectivity"); assert(inst); return inst; }

        product_definition_relationship get_usage();
        void put_usage(product_definition_relationship inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_effectivity : public virtual product_definition_effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_effectivity")
        {}

                /// <summary>
                /// Create new instace of configuration_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static configuration_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_effectivity"); assert(inst); return inst; }

        configuration_design get_configuration();
        void put_configuration(configuration_design inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_interpolation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_interpolation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_interpolation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_interpolation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_interpolation")
        {}

                /// <summary>
                /// Create new instace of configuration_interpolation and returns object of this C++ class to interact with
                /// </summary>
        static configuration_interpolation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_interpolation"); assert(inst); return inst; }

        configuration_definition get_previous_configuration_definition();
        void put_previous_configuration_definition(configuration_definition inst);

        configuration_definition get_next_configuration_definition();
        void put_next_configuration_definition(configuration_definition inst);

        Nullable<interpolation_type> get_interpolation() { int v = getENUM("interpolation", interpolation_type_); if (v >= 0) return (interpolation_type) v; else return Nullable<interpolation_type>(); }
        void put_interpolation(interpolation_type value) { TextValue val = interpolation_type_[(int) value]; sdaiPutAttrBN(m_instance, "interpolation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configured_effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configured_effectivity_assignment : public virtual effectivity_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configured_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configured_effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configured_effectivity_assignment")
        {}

                /// <summary>
                /// Create new instace of configured_effectivity_assignment and returns object of this C++ class to interact with
                /// </summary>
        static configured_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configured_effectivity_assignment"); assert(inst); return inst; }

        //TList may be set_of_configured_effectivity_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_configured_effectivity_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_configured_effectivity_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_configured_effectivity_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configured_effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configured_effectivity_context_assignment : public virtual effectivity_context_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configured_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configured_effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configured_effectivity_context_assignment")
        {}

                /// <summary>
                /// Create new instace of configured_effectivity_context_assignment and returns object of this C++ class to interact with
                /// </summary>
        static configured_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configured_effectivity_context_assignment"); assert(inst); return inst; }

        //TList may be set_of_configured_effectivity_context_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_configured_effectivity_context_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_configured_effectivity_context_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_configured_effectivity_context_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of elementary_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class elementary_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of elementary_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        elementary_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "elementary_surface")
        {}

                /// <summary>
                /// Create new instace of elementary_surface and returns object of this C++ class to interact with
                /// </summary>
        static elementary_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "elementary_surface"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conical_surface")
        {}

                /// <summary>
                /// Create new instace of conical_surface and returns object of this C++ class to interact with
                /// </summary>
        static conical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conical_surface"); assert(inst); return inst; }

        Nullable<length_measure> get_radius() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius(length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_semi_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_semi_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "semi_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_edge_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_edge_set : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_edge_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_edge_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_edge_set")
        {}

                /// <summary>
                /// Create new instace of connected_edge_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_edge_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_edge_set"); assert(inst); return inst; }

        //TList may be set_of_edge or list of converible elements
        template <typename TList> void get_ces_edges(TList& lst) { set_of_edgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ces_edges"); }

        //TList may be set_of_edge or list of converible elements
        template <typename TList> void put_ces_edges(TList& lst) { set_of_edgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ces_edges"); }

        //TArrayElem[] may be edge[] or array of convertible elements
        template <typename TArrayElem> void put_ces_edges(TArrayElem arr[], size_t n) { set_of_edge lst; ArrayToList(arr, n, lst); put_ces_edges(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_face_sub_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_face_sub_set : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_face_sub_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_face_sub_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_face_sub_set")
        {}

                /// <summary>
                /// Create new instace of connected_face_sub_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_face_sub_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_face_sub_set"); assert(inst); return inst; }

        connected_face_set get_parent_face_set();
        void put_parent_face_set(connected_face_set inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of constructive_geometry_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class constructive_geometry_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of constructive_geometry_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        constructive_geometry_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "constructive_geometry_representation")
        {}

                /// <summary>
                /// Create new instace of constructive_geometry_representation and returns object of this C++ class to interact with
                /// </summary>
        static constructive_geometry_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "constructive_geometry_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_relationship")
        {}

                /// <summary>
                /// Create new instace of representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        representation get_rep_1();
        void put_rep_1(representation inst);

        representation get_rep_2();
        void put_rep_2(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of constructive_geometry_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class constructive_geometry_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of constructive_geometry_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        constructive_geometry_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "constructive_geometry_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of constructive_geometry_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static constructive_geometry_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "constructive_geometry_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contact_ratio_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contact_ratio_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contact_ratio_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contact_ratio_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contact_ratio_representation")
        {}

                /// <summary>
                /// Create new instace of contact_ratio_representation and returns object of this C++ class to interact with
                /// </summary>
        static contact_ratio_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contact_ratio_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of invisibility
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class invisibility : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        invisibility(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "invisibility")
        {}

                /// <summary>
                /// Create new instace of invisibility and returns object of this C++ class to interact with
                /// </summary>
        static invisibility Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "invisibility"); assert(inst); return inst; }

        //TList may be set_of_invisible_item or list of converible elements
        template <typename TList> void get_invisible_items(TList& lst) { set_of_invisible_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "invisible_items"); }

        //TList may be set_of_invisible_item or list of converible elements
        template <typename TList> void put_invisible_items(TList& lst) { set_of_invisible_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "invisible_items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_invisibility
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_invisibility : public virtual invisibility
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_invisibility(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_invisibility")
        {}

                /// <summary>
                /// Create new instace of context_dependent_invisibility and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_invisibility Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_invisibility"); assert(inst); return inst; }

        invisibility_context_get get_presentation_context() { return invisibility_context_get(m_instance, "presentation_context", NULL); }
        invisibility_context_put put_presentation_context() { return invisibility_context_put(m_instance, "presentation_context", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class over_riding_styled_item : public virtual styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "over_riding_styled_item"); assert(inst); return inst; }

        styled_item get_over_ridden_style();
        void put_over_ridden_style(styled_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_over_riding_styled_item : public virtual over_riding_styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of context_dependent_over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_over_riding_styled_item"); assert(inst); return inst; }

        //TList may be list_of_style_context_select or list of converible elements
        template <typename TList> void get_style_context(TList& lst) { list_of_style_context_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "style_context"); }

        //TList may be list_of_style_context_select or list of converible elements
        template <typename TList> void put_style_context(TList& lst) { list_of_style_context_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "style_context"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_shape_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_shape_representation")
        {}

                /// <summary>
                /// Create new instace of context_dependent_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_shape_representation"); assert(inst); return inst; }

        shape_representation_relationship get_representation_relation();
        void put_representation_relation(shape_representation_relationship inst);

        product_definition_shape get_represented_product_relation();
        void put_represented_product_relation(product_definition_shape inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_unit")
        {}

                /// <summary>
                /// Create new instace of context_dependent_unit and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract")
        {}

                /// <summary>
                /// Create new instace of contract and returns object of this C++ class to interact with
                /// </summary>
        static contract Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contract"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        contract_type get_kind();
        void put_kind(contract_type inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract_type")
        {}

                /// <summary>
                /// Create new instace of contract_type and returns object of this C++ class to interact with
                /// </summary>
        static contract_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contract_type"); assert(inst); return inst; }

        label get_description() { label val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(label value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conversion_based_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conversion_based_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conversion_based_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conversion_based_unit")
        {}

                /// <summary>
                /// Create new instace of conversion_based_unit and returns object of this C++ class to interact with
                /// </summary>
        static conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conversion_based_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        measure_with_unit get_conversion_factor();
        void put_conversion_factor(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of coordinated_universal_time_offset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class coordinated_universal_time_offset : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of coordinated_universal_time_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        coordinated_universal_time_offset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "coordinated_universal_time_offset")
        {}

                /// <summary>
                /// Create new instace of coordinated_universal_time_offset and returns object of this C++ class to interact with
                /// </summary>
        static coordinated_universal_time_offset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "coordinated_universal_time_offset"); assert(inst); return inst; }

        Nullable<IntValue> get_hour_offset() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "hour_offset", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_hour_offset(IntValue value) { sdaiPutAttrBN(m_instance, "hour_offset", sdaiINTEGER, &value); }

        Nullable<IntValue> get_minute_offset() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "minute_offset", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_minute_offset(IntValue value) { sdaiPutAttrBN(m_instance, "minute_offset", sdaiINTEGER, &value); }

        Nullable<ahead_or_behind> get_sense() { int v = getENUM("sense", ahead_or_behind_); if (v >= 0) return (ahead_or_behind) v; else return Nullable<ahead_or_behind>(); }
        void put_sense(ahead_or_behind value) { TextValue val = ahead_or_behind_[(int) value]; sdaiPutAttrBN(m_instance, "sense", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cos_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cos_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cos_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cos_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cos_function")
        {}

                /// <summary>
                /// Create new instace of cos_function and returns object of this C++ class to interact with
                /// </summary>
        static cos_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cos_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of csg_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class csg_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of csg_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        csg_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "csg_shape_representation")
        {}

                /// <summary>
                /// Create new instace of csg_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static csg_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "csg_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of csg_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class csg_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of csg_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        csg_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "csg_solid")
        {}

                /// <summary>
                /// Create new instace of csg_solid and returns object of this C++ class to interact with
                /// </summary>
        static csg_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "csg_solid"); assert(inst); return inst; }

        csg_select_get get_tree_root_expression() { return csg_select_get(m_instance, "tree_root_expression", NULL); }
        csg_select_put put_tree_root_expression() { return csg_select_put(m_instance, "tree_root_expression", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_bounded_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_bounded_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_bounded_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_bounded_surface")
        {}

                /// <summary>
                /// Create new instace of curve_bounded_surface and returns object of this C++ class to interact with
                /// </summary>
        static curve_bounded_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_bounded_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        //TList may be set_of_boundary_curve or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_boundary_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_boundary_curve or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_boundary_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be boundary_curve[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_boundary_curve lst; ArrayToList(arr, n, lst); put_boundaries(lst); }

        Nullable<bool> get_implicit_outer() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "implicit_outer", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_implicit_outer(bool value) { sdaiPutAttrBN(m_instance, "implicit_outer", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_dimension")
        {}

                /// <summary>
                /// Create new instace of curve_dimension and returns object of this C++ class to interact with
                /// </summary>
        static curve_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_replica : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_replica")
        {}

                /// <summary>
                /// Create new instace of curve_replica and returns object of this C++ class to interact with
                /// </summary>
        static curve_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_replica"); assert(inst); return inst; }

        curve get_parent_curve();
        void put_parent_curve(curve inst);

        cartesian_transformation_operator get_transformation();
        void put_transformation(cartesian_transformation_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style")
        {}

                /// <summary>
                /// Create new instace of curve_style and returns object of this C++ class to interact with
                /// </summary>
        static curve_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        curve_font_or_scaled_curve_font_select_get get_curve_font() { return curve_font_or_scaled_curve_font_select_get(m_instance, "curve_font", NULL); }
        curve_font_or_scaled_curve_font_select_put put_curve_font() { return curve_font_or_scaled_curve_font_select_put(m_instance, "curve_font", NULL); }

        size_select_get get_curve_width() { return size_select_get(m_instance, "curve_width", NULL); }
        size_select_put put_curve_width() { return size_select_put(m_instance, "curve_width", NULL); }

        colour get_curve_colour();
        void put_curve_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_font : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_font")
        {}

                /// <summary>
                /// Create new instace of curve_style_font and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_font"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be list_of_curve_style_font_pattern or list of converible elements
        template <typename TList> void get_pattern_list(TList& lst) { list_of_curve_style_font_patternSerializer<TList> sr; sr.FromAttr(lst, m_instance, "pattern_list"); }

        //TList may be list_of_curve_style_font_pattern or list of converible elements
        template <typename TList> void put_pattern_list(TList& lst) { list_of_curve_style_font_patternSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "pattern_list"); }

        //TArrayElem[] may be curve_style_font_pattern[] or array of convertible elements
        template <typename TArrayElem> void put_pattern_list(TArrayElem arr[], size_t n) { list_of_curve_style_font_pattern lst; ArrayToList(arr, n, lst); put_pattern_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_font_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_font_pattern : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_font_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_font_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_font_pattern")
        {}

                /// <summary>
                /// Create new instace of curve_style_font_pattern and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_font_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_font_pattern"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_visible_segment_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "visible_segment_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_visible_segment_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "visible_segment_length", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_invisible_segment_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "invisible_segment_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_invisible_segment_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "invisible_segment_length", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_rendering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_rendering : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_rendering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_rendering")
        {}

                /// <summary>
                /// Create new instace of curve_style_rendering and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_rendering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_rendering"); assert(inst); return inst; }

        Nullable<shading_curve_method> get_rendering_method() { int v = getENUM("rendering_method", shading_curve_method_); if (v >= 0) return (shading_curve_method) v; else return Nullable<shading_curve_method>(); }
        void put_rendering_method(shading_curve_method value) { TextValue val = shading_curve_method_[(int) value]; sdaiPutAttrBN(m_instance, "rendering_method", sdaiENUM, val); }

        surface_rendering_properties get_rendering_properties();
        void put_rendering_properties(surface_rendering_properties inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_swept_solid_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_swept_solid_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_swept_solid_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_swept_solid_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_swept_solid_shape_representation")
        {}

                /// <summary>
                /// Create new instace of curve_swept_solid_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static curve_swept_solid_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_swept_solid_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of item_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class item_defined_transformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of item_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        item_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "item_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of item_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static item_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "item_defined_transformation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        representation_item get_transform_item_1();
        void put_transform_item_1(representation_item inst);

        representation_item get_transform_item_2();
        void put_transform_item_2(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_pair : public virtual item_defined_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_pair")
        {}

                /// <summary>
                /// Create new instace of kinematic_pair and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_pair"); assert(inst); return inst; }

        kinematic_joint get_joint();
        void put_joint(kinematic_joint inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindrical_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindrical_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindrical_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindrical_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindrical_pair")
        {}

                /// <summary>
                /// Create new instace of cylindrical_pair and returns object of this C++ class to interact with
                /// </summary>
        static cylindrical_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindrical_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_pair_range : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_pair_range")
        {}

                /// <summary>
                /// Create new instace of simple_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static simple_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "simple_pair_range"); assert(inst); return inst; }

        kinematic_pair get_applies_to_pair();
        void put_applies_to_pair(kinematic_pair inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindrical_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindrical_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindrical_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindrical_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindrical_pair_range")
        {}

                /// <summary>
                /// Create new instace of cylindrical_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static cylindrical_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindrical_pair_range"); assert(inst); return inst; }

        translational_range_measure_get get_lower_limit_actual_translation() { return translational_range_measure_get(m_instance, "lower_limit_actual_translation", NULL); }
        translational_range_measure_put put_lower_limit_actual_translation() { return translational_range_measure_put(m_instance, "lower_limit_actual_translation", NULL); }

        translational_range_measure_get get_upper_limit_actual_translation() { return translational_range_measure_get(m_instance, "upper_limit_actual_translation", NULL); }
        translational_range_measure_put put_upper_limit_actual_translation() { return translational_range_measure_put(m_instance, "upper_limit_actual_translation", NULL); }

        rotational_range_measure_get get_lower_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pair_value : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pair_value")
        {}

                /// <summary>
                /// Create new instace of pair_value and returns object of this C++ class to interact with
                /// </summary>
        static pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pair_value"); assert(inst); return inst; }

        kinematic_pair get_applies_to_pair();
        void put_applies_to_pair(kinematic_pair inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindrical_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindrical_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindrical_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindrical_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindrical_pair_value")
        {}

                /// <summary>
                /// Create new instace of cylindrical_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static cylindrical_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindrical_pair_value"); assert(inst); return inst; }

        Nullable<length_measure> get_actual_translation() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_translation", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_actual_translation(length_measure value) { sdaiPutAttrBN(m_instance, "actual_translation", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindrical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindrical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindrical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindrical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindrical_surface")
        {}

                /// <summary>
                /// Create new instace of cylindrical_surface and returns object of this C++ class to interact with
                /// </summary>
        static cylindrical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindrical_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindricity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindricity_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindricity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindricity_tolerance")
        {}

                /// <summary>
                /// Create new instace of cylindricity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static cylindricity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindricity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of data_environment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class data_environment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of data_environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        data_environment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "data_environment")
        {}

                /// <summary>
                /// Create new instace of data_environment and returns object of this C++ class to interact with
                /// </summary>
        static data_environment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "data_environment"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_property_definition_representation or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_property_definition_representationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_property_definition_representation or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_property_definition_representationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }

        //TArrayElem[] may be property_definition_representation[] or array of convertible elements
        template <typename TArrayElem> void put_elements(TArrayElem arr[], size_t n) { set_of_property_definition_representation lst; ArrayToList(arr, n, lst); put_elements(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_and_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_and_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_and_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_and_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_and_time")
        {}

                /// <summary>
                /// Create new instace of date_and_time and returns object of this C++ class to interact with
                /// </summary>
        static date_and_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_and_time"); assert(inst); return inst; }

        date get_date_component();
        void put_date_component(date inst);

        local_time get_time_component();
        void put_time_component(local_time inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_role")
        {}

                /// <summary>
                /// Create new instace of date_role and returns object of this C++ class to interact with
                /// </summary>
        static date_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_time_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_time_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_time_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_time_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_time_role")
        {}

                /// <summary>
                /// Create new instace of date_time_role and returns object of this C++ class to interact with
                /// </summary>
        static date_time_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_time_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dated_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dated_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dated_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dated_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dated_effectivity")
        {}

                /// <summary>
                /// Create new instace of dated_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static dated_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dated_effectivity"); assert(inst); return inst; }

        date_time_or_event_occurrence_get get_effectivity_end_date() { return date_time_or_event_occurrence_get(m_instance, "effectivity_end_date", NULL); }
        date_time_or_event_occurrence_put put_effectivity_end_date() { return date_time_or_event_occurrence_put(m_instance, "effectivity_end_date", NULL); }

        date_time_or_event_occurrence_get get_effectivity_start_date() { return date_time_or_event_occurrence_get(m_instance, "effectivity_start_date", NULL); }
        date_time_or_event_occurrence_put put_effectivity_start_date() { return date_time_or_event_occurrence_put(m_instance, "effectivity_start_date", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_feature : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_feature")
        {}

                /// <summary>
                /// Create new instace of datum_feature and returns object of this C++ class to interact with
                /// </summary>
        static datum_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_feature"); assert(inst); return inst; }

        shape_aspect_relationship get_feature_basis_relationship();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_feature_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_feature_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_feature_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_feature_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_feature_callout")
        {}

                /// <summary>
                /// Create new instace of datum_feature_callout and returns object of this C++ class to interact with
                /// </summary>
        static datum_feature_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_feature_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_reference : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_reference")
        {}

                /// <summary>
                /// Create new instace of datum_reference and returns object of this C++ class to interact with
                /// </summary>
        static datum_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_reference"); assert(inst); return inst; }

        Nullable<IntValue> get_precedence() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "precedence", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_precedence(IntValue value) { sdaiPutAttrBN(m_instance, "precedence", sdaiINTEGER, &value); }

        datum get_referenced_datum();
        void put_referenced_datum(datum inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_target
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_target : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_target(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_target")
        {}

                /// <summary>
                /// Create new instace of datum_target and returns object of this C++ class to interact with
                /// </summary>
        static datum_target Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_target"); assert(inst); return inst; }

        identifier get_target_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "target_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_target_id(identifier value) { sdaiPutAttrBN(m_instance, "target_id", sdaiSTRING, value); }

        shape_aspect_relationship get_target_basis_relationship();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_target_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_target_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_target_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_target_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_target_callout")
        {}

                /// <summary>
                /// Create new instace of datum_target_callout and returns object of this C++ class to interact with
                /// </summary>
        static datum_target_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_target_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of default_tolerance_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class default_tolerance_table : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of default_tolerance_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        default_tolerance_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "default_tolerance_table")
        {}

                /// <summary>
                /// Create new instace of default_tolerance_table and returns object of this C++ class to interact with
                /// </summary>
        static default_tolerance_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "default_tolerance_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of default_tolerance_table_cell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class default_tolerance_table_cell : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of default_tolerance_table_cell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        default_tolerance_table_cell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "default_tolerance_table_cell")
        {}

                /// <summary>
                /// Create new instace of default_tolerance_table_cell and returns object of this C++ class to interact with
                /// </summary>
        static default_tolerance_table_cell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "default_tolerance_table_cell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of defined_character_glyph
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class defined_character_glyph : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of defined_character_glyph
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        defined_character_glyph(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "defined_character_glyph")
        {}

                /// <summary>
                /// Create new instace of defined_character_glyph and returns object of this C++ class to interact with
                /// </summary>
        static defined_character_glyph Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "defined_character_glyph"); assert(inst); return inst; }

        defined_glyph_select_get get_definition() { return defined_glyph_select_get(m_instance, "definition", NULL); }
        defined_glyph_select_put put_definition() { return defined_glyph_select_put(m_instance, "definition", NULL); }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class defined_symbol : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "defined_symbol")
        {}

                /// <summary>
                /// Create new instace of defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "defined_symbol"); assert(inst); return inst; }

        defined_symbol_select_get get_definition() { return defined_symbol_select_get(m_instance, "definition", NULL); }
        defined_symbol_select_put put_definition() { return defined_symbol_select_put(m_instance, "definition", NULL); }

        symbol_target get_target();
        void put_target(symbol_target inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of definitional_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class definitional_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of definitional_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        definitional_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "definitional_representation")
        {}

                /// <summary>
                /// Create new instace of definitional_representation and returns object of this C++ class to interact with
                /// </summary>
        static definitional_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "definitional_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of degenerate_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class degenerate_pcurve : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        degenerate_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "degenerate_pcurve")
        {}

                /// <summary>
                /// Create new instace of degenerate_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "degenerate_pcurve"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        definitional_representation get_reference_to_curve();
        void put_reference_to_curve(definitional_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of toroidal_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class toroidal_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        toroidal_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "toroidal_surface")
        {}

                /// <summary>
                /// Create new instace of toroidal_surface and returns object of this C++ class to interact with
                /// </summary>
        static toroidal_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "toroidal_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_major_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "major_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_major_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "major_radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_minor_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "minor_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_minor_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "minor_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of degenerate_toroidal_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class degenerate_toroidal_surface : public virtual toroidal_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of degenerate_toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        degenerate_toroidal_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "degenerate_toroidal_surface")
        {}

                /// <summary>
                /// Create new instace of degenerate_toroidal_surface and returns object of this C++ class to interact with
                /// </summary>
        static degenerate_toroidal_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "degenerate_toroidal_surface"); assert(inst); return inst; }

        Nullable<bool> get_select_outer() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "select_outer", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_select_outer(bool value) { sdaiPutAttrBN(m_instance, "select_outer", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_unit_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_unit_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_unit_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_unit_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_unit_element")
        {}

                /// <summary>
                /// Create new instace of derived_unit_element and returns object of this C++ class to interact with
                /// </summary>
        static derived_unit_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_unit_element"); assert(inst); return inst; }

        named_unit get_unit();
        void put_unit(named_unit inst);

        Nullable<double> get_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_exponent(double value) { sdaiPutAttrBN(m_instance, "exponent", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of variable_semantics
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class variable_semantics : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of variable_semantics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        variable_semantics(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "variable_semantics")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_unit_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_unit_variable : public virtual derived_unit, public virtual variable_semantics
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_unit_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_unit_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_unit_variable")
        {}

                /// <summary>
                /// Create new instace of derived_unit_variable and returns object of this C++ class to interact with
                /// </summary>
        static derived_unit_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_unit_variable"); assert(inst); return inst; }

        environment get_associated_variable_environment();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of description_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class description_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of description_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        description_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "description_attribute")
        {}

                /// <summary>
                /// Create new instace of description_attribute and returns object of this C++ class to interact with
                /// </summary>
        static description_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "description_attribute"); assert(inst); return inst; }

        text get_attribute_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(text value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        description_attribute_select_get get_described_item() { return description_attribute_select_get(m_instance, "described_item", NULL); }
        description_attribute_select_put put_described_item() { return description_attribute_select_put(m_instance, "described_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of descriptive_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class descriptive_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of descriptive_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        descriptive_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "descriptive_representation_item")
        {}

                /// <summary>
                /// Create new instace of descriptive_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static descriptive_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "descriptive_representation_item"); assert(inst); return inst; }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of diameter_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class diameter_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of diameter_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        diameter_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "diameter_dimension")
        {}

                /// <summary>
                /// Create new instace of diameter_dimension and returns object of this C++ class to interact with
                /// </summary>
        static diameter_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "diameter_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout")
        {}

                /// <summary>
                /// Create new instace of dimension_callout and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_callout_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_callout_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_callout_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_callout_relationship")
        {}

                /// <summary>
                /// Create new instace of draughting_callout_relationship and returns object of this C++ class to interact with
                /// </summary>
        static draughting_callout_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_callout_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        draughting_callout get_relating_draughting_callout();
        void put_relating_draughting_callout(draughting_callout inst);

        draughting_callout get_related_draughting_callout();
        void put_related_draughting_callout(draughting_callout inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout_component_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout_component_relationship : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout_component_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout_component_relationship")
        {}

                /// <summary>
                /// Create new instace of dimension_callout_component_relationship and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout_component_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout_component_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout_relationship : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout_relationship")
        {}

                /// <summary>
                /// Create new instace of dimension_callout_relationship and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve")
        {}

                /// <summary>
                /// Create new instace of dimension_curve and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class terminator_symbol : public virtual annotation_symbol_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "terminator_symbol"); assert(inst); return inst; }

        annotation_curve_occurrence get_annotated_curve();
        void put_annotated_curve(annotation_curve_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve_terminator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve_terminator : public virtual terminator_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve_terminator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve_terminator")
        {}

                /// <summary>
                /// Create new instace of dimension_curve_terminator and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve_terminator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve_terminator"); assert(inst); return inst; }

        Nullable<dimension_extent_usage> get_role() { int v = getENUM("role", dimension_extent_usage_); if (v >= 0) return (dimension_extent_usage) v; else return Nullable<dimension_extent_usage>(); }
        void put_role(dimension_extent_usage value) { TextValue val = dimension_extent_usage_[(int) value]; sdaiPutAttrBN(m_instance, "role", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_pair : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_pair")
        {}

                /// <summary>
                /// Create new instace of dimension_pair and returns object of this C++ class to interact with
                /// </summary>
        static dimension_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_related_tolerance_zone_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_related_tolerance_zone_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_related_tolerance_zone_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_related_tolerance_zone_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_related_tolerance_zone_element")
        {}

                /// <summary>
                /// Create new instace of dimension_related_tolerance_zone_element and returns object of this C++ class to interact with
                /// </summary>
        static dimension_related_tolerance_zone_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_related_tolerance_zone_element"); assert(inst); return inst; }

        dimensional_location get_related_dimension();
        void put_related_dimension(dimensional_location inst);

        tolerance_zone_definition get_related_element();
        void put_related_element(tolerance_zone_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal")
        {}

                /// <summary>
                /// Create new instace of text_literal and returns object of this C++ class to interact with
                /// </summary>
        static text_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal"); assert(inst); return inst; }

        presentable_text get_literal() { presentable_text val = NULL; if (sdaiGetAttrBN(m_instance, "literal", sdaiSTRING, &val)) return val; else return NULL; }
        void put_literal(presentable_text value) { sdaiPutAttrBN(m_instance, "literal", sdaiSTRING, value); }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }

        text_alignment get_alignment() { text_alignment val = NULL; if (sdaiGetAttrBN(m_instance, "alignment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_alignment(text_alignment value) { sdaiPutAttrBN(m_instance, "alignment", sdaiSTRING, value); }

        Nullable<text_path> get_path() { int v = getENUM("path", text_path_); if (v >= 0) return (text_path) v; else return Nullable<text_path>(); }
        void put_path(text_path value) { TextValue val = text_path_[(int) value]; sdaiPutAttrBN(m_instance, "path", sdaiENUM, val); }

        font_select_get get_font() { return font_select_get(m_instance, "font", NULL); }
        font_select_put put_font() { return font_select_put(m_instance, "font", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_text_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_text_associativity : public virtual text_literal, public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_text_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_text_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_text_associativity")
        {}

                /// <summary>
                /// Create new instace of dimension_text_associativity and returns object of this C++ class to interact with
                /// </summary>
        static dimension_text_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_text_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_characteristic_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_characteristic_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_characteristic_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_characteristic_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_characteristic_representation")
        {}

                /// <summary>
                /// Create new instace of dimensional_characteristic_representation and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_characteristic_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_characteristic_representation"); assert(inst); return inst; }

        dimensional_characteristic_get get_dimension() { return dimensional_characteristic_get(m_instance, "dimension", NULL); }
        dimensional_characteristic_put put_dimension() { return dimensional_characteristic_put(m_instance, "dimension", NULL); }

        shape_dimension_representation get_representation();
        void put_representation(shape_dimension_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_exponents
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_exponents : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_exponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_exponents(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_exponents")
        {}

                /// <summary>
                /// Create new instace of dimensional_exponents and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_exponents Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_exponents"); assert(inst); return inst; }

        Nullable<double> get_length_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "length_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_length_exponent(double value) { sdaiPutAttrBN(m_instance, "length_exponent", sdaiREAL, &value); }

        Nullable<double> get_mass_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "mass_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_mass_exponent(double value) { sdaiPutAttrBN(m_instance, "mass_exponent", sdaiREAL, &value); }

        Nullable<double> get_time_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "time_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_time_exponent(double value) { sdaiPutAttrBN(m_instance, "time_exponent", sdaiREAL, &value); }

        Nullable<double> get_electric_current_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "electric_current_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_electric_current_exponent(double value) { sdaiPutAttrBN(m_instance, "electric_current_exponent", sdaiREAL, &value); }

        Nullable<double> get_thermodynamic_temperature_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "thermodynamic_temperature_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_thermodynamic_temperature_exponent(double value) { sdaiPutAttrBN(m_instance, "thermodynamic_temperature_exponent", sdaiREAL, &value); }

        Nullable<double> get_amount_of_substance_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "amount_of_substance_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_amount_of_substance_exponent(double value) { sdaiPutAttrBN(m_instance, "amount_of_substance_exponent", sdaiREAL, &value); }

        Nullable<double> get_luminous_intensity_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "luminous_intensity_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_luminous_intensity_exponent(double value) { sdaiPutAttrBN(m_instance, "luminous_intensity_exponent", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_location_with_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_location_with_path : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_location_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_location_with_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_location_with_path")
        {}

                /// <summary>
                /// Create new instace of dimensional_location_with_path and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_location_with_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_location_with_path"); assert(inst); return inst; }

        shape_aspect get_path();
        void put_path(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_size_with_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_size_with_path : public virtual dimensional_size
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_size_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_size_with_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_size_with_path")
        {}

                /// <summary>
                /// Create new instace of dimensional_size_with_path and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_size_with_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_size_with_path"); assert(inst); return inst; }

        shape_aspect get_path();
        void put_path(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of executed_action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class executed_action : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of executed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        executed_action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "executed_action")
        {}

                /// <summary>
                /// Create new instace of executed_action and returns object of this C++ class to interact with
                /// </summary>
        static executed_action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "executed_action"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of directed_action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class directed_action : public virtual executed_action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of directed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        directed_action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "directed_action")
        {}

                /// <summary>
                /// Create new instace of directed_action and returns object of this C++ class to interact with
                /// </summary>
        static directed_action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "directed_action"); assert(inst); return inst; }

        action_directive get_directive();
        void put_directive(action_directive inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of directed_angle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class directed_angle : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of directed_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        directed_angle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "directed_angle")
        {}

                /// <summary>
                /// Create new instace of directed_angle and returns object of this C++ class to interact with
                /// </summary>
        static directed_angle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "directed_angle"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of directed_dimensional_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class directed_dimensional_location : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of directed_dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        directed_dimensional_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "directed_dimensional_location")
        {}

                /// <summary>
                /// Create new instace of directed_dimensional_location and returns object of this C++ class to interact with
                /// </summary>
        static directed_dimensional_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "directed_dimensional_location"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of direction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class direction : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        direction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "direction")
        {}

                /// <summary>
                /// Create new instace of direction and returns object of this C++ class to interact with
                /// </summary>
        static direction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "direction"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_direction_ratios(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "direction_ratios"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_direction_ratios(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "direction_ratios"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_direction_ratios(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_direction_ratios(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of direction_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class direction_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of direction_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        direction_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "direction_shape_representation")
        {}

                /// <summary>
                /// Create new instace of direction_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static direction_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "direction_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of div_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class div_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of div_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        div_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "div_expression")
        {}

                /// <summary>
                /// Create new instace of div_expression and returns object of this C++ class to interact with
                /// </summary>
        static div_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "div_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document")
        {}

                /// <summary>
                /// Create new instace of document and returns object of this C++ class to interact with
                /// </summary>
        static document Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document_type get_kind();
        void put_kind(document_type inst);

        //TList may be set_of_document_representation_type or list of converible elements
        template <typename TList> void get_representation_types(TList& lst) { set_of_document_representation_typeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "representation_types"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_file
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_file : public virtual document, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_file(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_file")
        {}

                /// <summary>
                /// Create new instace of document_file and returns object of this C++ class to interact with
                /// </summary>
        static document_file Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_file"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_product_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_product_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_product_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_product_association")
        {}

                /// <summary>
                /// Create new instace of document_product_association and returns object of this C++ class to interact with
                /// </summary>
        static document_product_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_product_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document get_relating_document();
        void put_relating_document(document inst);

        product_or_formation_or_definition_get get_related_product() { return product_or_formation_or_definition_get(m_instance, "related_product", NULL); }
        product_or_formation_or_definition_put put_related_product() { return product_or_formation_or_definition_put(m_instance, "related_product", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_product_equivalence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_product_equivalence : public virtual document_product_association
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_product_equivalence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_product_equivalence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_product_equivalence")
        {}

                /// <summary>
                /// Create new instace of document_product_equivalence and returns object of this C++ class to interact with
                /// </summary>
        static document_product_equivalence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_product_equivalence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_relationship")
        {}

                /// <summary>
                /// Create new instace of document_relationship and returns object of this C++ class to interact with
                /// </summary>
        static document_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document get_relating_document();
        void put_relating_document(document inst);

        document get_related_document();
        void put_related_document(document inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_representation_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_representation_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_representation_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_representation_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_representation_type")
        {}

                /// <summary>
                /// Create new instace of document_representation_type and returns object of this C++ class to interact with
                /// </summary>
        static document_representation_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_representation_type"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        document get_represented_document();
        void put_represented_document(document inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_type")
        {}

                /// <summary>
                /// Create new instace of document_type and returns object of this C++ class to interact with
                /// </summary>
        static document_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_type"); assert(inst); return inst; }

        label get_product_data_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "product_data_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_product_data_type(label value) { sdaiPutAttrBN(m_instance, "product_data_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_constraint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_constraint : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_constraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_constraint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_constraint")
        {}

                /// <summary>
                /// Create new instace of document_usage_constraint and returns object of this C++ class to interact with
                /// </summary>
        static document_usage_constraint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_usage_constraint"); assert(inst); return inst; }

        document get_source();
        void put_source(document inst);

        label get_subject_element() { label val = NULL; if (sdaiGetAttrBN(m_instance, "subject_element", sdaiSTRING, &val)) return val; else return NULL; }
        void put_subject_element(label value) { sdaiPutAttrBN(m_instance, "subject_element", sdaiSTRING, value); }

        text get_subject_element_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "subject_element_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_subject_element_value(text value) { sdaiPutAttrBN(m_instance, "subject_element_value", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_role")
        {}

                /// <summary>
                /// Create new instace of document_usage_role and returns object of this C++ class to interact with
                /// </summary>
        static document_usage_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_usage_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_annotation_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_annotation_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_annotation_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_annotation_occurrence")
        {}

                /// <summary>
                /// Create new instace of draughting_annotation_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static draughting_annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_annotation_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_elements : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_elements")
        {}

                /// <summary>
                /// Create new instace of draughting_elements and returns object of this C++ class to interact with
                /// </summary>
        static draughting_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_elements"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_model : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_model")
        {}

                /// <summary>
                /// Create new instace of draughting_model and returns object of this C++ class to interact with
                /// </summary>
        static draughting_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_model"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of item_identified_representation_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class item_identified_representation_usage : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of item_identified_representation_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        item_identified_representation_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "item_identified_representation_usage")
        {}

                /// <summary>
                /// Create new instace of item_identified_representation_usage and returns object of this C++ class to interact with
                /// </summary>
        static item_identified_representation_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "item_identified_representation_usage"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        represented_definition_get get_definition() { return represented_definition_get(m_instance, "definition", NULL); }
        represented_definition_put put_definition() { return represented_definition_put(m_instance, "definition", NULL); }

        representation get_used_representation();
        void put_used_representation(representation inst);

        representation_item get_identified_item();
        void put_identified_item(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_model_item_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_model_item_association : public virtual item_identified_representation_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_model_item_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_model_item_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_model_item_association")
        {}

                /// <summary>
                /// Create new instace of draughting_model_item_association and returns object of this C++ class to interact with
                /// </summary>
        static draughting_model_item_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_model_item_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_item")
        {}

                /// <summary>
                /// Create new instace of pre_defined_item and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_item"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_colour : public virtual pre_defined_item, public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_colour")
        {}

                /// <summary>
                /// Create new instace of pre_defined_colour and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_colour : public virtual pre_defined_colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_colour")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_colour and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_curve_font : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of pre_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_curve_font : public virtual pre_defined_curve_font
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_text_font : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of pre_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_text_font : public virtual pre_defined_text_font
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_specification_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_specification_reference : public virtual document_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_specification_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_specification_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_specification_reference")
        {}

                /// <summary>
                /// Create new instace of draughting_specification_reference and returns object of this C++ class to interact with
                /// </summary>
        static draughting_specification_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_specification_reference"); assert(inst); return inst; }

        //TList may be set_of_specified_item or list of converible elements
        template <typename TList> void get_specified_items(TList& lst) { set_of_specified_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "specified_items"); }

        //TList may be set_of_specified_item or list of converible elements
        template <typename TList> void put_specified_items(TList& lst) { set_of_specified_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "specified_items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_subfigure_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_subfigure_representation : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_subfigure_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_subfigure_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_subfigure_representation")
        {}

                /// <summary>
                /// Create new instace of draughting_subfigure_representation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_subfigure_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_subfigure_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_symbol_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_symbol_representation : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_symbol_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_symbol_representation")
        {}

                /// <summary>
                /// Create new instace of draughting_symbol_representation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_symbol_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_symbol_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_delineation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_delineation : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_delineation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_delineation")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_delineation and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_delineation"); assert(inst); return inst; }

        text_delineation get_delineation() { text_delineation val = NULL; if (sdaiGetAttrBN(m_instance, "delineation", sdaiSTRING, &val)) return val; else return NULL; }
        void put_delineation(text_delineation value) { sdaiPutAttrBN(m_instance, "delineation", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_text_literal_with_delineation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_text_literal_with_delineation : public virtual text_literal_with_delineation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_text_literal_with_delineation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_text_literal_with_delineation")
        {}

                /// <summary>
                /// Create new instace of draughting_text_literal_with_delineation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_text_literal_with_delineation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_title
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_title : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_title
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_title(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_title")
        {}

                /// <summary>
                /// Create new instace of draughting_title and returns object of this C++ class to interact with
                /// </summary>
        static draughting_title Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_title"); assert(inst); return inst; }

        //TList may be set_of_draughting_titled_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_draughting_titled_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_draughting_titled_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_draughting_titled_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        label get_language() { label val = NULL; if (sdaiGetAttrBN(m_instance, "language", sdaiSTRING, &val)) return val; else return NULL; }
        void put_language(label value) { sdaiPutAttrBN(m_instance, "language", sdaiSTRING, value); }

        text get_contents() { text val = NULL; if (sdaiGetAttrBN(m_instance, "contents", sdaiSTRING, &val)) return val; else return NULL; }
        void put_contents(text value) { sdaiPutAttrBN(m_instance, "contents", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_definition")
        {}

                /// <summary>
                /// Create new instace of drawing_definition and returns object of this C++ class to interact with
                /// </summary>
        static drawing_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_definition"); assert(inst); return inst; }

        identifier get_drawing_number() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "drawing_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_drawing_number(identifier value) { sdaiPutAttrBN(m_instance, "drawing_number", sdaiSTRING, value); }

        label get_drawing_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "drawing_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_drawing_type(label value) { sdaiPutAttrBN(m_instance, "drawing_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_set : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_set")
        {}

                /// <summary>
                /// Create new instace of presentation_set and returns object of this C++ class to interact with
                /// </summary>
        static presentation_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_set"); assert(inst); return inst; }

        //TList may be set_of_area_in_set or list of converible elements
        template <typename TList> void get_areas(TList& lst) { set_of_area_in_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "areas"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_revision
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_revision : public virtual presentation_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_revision(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_revision")
        {}

                /// <summary>
                /// Create new instace of drawing_revision and returns object of this C++ class to interact with
                /// </summary>
        static drawing_revision Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_revision"); assert(inst); return inst; }

        identifier get_revision_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "revision_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_revision_identifier(identifier value) { sdaiPutAttrBN(m_instance, "revision_identifier", sdaiSTRING, value); }

        drawing_definition get_drawing_identifier();
        void put_drawing_identifier(drawing_definition inst);

        text get_intended_scale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "intended_scale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_intended_scale(text value) { sdaiPutAttrBN(m_instance, "intended_scale", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_revision_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_revision_sequence : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_revision_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_revision_sequence")
        {}

                /// <summary>
                /// Create new instace of drawing_revision_sequence and returns object of this C++ class to interact with
                /// </summary>
        static drawing_revision_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_revision_sequence"); assert(inst); return inst; }

        drawing_revision get_predecessor();
        void put_predecessor(drawing_revision inst);

        drawing_revision get_successor();
        void put_successor(drawing_revision inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_layout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_layout : public virtual draughting_symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_layout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_layout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_layout")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_layout and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_layout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_layout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_representation")
        {}

                /// <summary>
                /// Create new instace of presentation_representation and returns object of this C++ class to interact with
                /// </summary>
        static presentation_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_area : public virtual presentation_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_area")
        {}

                /// <summary>
                /// Create new instace of presentation_area and returns object of this C++ class to interact with
                /// </summary>
        static presentation_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_revision
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_revision : public virtual presentation_area
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_revision(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_revision")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_revision and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_revision Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_revision"); assert(inst); return inst; }

        identifier get_revision_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "revision_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_revision_identifier(identifier value) { sdaiPutAttrBN(m_instance, "revision_identifier", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_revision_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_revision_usage : public virtual area_in_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_revision_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_revision_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_revision_usage")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_revision_usage and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_revision_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_revision_usage"); assert(inst); return inst; }

        identifier get_sheet_number() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "sheet_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_sheet_number(identifier value) { sdaiPutAttrBN(m_instance, "sheet_number", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge")
        {}

                /// <summary>
                /// Create new instace of edge and returns object of this C++ class to interact with
                /// </summary>
        static edge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge"); assert(inst); return inst; }

        vertex get_edge_start();
        void put_edge_start(vertex inst);

        vertex get_edge_end();
        void put_edge_end(vertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_based_wireframe_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_based_wireframe_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_based_wireframe_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_based_wireframe_model")
        {}

                /// <summary>
                /// Create new instace of edge_based_wireframe_model and returns object of this C++ class to interact with
                /// </summary>
        static edge_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_based_wireframe_model"); assert(inst); return inst; }

        //TList may be set_of_connected_edge_set or list of converible elements
        template <typename TList> void get_ebwm_boundary(TList& lst) { set_of_connected_edge_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ebwm_boundary"); }

        //TList may be set_of_connected_edge_set or list of converible elements
        template <typename TList> void put_ebwm_boundary(TList& lst) { set_of_connected_edge_setSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }

        //TArrayElem[] may be connected_edge_set[] or array of convertible elements
        template <typename TArrayElem> void put_ebwm_boundary(TArrayElem arr[], size_t n) { set_of_connected_edge_set lst; ArrayToList(arr, n, lst); put_ebwm_boundary(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_based_wireframe_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_based_wireframe_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_based_wireframe_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_based_wireframe_shape_representation")
        {}

                /// <summary>
                /// Create new instace of edge_based_wireframe_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static edge_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_based_wireframe_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_curve : public virtual edge, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_curve")
        {}

                /// <summary>
                /// Create new instace of edge_curve and returns object of this C++ class to interact with
                /// </summary>
        static edge_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_curve"); assert(inst); return inst; }

        curve get_edge_geometry();
        void put_edge_geometry(curve inst);

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class loop : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "loop")
        {}

                /// <summary>
                /// Create new instace of loop and returns object of this C++ class to interact with
                /// </summary>
        static loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "loop"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class path : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "path")
        {}

                /// <summary>
                /// Create new instace of path and returns object of this C++ class to interact with
                /// </summary>
        static path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "path"); assert(inst); return inst; }

        //TList may be list_of_oriented_edge or list of converible elements
        template <typename TList> void get_edge_list(TList& lst) { list_of_oriented_edgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "edge_list"); }

        //TList may be list_of_oriented_edge or list of converible elements
        template <typename TList> void put_edge_list(TList& lst) { list_of_oriented_edgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "edge_list"); }

        //TArrayElem[] may be oriented_edge[] or array of convertible elements
        template <typename TArrayElem> void put_edge_list(TArrayElem arr[], size_t n) { list_of_oriented_edge lst; ArrayToList(arr, n, lst); put_edge_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_loop : public virtual loop, public virtual path
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_loop")
        {}

                /// <summary>
                /// Create new instace of edge_loop and returns object of this C++ class to interact with
                /// </summary>
        static edge_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_loop"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_round
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_round : public virtual transition_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_round
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_round(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_round")
        {}

                /// <summary>
                /// Create new instace of edge_round and returns object of this C++ class to interact with
                /// </summary>
        static edge_round Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_round"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_context_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_context_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_context_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_context_role")
        {}

                /// <summary>
                /// Create new instace of effectivity_context_role and returns object of this C++ class to interact with
                /// </summary>
        static effectivity_context_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity_context_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_relationship")
        {}

                /// <summary>
                /// Create new instace of effectivity_relationship and returns object of this C++ class to interact with
                /// </summary>
        static effectivity_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        effectivity get_related_effectivity();
        void put_related_effectivity(effectivity inst);

        effectivity get_relating_effectivity();
        void put_relating_effectivity(effectivity inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_current_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_current_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_current_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_current_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_current_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of electric_current_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_current_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_current_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_current_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_current_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_current_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_current_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_current_unit")
        {}

                /// <summary>
                /// Create new instace of electric_current_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_current_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_current_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of element_delivery
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class element_delivery : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of element_delivery
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        element_delivery(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "element_delivery")
        {}

                /// <summary>
                /// Create new instace of element_delivery and returns object of this C++ class to interact with
                /// </summary>
        static element_delivery Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "element_delivery"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ellipse
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ellipse : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ellipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ellipse(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ellipse")
        {}

                /// <summary>
                /// Create new instace of ellipse and returns object of this C++ class to interact with
                /// </summary>
        static ellipse Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ellipse"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_semi_axis_1() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis_1", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis_1(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis_1", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_semi_axis_2() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis_2", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis_2(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis_2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of environment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class environment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        environment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "environment")
        {}

                /// <summary>
                /// Create new instace of environment and returns object of this C++ class to interact with
                /// </summary>
        static environment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "environment"); assert(inst); return inst; }

        generic_variable get_syntactic_representation();
        void put_syntactic_representation(generic_variable inst);

        variable_semantics get_semantics();
        void put_semantics(variable_semantics inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of equals_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class equals_expression : public virtual binary_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of equals_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        equals_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "equals_expression")
        {}

                /// <summary>
                /// Create new instace of equals_expression and returns object of this C++ class to interact with
                /// </summary>
        static equals_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "equals_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of evaluated_degenerate_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class evaluated_degenerate_pcurve : public virtual degenerate_pcurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of evaluated_degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        evaluated_degenerate_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "evaluated_degenerate_pcurve")
        {}

                /// <summary>
                /// Create new instace of evaluated_degenerate_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static evaluated_degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "evaluated_degenerate_pcurve"); assert(inst); return inst; }

        cartesian_point get_equivalent_point();
        void put_equivalent_point(cartesian_point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence")
        {}

                /// <summary>
                /// Create new instace of event_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_context_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_context_assignment")
        {}


        event_occurrence_assignment get_assigned_event_occurrence_assignment();
        void put_assigned_event_occurrence_assignment(event_occurrence_assignment inst);

        event_occurrence_context_role get_role();
        void put_role(event_occurrence_context_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_context_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_context_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_context_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_context_role")
        {}

                /// <summary>
                /// Create new instace of event_occurrence_context_role and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence_context_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence_context_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_role")
        {}

                /// <summary>
                /// Create new instace of event_occurrence_role and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_category : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_category")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_category and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_category"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of exclusive_product_concept_feature_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class exclusive_product_concept_feature_category : public virtual product_concept_feature_category
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of exclusive_product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        exclusive_product_concept_feature_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "exclusive_product_concept_feature_category")
        {}

                /// <summary>
                /// Create new instace of exclusive_product_concept_feature_category and returns object of this C++ class to interact with
                /// </summary>
        static exclusive_product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "exclusive_product_concept_feature_category"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of exp_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class exp_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of exp_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        exp_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "exp_function")
        {}

                /// <summary>
                /// Create new instace of exp_function and returns object of this C++ class to interact with
                /// </summary>
        static exp_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "exp_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of expression_conversion_based_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class expression_conversion_based_unit : public virtual context_dependent_unit, public virtual variable_semantics
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of expression_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        expression_conversion_based_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "expression_conversion_based_unit")
        {}

                /// <summary>
                /// Create new instace of expression_conversion_based_unit and returns object of this C++ class to interact with
                /// </summary>
        static expression_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "expression_conversion_based_unit"); assert(inst); return inst; }

        environment get_associated_variable_environment();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extension : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extension")
        {}

                /// <summary>
                /// Create new instace of extension and returns object of this C++ class to interact with
                /// </summary>
        static extension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_source : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_source")
        {}

                /// <summary>
                /// Create new instace of external_source and returns object of this C++ class to interact with
                /// </summary>
        static external_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "external_source"); assert(inst); return inst; }

        source_item_get get_source_id() { return source_item_get(m_instance, "source_id", NULL); }
        source_item_put put_source_id() { return source_item_put(m_instance, "source_id", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_item")
        {}

                /// <summary>
                /// Create new instace of externally_defined_item and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_item"); assert(inst); return inst; }

        source_item_get get_item_id() { return source_item_get(m_instance, "item_id", NULL); }
        source_item_put put_item_id() { return source_item_put(m_instance, "item_id", NULL); }

        external_source get_source();
        void put_source(external_source inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_character_glyph
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_character_glyph : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_character_glyph
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_character_glyph(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_character_glyph")
        {}

                /// <summary>
                /// Create new instace of externally_defined_character_glyph and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_character_glyph Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_character_glyph"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_class : public virtual class_, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_class")
        {}

                /// <summary>
                /// Create new instace of externally_defined_class and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_curve_font : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of externally_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_dimension_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_dimension_definition : public virtual dimensional_size, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_dimension_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_dimension_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_dimension_definition")
        {}

                /// <summary>
                /// Create new instace of externally_defined_dimension_definition and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_dimension_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_dimension_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_feature_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_feature_definition : public virtual feature_definition, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_feature_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_feature_definition")
        {}

                /// <summary>
                /// Create new instace of externally_defined_feature_definition and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_feature_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_feature_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property")
        {}

                /// <summary>
                /// Create new instace of general_property and returns object of this C++ class to interact with
                /// </summary>
        static general_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_general_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_general_property : public virtual general_property, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_general_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_general_property")
        {}

                /// <summary>
                /// Create new instace of externally_defined_general_property and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_general_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_general_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_hatch_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_hatch_style : public virtual externally_defined_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_hatch_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_hatch_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_hatch_style")
        {}

                /// <summary>
                /// Create new instace of externally_defined_hatch_style and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_hatch_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_hatch_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_item_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_item_relationship")
        {}

                /// <summary>
                /// Create new instace of externally_defined_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_item_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        externally_defined_item get_relating_item();
        void put_relating_item(externally_defined_item inst);

        externally_defined_item get_related_item();
        void put_related_item(externally_defined_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_style : public virtual externally_defined_item, public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_style")
        {}

                /// <summary>
                /// Create new instace of externally_defined_style and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_symbol : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_symbol")
        {}

                /// <summary>
                /// Create new instace of externally_defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_text_font : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of externally_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_tile_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_tile_style : public virtual externally_defined_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_tile_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_tile_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_tile_style")
        {}

                /// <summary>
                /// Create new instace of externally_defined_tile_style and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_tile_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_tile_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_area_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_area_solid"); assert(inst); return inst; }

        curve_bounded_surface get_swept_area();
        void put_swept_area(curve_bounded_surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_area_solid")
        {}

                /// <summary>
                /// Create new instace of extruded_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static extruded_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_area_solid"); assert(inst); return inst; }

        direction get_extruded_direction();
        void put_extruded_direction(direction inst);

        Nullable<positive_length_measure> get_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_face_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_face_solid")
        {}

                /// <summary>
                /// Create new instace of swept_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_face_solid"); assert(inst); return inst; }

        face_surface get_swept_face();
        void put_swept_face(face_surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_face_solid : public virtual swept_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_face_solid")
        {}

                /// <summary>
                /// Create new instace of extruded_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static extruded_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_face_solid"); assert(inst); return inst; }

        direction get_extruded_direction();
        void put_extruded_direction(direction inst);

        Nullable<positive_length_measure> get_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_based_surface_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_based_surface_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_based_surface_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_based_surface_model")
        {}

                /// <summary>
                /// Create new instace of face_based_surface_model and returns object of this C++ class to interact with
                /// </summary>
        static face_based_surface_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_based_surface_model"); assert(inst); return inst; }

        //TList may be set_of_connected_face_set or list of converible elements
        template <typename TList> void get_fbsm_faces(TList& lst) { set_of_connected_face_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "fbsm_faces"); }

        //TList may be set_of_connected_face_set or list of converible elements
        template <typename TList> void put_fbsm_faces(TList& lst) { set_of_connected_face_setSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "fbsm_faces"); }

        //TArrayElem[] may be connected_face_set[] or array of convertible elements
        template <typename TArrayElem> void put_fbsm_faces(TArrayElem arr[], size_t n) { set_of_connected_face_set lst; ArrayToList(arr, n, lst); put_fbsm_faces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_bound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_bound : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_bound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_bound")
        {}

                /// <summary>
                /// Create new instace of face_bound and returns object of this C++ class to interact with
                /// </summary>
        static face_bound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_bound"); assert(inst); return inst; }

        loop get_bound();
        void put_bound(loop inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_outer_bound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_outer_bound : public virtual face_bound
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_outer_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_outer_bound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_outer_bound")
        {}

                /// <summary>
                /// Create new instace of face_outer_bound and returns object of this C++ class to interact with
                /// </summary>
        static face_outer_bound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_outer_bound"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_shape_representation")
        {}

                /// <summary>
                /// Create new instace of face_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static face_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of faceted_brep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class faceted_brep : public virtual manifold_solid_brep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of faceted_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        faceted_brep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "faceted_brep")
        {}

                /// <summary>
                /// Create new instace of faceted_brep and returns object of this C++ class to interact with
                /// </summary>
        static faceted_brep Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "faceted_brep"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of faceted_brep_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class faceted_brep_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of faceted_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        faceted_brep_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "faceted_brep_shape_representation")
        {}

                /// <summary>
                /// Create new instace of faceted_brep_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static faceted_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "faceted_brep_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of feature_component_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class feature_component_definition : public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of feature_component_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        feature_component_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "feature_component_definition")
        {}

                /// <summary>
                /// Create new instace of feature_component_definition and returns object of this C++ class to interact with
                /// </summary>
        static feature_component_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "feature_component_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of feature_component_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class feature_component_relationship : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of feature_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        feature_component_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "feature_component_relationship")
        {}

                /// <summary>
                /// Create new instace of feature_component_relationship and returns object of this C++ class to interact with
                /// </summary>
        static feature_component_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "feature_component_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of feature_in_panel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class feature_in_panel : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of feature_in_panel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        feature_in_panel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "feature_in_panel")
        {}

                /// <summary>
                /// Create new instace of feature_in_panel and returns object of this C++ class to interact with
                /// </summary>
        static feature_in_panel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "feature_in_panel"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of feature_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class feature_pattern : public virtual replicate_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of feature_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        feature_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "feature_pattern")
        {}

                /// <summary>
                /// Create new instace of feature_pattern and returns object of this C++ class to interact with
                /// </summary>
        static feature_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "feature_pattern"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition")
        {}

                /// <summary>
                /// Create new instace of property_definition and returns object of this C++ class to interact with
                /// </summary>
        static property_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_definition_get get_definition() { return characterized_definition_get(m_instance, "definition", NULL); }
        characterized_definition_put put_definition() { return characterized_definition_put(m_instance, "definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_shape
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_shape : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_shape(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_shape")
        {}

                /// <summary>
                /// Create new instace of product_definition_shape and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_shape Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_shape"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of featured_shape
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class featured_shape : public virtual product_definition_shape
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of featured_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        featured_shape(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "featured_shape")
        {}

                /// <summary>
                /// Create new instace of featured_shape and returns object of this C++ class to interact with
                /// </summary>
        static featured_shape Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "featured_shape"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style")
        {}

                /// <summary>
                /// Create new instace of fill_area_style and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_fill_style_select or list of converible elements
        template <typename TList> void get_fill_styles(TList& lst) { set_of_fill_style_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "fill_styles"); }

        //TList may be set_of_fill_style_select or list of converible elements
        template <typename TList> void put_fill_styles(TList& lst) { set_of_fill_style_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "fill_styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_colour")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_colour and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_colour"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        colour get_fill_colour();
        void put_fill_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_hatching
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_hatching : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_hatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_hatching(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_hatching")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_hatching and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_hatching Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_hatching"); assert(inst); return inst; }

        curve_style get_hatch_line_appearance();
        void put_hatch_line_appearance(curve_style inst);

        one_direction_repeat_factor get_start_of_next_hatch_line();
        void put_start_of_next_hatch_line(one_direction_repeat_factor inst);

        cartesian_point get_point_of_reference_hatch_line();
        void put_point_of_reference_hatch_line(cartesian_point inst);

        cartesian_point get_pattern_start();
        void put_pattern_start(cartesian_point inst);

        Nullable<plane_angle_measure> get_hatch_line_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "hatch_line_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_hatch_line_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "hatch_line_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tile_symbol_with_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tile_symbol_with_style : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tile_symbol_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tile_symbol_with_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tile_symbol_with_style")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tile_symbol_with_style and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tile_symbol_with_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tile_symbol_with_style"); assert(inst); return inst; }

        annotation_symbol_occurrence get_symbol();
        void put_symbol(annotation_symbol_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tiles
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tiles : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tiles(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tiles")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tiles and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tiles Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tiles"); assert(inst); return inst; }

        two_direction_repeat_factor get_tiling_pattern();
        void put_tiling_pattern(two_direction_repeat_factor inst);

        //TList may be set_of_fill_area_style_tile_shape_select or list of converible elements
        template <typename TList> void get_tiles(TList& lst) { set_of_fill_area_style_tile_shape_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "tiles"); }

        //TList may be set_of_fill_area_style_tile_shape_select or list of converible elements
        template <typename TList> void put_tiles(TList& lst) { set_of_fill_area_style_tile_shape_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "tiles"); }

        Nullable<positive_ratio_measure> get_tiling_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "tiling_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_tiling_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "tiling_scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fillet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fillet : public virtual transition_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fillet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fillet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fillet")
        {}

                /// <summary>
                /// Create new instace of fillet and returns object of this C++ class to interact with
                /// </summary>
        static fillet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fillet"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of flatness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class flatness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of flatness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        flatness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "flatness_tolerance")
        {}

                /// <summary>
                /// Create new instace of flatness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static flatness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "flatness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of format_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class format_function : public virtual string_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of format_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        format_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "format_function")
        {}

                /// <summary>
                /// Create new instace of format_function and returns object of this C++ class to interact with
                /// </summary>
        static format_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "format_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of founded_kinematic_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class founded_kinematic_path : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of founded_kinematic_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        founded_kinematic_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "founded_kinematic_path")
        {}

                /// <summary>
                /// Create new instace of founded_kinematic_path and returns object of this C++ class to interact with
                /// </summary>
        static founded_kinematic_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "founded_kinematic_path"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fully_constrained_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fully_constrained_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fully_constrained_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fully_constrained_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fully_constrained_pair")
        {}

                /// <summary>
                /// Create new instace of fully_constrained_pair and returns object of this C++ class to interact with
                /// </summary>
        static fully_constrained_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fully_constrained_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of gear_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class gear_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of gear_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        gear_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "gear_pair")
        {}

                /// <summary>
                /// Create new instace of gear_pair and returns object of this C++ class to interact with
                /// </summary>
        static gear_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "gear_pair"); assert(inst); return inst; }

        Nullable<length_measure> get_radius_first_link() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius_first_link", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius_first_link(length_measure value) { sdaiPutAttrBN(m_instance, "radius_first_link", sdaiREAL, &value); }

        Nullable<length_measure> get_radius_second_link() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius_second_link", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius_second_link(length_measure value) { sdaiPutAttrBN(m_instance, "radius_second_link", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_bevel() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "bevel", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_bevel(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "bevel", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_helical_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "helical_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_helical_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "helical_angle", sdaiREAL, &value); }

        Nullable<double> get_gear_ratio() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "gear_ratio", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_gear_ratio(double value) { sdaiPutAttrBN(m_instance, "gear_ratio", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of gear_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class gear_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of gear_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        gear_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "gear_pair_range")
        {}

                /// <summary>
                /// Create new instace of gear_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static gear_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "gear_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_actual_rotation_1() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation_1", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation_1() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation_1", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation_1() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation_1", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation_1() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation_1", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of gear_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class gear_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of gear_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        gear_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "gear_pair_value")
        {}

                /// <summary>
                /// Create new instace of gear_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static gear_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "gear_pair_value"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_actual_rotation_1() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation_1", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation_1(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation_1", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_feature : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_feature")
        {}

                /// <summary>
                /// Create new instace of general_feature and returns object of this C++ class to interact with
                /// </summary>
        static general_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_material_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_material_property : public virtual general_property
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_material_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_material_property")
        {}

                /// <summary>
                /// Create new instace of general_material_property and returns object of this C++ class to interact with
                /// </summary>
        static general_material_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_material_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property_association")
        {}

                /// <summary>
                /// Create new instace of general_property_association and returns object of this C++ class to interact with
                /// </summary>
        static general_property_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        general_property get_base_definition();
        void put_base_definition(general_property inst);

        derived_property_select_get get_derived_definition() { return derived_property_select_get(m_instance, "derived_definition", NULL); }
        derived_property_select_put put_derived_definition() { return derived_property_select_put(m_instance, "derived_definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property_relationship")
        {}

                /// <summary>
                /// Create new instace of general_property_relationship and returns object of this C++ class to interact with
                /// </summary>
        static general_property_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        general_property get_relating_property();
        void put_relating_property(general_property inst);

        general_property get_related_property();
        void put_related_property(general_property inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_alignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_alignment : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_alignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_alignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_alignment")
        {}

                /// <summary>
                /// Create new instace of geometric_alignment and returns object of this C++ class to interact with
                /// </summary>
        static geometric_alignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_alignment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_set : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_set")
        {}

                /// <summary>
                /// Create new instace of geometric_set and returns object of this C++ class to interact with
                /// </summary>
        static geometric_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_set"); assert(inst); return inst; }

        //TList may be set_of_geometric_set_select or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_geometric_set_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_geometric_set_select or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_geometric_set_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_curve_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_curve_set : public virtual geometric_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_curve_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_curve_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_curve_set")
        {}

                /// <summary>
                /// Create new instace of geometric_curve_set and returns object of this C++ class to interact with
                /// </summary>
        static geometric_curve_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_curve_set"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_intersection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_intersection : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_intersection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_intersection")
        {}

                /// <summary>
                /// Create new instace of geometric_intersection and returns object of this C++ class to interact with
                /// </summary>
        static geometric_intersection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_intersection"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_item_specific_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_item_specific_usage : public virtual item_identified_representation_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_item_specific_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_item_specific_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_item_specific_usage")
        {}

                /// <summary>
                /// Create new instace of geometric_item_specific_usage and returns object of this C++ class to interact with
                /// </summary>
        static geometric_item_specific_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_item_specific_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_context : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_context")
        {}

                /// <summary>
                /// Create new instace of representation_context and returns object of this C++ class to interact with
                /// </summary>
        static representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_context"); assert(inst); return inst; }

        identifier get_context_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "context_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_context_identifier(identifier value) { sdaiPutAttrBN(m_instance, "context_identifier", sdaiSTRING, value); }

        text get_context_type() { text val = NULL; if (sdaiGetAttrBN(m_instance, "context_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_context_type(text value) { sdaiPutAttrBN(m_instance, "context_type", sdaiSTRING, value); }

        //TList may be set_of_representation or list of converible elements
        template <typename TList> void get_representations_in_context(TList& lst) { set_of_representationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "representations_in_context"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_representation_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_representation_context")
        {}

                /// <summary>
                /// Create new instace of geometric_representation_context and returns object of this C++ class to interact with
                /// </summary>
        static geometric_representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_representation_context"); assert(inst); return inst; }

        Nullable<dimension_count> get_coordinate_space_dimension() { dimension_count val = (dimension_count) 0; if (sdaiGetAttrBN(m_instance, "coordinate_space_dimension", sdaiINTEGER, &val)) return val; else return Nullable<dimension_count>(); }
        void put_coordinate_space_dimension(dimension_count value) { sdaiPutAttrBN(m_instance, "coordinate_space_dimension", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_relationship")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_relationship and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        geometric_tolerance get_relating_geometric_tolerance();
        void put_relating_geometric_tolerance(geometric_tolerance inst);

        geometric_tolerance get_related_geometric_tolerance();
        void put_related_geometric_tolerance(geometric_tolerance inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_with_defined_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_with_defined_unit : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_with_defined_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_with_defined_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_with_defined_unit")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_with_defined_unit and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_with_defined_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_with_defined_unit"); assert(inst); return inst; }

        measure_with_unit get_unit_size();
        void put_unit_size(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrical_tolerance_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrical_tolerance_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrical_tolerance_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrical_tolerance_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrical_tolerance_callout")
        {}

                /// <summary>
                /// Create new instace of geometrical_tolerance_callout and returns object of this C++ class to interact with
                /// </summary>
        static geometrical_tolerance_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrical_tolerance_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_2d_wireframe_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_2d_wireframe_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_2d_wireframe_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_2d_wireframe_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_2d_wireframe_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_2d_wireframe_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_2d_wireframe_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_2d_wireframe_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_wireframe_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_wireframe_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_wireframe_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_wireframe_shape_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_wireframe_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_wireframe_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of global_uncertainty_assigned_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class global_uncertainty_assigned_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of global_uncertainty_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        global_uncertainty_assigned_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "global_uncertainty_assigned_context")
        {}

                /// <summary>
                /// Create new instace of global_uncertainty_assigned_context and returns object of this C++ class to interact with
                /// </summary>
        static global_uncertainty_assigned_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "global_uncertainty_assigned_context"); assert(inst); return inst; }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void get_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "uncertainty"); }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void put_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "uncertainty"); }

        //TArrayElem[] may be uncertainty_measure_with_unit[] or array of convertible elements
        template <typename TArrayElem> void put_uncertainty(TArrayElem arr[], size_t n) { set_of_uncertainty_measure_with_unit lst; ArrayToList(arr, n, lst); put_uncertainty(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of global_unit_assigned_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class global_unit_assigned_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of global_unit_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        global_unit_assigned_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "global_unit_assigned_context")
        {}

                /// <summary>
                /// Create new instace of global_unit_assigned_context and returns object of this C++ class to interact with
                /// </summary>
        static global_unit_assigned_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "global_unit_assigned_context"); assert(inst); return inst; }

        //TList may be set_of_unit or list of converible elements
        template <typename TList> void get_units(TList& lst) { set_of_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "units"); }

        //TList may be set_of_unit or list of converible elements
        template <typename TList> void put_units(TList& lst) { set_of_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "units"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group_relationship")
        {}

                /// <summary>
                /// Create new instace of group_relationship and returns object of this C++ class to interact with
                /// </summary>
        static group_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "group_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        group get_relating_group();
        void put_relating_group(group inst);

        group get_related_group();
        void put_related_group(group inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hardness_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hardness_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hardness_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hardness_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hardness_representation")
        {}

                /// <summary>
                /// Create new instace of hardness_representation and returns object of this C++ class to interact with
                /// </summary>
        static hardness_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hardness_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hidden_element_over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hidden_element_over_riding_styled_item : public virtual context_dependent_over_riding_styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hidden_element_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hidden_element_over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hidden_element_over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of hidden_element_over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static hidden_element_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hidden_element_over_riding_styled_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hole_bottom
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hole_bottom : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hole_bottom
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hole_bottom(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hole_bottom")
        {}

                /// <summary>
                /// Create new instace of hole_bottom and returns object of this C++ class to interact with
                /// </summary>
        static hole_bottom Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hole_bottom"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hole_in_panel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hole_in_panel : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hole_in_panel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hole_in_panel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hole_in_panel")
        {}

                /// <summary>
                /// Create new instace of hole_in_panel and returns object of this C++ class to interact with
                /// </summary>
        static hole_in_panel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hole_in_panel"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of universal_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class universal_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of universal_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        universal_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "universal_pair")
        {}

                /// <summary>
                /// Create new instace of universal_pair and returns object of this C++ class to interact with
                /// </summary>
        static universal_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "universal_pair"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_input_skew_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "input_skew_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_input_skew_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "input_skew_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of homokinetic_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class homokinetic_pair : public virtual universal_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of homokinetic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        homokinetic_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "homokinetic_pair")
        {}

                /// <summary>
                /// Create new instace of homokinetic_pair and returns object of this C++ class to interact with
                /// </summary>
        static homokinetic_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "homokinetic_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hyperbola
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hyperbola : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hyperbola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hyperbola(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hyperbola")
        {}

                /// <summary>
                /// Create new instace of hyperbola and returns object of this C++ class to interact with
                /// </summary>
        static hyperbola Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hyperbola"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_semi_axis() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_semi_imag_axis() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_imag_axis", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_imag_axis(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_imag_axis", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of id_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class id_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of id_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        id_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "id_attribute")
        {}

                /// <summary>
                /// Create new instace of id_attribute and returns object of this C++ class to interact with
                /// </summary>
        static id_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "id_attribute"); assert(inst); return inst; }

        identifier get_attribute_value() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(identifier value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        id_attribute_select_get get_identified_item() { return id_attribute_select_get(m_instance, "identified_item", NULL); }
        id_attribute_select_put put_identified_item() { return id_attribute_select_put(m_instance, "identified_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of identification_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class identification_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of identification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        identification_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "identification_role")
        {}

                /// <summary>
                /// Create new instace of identification_role and returns object of this C++ class to interact with
                /// </summary>
        static identification_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "identification_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of inclusion_product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class inclusion_product_concept_feature : public virtual conditional_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of inclusion_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        inclusion_product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "inclusion_product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of inclusion_product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static inclusion_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "inclusion_product_concept_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of index_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class index_expression : public virtual string_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of index_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        index_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "index_expression")
        {}

                /// <summary>
                /// Create new instace of index_expression and returns object of this C++ class to interact with
                /// </summary>
        static index_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "index_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of initial_state
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class initial_state : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of initial_state
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        initial_state(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "initial_state")
        {}

                /// <summary>
                /// Create new instace of initial_state and returns object of this C++ class to interact with
                /// </summary>
        static initial_state Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "initial_state"); assert(inst); return inst; }

        mechanism get_applies_to_mechanism();
        void put_applies_to_mechanism(mechanism inst);

        //TList may be set_of_pair_value or list of converible elements
        template <typename TList> void get_pair_values(TList& lst) { set_of_pair_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "pair_values"); }

        //TList may be set_of_pair_value or list of converible elements
        template <typename TList> void put_pair_values(TList& lst) { set_of_pair_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "pair_values"); }

        //TArrayElem[] may be pair_value[] or array of convertible elements
        template <typename TArrayElem> void put_pair_values(TArrayElem arr[], size_t n) { set_of_pair_value lst; ArrayToList(arr, n, lst); put_pair_values(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of instanced_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class instanced_feature : public virtual shape_aspect, public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of instanced_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        instanced_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "instanced_feature")
        {}

                /// <summary>
                /// Create new instace of instanced_feature and returns object of this C++ class to interact with
                /// </summary>
        static instanced_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "instanced_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_numeric_expression : public virtual numeric_expression, public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of literal_number
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class literal_number : public virtual simple_numeric_expression, public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of literal_number
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        literal_number(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "literal_number")
        {}


        Nullable<double> get_the_value() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "the_value", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_the_value(double value) { sdaiPutAttrBN(m_instance, "the_value", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of int_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class int_literal : public virtual literal_number
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of int_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        int_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "int_literal")
        {}

                /// <summary>
                /// Create new instace of int_literal and returns object of this C++ class to interact with
                /// </summary>
        static int_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "int_literal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of numeric_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class numeric_variable : public virtual simple_numeric_expression, public virtual variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        numeric_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "numeric_variable")
        {}

                /// <summary>
                /// Create new instace of numeric_variable and returns object of this C++ class to interact with
                /// </summary>
        static numeric_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "numeric_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of int_numeric_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class int_numeric_variable : public virtual numeric_variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of int_numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        int_numeric_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "int_numeric_variable")
        {}

                /// <summary>
                /// Create new instace of int_numeric_variable and returns object of this C++ class to interact with
                /// </summary>
        static int_numeric_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "int_numeric_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of value_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class value_function : public virtual numeric_expression, public virtual unary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of value_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        value_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "value_function")
        {}

                /// <summary>
                /// Create new instace of value_function and returns object of this C++ class to interact with
                /// </summary>
        static value_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "value_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of int_value_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class int_value_function : public virtual value_function
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of int_value_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        int_value_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "int_value_function")
        {}

                /// <summary>
                /// Create new instace of int_value_function and returns object of this C++ class to interact with
                /// </summary>
        static int_value_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "int_value_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of numeric_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class numeric_defined_function : public virtual numeric_expression, public virtual defined_function
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of numeric_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        numeric_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "numeric_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of integer_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class integer_defined_function : public virtual numeric_defined_function
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of integer_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        integer_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "integer_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of interpolated_configuration_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class interpolated_configuration_sequence : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of interpolated_configuration_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        interpolated_configuration_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "interpolated_configuration_sequence")
        {}

                /// <summary>
                /// Create new instace of interpolated_configuration_sequence and returns object of this C++ class to interact with
                /// </summary>
        static interpolated_configuration_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "interpolated_configuration_sequence"); assert(inst); return inst; }

        //TList may be set_of_configuration_interpolation or list of converible elements
        template <typename TList> void get_interpolation(TList& lst) { set_of_configuration_interpolationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "interpolation"); }

        //TList may be set_of_configuration_interpolation or list of converible elements
        template <typename TList> void put_interpolation(TList& lst) { set_of_configuration_interpolationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "interpolation"); }

        //TArrayElem[] may be configuration_interpolation[] or array of convertible elements
        template <typename TArrayElem> void put_interpolation(TArrayElem arr[], size_t n) { set_of_configuration_interpolation lst; ArrayToList(arr, n, lst); put_interpolation(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of intersection_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class intersection_curve : public virtual surface_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of intersection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        intersection_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "intersection_curve")
        {}

                /// <summary>
                /// Create new instace of intersection_curve and returns object of this C++ class to interact with
                /// </summary>
        static intersection_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "intersection_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of interval_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class interval_expression : public virtual boolean_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of interval_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        interval_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "interval_expression")
        {}

                /// <summary>
                /// Create new instace of interval_expression and returns object of this C++ class to interact with
                /// </summary>
        static interval_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "interval_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of joggle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class joggle : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of joggle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        joggle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "joggle")
        {}

                /// <summary>
                /// Create new instace of joggle and returns object of this C++ class to interact with
                /// </summary>
        static joggle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "joggle"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of joggle_termination
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class joggle_termination : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of joggle_termination
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        joggle_termination(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "joggle_termination")
        {}

                /// <summary>
                /// Create new instace of joggle_termination and returns object of this C++ class to interact with
                /// </summary>
        static joggle_termination Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "joggle_termination"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_analysis_consistency
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_analysis_consistency : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_analysis_consistency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_analysis_consistency(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_analysis_consistency")
        {}

                /// <summary>
                /// Create new instace of kinematic_analysis_consistency and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_analysis_consistency Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_analysis_consistency"); assert(inst); return inst; }

        kinematic_control get_control();
        void put_control(kinematic_control inst);

        kinematic_analysis_result get_result();
        void put_result(kinematic_analysis_result inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_analysis_result
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_analysis_result : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_analysis_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_analysis_result(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_analysis_result")
        {}

                /// <summary>
                /// Create new instace of kinematic_analysis_result and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_analysis_result Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_analysis_result"); assert(inst); return inst; }

        mechanism get_analysed_mechanism();
        void put_analysed_mechanism(mechanism inst);

        //TList may be set_of_kinematic_result or list of converible elements
        template <typename TList> void get_contained_kinematic_results(TList& lst) { set_of_kinematic_resultSerializer<TList> sr; sr.FromAttr(lst, m_instance, "contained_kinematic_results"); }

        //TList may be set_of_kinematic_result or list of converible elements
        template <typename TList> void put_contained_kinematic_results(TList& lst) { set_of_kinematic_resultSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "contained_kinematic_results"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_control
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_control : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_control
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_control(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_control")
        {}

                /// <summary>
                /// Create new instace of kinematic_control and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_control Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_control"); assert(inst); return inst; }

        mechanism get_controlled_mechanism();
        void put_controlled_mechanism(mechanism inst);

        //TList may be set_of_kinematic_analysis_definition or list of converible elements
        template <typename TList> void get_contained_kinematic_programs(TList& lst) { set_of_kinematic_analysis_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "contained_kinematic_programs"); }

        //TList may be set_of_kinematic_analysis_definition or list of converible elements
        template <typename TList> void put_contained_kinematic_programs(TList& lst) { set_of_kinematic_analysis_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "contained_kinematic_programs"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_frame_background_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_frame_background_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_frame_background_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_frame_background_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_frame_background_representation")
        {}

                /// <summary>
                /// Create new instace of kinematic_frame_background_representation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_frame_background_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_frame_background_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_relationship_with_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_relationship_with_transformation : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_relationship_with_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_relationship_with_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_relationship_with_transformation")
        {}

                /// <summary>
                /// Create new instace of representation_relationship_with_transformation and returns object of this C++ class to interact with
                /// </summary>
        static representation_relationship_with_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_relationship_with_transformation"); assert(inst); return inst; }

        transformation_get get_transformation_operator() { return transformation_get(m_instance, "transformation_operator", NULL); }
        transformation_put put_transformation_operator() { return transformation_put(m_instance, "transformation_operator", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_frame_background_representation_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_frame_background_representation_association : public virtual representation_relationship_with_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_frame_background_representation_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_frame_background_representation_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_frame_background_representation_association")
        {}

                /// <summary>
                /// Create new instace of kinematic_frame_background_representation_association and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_frame_background_representation_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_frame_background_representation_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_frame_based_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_frame_based_transformation : public virtual geometric_representation_item, public virtual functionally_defined_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_frame_based_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_frame_based_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_frame_based_transformation")
        {}

                /// <summary>
                /// Create new instace of kinematic_frame_based_transformation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_frame_based_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_frame_based_transformation"); assert(inst); return inst; }

        rigid_placement_get get_transformator() { return rigid_placement_get(m_instance, "transformator", NULL); }
        rigid_placement_put put_transformator() { return rigid_placement_put(m_instance, "transformator", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_ground_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_ground_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_ground_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_ground_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_ground_representation")
        {}

                /// <summary>
                /// Create new instace of kinematic_ground_representation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_ground_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_ground_representation"); assert(inst); return inst; }

        kinematic_property_representation_relation get_property();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_joint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_joint : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_joint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_joint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_joint")
        {}

                /// <summary>
                /// Create new instace of kinematic_joint and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_joint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_joint"); assert(inst); return inst; }

        kinematic_link get_first_link();
        void put_first_link(kinematic_link inst);

        kinematic_link get_second_link();
        void put_second_link(kinematic_link inst);

        kinematic_structure get_structure();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_link
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_link : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_link
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_link(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_link")
        {}

                /// <summary>
                /// Create new instace of kinematic_link and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_link Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_link"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_link_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_link_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_link_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_link_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_link_representation")
        {}

                /// <summary>
                /// Create new instace of kinematic_link_representation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_link_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_link_representation"); assert(inst); return inst; }

        kinematic_link_representation_relation get_link_representation_relation();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_link_representation_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_link_representation_association : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_link_representation_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_link_representation_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_link_representation_association")
        {}

                /// <summary>
                /// Create new instace of kinematic_link_representation_association and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_link_representation_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_link_representation_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_link_representation_relation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_link_representation_relation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_link_representation_relation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_link_representation_relation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_link_representation_relation")
        {}

                /// <summary>
                /// Create new instace of kinematic_link_representation_relation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_link_representation_relation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_link_representation_relation"); assert(inst); return inst; }

        kinematic_link get_topological_aspects();
        void put_topological_aspects(kinematic_link inst);

        kinematic_link_representation get_geometric_aspects();
        void put_geometric_aspects(kinematic_link_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_path : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_path")
        {}

                /// <summary>
                /// Create new instace of kinematic_path and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_path"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_property_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_property_definition : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_property_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_property_definition")
        {}

                /// <summary>
                /// Create new instace of kinematic_property_definition and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_property_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_property_definition"); assert(inst); return inst; }

        characterized_definition_get get_ground_definition() { return characterized_definition_get(m_instance, "ground_definition", NULL); }
        characterized_definition_put put_ground_definition() { return characterized_definition_put(m_instance, "ground_definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition_representation")
        {}

                /// <summary>
                /// Create new instace of property_definition_representation and returns object of this C++ class to interact with
                /// </summary>
        static property_definition_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition_representation"); assert(inst); return inst; }

        represented_definition_get get_definition() { return represented_definition_get(m_instance, "definition", NULL); }
        represented_definition_put put_definition() { return represented_definition_put(m_instance, "definition", NULL); }

        representation get_used_representation();
        void put_used_representation(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_property_representation_relation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_property_representation_relation : public virtual property_definition_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_property_representation_relation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_property_representation_relation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_property_representation_relation")
        {}

                /// <summary>
                /// Create new instace of kinematic_property_representation_relation and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_property_representation_relation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_property_representation_relation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of kinematic_structure
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class kinematic_structure : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of kinematic_structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        kinematic_structure(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "kinematic_structure")
        {}

                /// <summary>
                /// Create new instace of kinematic_structure and returns object of this C++ class to interact with
                /// </summary>
        static kinematic_structure Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "kinematic_structure"); assert(inst); return inst; }

        //TList may be set_of_kinematic_joint or list of converible elements
        template <typename TList> void get_joints(TList& lst) { set_of_kinematic_jointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "joints"); }

        //TList may be set_of_kinematic_joint or list of converible elements
        template <typename TList> void put_joints(TList& lst) { set_of_kinematic_jointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "joints"); }

        //TArrayElem[] may be kinematic_joint[] or array of convertible elements
        template <typename TArrayElem> void put_joints(TArrayElem arr[], size_t n) { set_of_kinematic_joint lst; ArrayToList(arr, n, lst); put_joints(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of known_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class known_source : public virtual external_source, public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of known_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        known_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "known_source")
        {}

                /// <summary>
                /// Create new instace of known_source and returns object of this C++ class to interact with
                /// </summary>
        static known_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "known_source"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of language
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class language : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of language
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        language(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "language")
        {}

                /// <summary>
                /// Create new instace of language and returns object of this C++ class to interact with
                /// </summary>
        static language Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "language"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of language_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class language_assignment : public virtual classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        language_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "language_assignment")
        {}

                /// <summary>
                /// Create new instace of language_assignment and returns object of this C++ class to interact with
                /// </summary>
        static language_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "language_assignment"); assert(inst); return inst; }

        //TList may be set_of_language_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_language_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_language_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_language_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_curve")
        {}

                /// <summary>
                /// Create new instace of leader_curve and returns object of this C++ class to interact with
                /// </summary>
        static leader_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_directed_callout")
        {}

                /// <summary>
                /// Create new instace of leader_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static leader_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_directed_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_directed_dimension : public virtual leader_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_directed_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_directed_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_directed_dimension")
        {}

                /// <summary>
                /// Create new instace of leader_directed_dimension and returns object of this C++ class to interact with
                /// </summary>
        static leader_directed_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_directed_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_terminator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_terminator : public virtual terminator_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_terminator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_terminator")
        {}

                /// <summary>
                /// Create new instace of leader_terminator and returns object of this C++ class to interact with
                /// </summary>
        static leader_terminator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_terminator"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of length_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class length_function : public virtual numeric_expression, public virtual unary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of length_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        length_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "length_function")
        {}

                /// <summary>
                /// Create new instace of length_function and returns object of this C++ class to interact with
                /// </summary>
        static length_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "length_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of length_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class length_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        length_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "length_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of length_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "length_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of length_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class length_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        length_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "length_unit")
        {}

                /// <summary>
                /// Create new instace of length_unit and returns object of this C++ class to interact with
                /// </summary>
        static length_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "length_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source")
        {}

                /// <summary>
                /// Create new instace of light_source and returns object of this C++ class to interact with
                /// </summary>
        static light_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source"); assert(inst); return inst; }

        colour get_light_colour();
        void put_light_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_ambient
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_ambient : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_ambient(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_ambient")
        {}

                /// <summary>
                /// Create new instace of light_source_ambient and returns object of this C++ class to interact with
                /// </summary>
        static light_source_ambient Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_ambient"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_directional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_directional : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_directional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_directional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_directional")
        {}

                /// <summary>
                /// Create new instace of light_source_directional and returns object of this C++ class to interact with
                /// </summary>
        static light_source_directional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_directional"); assert(inst); return inst; }

        direction get_orientation();
        void put_orientation(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_positional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_positional : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_positional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_positional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_positional")
        {}

                /// <summary>
                /// Create new instace of light_source_positional and returns object of this C++ class to interact with
                /// </summary>
        static light_source_positional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_positional"); assert(inst); return inst; }

        cartesian_point get_position();
        void put_position(cartesian_point inst);

        Nullable<double> get_constant_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "constant_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_constant_attenuation(double value) { sdaiPutAttrBN(m_instance, "constant_attenuation", sdaiREAL, &value); }

        Nullable<double> get_distance_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "distance_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_distance_attenuation(double value) { sdaiPutAttrBN(m_instance, "distance_attenuation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_spot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_spot : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_spot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_spot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_spot")
        {}

                /// <summary>
                /// Create new instace of light_source_spot and returns object of this C++ class to interact with
                /// </summary>
        static light_source_spot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_spot"); assert(inst); return inst; }

        cartesian_point get_position();
        void put_position(cartesian_point inst);

        direction get_orientation();
        void put_orientation(direction inst);

        Nullable<double> get_concentration_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "concentration_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_concentration_exponent(double value) { sdaiPutAttrBN(m_instance, "concentration_exponent", sdaiREAL, &value); }

        Nullable<double> get_constant_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "constant_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_constant_attenuation(double value) { sdaiPutAttrBN(m_instance, "constant_attenuation", sdaiREAL, &value); }

        Nullable<double> get_distance_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "distance_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_distance_attenuation(double value) { sdaiPutAttrBN(m_instance, "distance_attenuation", sdaiREAL, &value); }

        Nullable<positive_plane_angle_measure> get_spread_angle() { positive_plane_angle_measure val = (positive_plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "spread_angle", sdaiREAL, &val)) return val; else return Nullable<positive_plane_angle_measure>(); }
        void put_spread_angle(positive_plane_angle_measure value) { sdaiPutAttrBN(m_instance, "spread_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of like_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class like_expression : public virtual comparison_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of like_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        like_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "like_expression")
        {}

                /// <summary>
                /// Create new instace of like_expression and returns object of this C++ class to interact with
                /// </summary>
        static like_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "like_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of limits_and_fits
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class limits_and_fits : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of limits_and_fits
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        limits_and_fits(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "limits_and_fits")
        {}

                /// <summary>
                /// Create new instace of limits_and_fits and returns object of this C++ class to interact with
                /// </summary>
        static limits_and_fits Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "limits_and_fits"); assert(inst); return inst; }

        label get_form_variance() { label val = NULL; if (sdaiGetAttrBN(m_instance, "form_variance", sdaiSTRING, &val)) return val; else return NULL; }
        void put_form_variance(label value) { sdaiPutAttrBN(m_instance, "form_variance", sdaiSTRING, value); }

        label get_zone_variance() { label val = NULL; if (sdaiGetAttrBN(m_instance, "zone_variance", sdaiSTRING, &val)) return val; else return NULL; }
        void put_zone_variance(label value) { sdaiPutAttrBN(m_instance, "zone_variance", sdaiSTRING, value); }

        label get_grade() { label val = NULL; if (sdaiGetAttrBN(m_instance, "grade", sdaiSTRING, &val)) return val; else return NULL; }
        void put_grade(label value) { sdaiPutAttrBN(m_instance, "grade", sdaiSTRING, value); }

        text get_source() { text val = NULL; if (sdaiGetAttrBN(m_instance, "source", sdaiSTRING, &val)) return val; else return NULL; }
        void put_source(text value) { sdaiPutAttrBN(m_instance, "source", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of line
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class line : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        line(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "line")
        {}

                /// <summary>
                /// Create new instace of line and returns object of this C++ class to interact with
                /// </summary>
        static line Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "line"); assert(inst); return inst; }

        cartesian_point get_pnt();
        void put_pnt(cartesian_point inst);

        vector get_dir();
        void put_dir(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of line_profile_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class line_profile_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of line_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        line_profile_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "line_profile_tolerance")
        {}

                /// <summary>
                /// Create new instace of line_profile_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static line_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "line_profile_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of linear_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class linear_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of linear_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        linear_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "linear_dimension")
        {}

                /// <summary>
                /// Create new instace of linear_dimension and returns object of this C++ class to interact with
                /// </summary>
        static linear_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "linear_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of local_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class local_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of local_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        local_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "local_time")
        {}

                /// <summary>
                /// Create new instace of local_time and returns object of this C++ class to interact with
                /// </summary>
        static local_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "local_time"); assert(inst); return inst; }

        Nullable<hour_in_day> get_hour_component() { hour_in_day val = (hour_in_day) 0; if (sdaiGetAttrBN(m_instance, "hour_component", sdaiINTEGER, &val)) return val; else return Nullable<hour_in_day>(); }
        void put_hour_component(hour_in_day value) { sdaiPutAttrBN(m_instance, "hour_component", sdaiINTEGER, &value); }

        Nullable<minute_in_hour> get_minute_component() { minute_in_hour val = (minute_in_hour) 0; if (sdaiGetAttrBN(m_instance, "minute_component", sdaiINTEGER, &val)) return val; else return Nullable<minute_in_hour>(); }
        void put_minute_component(minute_in_hour value) { sdaiPutAttrBN(m_instance, "minute_component", sdaiINTEGER, &value); }

        Nullable<second_in_minute> get_second_component() { second_in_minute val = (second_in_minute) 0; if (sdaiGetAttrBN(m_instance, "second_component", sdaiREAL, &val)) return val; else return Nullable<second_in_minute>(); }
        void put_second_component(second_in_minute value) { sdaiPutAttrBN(m_instance, "second_component", sdaiREAL, &value); }

        coordinated_universal_time_offset get_zone();
        void put_zone(coordinated_universal_time_offset inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of location_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class location_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of location_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        location_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "location_shape_representation")
        {}

                /// <summary>
                /// Create new instace of location_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static location_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "location_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of locator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class locator : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of locator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        locator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "locator")
        {}

                /// <summary>
                /// Create new instace of locator and returns object of this C++ class to interact with
                /// </summary>
        static locator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "locator"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of log_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class log_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of log_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        log_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "log_function")
        {}

                /// <summary>
                /// Create new instace of log_function and returns object of this C++ class to interact with
                /// </summary>
        static log_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "log_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of log10_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class log10_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of log10_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        log10_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "log10_function")
        {}

                /// <summary>
                /// Create new instace of log10_function and returns object of this C++ class to interact with
                /// </summary>
        static log10_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "log10_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of log2_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class log2_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of log2_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        log2_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "log2_function")
        {}

                /// <summary>
                /// Create new instace of log2_function and returns object of this C++ class to interact with
                /// </summary>
        static log2_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "log2_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of lot_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class lot_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of lot_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        lot_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "lot_effectivity")
        {}

                /// <summary>
                /// Create new instace of lot_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static lot_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "lot_effectivity"); assert(inst); return inst; }

        identifier get_effectivity_lot_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_lot_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_lot_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_lot_id", sdaiSTRING, value); }

        measure_with_unit get_effectivity_lot_size();
        void put_effectivity_lot_size(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_intensity_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_intensity_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_intensity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_intensity_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_intensity_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_intensity_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_intensity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_intensity_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_intensity_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_intensity_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_intensity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_intensity_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_intensity_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_intensity_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_intensity_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_intensity_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of make_from_usage_option
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class make_from_usage_option : public virtual product_definition_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of make_from_usage_option
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        make_from_usage_option(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "make_from_usage_option")
        {}

                /// <summary>
                /// Create new instace of make_from_usage_option and returns object of this C++ class to interact with
                /// </summary>
        static make_from_usage_option Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "make_from_usage_option"); assert(inst); return inst; }

        Nullable<IntValue> get_ranking() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "ranking", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_ranking(IntValue value) { sdaiPutAttrBN(m_instance, "ranking", sdaiINTEGER, &value); }

        text get_ranking_rationale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "ranking_rationale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ranking_rationale(text value) { sdaiPutAttrBN(m_instance, "ranking_rationale", sdaiSTRING, value); }

        measure_with_unit get_quantity();
        void put_quantity(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_subsurface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_subsurface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_subsurface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_subsurface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_subsurface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of manifold_subsurface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static manifold_subsurface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_subsurface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of manifold_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mass_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mass_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mass_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mass_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mass_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of mass_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static mass_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mass_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mass_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mass_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mass_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mass_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mass_unit")
        {}

                /// <summary>
                /// Create new instace of mass_unit and returns object of this C++ class to interact with
                /// </summary>
        static mass_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mass_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_designation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_designation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_designation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_designation")
        {}

                /// <summary>
                /// Create new instace of material_designation and returns object of this C++ class to interact with
                /// </summary>
        static material_designation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_designation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_characterized_definition or list of converible elements
        template <typename TList> void get_definitions(TList& lst) { set_of_characterized_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "definitions"); }

        //TList may be set_of_characterized_definition or list of converible elements
        template <typename TList> void put_definitions(TList& lst) { set_of_characterized_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "definitions"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_designation_characterization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_designation_characterization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_designation_characterization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_designation_characterization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_designation_characterization")
        {}

                /// <summary>
                /// Create new instace of material_designation_characterization and returns object of this C++ class to interact with
                /// </summary>
        static material_designation_characterization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_designation_characterization"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        material_designation get_designation();
        void put_designation(material_designation inst);

        characterized_material_property_get get_property() { return characterized_material_property_get(m_instance, "property", NULL); }
        characterized_material_property_put put_property() { return characterized_material_property_put(m_instance, "property", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_property : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_property")
        {}

                /// <summary>
                /// Create new instace of material_property and returns object of this C++ class to interact with
                /// </summary>
        static material_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_property_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_property_representation : public virtual property_definition_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_property_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_property_representation")
        {}

                /// <summary>
                /// Create new instace of material_property_representation and returns object of this C++ class to interact with
                /// </summary>
        static material_property_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_property_representation"); assert(inst); return inst; }

        data_environment get_dependent_environment();
        void put_dependent_environment(data_environment inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_numeric_expression : public virtual numeric_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_function_call
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_function_call : public virtual multiple_arity_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_function_call(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_function_call")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of maximum_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class maximum_function : public virtual multiple_arity_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of maximum_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        maximum_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "maximum_function")
        {}

                /// <summary>
                /// Create new instace of maximum_function and returns object of this C++ class to interact with
                /// </summary>
        static maximum_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "maximum_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_qualification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_qualification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_qualification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_qualification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_qualification")
        {}

                /// <summary>
                /// Create new instace of measure_qualification and returns object of this C++ class to interact with
                /// </summary>
        static measure_qualification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_qualification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        measure_with_unit get_qualified_measure();
        void put_qualified_measure(measure_with_unit inst);

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void get_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr; sr.FromAttr(lst, m_instance, "qualifiers"); }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void put_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "qualifiers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_representation_item : public virtual representation_item, public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_representation_item")
        {}

                /// <summary>
                /// Create new instace of measure_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static measure_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_geometric_presentation_area : public virtual presentation_area
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_geometric_presentation_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_geometric_presentation_area")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_geometric_presentation_area and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_geometric_presentation_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_geometric_presentation_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_geometric_presentation_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_geometric_presentation_representation")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_geometric_presentation_representation and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_geometric_presentation_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanism
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanism : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanism
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanism(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanism")
        {}

                /// <summary>
                /// Create new instace of mechanism and returns object of this C++ class to interact with
                /// </summary>
        static mechanism Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanism"); assert(inst); return inst; }

        kinematic_structure get_structure_definition();
        void put_structure_definition(kinematic_structure inst);

        kinematic_link get_base_();
        void put_base_(kinematic_link inst);

        kinematic_property_definition get_containing_property();
        void put_containing_property(kinematic_property_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanism_base_placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanism_base_placement : public virtual representation_relationship_with_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanism_base_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanism_base_placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanism_base_placement")
        {}

                /// <summary>
                /// Create new instace of mechanism_base_placement and returns object of this C++ class to interact with
                /// </summary>
        static mechanism_base_placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanism_base_placement"); assert(inst); return inst; }

        mechanism get_base_of_mechanism();
        void put_base_of_mechanism(mechanism inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of minimum_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class minimum_function : public virtual multiple_arity_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of minimum_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        minimum_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "minimum_function")
        {}

                /// <summary>
                /// Create new instace of minimum_function and returns object of this C++ class to interact with
                /// </summary>
        static minimum_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "minimum_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of minus_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class minus_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of minus_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        minus_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "minus_expression")
        {}

                /// <summary>
                /// Create new instace of minus_expression and returns object of this C++ class to interact with
                /// </summary>
        static minus_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "minus_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of minus_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class minus_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of minus_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        minus_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "minus_function")
        {}

                /// <summary>
                /// Create new instace of minus_function and returns object of this C++ class to interact with
                /// </summary>
        static minus_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "minus_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mod_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mod_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mod_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mod_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mod_expression")
        {}

                /// <summary>
                /// Create new instace of mod_expression and returns object of this C++ class to interact with
                /// </summary>
        static mod_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mod_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of modified_geometric_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class modified_geometric_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of modified_geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        modified_geometric_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "modified_geometric_tolerance")
        {}

                /// <summary>
                /// Create new instace of modified_geometric_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static modified_geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "modified_geometric_tolerance"); assert(inst); return inst; }

        Nullable<limit_condition> get_modifier() { int v = getENUM("modifier", limit_condition_); if (v >= 0) return (limit_condition) v; else return Nullable<limit_condition>(); }
        void put_modifier(limit_condition value) { TextValue val = limit_condition_[(int) value]; sdaiPutAttrBN(m_instance, "modifier", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of modified_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class modified_pattern : public virtual replicate_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of modified_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        modified_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "modified_pattern")
        {}

                /// <summary>
                /// Create new instace of modified_pattern and returns object of this C++ class to interact with
                /// </summary>
        static modified_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "modified_pattern"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of moments_of_inertia_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class moments_of_inertia_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of moments_of_inertia_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        moments_of_inertia_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "moments_of_inertia_representation")
        {}

                /// <summary>
                /// Create new instace of moments_of_inertia_representation and returns object of this C++ class to interact with
                /// </summary>
        static moments_of_inertia_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "moments_of_inertia_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of motion_link_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class motion_link_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of motion_link_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        motion_link_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "motion_link_relationship")
        {}

                /// <summary>
                /// Create new instace of motion_link_relationship and returns object of this C++ class to interact with
                /// </summary>
        static motion_link_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "motion_link_relationship"); assert(inst); return inst; }

        rigid_placement_get get_related_frame() { return rigid_placement_get(m_instance, "related_frame", NULL); }
        rigid_placement_put put_related_frame() { return rigid_placement_put(m_instance, "related_frame", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mult_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mult_expression : public virtual multiple_arity_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mult_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mult_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mult_expression")
        {}

                /// <summary>
                /// Create new instace of mult_expression and returns object of this C++ class to interact with
                /// </summary>
        static mult_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mult_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multi_language_attribute_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multi_language_attribute_assignment : public virtual attribute_value_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multi_language_attribute_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multi_language_attribute_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multi_language_attribute_assignment")
        {}

                /// <summary>
                /// Create new instace of multi_language_attribute_assignment and returns object of this C++ class to interact with
                /// </summary>
        static multi_language_attribute_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "multi_language_attribute_assignment"); assert(inst); return inst; }

        //TList may be set_of_multi_language_attribute_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_multi_language_attribute_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_multi_language_attribute_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_multi_language_attribute_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of name_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class name_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of name_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        name_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "name_attribute")
        {}

                /// <summary>
                /// Create new instace of name_attribute and returns object of this C++ class to interact with
                /// </summary>
        static name_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "name_attribute"); assert(inst); return inst; }

        label get_attribute_value() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(label value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        name_attribute_select_get get_named_item() { return name_attribute_select_get(m_instance, "named_item", NULL); }
        name_attribute_select_put put_named_item() { return name_attribute_select_put(m_instance, "named_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of named_unit_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class named_unit_variable : public virtual named_unit, public virtual variable_semantics
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of named_unit_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        named_unit_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "named_unit_variable")
        {}

                /// <summary>
                /// Create new instace of named_unit_variable and returns object of this C++ class to interact with
                /// </summary>
        static named_unit_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "named_unit_variable"); assert(inst); return inst; }

        environment get_associated_variable_environment();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of next_assembly_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class next_assembly_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of next_assembly_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        next_assembly_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "next_assembly_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of next_assembly_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static next_assembly_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "next_assembly_usage_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ngon_closed_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ngon_closed_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ngon_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ngon_closed_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ngon_closed_profile")
        {}

                /// <summary>
                /// Create new instace of ngon_closed_profile and returns object of this C++ class to interact with
                /// </summary>
        static ngon_closed_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ngon_closed_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of non_manifold_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class non_manifold_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of non_manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        non_manifold_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "non_manifold_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of non_manifold_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static non_manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "non_manifold_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_boolean_expression : public virtual boolean_expression, public virtual unary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of not_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class not_expression : public virtual unary_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of not_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        not_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "not_expression")
        {}

                /// <summary>
                /// Create new instace of not_expression and returns object of this C++ class to interact with
                /// </summary>
        static not_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "not_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of object_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class object_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of object_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        object_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "object_role")
        {}

                /// <summary>
                /// Create new instace of object_role and returns object of this C++ class to interact with
                /// </summary>
        static object_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "object_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of odd_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class odd_function : public virtual unary_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of odd_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        odd_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "odd_function")
        {}

                /// <summary>
                /// Create new instace of odd_function and returns object of this C++ class to interact with
                /// </summary>
        static odd_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "odd_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_curve_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_curve_2d : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_curve_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_curve_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_curve_2d")
        {}

                /// <summary>
                /// Create new instace of offset_curve_2d and returns object of this C++ class to interact with
                /// </summary>
        static offset_curve_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_curve_2d"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_curve_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_curve_3d : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_curve_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_curve_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_curve_3d")
        {}

                /// <summary>
                /// Create new instace of offset_curve_3d and returns object of this C++ class to interact with
                /// </summary>
        static offset_curve_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_curve_3d"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_surface")
        {}

                /// <summary>
                /// Create new instace of offset_surface and returns object of this C++ class to interact with
                /// </summary>
        static offset_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of one_direction_repeat_factor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class one_direction_repeat_factor : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of one_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        one_direction_repeat_factor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "one_direction_repeat_factor")
        {}

                /// <summary>
                /// Create new instace of one_direction_repeat_factor and returns object of this C++ class to interact with
                /// </summary>
        static one_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "one_direction_repeat_factor"); assert(inst); return inst; }

        vector get_repeat_factor();
        void put_repeat_factor(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of open_path_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class open_path_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of open_path_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        open_path_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "open_path_profile")
        {}

                /// <summary>
                /// Create new instace of open_path_profile and returns object of this C++ class to interact with
                /// </summary>
        static open_path_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "open_path_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of open_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class open_shell : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        open_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "open_shell")
        {}

                /// <summary>
                /// Create new instace of open_shell and returns object of this C++ class to interact with
                /// </summary>
        static open_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "open_shell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of or_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class or_expression : public virtual multiple_arity_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of or_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        or_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "or_expression")
        {}

                /// <summary>
                /// Create new instace of or_expression and returns object of this C++ class to interact with
                /// </summary>
        static or_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "or_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projection_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projection_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projection_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projection_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projection_directed_callout")
        {}

                /// <summary>
                /// Create new instace of projection_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static projection_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projection_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ordinate_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ordinate_dimension : public virtual projection_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ordinate_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ordinate_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ordinate_dimension")
        {}

                /// <summary>
                /// Create new instace of ordinate_dimension and returns object of this C++ class to interact with
                /// </summary>
        static ordinate_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ordinate_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization")
        {}

                /// <summary>
                /// Create new instace of organization and returns object of this C++ class to interact with
                /// </summary>
        static organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_relationship")
        {}

                /// <summary>
                /// Create new instace of organization_relationship and returns object of this C++ class to interact with
                /// </summary>
        static organization_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        organization get_relating_organization();
        void put_relating_organization(organization inst);

        organization get_related_organization();
        void put_related_organization(organization inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_role")
        {}

                /// <summary>
                /// Create new instace of organization_role and returns object of this C++ class to interact with
                /// </summary>
        static organization_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_address : public virtual address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_address")
        {}

                /// <summary>
                /// Create new instace of organizational_address and returns object of this C++ class to interact with
                /// </summary>
        static organizational_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_address"); assert(inst); return inst; }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void get_organizations(TList& lst) { set_of_organizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "organizations"); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void put_organizations(TList& lst) { set_of_organizationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "organizations"); }

        //TArrayElem[] may be organization[] or array of convertible elements
        template <typename TArrayElem> void put_organizations(TArrayElem arr[], size_t n) { set_of_organization lst; ArrayToList(arr, n, lst); put_organizations(lst); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project")
        {}

                /// <summary>
                /// Create new instace of organizational_project and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void get_responsible_organizations(TList& lst) { set_of_organizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "responsible_organizations"); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void put_responsible_organizations(TList& lst) { set_of_organizationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "responsible_organizations"); }

        //TArrayElem[] may be organization[] or array of convertible elements
        template <typename TArrayElem> void put_responsible_organizations(TArrayElem arr[], size_t n) { set_of_organization lst; ArrayToList(arr, n, lst); put_responsible_organizations(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_relationship")
        {}

                /// <summary>
                /// Create new instace of organizational_project_relationship and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        organizational_project get_relating_organizational_project();
        void put_relating_organizational_project(organizational_project inst);

        organizational_project get_related_organizational_project();
        void put_related_organizational_project(organizational_project inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_role")
        {}

                /// <summary>
                /// Create new instace of organizational_project_role and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_closed_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_closed_shell : public virtual closed_shell
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_closed_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_closed_shell")
        {}

                /// <summary>
                /// Create new instace of oriented_closed_shell and returns object of this C++ class to interact with
                /// </summary>
        static oriented_closed_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_closed_shell"); assert(inst); return inst; }

        closed_shell get_closed_shell_element();
        void put_closed_shell_element(closed_shell inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_edge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_edge : public virtual edge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_edge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_edge")
        {}

                /// <summary>
                /// Create new instace of oriented_edge and returns object of this C++ class to interact with
                /// </summary>
        static oriented_edge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_edge"); assert(inst); return inst; }

        edge get_edge_element();
        void put_edge_element(edge inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_face : public virtual face
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_face")
        {}

                /// <summary>
                /// Create new instace of oriented_face and returns object of this C++ class to interact with
                /// </summary>
        static oriented_face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_face"); assert(inst); return inst; }

        face get_face_element();
        void put_face_element(face inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_open_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_open_shell : public virtual open_shell
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_open_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_open_shell")
        {}

                /// <summary>
                /// Create new instace of oriented_open_shell and returns object of this C++ class to interact with
                /// </summary>
        static oriented_open_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_open_shell"); assert(inst); return inst; }

        open_shell get_open_shell_element();
        void put_open_shell_element(open_shell inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_path : public virtual path
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_path")
        {}

                /// <summary>
                /// Create new instace of oriented_path and returns object of this C++ class to interact with
                /// </summary>
        static oriented_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_path"); assert(inst); return inst; }

        path get_path_element();
        void put_path_element(path inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_surface")
        {}

                /// <summary>
                /// Create new instace of oriented_surface and returns object of this C++ class to interact with
                /// </summary>
        static oriented_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_surface"); assert(inst); return inst; }

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of outer_boundary_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class outer_boundary_curve : public virtual boundary_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of outer_boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        outer_boundary_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "outer_boundary_curve")
        {}

                /// <summary>
                /// Create new instace of outer_boundary_curve and returns object of this C++ class to interact with
                /// </summary>
        static outer_boundary_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "outer_boundary_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of package_product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class package_product_concept_feature : public virtual product_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of package_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        package_product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "package_product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of package_product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static package_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "package_product_concept_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pair_actuator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pair_actuator : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pair_actuator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pair_actuator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pair_actuator")
        {}

                /// <summary>
                /// Create new instace of pair_actuator and returns object of this C++ class to interact with
                /// </summary>
        static pair_actuator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pair_actuator"); assert(inst); return inst; }

        kinematic_pair get_actuated_pair();
        void put_actuated_pair(kinematic_pair inst);

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parabola
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parabola : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parabola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parabola(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parabola")
        {}

                /// <summary>
                /// Create new instace of parabola and returns object of this C++ class to interact with
                /// </summary>
        static parabola Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parabola"); assert(inst); return inst; }

        Nullable<length_measure> get_focal_dist() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "focal_dist", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_focal_dist(length_measure value) { sdaiPutAttrBN(m_instance, "focal_dist", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parallel_offset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parallel_offset : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parallel_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parallel_offset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parallel_offset")
        {}

                /// <summary>
                /// Create new instace of parallel_offset and returns object of this C++ class to interact with
                /// </summary>
        static parallel_offset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parallel_offset"); assert(inst); return inst; }

        measure_with_unit get_offset();
        void put_offset(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parallelism_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parallelism_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parallelism_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parallelism_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parallelism_tolerance")
        {}

                /// <summary>
                /// Create new instace of parallelism_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static parallelism_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parallelism_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parametric_representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parametric_representation_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parametric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parametric_representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parametric_representation_context")
        {}

                /// <summary>
                /// Create new instace of parametric_representation_context and returns object of this C++ class to interact with
                /// </summary>
        static parametric_representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parametric_representation_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of partial_circular_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class partial_circular_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of partial_circular_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        partial_circular_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "partial_circular_profile")
        {}

                /// <summary>
                /// Create new instace of partial_circular_profile and returns object of this C++ class to interact with
                /// </summary>
        static partial_circular_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "partial_circular_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of path_feature_component
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class path_feature_component : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of path_feature_component
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        path_feature_component(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "path_feature_component")
        {}

                /// <summary>
                /// Create new instace of path_feature_component and returns object of this C++ class to interact with
                /// </summary>
        static path_feature_component Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "path_feature_component"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of path_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class path_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of path_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        path_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "path_shape_representation")
        {}

                /// <summary>
                /// Create new instace of path_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static path_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "path_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pattern_offset_membership
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pattern_offset_membership : public virtual feature_component_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pattern_offset_membership
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pattern_offset_membership(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pattern_offset_membership")
        {}

                /// <summary>
                /// Create new instace of pattern_offset_membership and returns object of this C++ class to interact with
                /// </summary>
        static pattern_offset_membership Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pattern_offset_membership"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pattern_omit_membership
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pattern_omit_membership : public virtual feature_component_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pattern_omit_membership
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pattern_omit_membership(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pattern_omit_membership")
        {}

                /// <summary>
                /// Create new instace of pattern_omit_membership and returns object of this C++ class to interact with
                /// </summary>
        static pattern_omit_membership Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pattern_omit_membership"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of perpendicular_to
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class perpendicular_to : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of perpendicular_to
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        perpendicular_to(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "perpendicular_to")
        {}

                /// <summary>
                /// Create new instace of perpendicular_to and returns object of this C++ class to interact with
                /// </summary>
        static perpendicular_to Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "perpendicular_to"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of perpendicularity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class perpendicularity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of perpendicularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        perpendicularity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "perpendicularity_tolerance")
        {}

                /// <summary>
                /// Create new instace of perpendicularity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static perpendicularity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "perpendicularity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person")
        {}

                /// <summary>
                /// Create new instace of person and returns object of this C++ class to interact with
                /// </summary>
        static person Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_last_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "last_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_last_name(label value) { sdaiPutAttrBN(m_instance, "last_name", sdaiSTRING, value); }

        label get_first_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "first_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_first_name(label value) { sdaiPutAttrBN(m_instance, "first_name", sdaiSTRING, value); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_middle_names(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "middle_names"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_middle_names(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "middle_names"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_middle_names(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_middle_names(lst); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_prefix_titles(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "prefix_titles"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_prefix_titles(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "prefix_titles"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_prefix_titles(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_prefix_titles(lst); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_suffix_titles(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "suffix_titles"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_suffix_titles(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "suffix_titles"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_suffix_titles(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_suffix_titles(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization")
        {}

                /// <summary>
                /// Create new instace of person_and_organization and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization"); assert(inst); return inst; }

        person get_the_person();
        void put_the_person(person inst);

        organization get_the_organization();
        void put_the_organization(organization inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of personal_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class personal_address : public virtual address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of personal_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        personal_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "personal_address")
        {}

                /// <summary>
                /// Create new instace of personal_address and returns object of this C++ class to interact with
                /// </summary>
        static personal_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "personal_address"); assert(inst); return inst; }

        //TList may be set_of_person or list of converible elements
        template <typename TList> void get_people(TList& lst) { set_of_personSerializer<TList> sr; sr.FromAttr(lst, m_instance, "people"); }

        //TList may be set_of_person or list of converible elements
        template <typename TList> void put_people(TList& lst) { set_of_personSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "people"); }

        //TArrayElem[] may be person[] or array of convertible elements
        template <typename TArrayElem> void put_people(TArrayElem arr[], size_t n) { set_of_person lst; ArrayToList(arr, n, lst); put_people(lst); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_address : public virtual organizational_address, public virtual personal_address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_address")
        {}

                /// <summary>
                /// Create new instace of person_and_organization_address and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization_address"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_role")
        {}

                /// <summary>
                /// Create new instace of person_and_organization_role and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition")
        {}

                /// <summary>
                /// Create new instace of product_definition and returns object of this C++ class to interact with
                /// </summary>
        static product_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_formation get_formation();
        void put_formation(product_definition_formation inst);

        product_definition_context get_frame_of_reference();
        void put_frame_of_reference(product_definition_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_with_associated_documents
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_with_associated_documents : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_with_associated_documents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_with_associated_documents(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_with_associated_documents")
        {}

                /// <summary>
                /// Create new instace of product_definition_with_associated_documents and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_with_associated_documents Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_with_associated_documents"); assert(inst); return inst; }

        //TList may be set_of_document or list of converible elements
        template <typename TList> void get_documentation_ids(TList& lst) { set_of_documentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "documentation_ids"); }

        //TList may be set_of_document or list of converible elements
        template <typename TList> void put_documentation_ids(TList& lst) { set_of_documentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "documentation_ids"); }

        //TArrayElem[] may be document[] or array of convertible elements
        template <typename TArrayElem> void put_documentation_ids(TArrayElem arr[], size_t n) { set_of_document lst; ArrayToList(arr, n, lst); put_documentation_ids(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of physically_modelled_product_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class physically_modelled_product_definition : public virtual product_definition_with_associated_documents
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of physically_modelled_product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        physically_modelled_product_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "physically_modelled_product_definition")
        {}

                /// <summary>
                /// Create new instace of physically_modelled_product_definition and returns object of this C++ class to interact with
                /// </summary>
        static physically_modelled_product_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "physically_modelled_product_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placed_datum_target_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placed_datum_target_feature : public virtual datum_target
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placed_datum_target_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placed_datum_target_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placed_datum_target_feature")
        {}

                /// <summary>
                /// Create new instace of placed_datum_target_feature and returns object of this C++ class to interact with
                /// </summary>
        static placed_datum_target_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placed_datum_target_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placed_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placed_feature : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placed_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placed_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placed_feature")
        {}

                /// <summary>
                /// Create new instace of placed_feature and returns object of this C++ class to interact with
                /// </summary>
        static placed_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placed_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_extent : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_extent")
        {}

                /// <summary>
                /// Create new instace of planar_extent and returns object of this C++ class to interact with
                /// </summary>
        static planar_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_extent"); assert(inst); return inst; }

        Nullable<length_measure> get_size_in_x() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "size_in_x", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_size_in_x(length_measure value) { sdaiPutAttrBN(m_instance, "size_in_x", sdaiREAL, &value); }

        Nullable<length_measure> get_size_in_y() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "size_in_y", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_size_in_y(length_measure value) { sdaiPutAttrBN(m_instance, "size_in_y", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_box : public virtual planar_extent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_box")
        {}

                /// <summary>
                /// Create new instace of planar_box and returns object of this C++ class to interact with
                /// </summary>
        static planar_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_box"); assert(inst); return inst; }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_curve_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_curve_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_curve_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_curve_pair")
        {}

                /// <summary>
                /// Create new instace of planar_curve_pair and returns object of this C++ class to interact with
                /// </summary>
        static planar_curve_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_curve_pair"); assert(inst); return inst; }

        curve get_curve_1();
        void put_curve_1(curve inst);

        curve get_curve_2();
        void put_curve_2(curve inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_curve_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_curve_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_curve_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_curve_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_curve_pair_range")
        {}

                /// <summary>
                /// Create new instace of planar_curve_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static planar_curve_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_curve_pair_range"); assert(inst); return inst; }

        trimmed_curve get_range_on_curve_1();
        void put_range_on_curve_1(trimmed_curve inst);

        trimmed_curve get_range_on_curve_2();
        void put_range_on_curve_2(trimmed_curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_pair")
        {}

                /// <summary>
                /// Create new instace of planar_pair and returns object of this C++ class to interact with
                /// </summary>
        static planar_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_pair_range")
        {}

                /// <summary>
                /// Create new instace of planar_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static planar_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation", NULL); }

        translational_range_measure_get get_lower_limit_actual_translation_x() { return translational_range_measure_get(m_instance, "lower_limit_actual_translation_x", NULL); }
        translational_range_measure_put put_lower_limit_actual_translation_x() { return translational_range_measure_put(m_instance, "lower_limit_actual_translation_x", NULL); }

        translational_range_measure_get get_upper_limit_actual_translation_x() { return translational_range_measure_get(m_instance, "upper_limit_actual_translation_x", NULL); }
        translational_range_measure_put put_upper_limit_actual_translation_x() { return translational_range_measure_put(m_instance, "upper_limit_actual_translation_x", NULL); }

        translational_range_measure_get get_lower_limit_actual_translation_y() { return translational_range_measure_get(m_instance, "lower_limit_actual_translation_y", NULL); }
        translational_range_measure_put put_lower_limit_actual_translation_y() { return translational_range_measure_put(m_instance, "lower_limit_actual_translation_y", NULL); }

        translational_range_measure_get get_upper_limit_actual_translation_y() { return translational_range_measure_get(m_instance, "upper_limit_actual_translation_y", NULL); }
        translational_range_measure_put put_upper_limit_actual_translation_y() { return translational_range_measure_put(m_instance, "upper_limit_actual_translation_y", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_pair_value")
        {}

                /// <summary>
                /// Create new instace of planar_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static planar_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_pair_value"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }

        Nullable<length_measure> get_actual_translation_x() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_translation_x", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_actual_translation_x(length_measure value) { sdaiPutAttrBN(m_instance, "actual_translation_x", sdaiREAL, &value); }

        Nullable<length_measure> get_actual_translation_y() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_translation_y", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_actual_translation_y(length_measure value) { sdaiPutAttrBN(m_instance, "actual_translation_y", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_shape_representation")
        {}

                /// <summary>
                /// Create new instace of planar_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static planar_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane")
        {}

                /// <summary>
                /// Create new instace of plane and returns object of this C++ class to interact with
                /// </summary>
        static plane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane_angle_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane_angle_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane_angle_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane_angle_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of plane_angle_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static plane_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane_angle_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane_angle_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane_angle_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane_angle_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane_angle_unit")
        {}

                /// <summary>
                /// Create new instace of plane_angle_unit and returns object of this C++ class to interact with
                /// </summary>
        static plane_angle_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane_angle_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plus_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plus_expression : public virtual multiple_arity_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plus_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plus_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plus_expression")
        {}

                /// <summary>
                /// Create new instace of plus_expression and returns object of this C++ class to interact with
                /// </summary>
        static plus_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plus_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plus_minus_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plus_minus_tolerance : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plus_minus_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plus_minus_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plus_minus_tolerance")
        {}

                /// <summary>
                /// Create new instace of plus_minus_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static plus_minus_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plus_minus_tolerance"); assert(inst); return inst; }

        tolerance_method_definition_get get_range() { return tolerance_method_definition_get(m_instance, "range", NULL); }
        tolerance_method_definition_put put_range() { return tolerance_method_definition_put(m_instance, "range", NULL); }

        dimensional_characteristic_get get_toleranced_dimension() { return dimensional_characteristic_get(m_instance, "toleranced_dimension", NULL); }
        dimensional_characteristic_put put_toleranced_dimension() { return dimensional_characteristic_put(m_instance, "toleranced_dimension", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pocket
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pocket : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pocket(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pocket")
        {}

                /// <summary>
                /// Create new instace of pocket and returns object of this C++ class to interact with
                /// </summary>
        static pocket Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pocket"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pocket_bottom
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pocket_bottom : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pocket_bottom
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pocket_bottom(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pocket_bottom")
        {}

                /// <summary>
                /// Create new instace of pocket_bottom and returns object of this C++ class to interact with
                /// </summary>
        static pocket_bottom Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pocket_bottom"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_curve : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_curve")
        {}

                /// <summary>
                /// Create new instace of point_on_curve and returns object of this C++ class to interact with
                /// </summary>
        static point_on_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_curve"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<parameter_value> get_point_parameter() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_planar_curve_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_planar_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_planar_curve_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_planar_curve_pair")
        {}

                /// <summary>
                /// Create new instace of point_on_planar_curve_pair and returns object of this C++ class to interact with
                /// </summary>
        static point_on_planar_curve_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_planar_curve_pair"); assert(inst); return inst; }

        curve get_pair_curve();
        void put_pair_curve(curve inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_planar_curve_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_planar_curve_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_planar_curve_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_planar_curve_pair_range")
        {}

                /// <summary>
                /// Create new instace of point_on_planar_curve_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static point_on_planar_curve_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_planar_curve_pair_range"); assert(inst); return inst; }

        trimmed_curve get_range_on_pair_curve();
        void put_range_on_pair_curve(trimmed_curve inst);

        rotational_range_measure_get get_lower_limit_yaw() { return rotational_range_measure_get(m_instance, "lower_limit_yaw", NULL); }
        rotational_range_measure_put put_lower_limit_yaw() { return rotational_range_measure_put(m_instance, "lower_limit_yaw", NULL); }

        rotational_range_measure_get get_upper_limit_yaw() { return rotational_range_measure_get(m_instance, "upper_limit_yaw", NULL); }
        rotational_range_measure_put put_upper_limit_yaw() { return rotational_range_measure_put(m_instance, "upper_limit_yaw", NULL); }

        rotational_range_measure_get get_lower_limit_pitch() { return rotational_range_measure_get(m_instance, "lower_limit_pitch", NULL); }
        rotational_range_measure_put put_lower_limit_pitch() { return rotational_range_measure_put(m_instance, "lower_limit_pitch", NULL); }

        rotational_range_measure_get get_upper_limit_pitch() { return rotational_range_measure_get(m_instance, "upper_limit_pitch", NULL); }
        rotational_range_measure_put put_upper_limit_pitch() { return rotational_range_measure_put(m_instance, "upper_limit_pitch", NULL); }

        rotational_range_measure_get get_lower_limit_roll() { return rotational_range_measure_get(m_instance, "lower_limit_roll", NULL); }
        rotational_range_measure_put put_lower_limit_roll() { return rotational_range_measure_put(m_instance, "lower_limit_roll", NULL); }

        rotational_range_measure_get get_upper_limit_roll() { return rotational_range_measure_get(m_instance, "upper_limit_roll", NULL); }
        rotational_range_measure_put put_upper_limit_roll() { return rotational_range_measure_put(m_instance, "upper_limit_roll", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_planar_curve_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_planar_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_planar_curve_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_planar_curve_pair_value")
        {}

                /// <summary>
                /// Create new instace of point_on_planar_curve_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static point_on_planar_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_planar_curve_pair_value"); assert(inst); return inst; }

        point_on_curve get_actual_point_on_curve();
        void put_actual_point_on_curve(point_on_curve inst);

        spatial_rotation_get get_input_orientation() { return spatial_rotation_get(m_instance, "input_orientation", NULL); }
        spatial_rotation_put put_input_orientation() { return spatial_rotation_put(m_instance, "input_orientation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_surface : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_surface")
        {}

                /// <summary>
                /// Create new instace of point_on_surface and returns object of this C++ class to interact with
                /// </summary>
        static point_on_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<parameter_value> get_point_parameter_u() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter_u", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter_u(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter_u", sdaiREAL, &value); }

        Nullable<parameter_value> get_point_parameter_v() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter_v", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter_v(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter_v", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_surface_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_surface_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_surface_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_surface_pair")
        {}

                /// <summary>
                /// Create new instace of point_on_surface_pair and returns object of this C++ class to interact with
                /// </summary>
        static point_on_surface_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_surface_pair"); assert(inst); return inst; }

        surface get_pair_surface();
        void put_pair_surface(surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_surface_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_surface_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_surface_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_surface_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_surface_pair_range")
        {}

                /// <summary>
                /// Create new instace of point_on_surface_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static point_on_surface_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_surface_pair_range"); assert(inst); return inst; }

        rectangular_trimmed_surface get_range_on_pair_surface();
        void put_range_on_pair_surface(rectangular_trimmed_surface inst);

        rotational_range_measure_get get_lower_limit_yaw() { return rotational_range_measure_get(m_instance, "lower_limit_yaw", NULL); }
        rotational_range_measure_put put_lower_limit_yaw() { return rotational_range_measure_put(m_instance, "lower_limit_yaw", NULL); }

        rotational_range_measure_get get_upper_limit_yaw() { return rotational_range_measure_get(m_instance, "upper_limit_yaw", NULL); }
        rotational_range_measure_put put_upper_limit_yaw() { return rotational_range_measure_put(m_instance, "upper_limit_yaw", NULL); }

        rotational_range_measure_get get_lower_limit_pitch() { return rotational_range_measure_get(m_instance, "lower_limit_pitch", NULL); }
        rotational_range_measure_put put_lower_limit_pitch() { return rotational_range_measure_put(m_instance, "lower_limit_pitch", NULL); }

        rotational_range_measure_get get_upper_limit_pitch() { return rotational_range_measure_get(m_instance, "upper_limit_pitch", NULL); }
        rotational_range_measure_put put_upper_limit_pitch() { return rotational_range_measure_put(m_instance, "upper_limit_pitch", NULL); }

        rotational_range_measure_get get_lower_limit_roll() { return rotational_range_measure_get(m_instance, "lower_limit_roll", NULL); }
        rotational_range_measure_put put_lower_limit_roll() { return rotational_range_measure_put(m_instance, "lower_limit_roll", NULL); }

        rotational_range_measure_get get_upper_limit_roll() { return rotational_range_measure_get(m_instance, "upper_limit_roll", NULL); }
        rotational_range_measure_put put_upper_limit_roll() { return rotational_range_measure_put(m_instance, "upper_limit_roll", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_surface_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_surface_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_surface_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_surface_pair_value")
        {}

                /// <summary>
                /// Create new instace of point_on_surface_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static point_on_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_surface_pair_value"); assert(inst); return inst; }

        point_on_surface get_actual_point_on_surface();
        void put_actual_point_on_surface(point_on_surface inst);

        spatial_rotation_get get_input_orientation() { return spatial_rotation_get(m_instance, "input_orientation", NULL); }
        spatial_rotation_put put_input_orientation() { return spatial_rotation_put(m_instance, "input_orientation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_placement_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_placement_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_placement_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_placement_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_placement_shape_representation")
        {}

                /// <summary>
                /// Create new instace of point_placement_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static point_placement_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_placement_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_replica : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_replica")
        {}

                /// <summary>
                /// Create new instace of point_replica and returns object of this C++ class to interact with
                /// </summary>
        static point_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_replica"); assert(inst); return inst; }

        point get_parent_pt();
        void put_parent_pt(point inst);

        cartesian_transformation_operator get_transformation();
        void put_transformation(cartesian_transformation_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_style")
        {}

                /// <summary>
                /// Create new instace of point_style and returns object of this C++ class to interact with
                /// </summary>
        static point_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        marker_select_get get_marker() { return marker_select_get(m_instance, "marker", NULL); }
        marker_select_put put_marker() { return marker_select_put(m_instance, "marker", NULL); }

        size_select_get get_marker_size() { return size_select_get(m_instance, "marker_size", NULL); }
        size_select_put put_marker_size() { return size_select_put(m_instance, "marker_size", NULL); }

        colour get_marker_colour();
        void put_marker_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of poly_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class poly_loop : public virtual loop, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of poly_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        poly_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "poly_loop")
        {}

                /// <summary>
                /// Create new instace of poly_loop and returns object of this C++ class to interact with
                /// </summary>
        static poly_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "poly_loop"); assert(inst); return inst; }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_polygon(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "polygon"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_polygon(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "polygon"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_polygon(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_polygon(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of polyline
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class polyline : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of polyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        polyline(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "polyline")
        {}

                /// <summary>
                /// Create new instace of polyline and returns object of this C++ class to interact with
                /// </summary>
        static polyline Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "polyline"); assert(inst); return inst; }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_points(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "points"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_points(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "points"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_points(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_points(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of position_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class position_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of position_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        position_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "position_tolerance")
        {}

                /// <summary>
                /// Create new instace of position_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static position_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "position_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of power_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class power_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of power_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        power_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "power_expression")
        {}

                /// <summary>
                /// Create new instace of power_expression and returns object of this C++ class to interact with
                /// </summary>
        static power_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "power_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_symbol : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_dimension_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_dimension_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_dimension_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_dimension_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_dimension_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_dimension_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_dimension_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_dimension_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_geometrical_tolerance_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_geometrical_tolerance_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_geometrical_tolerance_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_geometrical_tolerance_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_geometrical_tolerance_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_geometrical_tolerance_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_geometrical_tolerance_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_geometrical_tolerance_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_marker
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_marker : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_marker(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_marker")
        {}

                /// <summary>
                /// Create new instace of pre_defined_marker and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_marker Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_marker"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_point_marker_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_point_marker_symbol : public virtual pre_defined_marker, public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_point_marker_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_point_marker_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_point_marker_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_point_marker_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_point_marker_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_point_marker_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_presentation_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_presentation_style : public virtual founded_item, public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_presentation_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_presentation_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_presentation_style")
        {}

                /// <summary>
                /// Create new instace of pre_defined_presentation_style and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_presentation_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_presentation_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_surface_condition_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_surface_condition_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_surface_condition_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_surface_condition_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_surface_condition_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_surface_condition_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_surface_condition_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_surface_condition_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_terminator_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_terminator_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of precision_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class precision_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of precision_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        precision_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "precision_qualifier")
        {}

                /// <summary>
                /// Create new instace of precision_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static precision_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "precision_qualifier"); assert(inst); return inst; }

        Nullable<IntValue> get_precision_value() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "precision_value", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_precision_value(IntValue value) { sdaiPutAttrBN(m_instance, "precision_value", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_layer_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_layer_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_layer_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_layer_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_layer_assignment")
        {}

                /// <summary>
                /// Create new instace of presentation_layer_assignment and returns object of this C++ class to interact with
                /// </summary>
        static presentation_layer_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_layer_assignment"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_layered_item or list of converible elements
        template <typename TList> void get_assigned_items(TList& lst) { set_of_layered_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "assigned_items"); }

        //TList may be set_of_layered_item or list of converible elements
        template <typename TList> void put_assigned_items(TList& lst) { set_of_layered_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "assigned_items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_size : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_size")
        {}

                /// <summary>
                /// Create new instace of presentation_size and returns object of this C++ class to interact with
                /// </summary>
        static presentation_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_size"); assert(inst); return inst; }

        presentation_size_assignment_select_get get_unit() { return presentation_size_assignment_select_get(m_instance, "unit", NULL); }
        presentation_size_assignment_select_put put_unit() { return presentation_size_assignment_select_put(m_instance, "unit", NULL); }

        planar_box get_size();
        void put_size(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_style_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_style_assignment : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_style_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_style_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_style_assignment")
        {}

                /// <summary>
                /// Create new instace of presentation_style_assignment and returns object of this C++ class to interact with
                /// </summary>
        static presentation_style_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_style_assignment"); assert(inst); return inst; }

        //TList may be set_of_presentation_style_select or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_presentation_style_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_presentation_style_select or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_presentation_style_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_style_by_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_style_by_context : public virtual presentation_style_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_style_by_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_style_by_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_style_by_context")
        {}

                /// <summary>
                /// Create new instace of presentation_style_by_context and returns object of this C++ class to interact with
                /// </summary>
        static presentation_style_by_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_style_by_context"); assert(inst); return inst; }

        style_context_select_get get_style_context() { return style_context_select_get(m_instance, "style_context", NULL); }
        style_context_select_put put_style_context() { return style_context_select_put(m_instance, "style_context", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_view
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_view : public virtual presentation_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_view
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_view(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_view")
        {}

                /// <summary>
                /// Create new instace of presentation_view and returns object of this C++ class to interact with
                /// </summary>
        static presentation_view Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_view"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presented_item_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presented_item_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presented_item_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presented_item_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presented_item_representation")
        {}

                /// <summary>
                /// Create new instace of presented_item_representation and returns object of this C++ class to interact with
                /// </summary>
        static presented_item_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presented_item_representation"); assert(inst); return inst; }

        presentation_representation_select_get get_presentation() { return presentation_representation_select_get(m_instance, "presentation", NULL); }
        presentation_representation_select_put put_presentation() { return presentation_representation_select_put(m_instance, "presentation", NULL); }

        presented_item get_item();
        void put_item(presented_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of prismatic_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class prismatic_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of prismatic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        prismatic_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "prismatic_pair")
        {}

                /// <summary>
                /// Create new instace of prismatic_pair and returns object of this C++ class to interact with
                /// </summary>
        static prismatic_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "prismatic_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of prismatic_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class prismatic_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of prismatic_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        prismatic_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "prismatic_pair_range")
        {}

                /// <summary>
                /// Create new instace of prismatic_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static prismatic_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "prismatic_pair_range"); assert(inst); return inst; }

        translational_range_measure_get get_lower_limit_actual_translation() { return translational_range_measure_get(m_instance, "lower_limit_actual_translation", NULL); }
        translational_range_measure_put put_lower_limit_actual_translation() { return translational_range_measure_put(m_instance, "lower_limit_actual_translation", NULL); }

        translational_range_measure_get get_upper_limit_actual_translation() { return translational_range_measure_get(m_instance, "upper_limit_actual_translation", NULL); }
        translational_range_measure_put put_upper_limit_actual_translation() { return translational_range_measure_put(m_instance, "upper_limit_actual_translation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of prismatic_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class prismatic_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of prismatic_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        prismatic_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "prismatic_pair_value")
        {}

                /// <summary>
                /// Create new instace of prismatic_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static prismatic_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "prismatic_pair_value"); assert(inst); return inst; }

        Nullable<length_measure> get_actual_translation() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_translation", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_actual_translation(length_measure value) { sdaiPutAttrBN(m_instance, "actual_translation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of process_operation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class process_operation : public virtual action_method
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of process_operation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        process_operation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "process_operation")
        {}

                /// <summary>
                /// Create new instace of process_operation and returns object of this C++ class to interact with
                /// </summary>
        static process_operation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "process_operation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of process_plan
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class process_plan : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of process_plan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        process_plan(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "process_plan")
        {}

                /// <summary>
                /// Create new instace of process_plan and returns object of this C++ class to interact with
                /// </summary>
        static process_plan Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "process_plan"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of process_product_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class process_product_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of process_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        process_product_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "process_product_association")
        {}

                /// <summary>
                /// Create new instace of process_product_association and returns object of this C++ class to interact with
                /// </summary>
        static process_product_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "process_product_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_product_definition_get get_defined_product() { return characterized_product_definition_get(m_instance, "defined_product", NULL); }
        characterized_product_definition_put put_defined_product() { return characterized_product_definition_put(m_instance, "defined_product", NULL); }

        product_definition_process get_process();
        void put_process(product_definition_process inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of process_property_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class process_property_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of process_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        process_property_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "process_property_association")
        {}

                /// <summary>
                /// Create new instace of process_property_association and returns object of this C++ class to interact with
                /// </summary>
        static process_property_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "process_property_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        property_process get_process();
        void put_process(property_process inst);

        property_or_shape_select_get get_property_or_shape() { return property_or_shape_select_get(m_instance, "property_or_shape", NULL); }
        property_or_shape_select_put put_property_or_shape() { return property_or_shape_select_put(m_instance, "property_or_shape", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product")
        {}

                /// <summary>
                /// Create new instace of product and returns object of this C++ class to interact with
                /// </summary>
        static product Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_product_context or list of converible elements
        template <typename TList> void get_frame_of_reference(TList& lst) { set_of_product_contextSerializer<TList> sr; sr.FromAttr(lst, m_instance, "frame_of_reference"); }

        //TList may be set_of_product_context or list of converible elements
        template <typename TList> void put_frame_of_reference(TList& lst) { set_of_product_contextSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "frame_of_reference"); }

        //TArrayElem[] may be product_context[] or array of convertible elements
        template <typename TArrayElem> void put_frame_of_reference(TArrayElem arr[], size_t n) { set_of_product_context lst; ArrayToList(arr, n, lst); put_frame_of_reference(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_category : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_category")
        {}

                /// <summary>
                /// Create new instace of product_category and returns object of this C++ class to interact with
                /// </summary>
        static product_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_category"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_category_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_category_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_category_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_category_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_category_relationship")
        {}

                /// <summary>
                /// Create new instace of product_category_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_category_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_category_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_category get_category();
        void put_category(product_category inst);

        product_category get_sub_category();
        void put_sub_category(product_category inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept")
        {}

                /// <summary>
                /// Create new instace of product_concept and returns object of this C++ class to interact with
                /// </summary>
        static product_concept Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept_context get_market_context();
        void put_market_context(product_concept_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_class : public virtual product_concept, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_class")
        {}

                /// <summary>
                /// Create new instace of product_class and returns object of this C++ class to interact with
                /// </summary>
        static product_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_context")
        {}

                /// <summary>
                /// Create new instace of product_concept_context and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_context"); assert(inst); return inst; }

        label get_market_segment_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "market_segment_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_market_segment_type(label value) { sdaiPutAttrBN(m_instance, "market_segment_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_association")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_association and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_concept();
        void put_concept(product_concept inst);

        product_concept_feature get_feature();
        void put_feature(product_concept_feature inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_category_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_category_usage : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_category_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_category_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_category_usage")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_category_usage and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_category_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_category_usage"); assert(inst); return inst; }

        //TList may be set_of_category_usage_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_category_usage_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_category_usage_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_category_usage_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_relationship")
        {}

                /// <summary>
                /// Create new instace of product_concept_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_relating_product_concept();
        void put_relating_product_concept(product_concept inst);

        product_concept get_related_product_concept();
        void put_related_product_concept(product_concept inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_context")
        {}

                /// <summary>
                /// Create new instace of product_context and returns object of this C++ class to interact with
                /// </summary>
        static product_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_context"); assert(inst); return inst; }

        label get_discipline_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "discipline_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_discipline_type(label value) { sdaiPutAttrBN(m_instance, "discipline_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context")
        {}

                /// <summary>
                /// Create new instace of product_definition_context and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context"); assert(inst); return inst; }

        label get_life_cycle_stage() { label val = NULL; if (sdaiGetAttrBN(m_instance, "life_cycle_stage", sdaiSTRING, &val)) return val; else return NULL; }
        void put_life_cycle_stage(label value) { sdaiPutAttrBN(m_instance, "life_cycle_stage", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context_association")
        {}

                /// <summary>
                /// Create new instace of product_definition_context_association and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context_association"); assert(inst); return inst; }

        product_definition get_definition();
        void put_definition(product_definition inst);

        product_definition_context get_frame_of_reference();
        void put_frame_of_reference(product_definition_context inst);

        product_definition_context_role get_role();
        void put_role(product_definition_context_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context_role")
        {}

                /// <summary>
                /// Create new instace of product_definition_context_role and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product get_of_product();
        void put_of_product(product inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_formation get_relating_product_definition_formation();
        void put_relating_product_definition_formation(product_definition_formation inst);

        product_definition_formation get_related_product_definition_formation();
        void put_related_product_definition_formation(product_definition_formation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation_with_specified_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation_with_specified_source : public virtual product_definition_formation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation_with_specified_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation_with_specified_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation_with_specified_source")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation_with_specified_source and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation_with_specified_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation_with_specified_source"); assert(inst); return inst; }

        Nullable<source> get_make_or_buy() { int v = getENUM("make_or_buy", source_); if (v >= 0) return (source) v; else return Nullable<source>(); }
        void put_make_or_buy(source value) { TextValue val = source_[(int) value]; sdaiPutAttrBN(m_instance, "make_or_buy", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_occurrence_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_occurrence_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_occurrence_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_occurrence_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_occurrence_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_occurrence_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition get_occurrence();
        void put_occurrence(product_definition inst);

        assembly_component_usage get_occurrence_usage();
        void put_occurrence_usage(assembly_component_usage inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_process
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_process : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_process(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_process")
        {}

                /// <summary>
                /// Create new instace of product_definition_process and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_process Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_process"); assert(inst); return inst; }

        identifier get_identification() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "identification", sdaiSTRING, &val)) return val; else return NULL; }
        void put_identification(identifier value) { sdaiPutAttrBN(m_instance, "identification", sdaiSTRING, value); }

        //TList may be set_of_process_product_association or list of converible elements
        template <typename TList> void get_product_definitions(TList& lst) { set_of_process_product_associationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "product_definitions"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_resource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_resource : public virtual action_resource, public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_resource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_resource")
        {}

                /// <summary>
                /// Create new instace of product_definition_resource and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_resource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_resource"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_substitute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_substitute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_substitute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_substitute")
        {}

                /// <summary>
                /// Create new instace of product_definition_substitute and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_substitute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_substitute"); assert(inst); return inst; }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_relationship get_context_relationship();
        void put_context_relationship(product_definition_relationship inst);

        product_definition get_substitute_definition();
        void put_substitute_definition(product_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_identification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_identification : public virtual configuration_item, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_identification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_identification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_identification")
        {}

                /// <summary>
                /// Create new instace of product_identification and returns object of this C++ class to interact with
                /// </summary>
        static product_identification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_identification"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_process_plan
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_process_plan : public virtual product_definition_process
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_process_plan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_process_plan(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_process_plan")
        {}

                /// <summary>
                /// Create new instace of product_process_plan and returns object of this C++ class to interact with
                /// </summary>
        static product_process_plan Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_process_plan"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_related_product_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_related_product_category : public virtual product_category
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_related_product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_related_product_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_related_product_category")
        {}

                /// <summary>
                /// Create new instace of product_related_product_category and returns object of this C++ class to interact with
                /// </summary>
        static product_related_product_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_related_product_category"); assert(inst); return inst; }

        //TList may be set_of_product or list of converible elements
        template <typename TList> void get_products(TList& lst) { set_of_productSerializer<TList> sr; sr.FromAttr(lst, m_instance, "products"); }

        //TList may be set_of_product or list of converible elements
        template <typename TList> void put_products(TList& lst) { set_of_productSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "products"); }

        //TArrayElem[] may be product[] or array of convertible elements
        template <typename TArrayElem> void put_products(TArrayElem arr[], size_t n) { set_of_product lst; ArrayToList(arr, n, lst); put_products(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_specification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_specification : public virtual product_identification, public virtual configurable_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_specification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_specification")
        {}

                /// <summary>
                /// Create new instace of product_specification and returns object of this C++ class to interact with
                /// </summary>
        static product_specification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_specification"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone_definition")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone_definition"); assert(inst); return inst; }

        tolerance_zone get_zone();
        void put_zone(tolerance_zone inst);

        //TList may be set_of_shape_aspect or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_shape_aspectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_shape_aspect or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_shape_aspectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be shape_aspect[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_shape_aspect lst; ArrayToList(arr, n, lst); put_boundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projected_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projected_zone_definition : public virtual tolerance_zone_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projected_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projected_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projected_zone_definition")
        {}

                /// <summary>
                /// Create new instace of projected_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static projected_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projected_zone_definition"); assert(inst); return inst; }

        shape_aspect get_projection_end();
        void put_projection_end(shape_aspect inst);

        measure_with_unit get_projected_length();
        void put_projected_length(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projection_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projection_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projection_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projection_curve")
        {}

                /// <summary>
                /// Create new instace of projection_curve and returns object of this C++ class to interact with
                /// </summary>
        static projection_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projection_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of promissory_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class promissory_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of promissory_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        promissory_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "promissory_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of promissory_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static promissory_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "promissory_usage_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition_relationship")
        {}

                /// <summary>
                /// Create new instace of property_definition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static property_definition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        property_definition get_relating_property_definition();
        void put_relating_property_definition(property_definition inst);

        property_definition get_related_property_definition();
        void put_related_property_definition(property_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_process
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_process : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_process(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_process")
        {}

                /// <summary>
                /// Create new instace of property_process and returns object of this C++ class to interact with
                /// </summary>
        static property_process Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_process"); assert(inst); return inst; }

        identifier get_identification() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "identification", sdaiSTRING, &val)) return val; else return NULL; }
        void put_identification(identifier value) { sdaiPutAttrBN(m_instance, "identification", sdaiSTRING, value); }

        //TList may be set_of_process_property_association or list of converible elements
        template <typename TList> void get_properties(TList& lst) { set_of_process_property_associationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "properties"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of qualified_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class qualified_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of qualified_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        qualified_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "qualified_representation_item")
        {}

                /// <summary>
                /// Create new instace of qualified_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static qualified_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "qualified_representation_item"); assert(inst); return inst; }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void get_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr; sr.FromAttr(lst, m_instance, "qualifiers"); }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void put_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "qualifiers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_qualifier")
        {}

                /// <summary>
                /// Create new instace of uncertainty_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_qualifier"); assert(inst); return inst; }

        label get_measure_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "measure_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_measure_name(label value) { sdaiPutAttrBN(m_instance, "measure_name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of qualitative_uncertainty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class qualitative_uncertainty : public virtual uncertainty_qualifier
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of qualitative_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        qualitative_uncertainty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "qualitative_uncertainty")
        {}

                /// <summary>
                /// Create new instace of qualitative_uncertainty and returns object of this C++ class to interact with
                /// </summary>
        static qualitative_uncertainty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "qualitative_uncertainty"); assert(inst); return inst; }

        text get_uncertainty_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "uncertainty_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_uncertainty_value(text value) { sdaiPutAttrBN(m_instance, "uncertainty_value", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quantified_assembly_component_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quantified_assembly_component_usage : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quantified_assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quantified_assembly_component_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quantified_assembly_component_usage")
        {}

                /// <summary>
                /// Create new instace of quantified_assembly_component_usage and returns object of this C++ class to interact with
                /// </summary>
        static quantified_assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quantified_assembly_component_usage"); assert(inst); return inst; }

        measure_with_unit get_quantity();
        void put_quantity(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quasi_uniform_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quasi_uniform_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quasi_uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quasi_uniform_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quasi_uniform_curve")
        {}

                /// <summary>
                /// Create new instace of quasi_uniform_curve and returns object of this C++ class to interact with
                /// </summary>
        static quasi_uniform_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quasi_uniform_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quasi_uniform_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quasi_uniform_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quasi_uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quasi_uniform_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quasi_uniform_surface")
        {}

                /// <summary>
                /// Create new instace of quasi_uniform_surface and returns object of this C++ class to interact with
                /// </summary>
        static quasi_uniform_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quasi_uniform_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rack_and_pinion_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rack_and_pinion_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rack_and_pinion_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rack_and_pinion_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rack_and_pinion_pair")
        {}

                /// <summary>
                /// Create new instace of rack_and_pinion_pair and returns object of this C++ class to interact with
                /// </summary>
        static rack_and_pinion_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rack_and_pinion_pair"); assert(inst); return inst; }

        Nullable<length_measure> get_pinion_radius() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "pinion_radius", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_pinion_radius(length_measure value) { sdaiPutAttrBN(m_instance, "pinion_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rack_and_pinion_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rack_and_pinion_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rack_and_pinion_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rack_and_pinion_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rack_and_pinion_pair_range")
        {}

                /// <summary>
                /// Create new instace of rack_and_pinion_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static rack_and_pinion_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rack_and_pinion_pair_range"); assert(inst); return inst; }

        translational_range_measure_get get_lower_limit_rack_displacement() { return translational_range_measure_get(m_instance, "lower_limit_rack_displacement", NULL); }
        translational_range_measure_put put_lower_limit_rack_displacement() { return translational_range_measure_put(m_instance, "lower_limit_rack_displacement", NULL); }

        translational_range_measure_get get_upper_limit_rack_displacement() { return translational_range_measure_get(m_instance, "upper_limit_rack_displacement", NULL); }
        translational_range_measure_put put_upper_limit_rack_displacement() { return translational_range_measure_put(m_instance, "upper_limit_rack_displacement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rack_and_pinion_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rack_and_pinion_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rack_and_pinion_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rack_and_pinion_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rack_and_pinion_pair_value")
        {}

                /// <summary>
                /// Create new instace of rack_and_pinion_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static rack_and_pinion_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rack_and_pinion_pair_value"); assert(inst); return inst; }

        Nullable<length_measure> get_actual_displacement() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_displacement", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_actual_displacement(length_measure value) { sdaiPutAttrBN(m_instance, "actual_displacement", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of radius_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class radius_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of radius_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        radius_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "radius_dimension")
        {}

                /// <summary>
                /// Create new instace of radius_dimension and returns object of this C++ class to interact with
                /// </summary>
        static radius_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "radius_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ratio_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ratio_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ratio_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ratio_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ratio_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of ratio_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static ratio_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ratio_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ratio_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ratio_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ratio_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ratio_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ratio_unit")
        {}

                /// <summary>
                /// Create new instace of ratio_unit and returns object of this C++ class to interact with
                /// </summary>
        static ratio_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ratio_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rational_b_spline_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rational_b_spline_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rational_b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rational_b_spline_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rational_b_spline_curve")
        {}

                /// <summary>
                /// Create new instace of rational_b_spline_curve and returns object of this C++ class to interact with
                /// </summary>
        static rational_b_spline_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rational_b_spline_curve"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_weights_data(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "weights_data"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_weights_data(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "weights_data"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_weights_data(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_weights_data(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rational_b_spline_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rational_b_spline_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rational_b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rational_b_spline_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rational_b_spline_surface")
        {}

                /// <summary>
                /// Create new instace of rational_b_spline_surface and returns object of this C++ class to interact with
                /// </summary>
        static rational_b_spline_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rational_b_spline_surface"); assert(inst); return inst; }

        //TList may be list_of_list_of_double or list of converible elements
        template <typename TList> void get_weights_data(TList& lst) { list_of_list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "weights_data"); }

        //TList may be list_of_list_of_double or list of converible elements
        template <typename TList> void put_weights_data(TList& lst) { list_of_list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "weights_data"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of real_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class real_defined_function : public virtual numeric_defined_function
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of real_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        real_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "real_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of real_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class real_literal : public virtual literal_number
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of real_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        real_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "real_literal")
        {}

                /// <summary>
                /// Create new instace of real_literal and returns object of this C++ class to interact with
                /// </summary>
        static real_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "real_literal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of real_numeric_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class real_numeric_variable : public virtual numeric_variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of real_numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        real_numeric_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "real_numeric_variable")
        {}

                /// <summary>
                /// Create new instace of real_numeric_variable and returns object of this C++ class to interact with
                /// </summary>
        static real_numeric_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "real_numeric_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_closed_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_closed_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_closed_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_closed_profile")
        {}

                /// <summary>
                /// Create new instace of rectangular_closed_profile and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_closed_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_closed_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_composite_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_composite_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_composite_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_composite_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_composite_surface")
        {}

                /// <summary>
                /// Create new instace of rectangular_composite_surface and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_composite_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_composite_surface"); assert(inst); return inst; }

        //TList may be list_of_list_of_surface_patch or list of converible elements
        template <typename TList> void get_segments(TList& lst) { list_of_list_of_surface_patchSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segments"); }

        //TList may be list_of_list_of_surface_patch or list of converible elements
        template <typename TList> void put_segments(TList& lst) { list_of_list_of_surface_patchSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segments"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_pattern : public virtual replicate_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_pattern")
        {}

                /// <summary>
                /// Create new instace of rectangular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_pattern"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_trimmed_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_trimmed_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_trimmed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_trimmed_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_trimmed_surface")
        {}

                /// <summary>
                /// Create new instace of rectangular_trimmed_surface and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_trimmed_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_trimmed_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<parameter_value> get_u1() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "u1", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_u1(parameter_value value) { sdaiPutAttrBN(m_instance, "u1", sdaiREAL, &value); }

        Nullable<parameter_value> get_u2() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "u2", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_u2(parameter_value value) { sdaiPutAttrBN(m_instance, "u2", sdaiREAL, &value); }

        Nullable<parameter_value> get_v1() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "v1", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_v1(parameter_value value) { sdaiPutAttrBN(m_instance, "v1", sdaiREAL, &value); }

        Nullable<parameter_value> get_v2() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "v2", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_v2(parameter_value value) { sdaiPutAttrBN(m_instance, "v2", sdaiREAL, &value); }

        Nullable<bool> get_usense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "usense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_usense(bool value) { sdaiPutAttrBN(m_instance, "usense", sdaiBOOLEAN, &value); }

        Nullable<bool> get_vsense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "vsense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_vsense(bool value) { sdaiPutAttrBN(m_instance, "vsense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of referenced_modified_datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class referenced_modified_datum : public virtual datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of referenced_modified_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        referenced_modified_datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "referenced_modified_datum")
        {}

                /// <summary>
                /// Create new instace of referenced_modified_datum and returns object of this C++ class to interact with
                /// </summary>
        static referenced_modified_datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "referenced_modified_datum"); assert(inst); return inst; }

        Nullable<limit_condition> get_modifier() { int v = getENUM("modifier", limit_condition_); if (v >= 0) return (limit_condition) v; else return Nullable<limit_condition>(); }
        void put_modifier(limit_condition value) { TextValue val = limit_condition_[(int) value]; sdaiPutAttrBN(m_instance, "modifier", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of relative_event_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class relative_event_occurrence : public virtual event_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of relative_event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        relative_event_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "relative_event_occurrence")
        {}

                /// <summary>
                /// Create new instace of relative_event_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static relative_event_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "relative_event_occurrence"); assert(inst); return inst; }

        event_occurrence get_base_event();
        void put_base_event(event_occurrence inst);

        time_measure_with_unit get_offset();
        void put_offset(time_measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rep_item_group
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rep_item_group : public virtual group, public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rep_item_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rep_item_group(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rep_item_group")
        {}

                /// <summary>
                /// Create new instace of rep_item_group and returns object of this C++ class to interact with
                /// </summary>
        static rep_item_group Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rep_item_group"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of reparametrised_composite_curve_segment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class reparametrised_composite_curve_segment : public virtual composite_curve_segment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of reparametrised_composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        reparametrised_composite_curve_segment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "reparametrised_composite_curve_segment")
        {}

                /// <summary>
                /// Create new instace of reparametrised_composite_curve_segment and returns object of this C++ class to interact with
                /// </summary>
        static reparametrised_composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "reparametrised_composite_curve_segment"); assert(inst); return inst; }

        Nullable<parameter_value> get_param_length() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "param_length", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_param_length(parameter_value value) { sdaiPutAttrBN(m_instance, "param_length", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of requirement_for_action_resource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class requirement_for_action_resource : public virtual action_resource_requirement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of requirement_for_action_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        requirement_for_action_resource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "requirement_for_action_resource")
        {}

                /// <summary>
                /// Create new instace of requirement_for_action_resource and returns object of this C++ class to interact with
                /// </summary>
        static requirement_for_action_resource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "requirement_for_action_resource"); assert(inst); return inst; }

        //TList may be set_of_action_resource or list of converible elements
        template <typename TList> void get_resources(TList& lst) { set_of_action_resourceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "resources"); }

        //TList may be set_of_action_resource or list of converible elements
        template <typename TList> void put_resources(TList& lst) { set_of_action_resourceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "resources"); }

        //TArrayElem[] may be action_resource[] or array of convertible elements
        template <typename TArrayElem> void put_resources(TArrayElem arr[], size_t n) { set_of_action_resource lst; ArrayToList(arr, n, lst); put_resources(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resource_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resource_property : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resource_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resource_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resource_property")
        {}

                /// <summary>
                /// Create new instace of resource_property and returns object of this C++ class to interact with
                /// </summary>
        static resource_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resource_property"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_resource_definition_get get_resource() { return characterized_resource_definition_get(m_instance, "resource", NULL); }
        characterized_resource_definition_put put_resource() { return characterized_resource_definition_put(m_instance, "resource", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resource_property_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resource_property_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resource_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resource_property_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resource_property_representation")
        {}

                /// <summary>
                /// Create new instace of resource_property_representation and returns object of this C++ class to interact with
                /// </summary>
        static resource_property_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resource_property_representation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        resource_property get_property();
        void put_property(resource_property inst);

        representation get_representation();
        void put_representation(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resource_requirement_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resource_requirement_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resource_requirement_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resource_requirement_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resource_requirement_type")
        {}

                /// <summary>
                /// Create new instace of resource_requirement_type and returns object of this C++ class to interact with
                /// </summary>
        static resource_requirement_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resource_requirement_type"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resulting_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resulting_path : public virtual motion_link_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resulting_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resulting_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resulting_path")
        {}

                /// <summary>
                /// Create new instace of resulting_path and returns object of this C++ class to interact with
                /// </summary>
        static resulting_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resulting_path"); assert(inst); return inst; }

        //TList may be set_of_kinematic_joint or list of converible elements
        template <typename TList> void get_controlling_joints(TList& lst) { set_of_kinematic_jointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "controlling_joints"); }

        //TList may be set_of_kinematic_joint or list of converible elements
        template <typename TList> void put_controlling_joints(TList& lst) { set_of_kinematic_jointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "controlling_joints"); }

        //TArrayElem[] may be kinematic_joint[] or array of convertible elements
        template <typename TArrayElem> void put_controlling_joints(TArrayElem arr[], size_t n) { set_of_kinematic_joint lst; ArrayToList(arr, n, lst); put_controlling_joints(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of retention
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class retention : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of retention
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        retention(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "retention")
        {}

                /// <summary>
                /// Create new instace of retention and returns object of this C++ class to interact with
                /// </summary>
        static retention Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "retention"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolute_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolute_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolute_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolute_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolute_pair")
        {}

                /// <summary>
                /// Create new instace of revolute_pair and returns object of this C++ class to interact with
                /// </summary>
        static revolute_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolute_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolute_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolute_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolute_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolute_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolute_pair_range")
        {}

                /// <summary>
                /// Create new instace of revolute_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static revolute_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolute_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolute_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolute_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolute_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolute_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolute_pair_value")
        {}

                /// <summary>
                /// Create new instace of revolute_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static revolute_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolute_pair_value"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolved_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolved_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolved_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolved_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolved_area_solid")
        {}

                /// <summary>
                /// Create new instace of revolved_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static revolved_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolved_area_solid"); assert(inst); return inst; }

        axis1_placement get_axis();
        void put_axis(axis1_placement inst);

        Nullable<plane_angle_measure> get_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolved_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolved_face_solid : public virtual swept_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolved_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolved_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolved_face_solid")
        {}

                /// <summary>
                /// Create new instace of revolved_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static revolved_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolved_face_solid"); assert(inst); return inst; }

        axis1_placement get_axis();
        void put_axis(axis1_placement inst);

        Nullable<plane_angle_measure> get_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rib
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rib : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rib
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rib(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rib")
        {}

                /// <summary>
                /// Create new instace of rib and returns object of this C++ class to interact with
                /// </summary>
        static rib Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rib"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_angular_wedge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_angular_wedge : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_angular_wedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_angular_wedge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_angular_wedge")
        {}

                /// <summary>
                /// Create new instace of right_angular_wedge and returns object of this C++ class to interact with
                /// </summary>
        static right_angular_wedge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_angular_wedge"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);

        Nullable<positive_length_measure> get_x() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "x", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_x(positive_length_measure value) { sdaiPutAttrBN(m_instance, "x", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_y() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "y", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_y(positive_length_measure value) { sdaiPutAttrBN(m_instance, "y", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_z() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "z", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_z(positive_length_measure value) { sdaiPutAttrBN(m_instance, "z", sdaiREAL, &value); }

        Nullable<length_measure> get_ltx() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "ltx", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_ltx(length_measure value) { sdaiPutAttrBN(m_instance, "ltx", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_circular_cone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_circular_cone : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_circular_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_circular_cone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_circular_cone")
        {}

                /// <summary>
                /// Create new instace of right_circular_cone and returns object of this C++ class to interact with
                /// </summary>
        static right_circular_cone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_circular_cone"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_height() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "height", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_height(positive_length_measure value) { sdaiPutAttrBN(m_instance, "height", sdaiREAL, &value); }

        Nullable<length_measure> get_radius() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius(length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_semi_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_semi_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "semi_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_circular_cylinder
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_circular_cylinder : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_circular_cylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_circular_cylinder(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_circular_cylinder")
        {}

                /// <summary>
                /// Create new instace of right_circular_cylinder and returns object of this C++ class to interact with
                /// </summary>
        static right_circular_cylinder Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_circular_cylinder"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_height() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "height", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_height(positive_length_measure value) { sdaiPutAttrBN(m_instance, "height", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of role_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class role_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of role_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        role_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "role_association")
        {}

                /// <summary>
                /// Create new instace of role_association and returns object of this C++ class to interact with
                /// </summary>
        static role_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "role_association"); assert(inst); return inst; }

        object_role get_role();
        void put_role(object_role inst);

        role_select_get get_item_with_role() { return role_select_get(m_instance, "item_with_role", NULL); }
        role_select_put put_item_with_role() { return role_select_put(m_instance, "item_with_role", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rolling_curve_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rolling_curve_pair : public virtual planar_curve_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rolling_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rolling_curve_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rolling_curve_pair")
        {}

                /// <summary>
                /// Create new instace of rolling_curve_pair and returns object of this C++ class to interact with
                /// </summary>
        static rolling_curve_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rolling_curve_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rolling_curve_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rolling_curve_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rolling_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rolling_curve_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rolling_curve_pair_value")
        {}

                /// <summary>
                /// Create new instace of rolling_curve_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static rolling_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rolling_curve_pair_value"); assert(inst); return inst; }

        point_on_curve get_actual_point_on_curve_1();
        void put_actual_point_on_curve_1(point_on_curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_pair")
        {}

                /// <summary>
                /// Create new instace of surface_pair and returns object of this C++ class to interact with
                /// </summary>
        static surface_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_pair"); assert(inst); return inst; }

        surface get_surface_1();
        void put_surface_1(surface inst);

        surface get_surface_2();
        void put_surface_2(surface inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rolling_surface_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rolling_surface_pair : public virtual surface_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rolling_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rolling_surface_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rolling_surface_pair")
        {}

                /// <summary>
                /// Create new instace of rolling_surface_pair and returns object of this C++ class to interact with
                /// </summary>
        static rolling_surface_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rolling_surface_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rolling_surface_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rolling_surface_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rolling_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rolling_surface_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rolling_surface_pair_value")
        {}

                /// <summary>
                /// Create new instace of rolling_surface_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static rolling_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rolling_surface_pair_value"); assert(inst); return inst; }

        point_on_surface get_actual_point_on_surface();
        void put_actual_point_on_surface(point_on_surface inst);

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rotation_about_direction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rotation_about_direction : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rotation_about_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rotation_about_direction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rotation_about_direction")
        {}

                /// <summary>
                /// Create new instace of rotation_about_direction and returns object of this C++ class to interact with
                /// </summary>
        static rotation_about_direction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rotation_about_direction"); assert(inst); return inst; }

        direction get_direction_of_axis();
        void put_direction_of_axis(direction inst);

        Nullable<plane_angle_measure> get_rotation_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "rotation_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_rotation_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "rotation_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of round_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class round_hole : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        round_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "round_hole")
        {}

                /// <summary>
                /// Create new instace of round_hole and returns object of this C++ class to interact with
                /// </summary>
        static round_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "round_hole"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rounded_u_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rounded_u_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rounded_u_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rounded_u_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rounded_u_profile")
        {}

                /// <summary>
                /// Create new instace of rounded_u_profile and returns object of this C++ class to interact with
                /// </summary>
        static rounded_u_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rounded_u_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of roundness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class roundness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of roundness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        roundness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "roundness_tolerance")
        {}

                /// <summary>
                /// Create new instace of roundness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static roundness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "roundness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_curve_swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_curve_swept_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_curve_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_curve_swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_curve_swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of surface_curve_swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static surface_curve_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_curve_swept_area_solid"); assert(inst); return inst; }

        curve get_directrix();
        void put_directrix(curve inst);

        Nullable<double> get_start_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "start_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_start_param(double value) { sdaiPutAttrBN(m_instance, "start_param", sdaiREAL, &value); }

        Nullable<double> get_end_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "end_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_end_param(double value) { sdaiPutAttrBN(m_instance, "end_param", sdaiREAL, &value); }

        surface get_reference_surface();
        void put_reference_surface(surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ruled_surface_swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ruled_surface_swept_area_solid : public virtual surface_curve_swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ruled_surface_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ruled_surface_swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ruled_surface_swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of ruled_surface_swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static ruled_surface_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ruled_surface_swept_area_solid"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_definition : public virtual tolerance_zone_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_definition")
        {}

                /// <summary>
                /// Create new instace of runout_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_definition"); assert(inst); return inst; }

        runout_zone_orientation get_orientation();
        void put_orientation(runout_zone_orientation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_orientation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_orientation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_orientation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_orientation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_orientation")
        {}

                /// <summary>
                /// Create new instace of runout_zone_orientation and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_orientation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_orientation"); assert(inst); return inst; }

        measure_with_unit get_angle();
        void put_angle(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_orientation_reference_direction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_orientation_reference_direction : public virtual runout_zone_orientation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_orientation_reference_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_orientation_reference_direction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_orientation_reference_direction")
        {}

                /// <summary>
                /// Create new instace of runout_zone_orientation_reference_direction and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_orientation_reference_direction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_orientation_reference_direction"); assert(inst); return inst; }

        shape_aspect_relationship get_orientation_defining_relationship();
        void put_orientation_defining_relationship(shape_aspect_relationship inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of screw_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class screw_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of screw_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        screw_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "screw_pair")
        {}

                /// <summary>
                /// Create new instace of screw_pair and returns object of this C++ class to interact with
                /// </summary>
        static screw_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "screw_pair"); assert(inst); return inst; }

        Nullable<length_measure> get_pitch() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "pitch", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_pitch(length_measure value) { sdaiPutAttrBN(m_instance, "pitch", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of screw_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class screw_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of screw_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        screw_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "screw_pair_range")
        {}

                /// <summary>
                /// Create new instace of screw_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static screw_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "screw_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of screw_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class screw_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of screw_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        screw_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "screw_pair_value")
        {}

                /// <summary>
                /// Create new instace of screw_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static screw_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "screw_pair_value"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of seam_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class seam_curve : public virtual surface_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of seam_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        seam_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "seam_curve")
        {}

                /// <summary>
                /// Create new instace of seam_curve and returns object of this C++ class to interact with
                /// </summary>
        static seam_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "seam_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of seam_edge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class seam_edge : public virtual oriented_edge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of seam_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        seam_edge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "seam_edge")
        {}

                /// <summary>
                /// Create new instace of seam_edge and returns object of this C++ class to interact with
                /// </summary>
        static seam_edge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "seam_edge"); assert(inst); return inst; }

        pcurve get_pcurve_reference();
        void put_pcurve_reference(pcurve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification")
        {}

                /// <summary>
                /// Create new instace of security_classification and returns object of this C++ class to interact with
                /// </summary>
        static security_classification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "security_classification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        security_classification_level get_security_level();
        void put_security_level(security_classification_level inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification_level
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification_level : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification_level
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification_level(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification_level")
        {}

                /// <summary>
                /// Create new instace of security_classification_level and returns object of this C++ class to interact with
                /// </summary>
        static security_classification_level Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "security_classification_level"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of serial_numbered_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class serial_numbered_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of serial_numbered_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        serial_numbered_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "serial_numbered_effectivity")
        {}

                /// <summary>
                /// Create new instace of serial_numbered_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static serial_numbered_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "serial_numbered_effectivity"); assert(inst); return inst; }

        identifier get_effectivity_start_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_start_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_start_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_start_id", sdaiSTRING, value); }

        identifier get_effectivity_end_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_end_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_end_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_end_id", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_associativity : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_associativity")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_associativity and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_deriving_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_deriving_relationship : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_deriving_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_deriving_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_deriving_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_deriving_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_deriving_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_deriving_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_transition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_transition : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_transition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_transition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_transition")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_transition and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_transition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_transition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_defining_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_defining_relationship : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_defining_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_defining_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_defining_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_defining_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_defining_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_defining_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_definition_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_definition_representation : public virtual property_definition_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_definition_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_definition_representation")
        {}

                /// <summary>
                /// Create new instace of shape_definition_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_definition_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_definition_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_dimension_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_dimension_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_dimension_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_dimension_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_dimension_representation")
        {}

                /// <summary>
                /// Create new instace of shape_dimension_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_dimension_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_dimension_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation_with_parameters
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation_with_parameters : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation_with_parameters
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation_with_parameters(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation_with_parameters")
        {}

                /// <summary>
                /// Create new instace of shape_representation_with_parameters and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation_with_parameters Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation_with_parameters"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shell_based_surface_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shell_based_surface_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shell_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shell_based_surface_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shell_based_surface_model")
        {}

                /// <summary>
                /// Create new instace of shell_based_surface_model and returns object of this C++ class to interact with
                /// </summary>
        static shell_based_surface_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shell_based_surface_model"); assert(inst); return inst; }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void get_sbsm_boundary(TList& lst) { set_of_shellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "sbsm_boundary"); }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void put_sbsm_boundary(TList& lst) { set_of_shellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_unit")
        {}

                /// <summary>
                /// Create new instace of si_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_unit"); assert(inst); return inst; }

        Nullable<si_prefix> get_prefix() { int v = getENUM("prefix", si_prefix_); if (v >= 0) return (si_prefix) v; else return Nullable<si_prefix>(); }
        void put_prefix(si_prefix value) { TextValue val = si_prefix_[(int) value]; sdaiPutAttrBN(m_instance, "prefix", sdaiENUM, val); }

        Nullable<si_unit_name> get_name() { int v = getENUM("name", si_unit_name_); if (v >= 0) return (si_unit_name) v; else return Nullable<si_unit_name>(); }
        void put_name(si_unit_name value) { TextValue val = si_unit_name_[(int) value]; sdaiPutAttrBN(m_instance, "name", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_string_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_string_expression : public virtual string_expression, public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_string_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_string_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_string_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sin_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sin_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sin_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sin_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sin_function")
        {}

                /// <summary>
                /// Create new instace of sin_function and returns object of this C++ class to interact with
                /// </summary>
        static sin_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sin_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of slash_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class slash_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of slash_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        slash_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "slash_expression")
        {}

                /// <summary>
                /// Create new instace of slash_expression and returns object of this C++ class to interact with
                /// </summary>
        static slash_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "slash_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sliding_curve_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sliding_curve_pair : public virtual planar_curve_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sliding_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sliding_curve_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sliding_curve_pair")
        {}

                /// <summary>
                /// Create new instace of sliding_curve_pair and returns object of this C++ class to interact with
                /// </summary>
        static sliding_curve_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sliding_curve_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sliding_curve_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sliding_curve_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sliding_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sliding_curve_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sliding_curve_pair_value")
        {}

                /// <summary>
                /// Create new instace of sliding_curve_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static sliding_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sliding_curve_pair_value"); assert(inst); return inst; }

        point_on_curve get_actual_point_on_curve_1();
        void put_actual_point_on_curve_1(point_on_curve inst);

        point_on_curve get_actual_point_on_curve_2();
        void put_actual_point_on_curve_2(point_on_curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sliding_surface_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sliding_surface_pair : public virtual surface_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sliding_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sliding_surface_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sliding_surface_pair")
        {}

                /// <summary>
                /// Create new instace of sliding_surface_pair and returns object of this C++ class to interact with
                /// </summary>
        static sliding_surface_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sliding_surface_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sliding_surface_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sliding_surface_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sliding_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sliding_surface_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sliding_surface_pair_value")
        {}

                /// <summary>
                /// Create new instace of sliding_surface_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static sliding_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sliding_surface_pair_value"); assert(inst); return inst; }

        point_on_surface get_actual_point_on_surface_1();
        void put_actual_point_on_surface_1(point_on_surface inst);

        point_on_surface get_actual_point_on_surface_2();
        void put_actual_point_on_surface_2(point_on_surface inst);

        Nullable<plane_angle_measure> get_actual_rotation() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "actual_rotation", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_actual_rotation(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "actual_rotation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class slot : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "slot")
        {}

                /// <summary>
                /// Create new instace of slot and returns object of this C++ class to interact with
                /// </summary>
        static slot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "slot"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of slot_end
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class slot_end : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of slot_end
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        slot_end(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "slot_end")
        {}

                /// <summary>
                /// Create new instace of slot_end and returns object of this C++ class to interact with
                /// </summary>
        static slot_end Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "slot_end"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_angle_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_angle_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_angle_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_angle_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of solid_angle_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static solid_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_angle_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_angle_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_angle_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_angle_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_angle_unit")
        {}

                /// <summary>
                /// Create new instace of solid_angle_unit and returns object of this C++ class to interact with
                /// </summary>
        static solid_angle_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_angle_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_replica : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_replica")
        {}

                /// <summary>
                /// Create new instace of solid_replica and returns object of this C++ class to interact with
                /// </summary>
        static solid_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_replica"); assert(inst); return inst; }

        solid_model get_parent_solid();
        void put_parent_solid(solid_model inst);

        cartesian_transformation_operator_3d get_transformation();
        void put_transformation(cartesian_transformation_operator_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of specified_higher_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class specified_higher_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of specified_higher_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        specified_higher_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "specified_higher_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of specified_higher_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static specified_higher_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "specified_higher_usage_occurrence"); assert(inst); return inst; }

        assembly_component_usage get_upper_usage();
        void put_upper_usage(assembly_component_usage inst);

        next_assembly_usage_occurrence get_next_usage();
        void put_next_usage(next_assembly_usage_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sphere
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sphere : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sphere(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sphere")
        {}

                /// <summary>
                /// Create new instace of sphere and returns object of this C++ class to interact with
                /// </summary>
        static sphere Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sphere"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        point get_centre();
        void put_centre(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of spherical_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class spherical_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of spherical_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        spherical_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "spherical_pair")
        {}

                /// <summary>
                /// Create new instace of spherical_pair and returns object of this C++ class to interact with
                /// </summary>
        static spherical_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "spherical_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of spherical_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class spherical_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of spherical_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        spherical_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "spherical_pair_range")
        {}

                /// <summary>
                /// Create new instace of spherical_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static spherical_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "spherical_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_yaw() { return rotational_range_measure_get(m_instance, "lower_limit_yaw", NULL); }
        rotational_range_measure_put put_lower_limit_yaw() { return rotational_range_measure_put(m_instance, "lower_limit_yaw", NULL); }

        rotational_range_measure_get get_upper_limit_yaw() { return rotational_range_measure_get(m_instance, "upper_limit_yaw", NULL); }
        rotational_range_measure_put put_upper_limit_yaw() { return rotational_range_measure_put(m_instance, "upper_limit_yaw", NULL); }

        rotational_range_measure_get get_lower_limit_pitch() { return rotational_range_measure_get(m_instance, "lower_limit_pitch", NULL); }
        rotational_range_measure_put put_lower_limit_pitch() { return rotational_range_measure_put(m_instance, "lower_limit_pitch", NULL); }

        rotational_range_measure_get get_upper_limit_pitch() { return rotational_range_measure_get(m_instance, "upper_limit_pitch", NULL); }
        rotational_range_measure_put put_upper_limit_pitch() { return rotational_range_measure_put(m_instance, "upper_limit_pitch", NULL); }

        rotational_range_measure_get get_lower_limit_roll() { return rotational_range_measure_get(m_instance, "lower_limit_roll", NULL); }
        rotational_range_measure_put put_lower_limit_roll() { return rotational_range_measure_put(m_instance, "lower_limit_roll", NULL); }

        rotational_range_measure_get get_upper_limit_roll() { return rotational_range_measure_get(m_instance, "upper_limit_roll", NULL); }
        rotational_range_measure_put put_upper_limit_roll() { return rotational_range_measure_put(m_instance, "upper_limit_roll", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of spherical_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class spherical_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of spherical_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        spherical_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "spherical_pair_value")
        {}

                /// <summary>
                /// Create new instace of spherical_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static spherical_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "spherical_pair_value"); assert(inst); return inst; }

        spatial_rotation_get get_input_orientation() { return spatial_rotation_get(m_instance, "input_orientation", NULL); }
        spatial_rotation_put put_input_orientation() { return spatial_rotation_put(m_instance, "input_orientation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of spherical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class spherical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of spherical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        spherical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "spherical_surface")
        {}

                /// <summary>
                /// Create new instace of spherical_surface and returns object of this C++ class to interact with
                /// </summary>
        static spherical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "spherical_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sql_mappable_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sql_mappable_defined_function : public virtual defined_function
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sql_mappable_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sql_mappable_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sql_mappable_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of square_root_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class square_root_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of square_root_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        square_root_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "square_root_function")
        {}

                /// <summary>
                /// Create new instace of square_root_function and returns object of this C++ class to interact with
                /// </summary>
        static square_root_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "square_root_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of square_u_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class square_u_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of square_u_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        square_u_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "square_u_profile")
        {}

                /// <summary>
                /// Create new instace of square_u_profile and returns object of this C++ class to interact with
                /// </summary>
        static square_u_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "square_u_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of standard_uncertainty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class standard_uncertainty : public virtual uncertainty_qualifier
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of standard_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        standard_uncertainty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "standard_uncertainty")
        {}

                /// <summary>
                /// Create new instace of standard_uncertainty and returns object of this C++ class to interact with
                /// </summary>
        static standard_uncertainty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "standard_uncertainty"); assert(inst); return inst; }

        Nullable<double> get_uncertainty_value() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "uncertainty_value", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_uncertainty_value(double value) { sdaiPutAttrBN(m_instance, "uncertainty_value", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of straightness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class straightness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of straightness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        straightness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "straightness_tolerance")
        {}

                /// <summary>
                /// Create new instace of straightness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static straightness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "straightness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of string_defined_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class string_defined_function : public virtual defined_function, public virtual string_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of string_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        string_defined_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "string_defined_function")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of string_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class string_literal : public virtual simple_string_expression, public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of string_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        string_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "string_literal")
        {}

                /// <summary>
                /// Create new instace of string_literal and returns object of this C++ class to interact with
                /// </summary>
        static string_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "string_literal"); assert(inst); return inst; }

        TextValue get_the_value() { TextValue val = NULL; if (sdaiGetAttrBN(m_instance, "the_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_the_value(TextValue value) { sdaiPutAttrBN(m_instance, "the_value", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of string_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class string_variable : public virtual simple_string_expression, public virtual variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of string_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        string_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "string_variable")
        {}

                /// <summary>
                /// Create new instace of string_variable and returns object of this C++ class to interact with
                /// </summary>
        static string_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "string_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of structured_dimension_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class structured_dimension_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of structured_dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        structured_dimension_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "structured_dimension_callout")
        {}

                /// <summary>
                /// Create new instace of structured_dimension_callout and returns object of this C++ class to interact with
                /// </summary>
        static structured_dimension_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "structured_dimension_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of subedge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class subedge : public virtual edge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of subedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        subedge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "subedge")
        {}

                /// <summary>
                /// Create new instace of subedge and returns object of this C++ class to interact with
                /// </summary>
        static subedge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "subedge"); assert(inst); return inst; }

        edge get_parent_edge();
        void put_parent_edge(edge inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of subface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class subface : public virtual face
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of subface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        subface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "subface")
        {}

                /// <summary>
                /// Create new instace of subface and returns object of this C++ class to interact with
                /// </summary>
        static subface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "subface"); assert(inst); return inst; }

        face get_parent_face();
        void put_parent_face(face inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of substring_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class substring_expression : public virtual string_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of substring_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        substring_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "substring_expression")
        {}

                /// <summary>
                /// Create new instace of substring_expression and returns object of this C++ class to interact with
                /// </summary>
        static substring_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "substring_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_condition_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_condition_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_condition_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_condition_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_condition_callout")
        {}

                /// <summary>
                /// Create new instace of surface_condition_callout and returns object of this C++ class to interact with
                /// </summary>
        static surface_condition_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_condition_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_surface")
        {}

                /// <summary>
                /// Create new instace of swept_surface and returns object of this C++ class to interact with
                /// </summary>
        static swept_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_surface"); assert(inst); return inst; }

        curve get_swept_curve();
        void put_swept_curve(curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_of_linear_extrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_of_linear_extrusion : public virtual swept_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_of_linear_extrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_of_linear_extrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_of_linear_extrusion")
        {}

                /// <summary>
                /// Create new instace of surface_of_linear_extrusion and returns object of this C++ class to interact with
                /// </summary>
        static surface_of_linear_extrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_of_linear_extrusion"); assert(inst); return inst; }

        vector get_extrusion_axis();
        void put_extrusion_axis(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_of_revolution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_of_revolution : public virtual swept_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_of_revolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_of_revolution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_of_revolution")
        {}

                /// <summary>
                /// Create new instace of surface_of_revolution and returns object of this C++ class to interact with
                /// </summary>
        static surface_of_revolution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_of_revolution"); assert(inst); return inst; }

        axis1_placement get_axis_position();
        void put_axis_position(axis1_placement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_pair_range")
        {}

                /// <summary>
                /// Create new instace of surface_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static surface_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_pair_range"); assert(inst); return inst; }

        rectangular_trimmed_surface get_range_on_surface_1();
        void put_range_on_surface_1(rectangular_trimmed_surface inst);

        rectangular_trimmed_surface get_range_on_surface_2();
        void put_range_on_surface_2(rectangular_trimmed_surface inst);

        rotational_range_measure_get get_lower_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_actual_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_actual_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_actual_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_actual_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_actual_rotation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_patch
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_patch : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_patch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_patch(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_patch")
        {}

                /// <summary>
                /// Create new instace of surface_patch and returns object of this C++ class to interact with
                /// </summary>
        static surface_patch Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_patch"); assert(inst); return inst; }

        bounded_surface get_parent_surface();
        void put_parent_surface(bounded_surface inst);

        Nullable<transition_code> get_u_transition() { int v = getENUM("u_transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_u_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "u_transition", sdaiENUM, val); }

        Nullable<transition_code> get_v_transition() { int v = getENUM("v_transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_v_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "v_transition", sdaiENUM, val); }

        Nullable<bool> get_u_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "u_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_u_sense(bool value) { sdaiPutAttrBN(m_instance, "u_sense", sdaiBOOLEAN, &value); }

        Nullable<bool> get_v_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "v_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_v_sense(bool value) { sdaiPutAttrBN(m_instance, "v_sense", sdaiBOOLEAN, &value); }

        //TList may be bag_of_rectangular_composite_surface or list of converible elements
        template <typename TList> void get_using_surfaces(TList& lst) { bag_of_rectangular_composite_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "using_surfaces"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_profile_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_profile_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_profile_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_profile_tolerance")
        {}

                /// <summary>
                /// Create new instace of surface_profile_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static surface_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_profile_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_rendering_properties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_rendering_properties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_rendering_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_rendering_properties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_rendering_properties")
        {}

                /// <summary>
                /// Create new instace of surface_rendering_properties and returns object of this C++ class to interact with
                /// </summary>
        static surface_rendering_properties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_rendering_properties"); assert(inst); return inst; }

        colour get_rendered_colour();
        void put_rendered_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_replica : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_replica")
        {}

                /// <summary>
                /// Create new instace of surface_replica and returns object of this C++ class to interact with
                /// </summary>
        static surface_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_replica"); assert(inst); return inst; }

        surface get_parent_surface();
        void put_parent_surface(surface inst);

        cartesian_transformation_operator_3d get_transformation();
        void put_transformation(cartesian_transformation_operator_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_side_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_side_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_side_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_side_style")
        {}

                /// <summary>
                /// Create new instace of surface_side_style and returns object of this C++ class to interact with
                /// </summary>
        static surface_side_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_side_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_surface_style_element_select or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_surface_style_element_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_surface_style_element_select or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_surface_style_element_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_boundary
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_boundary : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_boundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_boundary(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_boundary")
        {}

                /// <summary>
                /// Create new instace of surface_style_boundary and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_boundary Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_boundary"); assert(inst); return inst; }

        curve_or_render_get get_style_of_boundary() { return curve_or_render_get(m_instance, "style_of_boundary", NULL); }
        curve_or_render_put put_style_of_boundary() { return curve_or_render_put(m_instance, "style_of_boundary", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_control_grid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_control_grid : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_control_grid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_control_grid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_control_grid")
        {}

                /// <summary>
                /// Create new instace of surface_style_control_grid and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_control_grid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_control_grid"); assert(inst); return inst; }

        curve_or_render_get get_style_of_control_grid() { return curve_or_render_get(m_instance, "style_of_control_grid", NULL); }
        curve_or_render_put put_style_of_control_grid() { return curve_or_render_put(m_instance, "style_of_control_grid", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_fill_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_fill_area : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_fill_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_fill_area")
        {}

                /// <summary>
                /// Create new instace of surface_style_fill_area and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_fill_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_fill_area"); assert(inst); return inst; }

        fill_area_style get_fill_area();
        void put_fill_area(fill_area_style inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_parameter_line
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_parameter_line : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_parameter_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_parameter_line(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_parameter_line")
        {}

                /// <summary>
                /// Create new instace of surface_style_parameter_line and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_parameter_line Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_parameter_line"); assert(inst); return inst; }

        curve_or_render_get get_style_of_parameter_lines() { return curve_or_render_get(m_instance, "style_of_parameter_lines", NULL); }
        curve_or_render_put put_style_of_parameter_lines() { return curve_or_render_put(m_instance, "style_of_parameter_lines", NULL); }

        //TList may be set_of_direction_count_select or list of converible elements
        template <typename TList> void get_direction_counts(TList& lst) { set_of_direction_count_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "direction_counts"); }

        //TList may be set_of_direction_count_select or list of converible elements
        template <typename TList> void put_direction_counts(TList& lst) { set_of_direction_count_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "direction_counts"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient"); assert(inst); return inst; }

        Nullable<double> get_ambient_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "ambient_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_ambient_reflectance(double value) { sdaiPutAttrBN(m_instance, "ambient_reflectance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient_diffuse : public virtual surface_style_reflectance_ambient
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient_diffuse(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient_diffuse")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient_diffuse and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient_diffuse Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse"); assert(inst); return inst; }

        Nullable<double> get_diffuse_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "diffuse_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_diffuse_reflectance(double value) { sdaiPutAttrBN(m_instance, "diffuse_reflectance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse_specular
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient_diffuse_specular : public virtual surface_style_reflectance_ambient_diffuse
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse_specular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient_diffuse_specular")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient_diffuse_specular and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient_diffuse_specular Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse_specular"); assert(inst); return inst; }

        Nullable<double> get_specular_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "specular_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_specular_reflectance(double value) { sdaiPutAttrBN(m_instance, "specular_reflectance", sdaiREAL, &value); }

        Nullable<double> get_specular_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "specular_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_specular_exponent(double value) { sdaiPutAttrBN(m_instance, "specular_exponent", sdaiREAL, &value); }

        colour get_specular_colour();
        void put_specular_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_rendering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_rendering : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_rendering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_rendering")
        {}

                /// <summary>
                /// Create new instace of surface_style_rendering and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_rendering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_rendering"); assert(inst); return inst; }

        Nullable<shading_surface_method> get_rendering_method() { int v = getENUM("rendering_method", shading_surface_method_); if (v >= 0) return (shading_surface_method) v; else return Nullable<shading_surface_method>(); }
        void put_rendering_method(shading_surface_method value) { TextValue val = shading_surface_method_[(int) value]; sdaiPutAttrBN(m_instance, "rendering_method", sdaiENUM, val); }

        colour get_surface_colour();
        void put_surface_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_rendering_with_properties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_rendering_with_properties : public virtual surface_style_rendering
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_rendering_with_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_rendering_with_properties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_rendering_with_properties")
        {}

                /// <summary>
                /// Create new instace of surface_style_rendering_with_properties and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_rendering_with_properties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_rendering_with_properties"); assert(inst); return inst; }

        //TList may be set_of_rendering_properties_select or list of converible elements
        template <typename TList> void get_properties(TList& lst) { set_of_rendering_properties_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "properties"); }

        //TList may be set_of_rendering_properties_select or list of converible elements
        template <typename TList> void put_properties(TList& lst) { set_of_rendering_properties_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "properties"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_segmentation_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_segmentation_curve : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_segmentation_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_segmentation_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_segmentation_curve")
        {}

                /// <summary>
                /// Create new instace of surface_style_segmentation_curve and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_segmentation_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_segmentation_curve"); assert(inst); return inst; }

        curve_or_render_get get_style_of_segmentation_curve() { return curve_or_render_get(m_instance, "style_of_segmentation_curve", NULL); }
        curve_or_render_put put_style_of_segmentation_curve() { return curve_or_render_put(m_instance, "style_of_segmentation_curve", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_silhouette
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_silhouette : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_silhouette
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_silhouette(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_silhouette")
        {}

                /// <summary>
                /// Create new instace of surface_style_silhouette and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_silhouette Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_silhouette"); assert(inst); return inst; }

        curve_or_render_get get_style_of_silhouette() { return curve_or_render_get(m_instance, "style_of_silhouette", NULL); }
        curve_or_render_put put_style_of_silhouette() { return curve_or_render_put(m_instance, "style_of_silhouette", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_transparent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_transparent : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_transparent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_transparent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_transparent")
        {}

                /// <summary>
                /// Create new instace of surface_style_transparent and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_transparent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_transparent"); assert(inst); return inst; }

        Nullable<double> get_transparency() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "transparency", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_transparency(double value) { sdaiPutAttrBN(m_instance, "transparency", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_usage : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_usage")
        {}

                /// <summary>
                /// Create new instace of surface_style_usage and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_usage"); assert(inst); return inst; }

        Nullable<surface_side> get_side() { int v = getENUM("side", surface_side_); if (v >= 0) return (surface_side) v; else return Nullable<surface_side>(); }
        void put_side(surface_side value) { TextValue val = surface_side_[(int) value]; sdaiPutAttrBN(m_instance, "side", sdaiENUM, val); }

        surface_side_style_select_get get_style() { return surface_side_style_select_get(m_instance, "style", NULL); }
        surface_side_style_select_put put_style() { return surface_side_style_select_put(m_instance, "style", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_texture_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_texture_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_texture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_texture_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_texture_representation")
        {}

                /// <summary>
                /// Create new instace of surface_texture_representation and returns object of this C++ class to interact with
                /// </summary>
        static surface_texture_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_texture_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_disk_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_disk_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_disk_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_disk_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_disk_solid")
        {}

                /// <summary>
                /// Create new instace of swept_disk_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_disk_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_disk_solid"); assert(inst); return inst; }

        curve get_directrix();
        void put_directrix(curve inst);

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_inner_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "inner_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_inner_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "inner_radius", sdaiREAL, &value); }

        Nullable<double> get_start_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "start_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_start_param(double value) { sdaiPutAttrBN(m_instance, "start_param", sdaiREAL, &value); }

        Nullable<double> get_end_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "end_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_end_param(double value) { sdaiPutAttrBN(m_instance, "end_param", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_colour")
        {}

                /// <summary>
                /// Create new instace of symbol_colour and returns object of this C++ class to interact with
                /// </summary>
        static symbol_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_colour"); assert(inst); return inst; }

        colour get_colour_of_symbol();
        void put_colour_of_symbol(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_representation_map
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_representation_map : public virtual representation_map
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_representation_map(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_representation_map")
        {}

                /// <summary>
                /// Create new instace of symbol_representation_map and returns object of this C++ class to interact with
                /// </summary>
        static symbol_representation_map Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_representation_map"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_style")
        {}

                /// <summary>
                /// Create new instace of symbol_style and returns object of this C++ class to interact with
                /// </summary>
        static symbol_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        symbol_style_select_get get_style_of_symbol() { return symbol_style_select_get(m_instance, "style_of_symbol", NULL); }
        symbol_style_select_put put_style_of_symbol() { return symbol_style_select_put(m_instance, "style_of_symbol", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_target
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_target : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_target(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_target")
        {}

                /// <summary>
                /// Create new instace of symbol_target and returns object of this C++ class to interact with
                /// </summary>
        static symbol_target Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_target"); assert(inst); return inst; }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }

        Nullable<positive_ratio_measure> get_x_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "x_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_x_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "x_scale", sdaiREAL, &value); }

        Nullable<positive_ratio_measure> get_y_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "y_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_y_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "y_scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symmetric_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symmetric_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symmetric_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symmetric_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symmetric_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of symmetric_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static symmetric_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symmetric_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_basis_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "basis_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symmetry_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symmetry_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symmetry_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symmetry_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symmetry_tolerance")
        {}

                /// <summary>
                /// Create new instace of symmetry_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static symmetry_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symmetry_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tactile_appearance_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tactile_appearance_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tactile_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tactile_appearance_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tactile_appearance_representation")
        {}

                /// <summary>
                /// Create new instace of tactile_appearance_representation and returns object of this C++ class to interact with
                /// </summary>
        static tactile_appearance_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tactile_appearance_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tan_function
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tan_function : public virtual unary_function_call
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tan_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tan_function(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tan_function")
        {}

                /// <summary>
                /// Create new instace of tan_function and returns object of this C++ class to interact with
                /// </summary>
        static tan_function Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tan_function"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tangent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tangent : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tangent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tangent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tangent")
        {}

                /// <summary>
                /// Create new instace of tangent and returns object of this C++ class to interact with
                /// </summary>
        static tangent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tangent"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of taper
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class taper : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of taper
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        taper(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "taper")
        {}

                /// <summary>
                /// Create new instace of taper and returns object of this C++ class to interact with
                /// </summary>
        static taper Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "taper"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tee_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tee_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tee_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tee_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tee_profile")
        {}

                /// <summary>
                /// Create new instace of tee_profile and returns object of this C++ class to interact with
                /// </summary>
        static tee_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tee_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_associated_curves
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_associated_curves : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_associated_curves(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_associated_curves")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_associated_curves and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_associated_curves"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_curves"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_curves"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_associated_curves(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_associated_curves(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_blanking_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_blanking_box : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_blanking_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_blanking_box")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_blanking_box and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_blanking_box"); assert(inst); return inst; }

        planar_box get_blanking();
        void put_blanking(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_extent : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_extent")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_extent and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_extent"); assert(inst); return inst; }

        planar_extent get_extent();
        void put_extent(planar_extent inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_string_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_string_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_string_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_string_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_string_representation")
        {}

                /// <summary>
                /// Create new instace of text_string_representation and returns object of this C++ class to interact with
                /// </summary>
        static text_string_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_string_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style")
        {}

                /// <summary>
                /// Create new instace of text_style and returns object of this C++ class to interact with
                /// </summary>
        static text_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        character_style_select_get get_character_appearance() { return character_style_select_get(m_instance, "character_appearance", NULL); }
        character_style_select_put put_character_appearance() { return character_style_select_put(m_instance, "character_appearance", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_for_defined_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_for_defined_font : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_for_defined_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_for_defined_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_for_defined_font")
        {}

                /// <summary>
                /// Create new instace of text_style_for_defined_font and returns object of this C++ class to interact with
                /// </summary>
        static text_style_for_defined_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_for_defined_font"); assert(inst); return inst; }

        colour get_text_colour();
        void put_text_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_box_characteristics
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_box_characteristics : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_box_characteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_box_characteristics(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_box_characteristics")
        {}

                /// <summary>
                /// Create new instace of text_style_with_box_characteristics and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_box_characteristics Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_box_characteristics"); assert(inst); return inst; }

        //TList may be set_of_box_characteristic_select or list of converible elements
        template <typename TList> void get_characteristics(TList& lst) { set_of_box_characteristic_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "characteristics"); }

        //TList may be set_of_box_characteristic_select or list of converible elements
        template <typename TList> void put_characteristics(TList& lst) { set_of_box_characteristic_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "characteristics"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_mirror
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_mirror : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_mirror
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_mirror(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_mirror")
        {}

                /// <summary>
                /// Create new instace of text_style_with_mirror and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_mirror Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_mirror"); assert(inst); return inst; }

        axis2_placement_get get_mirror_placement() { return axis2_placement_get(m_instance, "mirror_placement", NULL); }
        axis2_placement_put put_mirror_placement() { return axis2_placement_put(m_instance, "mirror_placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_spacing
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_spacing : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_spacing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_spacing(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_spacing")
        {}

                /// <summary>
                /// Create new instace of text_style_with_spacing and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_spacing Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_spacing"); assert(inst); return inst; }

        character_spacing_select_get get_character_spacing() { return character_spacing_select_get(m_instance, "character_spacing", NULL); }
        character_spacing_select_put put_character_spacing() { return character_spacing_select_put(m_instance, "character_spacing", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermodynamic_temperature_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermodynamic_temperature_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermodynamic_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermodynamic_temperature_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermodynamic_temperature_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of thermodynamic_temperature_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermodynamic_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermodynamic_temperature_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermodynamic_temperature_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermodynamic_temperature_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermodynamic_temperature_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermodynamic_temperature_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermodynamic_temperature_unit")
        {}

                /// <summary>
                /// Create new instace of thermodynamic_temperature_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermodynamic_temperature_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermodynamic_temperature_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thread
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thread : public virtual feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thread
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thread(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thread")
        {}

                /// <summary>
                /// Create new instace of thread and returns object of this C++ class to interact with
                /// </summary>
        static thread Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thread"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval")
        {}

                /// <summary>
                /// Create new instace of time_interval and returns object of this C++ class to interact with
                /// </summary>
        static time_interval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_based_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_based_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_based_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_based_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_based_effectivity")
        {}

                /// <summary>
                /// Create new instace of time_interval_based_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_based_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_based_effectivity"); assert(inst); return inst; }

        time_interval get_effectivity_period();
        void put_effectivity_period(time_interval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_role")
        {}

                /// <summary>
                /// Create new instace of time_interval_role and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_with_bounds
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_with_bounds : public virtual time_interval
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_with_bounds
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_with_bounds(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_with_bounds")
        {}

                /// <summary>
                /// Create new instace of time_interval_with_bounds and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_with_bounds Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_with_bounds"); assert(inst); return inst; }

        date_time_or_event_occurrence_get get_primary_bound() { return date_time_or_event_occurrence_get(m_instance, "primary_bound", NULL); }
        date_time_or_event_occurrence_put put_primary_bound() { return date_time_or_event_occurrence_put(m_instance, "primary_bound", NULL); }

        date_time_or_event_occurrence_get get_secondary_bound() { return date_time_or_event_occurrence_get(m_instance, "secondary_bound", NULL); }
        date_time_or_event_occurrence_put put_secondary_bound() { return date_time_or_event_occurrence_put(m_instance, "secondary_bound", NULL); }

        time_measure_with_unit get_duration();
        void put_duration(time_measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of time_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static time_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_unit")
        {}

                /// <summary>
                /// Create new instace of time_unit and returns object of this C++ class to interact with
                /// </summary>
        static time_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_value : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_value")
        {}

                /// <summary>
                /// Create new instace of tolerance_value and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_value"); assert(inst); return inst; }

        measure_with_unit get_lower_bound();
        void put_lower_bound(measure_with_unit inst);

        measure_with_unit get_upper_bound();
        void put_upper_bound(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone"); assert(inst); return inst; }

        //TList may be set_of_geometric_tolerance or list of converible elements
        template <typename TList> void get_defining_tolerance(TList& lst) { set_of_geometric_toleranceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "defining_tolerance"); }

        //TList may be set_of_geometric_tolerance or list of converible elements
        template <typename TList> void put_defining_tolerance(TList& lst) { set_of_geometric_toleranceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "defining_tolerance"); }

        //TArrayElem[] may be geometric_tolerance[] or array of convertible elements
        template <typename TArrayElem> void put_defining_tolerance(TArrayElem arr[], size_t n) { set_of_geometric_tolerance lst; ArrayToList(arr, n, lst); put_defining_tolerance(lst); }

        tolerance_zone_form get_form();
        void put_form(tolerance_zone_form inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone_form
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone_form : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone_form
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone_form(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone_form")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone_form and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone_form Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone_form"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of torus
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class torus : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of torus
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        torus(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "torus")
        {}

                /// <summary>
                /// Create new instace of torus and returns object of this C++ class to interact with
                /// </summary>
        static torus Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "torus"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_major_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "major_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_major_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "major_radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_minor_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "minor_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_minor_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "minor_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of total_runout_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class total_runout_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of total_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        total_runout_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "total_runout_tolerance")
        {}

                /// <summary>
                /// Create new instace of total_runout_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static total_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "total_runout_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of trimmed_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class trimmed_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of trimmed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        trimmed_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "trimmed_curve")
        {}

                /// <summary>
                /// Create new instace of trimmed_curve and returns object of this C++ class to interact with
                /// </summary>
        static trimmed_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "trimmed_curve"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void get_trim_1(TList& lst) { set_of_trimming_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "trim_1"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void put_trim_1(TList& lst) { set_of_trimming_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "trim_1"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void get_trim_2(TList& lst) { set_of_trimming_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "trim_2"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void put_trim_2(TList& lst) { set_of_trimming_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "trim_2"); }

        Nullable<bool> get_sense_agreement() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "sense_agreement", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_sense_agreement(bool value) { sdaiPutAttrBN(m_instance, "sense_agreement", sdaiBOOLEAN, &value); }

        Nullable<trimming_preference> get_master_representation() { int v = getENUM("master_representation", trimming_preference_); if (v >= 0) return (trimming_preference) v; else return Nullable<trimming_preference>(); }
        void put_master_representation(trimming_preference value) { TextValue val = trimming_preference_[(int) value]; sdaiPutAttrBN(m_instance, "master_representation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of two_direction_repeat_factor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class two_direction_repeat_factor : public virtual one_direction_repeat_factor
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of two_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        two_direction_repeat_factor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "two_direction_repeat_factor")
        {}

                /// <summary>
                /// Create new instace of two_direction_repeat_factor and returns object of this C++ class to interact with
                /// </summary>
        static two_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "two_direction_repeat_factor"); assert(inst); return inst; }

        vector get_second_repeat_factor();
        void put_second_repeat_factor(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of type_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class type_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of type_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        type_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "type_qualifier")
        {}

                /// <summary>
                /// Create new instace of type_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static type_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "type_qualifier"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_assigned_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_assigned_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_assigned_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_assigned_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_assigned_representation")
        {}

                /// <summary>
                /// Create new instace of uncertainty_assigned_representation and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_assigned_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_assigned_representation"); assert(inst); return inst; }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void get_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "uncertainty"); }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void put_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "uncertainty"); }

        //TArrayElem[] may be uncertainty_measure_with_unit[] or array of convertible elements
        template <typename TArrayElem> void put_uncertainty(TArrayElem arr[], size_t n) { set_of_uncertainty_measure_with_unit lst; ArrayToList(arr, n, lst); put_uncertainty(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of uncertainty_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_measure_with_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unconstrained_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unconstrained_pair : public virtual kinematic_pair
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unconstrained_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unconstrained_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unconstrained_pair")
        {}

                /// <summary>
                /// Create new instace of unconstrained_pair and returns object of this C++ class to interact with
                /// </summary>
        static unconstrained_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "unconstrained_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unconstrained_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unconstrained_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unconstrained_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unconstrained_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unconstrained_pair_value")
        {}

                /// <summary>
                /// Create new instace of unconstrained_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static unconstrained_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "unconstrained_pair_value"); assert(inst); return inst; }

        axis2_placement_3d get_actual_placement();
        void put_actual_placement(axis2_placement_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uniform_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uniform_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uniform_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uniform_curve")
        {}

                /// <summary>
                /// Create new instace of uniform_curve and returns object of this C++ class to interact with
                /// </summary>
        static uniform_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uniform_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uniform_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uniform_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uniform_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uniform_surface")
        {}

                /// <summary>
                /// Create new instace of uniform_surface and returns object of this C++ class to interact with
                /// </summary>
        static uniform_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uniform_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of universal_pair_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class universal_pair_range : public virtual simple_pair_range
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of universal_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        universal_pair_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "universal_pair_range")
        {}

                /// <summary>
                /// Create new instace of universal_pair_range and returns object of this C++ class to interact with
                /// </summary>
        static universal_pair_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "universal_pair_range"); assert(inst); return inst; }

        rotational_range_measure_get get_lower_limit_first_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_first_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_first_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_first_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_first_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_first_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_first_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_first_rotation", NULL); }

        rotational_range_measure_get get_lower_limit_second_rotation() { return rotational_range_measure_get(m_instance, "lower_limit_second_rotation", NULL); }
        rotational_range_measure_put put_lower_limit_second_rotation() { return rotational_range_measure_put(m_instance, "lower_limit_second_rotation", NULL); }

        rotational_range_measure_get get_upper_limit_second_rotation() { return rotational_range_measure_get(m_instance, "upper_limit_second_rotation", NULL); }
        rotational_range_measure_put put_upper_limit_second_rotation() { return rotational_range_measure_put(m_instance, "upper_limit_second_rotation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of universal_pair_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class universal_pair_value : public virtual pair_value
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of universal_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        universal_pair_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "universal_pair_value")
        {}

                /// <summary>
                /// Create new instace of universal_pair_value and returns object of this C++ class to interact with
                /// </summary>
        static universal_pair_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "universal_pair_value"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_first_rotation_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "first_rotation_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_first_rotation_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "first_rotation_angle", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_second_rotation_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "second_rotation_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_second_rotation_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "second_rotation_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of value_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class value_range : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of value_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        value_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "value_range")
        {}

                /// <summary>
                /// Create new instace of value_range and returns object of this C++ class to interact with
                /// </summary>
        static value_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "value_range"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of value_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class value_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of value_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        value_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "value_representation_item")
        {}

                /// <summary>
                /// Create new instace of value_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static value_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "value_representation_item"); assert(inst); return inst; }

        measure_value_get get_value_component() { return measure_value_get(m_instance, "value_component", NULL); }
        measure_value_put put_value_component() { return measure_value_put(m_instance, "value_component", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vector
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vector : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vector(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vector")
        {}

                /// <summary>
                /// Create new instace of vector and returns object of this C++ class to interact with
                /// </summary>
        static vector Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vector"); assert(inst); return inst; }

        direction get_orientation();
        void put_orientation(direction inst);

        Nullable<length_measure> get_magnitude() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "magnitude", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_magnitude(length_measure value) { sdaiPutAttrBN(m_instance, "magnitude", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vector_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vector_style : public virtual pre_defined_terminator_symbol, public virtual curve_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vector_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vector_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vector_style")
        {}

                /// <summary>
                /// Create new instace of vector_style and returns object of this C++ class to interact with
                /// </summary>
        static vector_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vector_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vee_profile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vee_profile : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vee_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vee_profile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vee_profile")
        {}

                /// <summary>
                /// Create new instace of vee_profile and returns object of this C++ class to interact with
                /// </summary>
        static vee_profile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vee_profile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of versioned_action_request
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class versioned_action_request : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of versioned_action_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        versioned_action_request(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "versioned_action_request")
        {}

                /// <summary>
                /// Create new instace of versioned_action_request and returns object of this C++ class to interact with
                /// </summary>
        static versioned_action_request Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "versioned_action_request"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_version() { label val = NULL; if (sdaiGetAttrBN(m_instance, "version", sdaiSTRING, &val)) return val; else return NULL; }
        void put_version(label value) { sdaiPutAttrBN(m_instance, "version", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of versioned_action_request_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class versioned_action_request_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of versioned_action_request_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        versioned_action_request_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "versioned_action_request_relationship")
        {}

                /// <summary>
                /// Create new instace of versioned_action_request_relationship and returns object of this C++ class to interact with
                /// </summary>
        static versioned_action_request_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "versioned_action_request_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        versioned_action_request get_relating_versioned_action_request();
        void put_relating_versioned_action_request(versioned_action_request inst);

        versioned_action_request get_related_versioned_action_request();
        void put_related_versioned_action_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex")
        {}

                /// <summary>
                /// Create new instace of vertex and returns object of this C++ class to interact with
                /// </summary>
        static vertex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex_loop : public virtual loop
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex_loop")
        {}

                /// <summary>
                /// Create new instace of vertex_loop and returns object of this C++ class to interact with
                /// </summary>
        static vertex_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex_loop"); assert(inst); return inst; }

        vertex get_loop_vertex();
        void put_loop_vertex(vertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex_point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex_point : public virtual vertex, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex_point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex_point")
        {}

                /// <summary>
                /// Create new instace of vertex_point and returns object of this C++ class to interact with
                /// </summary>
        static vertex_point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex_point"); assert(inst); return inst; }

        point get_vertex_geometry();
        void put_vertex_geometry(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of view_volume
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class view_volume : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of view_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        view_volume(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "view_volume")
        {}

                /// <summary>
                /// Create new instace of view_volume and returns object of this C++ class to interact with
                /// </summary>
        static view_volume Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "view_volume"); assert(inst); return inst; }

        Nullable<central_or_parallel> get_projection_type() { int v = getENUM("projection_type", central_or_parallel_); if (v >= 0) return (central_or_parallel) v; else return Nullable<central_or_parallel>(); }
        void put_projection_type(central_or_parallel value) { TextValue val = central_or_parallel_[(int) value]; sdaiPutAttrBN(m_instance, "projection_type", sdaiENUM, val); }

        cartesian_point get_projection_point();
        void put_projection_point(cartesian_point inst);

        Nullable<length_measure> get_view_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "view_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_view_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "view_plane_distance", sdaiREAL, &value); }

        Nullable<length_measure> get_front_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "front_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_front_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "front_plane_distance", sdaiREAL, &value); }

        Nullable<bool> get_front_plane_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "front_plane_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_front_plane_clipping(bool value) { sdaiPutAttrBN(m_instance, "front_plane_clipping", sdaiBOOLEAN, &value); }

        Nullable<length_measure> get_back_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "back_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_back_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "back_plane_distance", sdaiREAL, &value); }

        Nullable<bool> get_back_plane_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "back_plane_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_back_plane_clipping(bool value) { sdaiPutAttrBN(m_instance, "back_plane_clipping", sdaiBOOLEAN, &value); }

        Nullable<bool> get_view_volume_sides_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "view_volume_sides_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_view_volume_sides_clipping(bool value) { sdaiPutAttrBN(m_instance, "view_volume_sides_clipping", sdaiBOOLEAN, &value); }

        planar_box get_view_window();
        void put_view_window(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of visual_appearance_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class visual_appearance_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of visual_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        visual_appearance_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "visual_appearance_representation")
        {}

                /// <summary>
                /// Create new instace of visual_appearance_representation and returns object of this C++ class to interact with
                /// </summary>
        static visual_appearance_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "visual_appearance_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of volume_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class volume_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of volume_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        volume_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "volume_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of volume_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static volume_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "volume_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of volume_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class volume_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of volume_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        volume_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "volume_unit")
        {}

                /// <summary>
                /// Create new instace of volume_unit and returns object of this C++ class to interact with
                /// </summary>
        static volume_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "volume_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of xor_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class xor_expression : public virtual binary_boolean_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of xor_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        xor_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "xor_expression")
        {}

                /// <summary>
                /// Create new instace of xor_expression and returns object of this C++ class to interact with
                /// </summary>
        static xor_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "xor_expression"); assert(inst); return inst; }
    };

    inline action action_item::get_action() { return getEntityInstance("ACTION"); }
    inline void action_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive action_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void action_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method action_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void action_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property action_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void action_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship action_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void action_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution action_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void action_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship action_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void action_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment action_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void action_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment action_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void action_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment action_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void action_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_status action_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void action_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute action_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void action_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification action_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void action_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ action_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void action_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system action_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void action_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design action_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void action_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity action_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void action_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item action_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void action_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment action_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void action_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract action_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void action_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file action_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void action_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model action_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void action_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision action_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void action_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action action_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void action_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property action_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void action_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation action_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void action_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation action_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void action_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization_relationship action_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void action_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project action_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void action_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization action_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void action_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area action_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void action_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product action_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void action_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept action_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void action_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature action_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void action_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association action_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void action_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category action_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void action_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage action_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void action_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition action_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void action_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation action_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship action_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void action_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship action_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void action_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute action_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void action_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition action_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void action_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource action_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void action_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property action_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void action_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification action_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void action_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level action_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void action_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_aspect action_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void action_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_representation action_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void action_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request action_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void action_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action action_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive action_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method action_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property action_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship action_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution action_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship action_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment action_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment action_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment action_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_status action_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute action_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification action_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ action_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system action_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design action_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity action_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item action_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment action_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract action_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file action_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model action_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision action_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action action_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property action_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation action_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation action_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization_relationship action_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project action_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization action_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area action_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product action_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept action_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature action_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association action_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category action_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage action_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition action_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation action_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship action_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship action_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute action_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition action_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource action_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property action_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification action_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level action_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_aspect action_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_representation action_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request action_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void action_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void action_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void action_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void action_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void action_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void action_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void action_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void action_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void action_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void action_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void action_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void action_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void action_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void action_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void action_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void action_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void action_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void action_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void action_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void action_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void action_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void action_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void action_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void action_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void action_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void action_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void action_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void action_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void action_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void action_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void action_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void action_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void action_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void action_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void action_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void action_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void action_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void action_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void action_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void action_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void action_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void action_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void action_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void action_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void action_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void action_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void action_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void action_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void action_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void action_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action action_request_item::get_action() { return getEntityInstance("ACTION"); }
    inline void action_request_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method action_request_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void action_request_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property action_request_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void action_request_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship action_request_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void action_request_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline alternate_product_relationship action_request_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void action_request_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline assembly_component_usage_substitute action_request_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void action_request_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline configuration_design action_request_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void action_request_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity action_request_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void action_request_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item action_request_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void action_request_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment action_request_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void action_request_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline document_file action_request_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void action_request_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model action_request_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void action_request_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision action_request_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void action_request_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline general_property action_request_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void action_request_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation action_request_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void action_request_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation action_request_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void action_request_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organizational_project action_request_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void action_request_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline presentation_area action_request_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void action_request_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product action_request_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void action_request_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept action_request_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void action_request_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature action_request_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void action_request_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association action_request_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void action_request_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category action_request_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void action_request_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage action_request_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void action_request_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition action_request_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void action_request_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation action_request_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_request_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship action_request_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void action_request_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute action_request_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void action_request_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition action_request_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void action_request_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline resource_property action_request_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void action_request_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline shape_aspect action_request_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void action_request_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_representation action_request_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void action_request_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline action action_request_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method action_request_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property action_request_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship action_request_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline alternate_product_relationship action_request_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline assembly_component_usage_substitute action_request_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline configuration_design action_request_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity action_request_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item action_request_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment action_request_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline document_file action_request_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model action_request_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision action_request_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline general_property action_request_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation action_request_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation action_request_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organizational_project action_request_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline presentation_area action_request_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product action_request_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept action_request_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature action_request_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association action_request_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category action_request_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage action_request_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition action_request_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation action_request_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship action_request_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute action_request_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition action_request_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline resource_property action_request_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline shape_aspect action_request_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_representation action_request_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void action_request_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void action_request_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void action_request_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void action_request_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void action_request_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void action_request_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void action_request_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void action_request_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void action_request_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void action_request_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void action_request_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void action_request_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void action_request_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void action_request_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void action_request_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void action_request_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void action_request_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void action_request_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void action_request_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void action_request_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void action_request_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void action_request_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void action_request_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void action_request_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void action_request_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void action_request_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void action_request_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void action_request_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void action_request_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void action_request_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void action_request_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void action_request_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline draughting_callout annotation_plane_element::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void annotation_plane_element::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline styled_item annotation_plane_element::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void annotation_plane_element::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline draughting_callout annotation_plane_element_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline styled_item annotation_plane_element_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void annotation_plane_element_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline void annotation_plane_element_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline annotation_symbol annotation_symbol_occurrence_item::get_annotation_symbol() { return getEntityInstance("ANNOTATION_SYMBOL"); }
    inline void annotation_symbol_occurrence_item::put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }
    inline defined_symbol annotation_symbol_occurrence_item::get_defined_symbol() { return getEntityInstance("DEFINED_SYMBOL"); }
    inline void annotation_symbol_occurrence_item::put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
    inline annotation_symbol annotation_symbol_occurrence_item_get::get_annotation_symbol() { return getEntityInstance("ANNOTATION_SYMBOL"); }
    inline defined_symbol annotation_symbol_occurrence_item_get::get_defined_symbol() { return getEntityInstance("DEFINED_SYMBOL"); }
    inline void annotation_symbol_occurrence_item_put::put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }
    inline void annotation_symbol_occurrence_item_put::put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
    inline text_literal annotation_text_occurrence_item::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void annotation_text_occurrence_item::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text annotation_text_occurrence_item::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void annotation_text_occurrence_item::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character annotation_text_occurrence_item::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void annotation_text_occurrence_item::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline defined_character_glyph annotation_text_occurrence_item::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline void annotation_text_occurrence_item::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline composite_text annotation_text_occurrence_item::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void annotation_text_occurrence_item::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal annotation_text_occurrence_item_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline annotation_text annotation_text_occurrence_item_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character annotation_text_occurrence_item_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline defined_character_glyph annotation_text_occurrence_item_get::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline composite_text annotation_text_occurrence_item_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void annotation_text_occurrence_item_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline void annotation_text_occurrence_item_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void annotation_text_occurrence_item_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void annotation_text_occurrence_item_put::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline void annotation_text_occurrence_item_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline action approval_item::get_action() { return getEntityInstance("ACTION"); }
    inline void approval_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive approval_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void approval_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_property approval_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void approval_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_request_solution approval_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void approval_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship approval_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void approval_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment approval_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void approval_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment approval_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void approval_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline assembly_component_usage_substitute approval_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void approval_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification approval_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void approval_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ approval_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void approval_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system approval_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void approval_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design approval_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void approval_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity approval_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void approval_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configured_effectivity_assignment approval_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void approval_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract approval_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void approval_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file approval_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void approval_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model approval_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void approval_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision approval_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void approval_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action approval_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void approval_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property approval_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void approval_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation approval_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void approval_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation approval_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void approval_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organizational_project approval_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void approval_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline presentation_area approval_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void approval_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product approval_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void approval_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept approval_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void approval_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature approval_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void approval_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association approval_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void approval_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category approval_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void approval_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage approval_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void approval_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition approval_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void approval_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation approval_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void approval_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship approval_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void approval_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute approval_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void approval_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition approval_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void approval_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline resource_property approval_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void approval_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline shape_representation approval_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void approval_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request approval_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void approval_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action approval_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive approval_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_property approval_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_request_solution approval_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship approval_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment approval_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment approval_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline assembly_component_usage_substitute approval_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification approval_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ approval_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system approval_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design approval_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity approval_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configured_effectivity_assignment approval_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract approval_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file approval_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model approval_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision approval_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action approval_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property approval_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation approval_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation approval_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organizational_project approval_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline presentation_area approval_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product approval_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept approval_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature approval_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association approval_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category approval_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage approval_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition approval_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation approval_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship approval_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute approval_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition approval_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline resource_property approval_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline shape_representation approval_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request approval_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void approval_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void approval_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void approval_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void approval_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void approval_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void approval_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void approval_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void approval_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void approval_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void approval_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void approval_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void approval_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void approval_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void approval_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void approval_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void approval_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void approval_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void approval_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void approval_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void approval_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void approval_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void approval_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void approval_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void approval_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void approval_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void approval_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void approval_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void approval_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void approval_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void approval_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void approval_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void approval_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void approval_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void approval_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void approval_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void approval_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void approval_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void approval_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline presentation_area area_or_view::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void area_or_view::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline presentation_view area_or_view::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void area_or_view::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline presentation_area area_or_view_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline presentation_view area_or_view_get::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void area_or_view_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void area_or_view_put::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline action attribute_language_item::get_action() { return getEntityInstance("ACTION"); }
    inline void attribute_language_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive attribute_language_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void attribute_language_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method attribute_language_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void attribute_language_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property attribute_language_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void attribute_language_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship attribute_language_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void attribute_language_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline alternate_product_relationship attribute_language_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void attribute_language_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline application_context attribute_language_item::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void attribute_language_item::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline approval_relationship attribute_language_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void attribute_language_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline assembly_component_usage_substitute attribute_language_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void attribute_language_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline attribute_value_assignment attribute_language_item::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline void attribute_language_item::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline certification attribute_language_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void attribute_language_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline configuration_design attribute_language_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void attribute_language_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item attribute_language_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void attribute_language_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract attribute_language_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void attribute_language_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline data_environment attribute_language_item::get_data_environment() { return getEntityInstance("DATA_ENVIRONMENT"); }
    inline void attribute_language_item::put_data_environment(data_environment inst) { putEntityInstance("DATA_ENVIRONMENT", inst); }
    inline date_role attribute_language_item::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void attribute_language_item::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role attribute_language_item::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void attribute_language_item::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline descriptive_representation_item attribute_language_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_relationship attribute_language_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void attribute_language_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline draughting_title attribute_language_item::get_draughting_title() { return getEntityInstance("DRAUGHTING_TITLE"); }
    inline void attribute_language_item::put_draughting_title(draughting_title inst) { putEntityInstance("DRAUGHTING_TITLE", inst); }
    inline effectivity attribute_language_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void attribute_language_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline effectivity_relationship attribute_language_item::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline void attribute_language_item::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline event_occurrence attribute_language_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void attribute_language_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline external_source attribute_language_item::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void attribute_language_item::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline general_property attribute_language_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void attribute_language_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship attribute_language_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void attribute_language_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline geometric_representation_item attribute_language_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline geometric_tolerance attribute_language_item::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline void attribute_language_item::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline group attribute_language_item::get_group() { return getEntityInstance("GROUP"); }
    inline void attribute_language_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship attribute_language_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void attribute_language_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline identification_role attribute_language_item::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline void attribute_language_item::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline kinematic_pair attribute_language_item::get_kinematic_pair() { return getEntityInstance("KINEMATIC_PAIR"); }
    inline void attribute_language_item::put_kinematic_pair(kinematic_pair inst) { putEntityInstance("KINEMATIC_PAIR", inst); }
    inline mapped_item attribute_language_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void attribute_language_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline name_assignment attribute_language_item::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline void attribute_language_item::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline organization_relationship attribute_language_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void attribute_language_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organization_role attribute_language_item::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void attribute_language_item::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline organizational_project attribute_language_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void attribute_language_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project_relationship attribute_language_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void attribute_language_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline pair_actuator attribute_language_item::get_pair_actuator() { return getEntityInstance("PAIR_ACTUATOR"); }
    inline void attribute_language_item::put_pair_actuator(pair_actuator inst) { putEntityInstance("PAIR_ACTUATOR", inst); }
    inline person_and_organization_role attribute_language_item::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void attribute_language_item::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline presentation_layer_assignment attribute_language_item::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void attribute_language_item::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline process_product_association attribute_language_item::get_process_product_association() { return getEntityInstance("PROCESS_PRODUCT_ASSOCIATION"); }
    inline void attribute_language_item::put_process_product_association(process_product_association inst) { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", inst); }
    inline product attribute_language_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void attribute_language_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept attribute_language_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void attribute_language_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature attribute_language_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void attribute_language_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association attribute_language_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void attribute_language_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_relationship attribute_language_item::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline product_definition attribute_language_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void attribute_language_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation attribute_language_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void attribute_language_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship attribute_language_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship attribute_language_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute attribute_language_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void attribute_language_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline product_related_product_category attribute_language_item::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline void attribute_language_item::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline property_definition attribute_language_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void attribute_language_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship attribute_language_item::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void attribute_language_item::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline representation attribute_language_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void attribute_language_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_relationship attribute_language_item::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline void attribute_language_item::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline requirement_for_action_resource attribute_language_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void attribute_language_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property attribute_language_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void attribute_language_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline resource_requirement_type attribute_language_item::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline void attribute_language_item::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline security_classification attribute_language_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void attribute_language_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_aspect attribute_language_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void attribute_language_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship attribute_language_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void attribute_language_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline styled_item attribute_language_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void attribute_language_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline time_interval_role attribute_language_item::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline void attribute_language_item::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline topological_representation_item attribute_language_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline uncertainty_measure_with_unit attribute_language_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void attribute_language_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline uncertainty_qualifier attribute_language_item::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void attribute_language_item::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline versioned_action_request attribute_language_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void attribute_language_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline versioned_action_request_relationship attribute_language_item::get_versioned_action_request_relationship() { return getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP"); }
    inline void attribute_language_item::put_versioned_action_request_relationship(versioned_action_request_relationship inst) { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", inst); }
    inline action attribute_language_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive attribute_language_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method attribute_language_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property attribute_language_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship attribute_language_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline alternate_product_relationship attribute_language_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline application_context attribute_language_item_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline approval_relationship attribute_language_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline assembly_component_usage_substitute attribute_language_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline attribute_value_assignment attribute_language_item_get::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline certification attribute_language_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline configuration_design attribute_language_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item attribute_language_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract attribute_language_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline data_environment attribute_language_item_get::get_data_environment() { return getEntityInstance("DATA_ENVIRONMENT"); }
    inline date_role attribute_language_item_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role attribute_language_item_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline descriptive_representation_item attribute_language_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_relationship attribute_language_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline draughting_title attribute_language_item_get::get_draughting_title() { return getEntityInstance("DRAUGHTING_TITLE"); }
    inline effectivity attribute_language_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline effectivity_relationship attribute_language_item_get::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline event_occurrence attribute_language_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline external_source attribute_language_item_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline general_property attribute_language_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship attribute_language_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline geometric_representation_item attribute_language_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline geometric_tolerance attribute_language_item_get::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline group attribute_language_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship attribute_language_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline identification_role attribute_language_item_get::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline kinematic_pair attribute_language_item_get::get_kinematic_pair() { return getEntityInstance("KINEMATIC_PAIR"); }
    inline mapped_item attribute_language_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline name_assignment attribute_language_item_get::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline organization_relationship attribute_language_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organization_role attribute_language_item_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline organizational_project attribute_language_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline organizational_project_relationship attribute_language_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline pair_actuator attribute_language_item_get::get_pair_actuator() { return getEntityInstance("PAIR_ACTUATOR"); }
    inline person_and_organization_role attribute_language_item_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline presentation_layer_assignment attribute_language_item_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline process_product_association attribute_language_item_get::get_process_product_association() { return getEntityInstance("PROCESS_PRODUCT_ASSOCIATION"); }
    inline product attribute_language_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept attribute_language_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature attribute_language_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association attribute_language_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_relationship attribute_language_item_get::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline product_definition attribute_language_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation attribute_language_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship attribute_language_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship attribute_language_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute attribute_language_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline product_related_product_category attribute_language_item_get::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline property_definition attribute_language_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship attribute_language_item_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline representation attribute_language_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_relationship attribute_language_item_get::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline requirement_for_action_resource attribute_language_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property attribute_language_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline resource_requirement_type attribute_language_item_get::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline security_classification attribute_language_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_aspect attribute_language_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship attribute_language_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline styled_item attribute_language_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline time_interval_role attribute_language_item_get::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline topological_representation_item attribute_language_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline uncertainty_measure_with_unit attribute_language_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline uncertainty_qualifier attribute_language_item_get::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline versioned_action_request attribute_language_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline versioned_action_request_relationship attribute_language_item_get::get_versioned_action_request_relationship() { return getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP"); }
    inline void attribute_language_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void attribute_language_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void attribute_language_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void attribute_language_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void attribute_language_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void attribute_language_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void attribute_language_item_put::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void attribute_language_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void attribute_language_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void attribute_language_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void attribute_language_item_put::put_data_environment(data_environment inst) { putEntityInstance("DATA_ENVIRONMENT", inst); }
    inline void attribute_language_item_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void attribute_language_item_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void attribute_language_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_draughting_title(draughting_title inst) { putEntityInstance("DRAUGHTING_TITLE", inst); }
    inline void attribute_language_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void attribute_language_item_put::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void attribute_language_item_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void attribute_language_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void attribute_language_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline void attribute_language_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void attribute_language_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline void attribute_language_item_put::put_kinematic_pair(kinematic_pair inst) { putEntityInstance("KINEMATIC_PAIR", inst); }
    inline void attribute_language_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void attribute_language_item_put::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void attribute_language_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void attribute_language_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_pair_actuator(pair_actuator inst) { putEntityInstance("PAIR_ACTUATOR", inst); }
    inline void attribute_language_item_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void attribute_language_item_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_process_product_association(process_product_association inst) { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", inst); }
    inline void attribute_language_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void attribute_language_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void attribute_language_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void attribute_language_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void attribute_language_item_put::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void attribute_language_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void attribute_language_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void attribute_language_item_put::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline void attribute_language_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void attribute_language_item_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void attribute_language_item_put::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void attribute_language_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void attribute_language_item_put::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline void attribute_language_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void attribute_language_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void attribute_language_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void attribute_language_item_put::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline void attribute_language_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void attribute_language_item_put::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline void attribute_language_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline void attribute_language_item_put::put_versioned_action_request_relationship(versioned_action_request_relationship inst) { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", inst); }
    inline axis2_placement_2d axis2_placement::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline void axis2_placement::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline axis2_placement_3d axis2_placement::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void axis2_placement::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline axis2_placement_2d axis2_placement_get::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline axis2_placement_3d axis2_placement_get::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void axis2_placement_put::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline void axis2_placement_put::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline sphere csg_primitive::get_sphere() { return getEntityInstance("SPHERE"); }
    inline void csg_primitive::put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }
    inline block csg_primitive::get_block() { return getEntityInstance("BLOCK"); }
    inline void csg_primitive::put_block(block inst) { putEntityInstance("BLOCK", inst); }
    inline right_angular_wedge csg_primitive::get_right_angular_wedge() { return getEntityInstance("RIGHT_ANGULAR_WEDGE"); }
    inline void csg_primitive::put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }
    inline torus csg_primitive::get_torus() { return getEntityInstance("TORUS"); }
    inline void csg_primitive::put_torus(torus inst) { putEntityInstance("TORUS", inst); }
    inline right_circular_cone csg_primitive::get_right_circular_cone() { return getEntityInstance("RIGHT_CIRCULAR_CONE"); }
    inline void csg_primitive::put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }
    inline right_circular_cylinder csg_primitive::get_right_circular_cylinder() { return getEntityInstance("RIGHT_CIRCULAR_CYLINDER"); }
    inline void csg_primitive::put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
    inline sphere csg_primitive_get::get_sphere() { return getEntityInstance("SPHERE"); }
    inline block csg_primitive_get::get_block() { return getEntityInstance("BLOCK"); }
    inline right_angular_wedge csg_primitive_get::get_right_angular_wedge() { return getEntityInstance("RIGHT_ANGULAR_WEDGE"); }
    inline torus csg_primitive_get::get_torus() { return getEntityInstance("TORUS"); }
    inline right_circular_cone csg_primitive_get::get_right_circular_cone() { return getEntityInstance("RIGHT_CIRCULAR_CONE"); }
    inline right_circular_cylinder csg_primitive_get::get_right_circular_cylinder() { return getEntityInstance("RIGHT_CIRCULAR_CYLINDER"); }
    inline void csg_primitive_put::put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }
    inline void csg_primitive_put::put_block(block inst) { putEntityInstance("BLOCK", inst); }
    inline void csg_primitive_put::put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }
    inline void csg_primitive_put::put_torus(torus inst) { putEntityInstance("TORUS", inst); }
    inline void csg_primitive_put::put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }
    inline void csg_primitive_put::put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
    inline solid_model boolean_operand::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline void boolean_operand::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline half_space_solid boolean_operand::get_half_space_solid() { return getEntityInstance("HALF_SPACE_SOLID"); }
    inline void boolean_operand::put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }
    inline boolean_result boolean_operand::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void boolean_operand::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline solid_model boolean_operand_get::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline half_space_solid boolean_operand_get::get_half_space_solid() { return getEntityInstance("HALF_SPACE_SOLID"); }
    inline boolean_result boolean_operand_get::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void boolean_operand_put::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline void boolean_operand_put::put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }
    inline void boolean_operand_put::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline product_class category_usage_item::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void category_usage_item::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline product_class category_usage_item_get::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void category_usage_item_put::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline product_definition certification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void certification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation certification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void certification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship certification_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void certification_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship certification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void certification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition certification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation certification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship certification_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship certification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void certification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void certification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void certification_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void certification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline measure_with_unit character_spacing_select::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void character_spacing_select::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit character_spacing_select_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void character_spacing_select_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline text_style_for_defined_font character_style_select::get_text_style_for_defined_font() { return getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT"); }
    inline void character_style_select::put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
    inline text_style_for_defined_font character_style_select_get::get_text_style_for_defined_font() { return getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT"); }
    inline void character_style_select_put::put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
    inline action characterized_action_definition::get_action() { return getEntityInstance("ACTION"); }
    inline void characterized_action_definition::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method characterized_action_definition::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void characterized_action_definition::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_method_relationship characterized_action_definition::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline void characterized_action_definition::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline action_relationship characterized_action_definition::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void characterized_action_definition::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action characterized_action_definition_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method characterized_action_definition_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_method_relationship characterized_action_definition_get::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline action_relationship characterized_action_definition_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void characterized_action_definition_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void characterized_action_definition_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void characterized_action_definition_put::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline void characterized_action_definition_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline product_definition characterized_product_definition::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void characterized_product_definition::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_relationship characterized_product_definition::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void characterized_product_definition::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition characterized_product_definition_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_relationship characterized_product_definition_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void characterized_product_definition_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void characterized_product_definition_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_shape shape_definition::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline void shape_definition::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline shape_aspect shape_definition::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void shape_definition::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship shape_definition::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void shape_definition::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline product_definition_shape shape_definition_get::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline shape_aspect shape_definition_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship shape_definition_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void shape_definition_put::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline void shape_definition_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void shape_definition_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline characterized_object characterized_definition::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void characterized_definition::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline characterized_object characterized_definition_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void characterized_definition_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline material_property_representation characterized_material_property::get_material_property_representation() { return getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION"); }
    inline void characterized_material_property::put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }
    inline material_property_representation characterized_material_property_get::get_material_property_representation() { return getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION"); }
    inline void characterized_material_property_put::put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }
    inline action_resource characterized_resource_definition::get_action_resource() { return getEntityInstance("ACTION_RESOURCE"); }
    inline void characterized_resource_definition::put_action_resource(action_resource inst) { putEntityInstance("ACTION_RESOURCE", inst); }
    inline action_resource_requirement characterized_resource_definition::get_action_resource_requirement() { return getEntityInstance("ACTION_RESOURCE_REQUIREMENT"); }
    inline void characterized_resource_definition::put_action_resource_requirement(action_resource_requirement inst) { putEntityInstance("ACTION_RESOURCE_REQUIREMENT", inst); }
    inline action_resource characterized_resource_definition_get::get_action_resource() { return getEntityInstance("ACTION_RESOURCE"); }
    inline action_resource_requirement characterized_resource_definition_get::get_action_resource_requirement() { return getEntityInstance("ACTION_RESOURCE_REQUIREMENT"); }
    inline void characterized_resource_definition_put::put_action_resource(action_resource inst) { putEntityInstance("ACTION_RESOURCE", inst); }
    inline void characterized_resource_definition_put::put_action_resource_requirement(action_resource_requirement inst) { putEntityInstance("ACTION_RESOURCE_REQUIREMENT", inst); }
    inline product_definition class_usage_effectivity_context_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void class_usage_effectivity_context_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition class_usage_effectivity_context_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void class_usage_effectivity_context_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline action classification_item::get_action() { return getEntityInstance("ACTION"); }
    inline void classification_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive classification_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void classification_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method classification_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void classification_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property classification_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void classification_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship classification_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void classification_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline approval_status classification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void classification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline class_ classification_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void classification_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline configuration_item classification_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void classification_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract classification_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void classification_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline descriptive_representation_item classification_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void classification_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_file classification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void classification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_type classification_item::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline void classification_item::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline effectivity classification_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void classification_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline executed_action classification_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void classification_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline feature_definition classification_item::get_feature_definition() { return getEntityInstance("FEATURE_DEFINITION"); }
    inline void classification_item::put_feature_definition(feature_definition inst) { putEntityInstance("FEATURE_DEFINITION", inst); }
    inline general_feature classification_item::get_general_feature() { return getEntityInstance("GENERAL_FEATURE"); }
    inline void classification_item::put_general_feature(general_feature inst) { putEntityInstance("GENERAL_FEATURE", inst); }
    inline general_property classification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void classification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation classification_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void classification_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline organizational_project classification_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void classification_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline plus_minus_tolerance classification_item::get_plus_minus_tolerance() { return getEntityInstance("PLUS_MINUS_TOLERANCE"); }
    inline void classification_item::put_plus_minus_tolerance(plus_minus_tolerance inst) { putEntityInstance("PLUS_MINUS_TOLERANCE", inst); }
    inline process_operation classification_item::get_process_operation() { return getEntityInstance("PROCESS_OPERATION"); }
    inline void classification_item::put_process_operation(process_operation inst) { putEntityInstance("PROCESS_OPERATION", inst); }
    inline product classification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void classification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept classification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void classification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature classification_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void classification_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category classification_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void classification_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition classification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void classification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation classification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void classification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship classification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void classification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition classification_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void classification_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline resource_property classification_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void classification_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification_level classification_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void classification_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_aspect classification_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void classification_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline versioned_action_request classification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void classification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action classification_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive classification_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method classification_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property classification_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship classification_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline approval_status classification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline class_ classification_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline configuration_item classification_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract classification_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline descriptive_representation_item classification_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_file classification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_type classification_item_get::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline effectivity classification_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline executed_action classification_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline feature_definition classification_item_get::get_feature_definition() { return getEntityInstance("FEATURE_DEFINITION"); }
    inline general_feature classification_item_get::get_general_feature() { return getEntityInstance("GENERAL_FEATURE"); }
    inline general_property classification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation classification_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline organizational_project classification_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline plus_minus_tolerance classification_item_get::get_plus_minus_tolerance() { return getEntityInstance("PLUS_MINUS_TOLERANCE"); }
    inline process_operation classification_item_get::get_process_operation() { return getEntityInstance("PROCESS_OPERATION"); }
    inline product classification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept classification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature classification_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category classification_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition classification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation classification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship classification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition classification_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline resource_property classification_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification_level classification_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_aspect classification_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline versioned_action_request classification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void classification_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void classification_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void classification_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void classification_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void classification_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void classification_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void classification_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void classification_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void classification_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void classification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void classification_item_put::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline void classification_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void classification_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void classification_item_put::put_feature_definition(feature_definition inst) { putEntityInstance("FEATURE_DEFINITION", inst); }
    inline void classification_item_put::put_general_feature(general_feature inst) { putEntityInstance("GENERAL_FEATURE", inst); }
    inline void classification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void classification_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void classification_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void classification_item_put::put_plus_minus_tolerance(plus_minus_tolerance inst) { putEntityInstance("PLUS_MINUS_TOLERANCE", inst); }
    inline void classification_item_put::put_process_operation(process_operation inst) { putEntityInstance("PROCESS_OPERATION", inst); }
    inline void classification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void classification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void classification_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void classification_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void classification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void classification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void classification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void classification_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void classification_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void classification_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void classification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline product_definition configuration_design_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void configuration_design_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation configuration_design_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void configuration_design_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition configuration_design_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation configuration_design_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void configuration_design_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void configuration_design_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_concept_feature_association configured_effectivity_context_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void configured_effectivity_context_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_association configured_effectivity_context_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void configured_effectivity_context_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline action_relationship configured_effectivity_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void configured_effectivity_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline process_plan configured_effectivity_item::get_process_plan() { return getEntityInstance("PROCESS_PLAN"); }
    inline void configured_effectivity_item::put_process_plan(process_plan inst) { putEntityInstance("PROCESS_PLAN", inst); }
    inline product_definition configured_effectivity_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void configured_effectivity_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_process_plan configured_effectivity_item::get_product_process_plan() { return getEntityInstance("PRODUCT_PROCESS_PLAN"); }
    inline void configured_effectivity_item::put_product_process_plan(product_process_plan inst) { putEntityInstance("PRODUCT_PROCESS_PLAN", inst); }
    inline action_relationship configured_effectivity_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline process_plan configured_effectivity_item_get::get_process_plan() { return getEntityInstance("PROCESS_PLAN"); }
    inline product_definition configured_effectivity_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_process_plan configured_effectivity_item_get::get_product_process_plan() { return getEntityInstance("PRODUCT_PROCESS_PLAN"); }
    inline void configured_effectivity_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void configured_effectivity_item_put::put_process_plan(process_plan inst) { putEntityInstance("PROCESS_PLAN", inst); }
    inline void configured_effectivity_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void configured_effectivity_item_put::put_product_process_plan(product_process_plan inst) { putEntityInstance("PRODUCT_PROCESS_PLAN", inst); }
    inline drawing_revision contract_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void contract_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action contract_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void contract_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline product_definition_formation contract_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contract_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline drawing_revision contract_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action contract_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline product_definition_formation contract_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contract_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void contract_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void contract_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline boolean_result csg_select::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void csg_select::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline boolean_result csg_select_get::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void csg_select_put::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline curve_style_font curve_style_font_select::get_curve_style_font() { return getEntityInstance("CURVE_STYLE_FONT"); }
    inline void curve_style_font_select::put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }
    inline pre_defined_curve_font curve_style_font_select::get_pre_defined_curve_font() { return getEntityInstance("PRE_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select::put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }
    inline externally_defined_curve_font curve_style_font_select::get_externally_defined_curve_font() { return getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select::put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
    inline curve_style_font curve_style_font_select_get::get_curve_style_font() { return getEntityInstance("CURVE_STYLE_FONT"); }
    inline pre_defined_curve_font curve_style_font_select_get::get_pre_defined_curve_font() { return getEntityInstance("PRE_DEFINED_CURVE_FONT"); }
    inline externally_defined_curve_font curve_style_font_select_get::get_externally_defined_curve_font() { return getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select_put::put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }
    inline void curve_style_font_select_put::put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }
    inline void curve_style_font_select_put::put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
    inline pcurve curve_on_surface::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline void curve_on_surface::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline surface_curve curve_on_surface::get_surface_curve() { return getEntityInstance("SURFACE_CURVE"); }
    inline void curve_on_surface::put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }
    inline composite_curve_on_surface curve_on_surface::get_composite_curve_on_surface() { return getEntityInstance("COMPOSITE_CURVE_ON_SURFACE"); }
    inline void curve_on_surface::put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
    inline pcurve curve_on_surface_get::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline surface_curve curve_on_surface_get::get_surface_curve() { return getEntityInstance("SURFACE_CURVE"); }
    inline composite_curve_on_surface curve_on_surface_get::get_composite_curve_on_surface() { return getEntityInstance("COMPOSITE_CURVE_ON_SURFACE"); }
    inline void curve_on_surface_put::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline void curve_on_surface_put::put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }
    inline void curve_on_surface_put::put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
    inline curve_style curve_or_render::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline void curve_or_render::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline curve_style_rendering curve_or_render::get_curve_style_rendering() { return getEntityInstance("CURVE_STYLE_RENDERING"); }
    inline void curve_or_render::put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
    inline curve_style curve_or_render_get::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline curve_style_rendering curve_or_render_get::get_curve_style_rendering() { return getEntityInstance("CURVE_STYLE_RENDERING"); }
    inline void curve_or_render_put::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline void curve_or_render_put::put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
    inline action date_and_time_item::get_action() { return getEntityInstance("ACTION"); }
    inline void date_and_time_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive date_and_time_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void date_and_time_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method date_and_time_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void date_and_time_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property date_and_time_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void date_and_time_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship date_and_time_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void date_and_time_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution date_and_time_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void date_and_time_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship date_and_time_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void date_and_time_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment date_and_time_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment date_and_time_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment date_and_time_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment date_and_time_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_person_organization date_and_time_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void date_and_time_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline approval_status date_and_time_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void date_and_time_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute date_and_time_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void date_and_time_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification date_and_time_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void date_and_time_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ date_and_time_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void date_and_time_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system date_and_time_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void date_and_time_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design date_and_time_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void date_and_time_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item date_and_time_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void date_and_time_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment date_and_time_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void date_and_time_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract date_and_time_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void date_and_time_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file date_and_time_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void date_and_time_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model date_and_time_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void date_and_time_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision date_and_time_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void date_and_time_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline effectivity date_and_time_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void date_and_time_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline event_occurrence date_and_time_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_and_time_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action date_and_time_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void date_and_time_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property date_and_time_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void date_and_time_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation date_and_time_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void date_and_time_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation date_and_time_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void date_and_time_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization_relationship date_and_time_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void date_and_time_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project date_and_time_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void date_and_time_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization date_and_time_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void date_and_time_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area date_and_time_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void date_and_time_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product date_and_time_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void date_and_time_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept date_and_time_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void date_and_time_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature date_and_time_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void date_and_time_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association date_and_time_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void date_and_time_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category date_and_time_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void date_and_time_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage date_and_time_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void date_and_time_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition date_and_time_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void date_and_time_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation date_and_time_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void date_and_time_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship date_and_time_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void date_and_time_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship date_and_time_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void date_and_time_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute date_and_time_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void date_and_time_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition date_and_time_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void date_and_time_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource date_and_time_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void date_and_time_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property date_and_time_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void date_and_time_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification date_and_time_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void date_and_time_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level date_and_time_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void date_and_time_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation date_and_time_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void date_and_time_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request date_and_time_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_and_time_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_and_time_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive date_and_time_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method date_and_time_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property date_and_time_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship date_and_time_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution date_and_time_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship date_and_time_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment date_and_time_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment date_and_time_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment date_and_time_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment date_and_time_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_person_organization date_and_time_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline approval_status date_and_time_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute date_and_time_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification date_and_time_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ date_and_time_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system date_and_time_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design date_and_time_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item date_and_time_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment date_and_time_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract date_and_time_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file date_and_time_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model date_and_time_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision date_and_time_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline effectivity date_and_time_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline event_occurrence date_and_time_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action date_and_time_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property date_and_time_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation date_and_time_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation date_and_time_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization_relationship date_and_time_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project date_and_time_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization date_and_time_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area date_and_time_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product date_and_time_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept date_and_time_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature date_and_time_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association date_and_time_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category date_and_time_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage date_and_time_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition date_and_time_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation date_and_time_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship date_and_time_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship date_and_time_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute date_and_time_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition date_and_time_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource date_and_time_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property date_and_time_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification date_and_time_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level date_and_time_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation date_and_time_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request date_and_time_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_and_time_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void date_and_time_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void date_and_time_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void date_and_time_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void date_and_time_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void date_and_time_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void date_and_time_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void date_and_time_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void date_and_time_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void date_and_time_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void date_and_time_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void date_and_time_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void date_and_time_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void date_and_time_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void date_and_time_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void date_and_time_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void date_and_time_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void date_and_time_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void date_and_time_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void date_and_time_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void date_and_time_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void date_and_time_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void date_and_time_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void date_and_time_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void date_and_time_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void date_and_time_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void date_and_time_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void date_and_time_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void date_and_time_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void date_and_time_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void date_and_time_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void date_and_time_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void date_and_time_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void date_and_time_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void date_and_time_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void date_and_time_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void date_and_time_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void date_and_time_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void date_and_time_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void date_and_time_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void date_and_time_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void date_and_time_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_item::get_action() { return getEntityInstance("ACTION"); }
    inline void date_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive date_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void date_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method date_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void date_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property date_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void date_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship date_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void date_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution date_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void date_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship date_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void date_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment date_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void date_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment date_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void date_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment date_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void date_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment date_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void date_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_person_organization date_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void date_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline approval_status date_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void date_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute date_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void date_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification date_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void date_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ date_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void date_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system date_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void date_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design date_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void date_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item date_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void date_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment date_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void date_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract date_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void date_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file date_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void date_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model date_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void date_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision date_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void date_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline effectivity date_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void date_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline event_occurrence date_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action date_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void date_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property date_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void date_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation date_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void date_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation date_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void date_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization_relationship date_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void date_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project date_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void date_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization date_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void date_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area date_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void date_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product date_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void date_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept date_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void date_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature date_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void date_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association date_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void date_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category date_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void date_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage date_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void date_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition date_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void date_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation date_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void date_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship date_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void date_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship date_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void date_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute date_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void date_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition date_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void date_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource date_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void date_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property date_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void date_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification date_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void date_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level date_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void date_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation date_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void date_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request date_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive date_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method date_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property date_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship date_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution date_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship date_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment date_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment date_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment date_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment date_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_person_organization date_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline approval_status date_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute date_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification date_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ date_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system date_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design date_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item date_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment date_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract date_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file date_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model date_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision date_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline effectivity date_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline event_occurrence date_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action date_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property date_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation date_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation date_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization_relationship date_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project date_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization date_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area date_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product date_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept date_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature date_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association date_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category date_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage date_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition date_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation date_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship date_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship date_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute date_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition date_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource date_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property date_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification date_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level date_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation date_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request date_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void date_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void date_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void date_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void date_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void date_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void date_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void date_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void date_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void date_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void date_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void date_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void date_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void date_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void date_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void date_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void date_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void date_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void date_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void date_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void date_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void date_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void date_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void date_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void date_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void date_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void date_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void date_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void date_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void date_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void date_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void date_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void date_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void date_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void date_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void date_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void date_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void date_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void date_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void date_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void date_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void date_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void date_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void date_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void date_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void date_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void date_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void date_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline date date_time_select::get_date() { return getEntityInstance("DATE"); }
    inline void date_time_select::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline date_and_time date_time_select::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline void date_time_select::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline local_time date_time_select::get_local_time() { return getEntityInstance("LOCAL_TIME"); }
    inline void date_time_select::put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
    inline date date_time_select_get::get_date() { return getEntityInstance("DATE"); }
    inline date_and_time date_time_select_get::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline local_time date_time_select_get::get_local_time() { return getEntityInstance("LOCAL_TIME"); }
    inline void date_time_select_put::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline void date_time_select_put::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline void date_time_select_put::put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
    inline event_occurrence date_time_or_event_occurrence::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_time_or_event_occurrence::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline event_occurrence date_time_or_event_occurrence_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_time_or_event_occurrence_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline externally_defined_character_glyph defined_glyph_select::get_externally_defined_character_glyph() { return getEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH"); }
    inline void defined_glyph_select::put_externally_defined_character_glyph(externally_defined_character_glyph inst) { putEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH", inst); }
    inline externally_defined_character_glyph defined_glyph_select_get::get_externally_defined_character_glyph() { return getEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH"); }
    inline void defined_glyph_select_put::put_externally_defined_character_glyph(externally_defined_character_glyph inst) { putEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH", inst); }
    inline pre_defined_symbol defined_symbol_select::get_pre_defined_symbol() { return getEntityInstance("PRE_DEFINED_SYMBOL"); }
    inline void defined_symbol_select::put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }
    inline externally_defined_symbol defined_symbol_select::get_externally_defined_symbol() { return getEntityInstance("EXTERNALLY_DEFINED_SYMBOL"); }
    inline void defined_symbol_select::put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
    inline pre_defined_symbol defined_symbol_select_get::get_pre_defined_symbol() { return getEntityInstance("PRE_DEFINED_SYMBOL"); }
    inline externally_defined_symbol defined_symbol_select_get::get_externally_defined_symbol() { return getEntityInstance("EXTERNALLY_DEFINED_SYMBOL"); }
    inline void defined_symbol_select_put::put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }
    inline void defined_symbol_select_put::put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
    inline property_definition derived_property_select::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void derived_property_select::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline action_property derived_property_select::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void derived_property_select::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline resource_property derived_property_select::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void derived_property_select::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline property_definition derived_property_select_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline action_property derived_property_select_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline resource_property derived_property_select_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void derived_property_select_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void derived_property_select_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void derived_property_select_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline action_request_solution description_attribute_select::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void description_attribute_select::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline application_context description_attribute_select::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void description_attribute_select::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline approval_role description_attribute_select::get_approval_role() { return getEntityInstance("APPROVAL_ROLE"); }
    inline void description_attribute_select::put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }
    inline configuration_design description_attribute_select::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void description_attribute_select::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline date_role description_attribute_select::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void description_attribute_select::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role description_attribute_select::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void description_attribute_select::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline context_dependent_shape_representation description_attribute_select::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline void description_attribute_select::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline effectivity description_attribute_select::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void description_attribute_select::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline external_source description_attribute_select::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void description_attribute_select::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline organization_role description_attribute_select::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void description_attribute_select::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline person_and_organization_role description_attribute_select::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void description_attribute_select::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline person_and_organization description_attribute_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void description_attribute_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline property_definition_representation description_attribute_select::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void description_attribute_select::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline representation description_attribute_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void description_attribute_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline action_request_solution description_attribute_select_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline application_context description_attribute_select_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline approval_role description_attribute_select_get::get_approval_role() { return getEntityInstance("APPROVAL_ROLE"); }
    inline configuration_design description_attribute_select_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline date_role description_attribute_select_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role description_attribute_select_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline context_dependent_shape_representation description_attribute_select_get::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline effectivity description_attribute_select_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline external_source description_attribute_select_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline organization_role description_attribute_select_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline person_and_organization_role description_attribute_select_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline person_and_organization description_attribute_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline property_definition_representation description_attribute_select_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline representation description_attribute_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void description_attribute_select_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void description_attribute_select_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void description_attribute_select_put::put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }
    inline void description_attribute_select_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void description_attribute_select_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void description_attribute_select_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void description_attribute_select_put::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline void description_attribute_select_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void description_attribute_select_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void description_attribute_select_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void description_attribute_select_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void description_attribute_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void description_attribute_select_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline void description_attribute_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline dimensional_location dimensional_characteristic::get_dimensional_location() { return getEntityInstance("DIMENSIONAL_LOCATION"); }
    inline void dimensional_characteristic::put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }
    inline dimensional_size dimensional_characteristic::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void dimensional_characteristic::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline dimensional_location dimensional_characteristic_get::get_dimensional_location() { return getEntityInstance("DIMENSIONAL_LOCATION"); }
    inline dimensional_size dimensional_characteristic_get::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void dimensional_characteristic_put::put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }
    inline void dimensional_characteristic_put::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline action_directive document_reference_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void document_reference_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method document_reference_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void document_reference_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_relationship document_reference_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void document_reference_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline applied_action_assignment document_reference_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void document_reference_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline approval document_reference_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void document_reference_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline certification document_reference_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void document_reference_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ document_reference_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void document_reference_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system document_reference_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void document_reference_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design document_reference_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void document_reference_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item document_reference_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void document_reference_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract document_reference_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void document_reference_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline descriptive_representation_item document_reference_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void document_reference_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline executed_action document_reference_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void document_reference_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline externally_defined_dimension_definition document_reference_item::get_externally_defined_dimension_definition() { return getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION"); }
    inline void document_reference_item::put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }
    inline feature_definition document_reference_item::get_feature_definition() { return getEntityInstance("FEATURE_DEFINITION"); }
    inline void document_reference_item::put_feature_definition(feature_definition inst) { putEntityInstance("FEATURE_DEFINITION", inst); }
    inline general_property document_reference_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void document_reference_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation document_reference_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void document_reference_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline organization document_reference_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void document_reference_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline organizational_project document_reference_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void document_reference_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person document_reference_item::get_person() { return getEntityInstance("PERSON"); }
    inline void document_reference_item::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline presentation_area document_reference_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void document_reference_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline process_plan document_reference_item::get_process_plan() { return getEntityInstance("PROCESS_PLAN"); }
    inline void document_reference_item::put_process_plan(process_plan inst) { putEntityInstance("PROCESS_PLAN", inst); }
    inline product document_reference_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void document_reference_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept document_reference_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void document_reference_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature document_reference_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void document_reference_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category document_reference_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void document_reference_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition document_reference_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void document_reference_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation document_reference_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void document_reference_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship document_reference_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void document_reference_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_process document_reference_item::get_product_definition_process() { return getEntityInstance("PRODUCT_DEFINITION_PROCESS"); }
    inline void document_reference_item::put_product_definition_process(product_definition_process inst) { putEntityInstance("PRODUCT_DEFINITION_PROCESS", inst); }
    inline product_definition_relationship document_reference_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void document_reference_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute document_reference_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void document_reference_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline product_related_product_category document_reference_item::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline void document_reference_item::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline property_definition document_reference_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void document_reference_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline representation document_reference_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void document_reference_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline resource_requirement_type document_reference_item::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline void document_reference_item::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline retention document_reference_item::get_retention() { return getEntityInstance("RETENTION"); }
    inline void document_reference_item::put_retention(retention inst) { putEntityInstance("RETENTION", inst); }
    inline security_classification document_reference_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void document_reference_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_aspect document_reference_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void document_reference_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship document_reference_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void document_reference_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline versioned_action_request document_reference_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void document_reference_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action_directive document_reference_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method document_reference_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_relationship document_reference_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline applied_action_assignment document_reference_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline approval document_reference_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline certification document_reference_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ document_reference_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system document_reference_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design document_reference_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item document_reference_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract document_reference_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline descriptive_representation_item document_reference_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline executed_action document_reference_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline externally_defined_dimension_definition document_reference_item_get::get_externally_defined_dimension_definition() { return getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION"); }
    inline feature_definition document_reference_item_get::get_feature_definition() { return getEntityInstance("FEATURE_DEFINITION"); }
    inline general_property document_reference_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation document_reference_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline organization document_reference_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline organizational_project document_reference_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person document_reference_item_get::get_person() { return getEntityInstance("PERSON"); }
    inline presentation_area document_reference_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline process_plan document_reference_item_get::get_process_plan() { return getEntityInstance("PROCESS_PLAN"); }
    inline product document_reference_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept document_reference_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature document_reference_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category document_reference_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition document_reference_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation document_reference_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship document_reference_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_process document_reference_item_get::get_product_definition_process() { return getEntityInstance("PRODUCT_DEFINITION_PROCESS"); }
    inline product_definition_relationship document_reference_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute document_reference_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline product_related_product_category document_reference_item_get::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline property_definition document_reference_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline representation document_reference_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline resource_requirement_type document_reference_item_get::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline retention document_reference_item_get::get_retention() { return getEntityInstance("RETENTION"); }
    inline security_classification document_reference_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_aspect document_reference_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship document_reference_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline versioned_action_request document_reference_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void document_reference_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void document_reference_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void document_reference_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void document_reference_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void document_reference_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void document_reference_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void document_reference_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void document_reference_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void document_reference_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void document_reference_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void document_reference_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void document_reference_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void document_reference_item_put::put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }
    inline void document_reference_item_put::put_feature_definition(feature_definition inst) { putEntityInstance("FEATURE_DEFINITION", inst); }
    inline void document_reference_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void document_reference_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void document_reference_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void document_reference_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void document_reference_item_put::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline void document_reference_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void document_reference_item_put::put_process_plan(process_plan inst) { putEntityInstance("PROCESS_PLAN", inst); }
    inline void document_reference_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void document_reference_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void document_reference_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void document_reference_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void document_reference_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void document_reference_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void document_reference_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_product_definition_process(product_definition_process inst) { putEntityInstance("PRODUCT_DEFINITION_PROCESS", inst); }
    inline void document_reference_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void document_reference_item_put::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline void document_reference_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void document_reference_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void document_reference_item_put::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline void document_reference_item_put::put_retention(retention inst) { putEntityInstance("RETENTION", inst); }
    inline void document_reference_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void document_reference_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void document_reference_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline annotation_text_occurrence draughting_callout_element::get_annotation_text_occurrence() { return getEntityInstance("ANNOTATION_TEXT_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }
    inline annotation_symbol_occurrence draughting_callout_element::get_annotation_symbol_occurrence() { return getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }
    inline annotation_curve_occurrence draughting_callout_element::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline annotation_text_occurrence draughting_callout_element_get::get_annotation_text_occurrence() { return getEntityInstance("ANNOTATION_TEXT_OCCURRENCE"); }
    inline annotation_symbol_occurrence draughting_callout_element_get::get_annotation_symbol_occurrence() { return getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE"); }
    inline annotation_curve_occurrence draughting_callout_element_get::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void draughting_callout_element_put::put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }
    inline void draughting_callout_element_put::put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }
    inline void draughting_callout_element_put::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline annotation_occurrence draughting_model_item_association_select::get_annotation_occurrence() { return getEntityInstance("ANNOTATION_OCCURRENCE"); }
    inline void draughting_model_item_association_select::put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }
    inline draughting_callout draughting_model_item_association_select::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_association_select::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline annotation_occurrence draughting_model_item_association_select_get::get_annotation_occurrence() { return getEntityInstance("ANNOTATION_OCCURRENCE"); }
    inline draughting_callout draughting_model_item_association_select_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_association_select_put::put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }
    inline void draughting_model_item_association_select_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline drawing_revision draughting_titled_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void draughting_titled_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline drawing_sheet_revision draughting_titled_item::get_drawing_sheet_revision() { return getEntityInstance("DRAWING_SHEET_REVISION"); }
    inline void draughting_titled_item::put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
    inline drawing_revision draughting_titled_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline drawing_sheet_revision draughting_titled_item_get::get_drawing_sheet_revision() { return getEntityInstance("DRAWING_SHEET_REVISION"); }
    inline void draughting_titled_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void draughting_titled_item_put::put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
    inline action effectivity_item::get_action() { return getEntityInstance("ACTION"); }
    inline void effectivity_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method effectivity_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void effectivity_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_method_relationship effectivity_item::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline void effectivity_item::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline action_property effectivity_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void effectivity_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship effectivity_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void effectivity_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline assembly_component_usage_substitute effectivity_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void effectivity_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline class_ effectivity_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void effectivity_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system effectivity_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void effectivity_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design effectivity_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void effectivity_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item effectivity_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void effectivity_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment effectivity_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void effectivity_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline document_file effectivity_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void effectivity_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model effectivity_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void effectivity_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision effectivity_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void effectivity_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline general_property effectivity_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void effectivity_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation effectivity_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void effectivity_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation effectivity_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void effectivity_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline presentation_area effectivity_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void effectivity_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product effectivity_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void effectivity_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept effectivity_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void effectivity_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature effectivity_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void effectivity_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association effectivity_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void effectivity_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category effectivity_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void effectivity_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage effectivity_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void effectivity_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition effectivity_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void effectivity_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation effectivity_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void effectivity_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship effectivity_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void effectivity_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship effectivity_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void effectivity_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute effectivity_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void effectivity_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition effectivity_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void effectivity_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource effectivity_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void effectivity_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property effectivity_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void effectivity_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification effectivity_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void effectivity_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_aspect effectivity_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void effectivity_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_representation effectivity_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void effectivity_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline action effectivity_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method effectivity_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_method_relationship effectivity_item_get::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline action_property effectivity_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship effectivity_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline assembly_component_usage_substitute effectivity_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline class_ effectivity_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system effectivity_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design effectivity_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item effectivity_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment effectivity_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline document_file effectivity_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model effectivity_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision effectivity_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline general_property effectivity_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation effectivity_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation effectivity_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline presentation_area effectivity_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product effectivity_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept effectivity_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature effectivity_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association effectivity_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category effectivity_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage effectivity_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition effectivity_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation effectivity_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship effectivity_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship effectivity_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute effectivity_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition effectivity_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource effectivity_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property effectivity_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification effectivity_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_aspect effectivity_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_representation effectivity_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void effectivity_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void effectivity_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void effectivity_item_put::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline void effectivity_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void effectivity_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void effectivity_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void effectivity_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void effectivity_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void effectivity_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void effectivity_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void effectivity_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void effectivity_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void effectivity_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void effectivity_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void effectivity_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void effectivity_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void effectivity_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void effectivity_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void effectivity_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void effectivity_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void effectivity_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void effectivity_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void effectivity_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void effectivity_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void effectivity_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void effectivity_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void effectivity_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void effectivity_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void effectivity_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void effectivity_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void effectivity_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void effectivity_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void effectivity_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void effectivity_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void effectivity_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline action event_occurrence_item::get_action() { return getEntityInstance("ACTION"); }
    inline void event_occurrence_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive event_occurrence_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void event_occurrence_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method event_occurrence_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void event_occurrence_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property event_occurrence_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void event_occurrence_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship event_occurrence_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void event_occurrence_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution event_occurrence_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void event_occurrence_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship event_occurrence_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void event_occurrence_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment event_occurrence_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void event_occurrence_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment event_occurrence_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void event_occurrence_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment event_occurrence_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void event_occurrence_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_status event_occurrence_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void event_occurrence_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute event_occurrence_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void event_occurrence_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification event_occurrence_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void event_occurrence_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ event_occurrence_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void event_occurrence_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system event_occurrence_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void event_occurrence_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design event_occurrence_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void event_occurrence_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity event_occurrence_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void event_occurrence_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item event_occurrence_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void event_occurrence_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment event_occurrence_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void event_occurrence_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract event_occurrence_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void event_occurrence_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file event_occurrence_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void event_occurrence_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model event_occurrence_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void event_occurrence_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision event_occurrence_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void event_occurrence_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action event_occurrence_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void event_occurrence_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property event_occurrence_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void event_occurrence_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation event_occurrence_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void event_occurrence_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation event_occurrence_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void event_occurrence_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization_relationship event_occurrence_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void event_occurrence_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project event_occurrence_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void event_occurrence_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization event_occurrence_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void event_occurrence_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area event_occurrence_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void event_occurrence_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product event_occurrence_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void event_occurrence_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept event_occurrence_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void event_occurrence_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature event_occurrence_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void event_occurrence_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association event_occurrence_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void event_occurrence_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category event_occurrence_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void event_occurrence_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage event_occurrence_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void event_occurrence_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition event_occurrence_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void event_occurrence_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation event_occurrence_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void event_occurrence_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship event_occurrence_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void event_occurrence_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship event_occurrence_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void event_occurrence_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute event_occurrence_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void event_occurrence_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition event_occurrence_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void event_occurrence_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource event_occurrence_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void event_occurrence_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property event_occurrence_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void event_occurrence_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification event_occurrence_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void event_occurrence_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level event_occurrence_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void event_occurrence_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation event_occurrence_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void event_occurrence_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request event_occurrence_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void event_occurrence_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action event_occurrence_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive event_occurrence_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method event_occurrence_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property event_occurrence_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship event_occurrence_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution event_occurrence_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship event_occurrence_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment event_occurrence_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment event_occurrence_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment event_occurrence_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_status event_occurrence_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute event_occurrence_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification event_occurrence_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ event_occurrence_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system event_occurrence_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design event_occurrence_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity event_occurrence_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item event_occurrence_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment event_occurrence_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract event_occurrence_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file event_occurrence_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model event_occurrence_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision event_occurrence_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action event_occurrence_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property event_occurrence_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation event_occurrence_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation event_occurrence_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization_relationship event_occurrence_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project event_occurrence_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization event_occurrence_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area event_occurrence_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product event_occurrence_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept event_occurrence_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature event_occurrence_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association event_occurrence_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category event_occurrence_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage event_occurrence_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition event_occurrence_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation event_occurrence_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship event_occurrence_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship event_occurrence_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute event_occurrence_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition event_occurrence_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource event_occurrence_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property event_occurrence_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification event_occurrence_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level event_occurrence_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation event_occurrence_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request event_occurrence_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void event_occurrence_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void event_occurrence_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void event_occurrence_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void event_occurrence_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void event_occurrence_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void event_occurrence_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void event_occurrence_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void event_occurrence_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void event_occurrence_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void event_occurrence_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void event_occurrence_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void event_occurrence_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void event_occurrence_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void event_occurrence_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void event_occurrence_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void event_occurrence_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void event_occurrence_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void event_occurrence_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void event_occurrence_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void event_occurrence_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void event_occurrence_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void event_occurrence_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void event_occurrence_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void event_occurrence_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void event_occurrence_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void event_occurrence_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void event_occurrence_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void event_occurrence_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void event_occurrence_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void event_occurrence_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void event_occurrence_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void event_occurrence_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void event_occurrence_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void event_occurrence_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void event_occurrence_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void event_occurrence_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void event_occurrence_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void event_occurrence_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void event_occurrence_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void event_occurrence_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void event_occurrence_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void event_occurrence_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void event_occurrence_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void event_occurrence_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void event_occurrence_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void event_occurrence_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void event_occurrence_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void event_occurrence_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void event_occurrence_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline document_file external_identification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void external_identification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline externally_defined_class external_identification_item::get_externally_defined_class() { return getEntityInstance("EXTERNALLY_DEFINED_CLASS"); }
    inline void external_identification_item::put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }
    inline externally_defined_general_property external_identification_item::get_externally_defined_general_property() { return getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY"); }
    inline void external_identification_item::put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }
    inline product_definition external_identification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void external_identification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline document_file external_identification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline externally_defined_class external_identification_item_get::get_externally_defined_class() { return getEntityInstance("EXTERNALLY_DEFINED_CLASS"); }
    inline externally_defined_general_property external_identification_item_get::get_externally_defined_general_property() { return getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY"); }
    inline product_definition external_identification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void external_identification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void external_identification_item_put::put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }
    inline void external_identification_item_put::put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }
    inline void external_identification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline fill_area_style_tile_symbol_with_style fill_area_style_tile_shape_select::get_fill_area_style_tile_symbol_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE"); }
    inline void fill_area_style_tile_shape_select::put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }
    inline fill_area_style_tile_symbol_with_style fill_area_style_tile_shape_select_get::get_fill_area_style_tile_symbol_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE"); }
    inline void fill_area_style_tile_shape_select_put::put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }
    inline fill_area_style_colour fill_style_select::get_fill_area_style_colour() { return getEntityInstance("FILL_AREA_STYLE_COLOUR"); }
    inline void fill_style_select::put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }
    inline externally_defined_tile_style fill_style_select::get_externally_defined_tile_style() { return getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE"); }
    inline void fill_style_select::put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }
    inline fill_area_style_tiles fill_style_select::get_fill_area_style_tiles() { return getEntityInstance("FILL_AREA_STYLE_TILES"); }
    inline void fill_style_select::put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }
    inline externally_defined_hatch_style fill_style_select::get_externally_defined_hatch_style() { return getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE"); }
    inline void fill_style_select::put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }
    inline fill_area_style_hatching fill_style_select::get_fill_area_style_hatching() { return getEntityInstance("FILL_AREA_STYLE_HATCHING"); }
    inline void fill_style_select::put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
    inline fill_area_style_colour fill_style_select_get::get_fill_area_style_colour() { return getEntityInstance("FILL_AREA_STYLE_COLOUR"); }
    inline externally_defined_tile_style fill_style_select_get::get_externally_defined_tile_style() { return getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE"); }
    inline fill_area_style_tiles fill_style_select_get::get_fill_area_style_tiles() { return getEntityInstance("FILL_AREA_STYLE_TILES"); }
    inline externally_defined_hatch_style fill_style_select_get::get_externally_defined_hatch_style() { return getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE"); }
    inline fill_area_style_hatching fill_style_select_get::get_fill_area_style_hatching() { return getEntityInstance("FILL_AREA_STYLE_HATCHING"); }
    inline void fill_style_select_put::put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }
    inline void fill_style_select_put::put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }
    inline void fill_style_select_put::put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }
    inline void fill_style_select_put::put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }
    inline void fill_style_select_put::put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
    inline pre_defined_text_font font_select::get_pre_defined_text_font() { return getEntityInstance("PRE_DEFINED_TEXT_FONT"); }
    inline void font_select::put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }
    inline externally_defined_text_font font_select::get_externally_defined_text_font() { return getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT"); }
    inline void font_select::put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }
    inline pre_defined_text_font font_select_get::get_pre_defined_text_font() { return getEntityInstance("PRE_DEFINED_TEXT_FONT"); }
    inline externally_defined_text_font font_select_get::get_externally_defined_text_font() { return getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT"); }
    inline void font_select_put::put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }
    inline void font_select_put::put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }
    inline founded_item founded_item_select::get_founded_item() { return getEntityInstance("FOUNDED_ITEM"); }
    inline void founded_item_select::put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }
    inline representation_item founded_item_select::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void founded_item_select::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline founded_item founded_item_select_get::get_founded_item() { return getEntityInstance("FOUNDED_ITEM"); }
    inline representation_item founded_item_select_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void founded_item_select_put::put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }
    inline void founded_item_select_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline point geometric_set_select::get_point() { return getEntityInstance("POINT"); }
    inline void geometric_set_select::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline curve geometric_set_select::get_curve() { return getEntityInstance("CURVE"); }
    inline void geometric_set_select::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline surface geometric_set_select::get_surface() { return getEntityInstance("SURFACE"); }
    inline void geometric_set_select::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline point geometric_set_select_get::get_point() { return getEntityInstance("POINT"); }
    inline curve geometric_set_select_get::get_curve() { return getEntityInstance("CURVE"); }
    inline surface geometric_set_select_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline void geometric_set_select_put::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline void geometric_set_select_put::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline void geometric_set_select_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline geometric_representation_item group_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void group_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline mapped_item group_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void group_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline product_concept_feature group_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void group_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline shape_aspect group_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void group_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline styled_item group_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void group_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline topological_representation_item group_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void group_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline geometric_representation_item group_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline mapped_item group_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline product_concept_feature group_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline shape_aspect group_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline styled_item group_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline topological_representation_item group_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void group_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void group_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void group_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void group_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void group_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void group_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline action id_attribute_select::get_action() { return getEntityInstance("ACTION"); }
    inline void id_attribute_select::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline address id_attribute_select::get_address() { return getEntityInstance("ADDRESS"); }
    inline void id_attribute_select::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline product_category id_attribute_select::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline void id_attribute_select::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline property_definition id_attribute_select::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void id_attribute_select::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline shape_aspect id_attribute_select::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void id_attribute_select::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship id_attribute_select::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void id_attribute_select::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline application_context id_attribute_select::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void id_attribute_select::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline group id_attribute_select::get_group() { return getEntityInstance("GROUP"); }
    inline void id_attribute_select::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline organizational_project id_attribute_select::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void id_attribute_select::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline representation id_attribute_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void id_attribute_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline action id_attribute_select_get::get_action() { return getEntityInstance("ACTION"); }
    inline address id_attribute_select_get::get_address() { return getEntityInstance("ADDRESS"); }
    inline product_category id_attribute_select_get::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline property_definition id_attribute_select_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline shape_aspect id_attribute_select_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship id_attribute_select_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline application_context id_attribute_select_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline group id_attribute_select_get::get_group() { return getEntityInstance("GROUP"); }
    inline organizational_project id_attribute_select_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline representation id_attribute_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void id_attribute_select_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void id_attribute_select_put::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline void id_attribute_select_put::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline void id_attribute_select_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void id_attribute_select_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void id_attribute_select_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void id_attribute_select_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void id_attribute_select_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void id_attribute_select_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void id_attribute_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline action identification_item::get_action() { return getEntityInstance("ACTION"); }
    inline void identification_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive identification_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void identification_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method identification_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void identification_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property identification_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void identification_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline applied_identification_assignment identification_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void identification_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline approval_status identification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void identification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline class_ identification_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void identification_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system identification_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void identification_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_item identification_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void identification_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline dimensional_size identification_item::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void identification_item::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline document_file identification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void identification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_type identification_item::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline void identification_item::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline draughting_model identification_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void identification_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline effectivity identification_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void identification_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline general_property identification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void identification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline measure_representation_item identification_item::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline void identification_item::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline mechanical_design_geometric_presentation_representation identification_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void identification_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization identification_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void identification_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline organizational_project identification_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void identification_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization identification_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void identification_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area identification_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void identification_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product identification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void identification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept identification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void identification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature identification_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void identification_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category identification_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void identification_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition identification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void identification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation identification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void identification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship identification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void identification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition identification_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void identification_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship identification_item::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void identification_item::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline security_classification_level identification_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void identification_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_aspect_relationship identification_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void identification_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_representation identification_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void identification_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request identification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void identification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action identification_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive identification_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method identification_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property identification_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline applied_identification_assignment identification_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline approval_status identification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline class_ identification_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system identification_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_item identification_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline dimensional_size identification_item_get::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline document_file identification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_type identification_item_get::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline draughting_model identification_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline effectivity identification_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline general_property identification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline measure_representation_item identification_item_get::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline mechanical_design_geometric_presentation_representation identification_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization identification_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline organizational_project identification_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization identification_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area identification_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product identification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept identification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature identification_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category identification_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition identification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation identification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship identification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition identification_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship identification_item_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline security_classification_level identification_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_aspect_relationship identification_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline shape_representation identification_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request identification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void identification_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void identification_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void identification_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void identification_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void identification_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void identification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void identification_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void identification_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void identification_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void identification_item_put::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline void identification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void identification_item_put::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline void identification_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void identification_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void identification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void identification_item_put::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline void identification_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void identification_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void identification_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void identification_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void identification_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void identification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void identification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void identification_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void identification_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void identification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void identification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void identification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void identification_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void identification_item_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void identification_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void identification_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void identification_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void identification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline presentation_representation invisibility_context::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void invisibility_context::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline presentation_set invisibility_context::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void invisibility_context::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline presentation_representation invisibility_context_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline presentation_set invisibility_context_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void invisibility_context_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void invisibility_context_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline draughting_callout invisible_item::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void invisible_item::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline presentation_layer_assignment invisible_item::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void invisible_item::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline representation invisible_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void invisible_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline styled_item invisible_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void invisible_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline draughting_callout invisible_item_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline presentation_layer_assignment invisible_item_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline representation invisible_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline styled_item invisible_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void invisible_item_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline void invisible_item_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void invisible_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void invisible_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline interpolated_configuration_sequence kinematic_analysis_definition::get_interpolated_configuration_sequence() { return getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE"); }
    inline void kinematic_analysis_definition::put_interpolated_configuration_sequence(interpolated_configuration_sequence inst) { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", inst); }
    inline interpolated_configuration_sequence kinematic_analysis_definition_get::get_interpolated_configuration_sequence() { return getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE"); }
    inline void kinematic_analysis_definition_put::put_interpolated_configuration_sequence(interpolated_configuration_sequence inst) { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", inst); }
    inline point kinematic_frame_background::get_point() { return getEntityInstance("POINT"); }
    inline void kinematic_frame_background::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline curve kinematic_frame_background::get_curve() { return getEntityInstance("CURVE"); }
    inline void kinematic_frame_background::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline surface kinematic_frame_background::get_surface() { return getEntityInstance("SURFACE"); }
    inline void kinematic_frame_background::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline point kinematic_frame_background_get::get_point() { return getEntityInstance("POINT"); }
    inline curve kinematic_frame_background_get::get_curve() { return getEntityInstance("CURVE"); }
    inline surface kinematic_frame_background_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline void kinematic_frame_background_put::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline void kinematic_frame_background_put::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline void kinematic_frame_background_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline interpolated_configuration_sequence kinematic_result::get_interpolated_configuration_sequence() { return getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE"); }
    inline void kinematic_result::put_interpolated_configuration_sequence(interpolated_configuration_sequence inst) { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", inst); }
    inline resulting_path kinematic_result::get_resulting_path() { return getEntityInstance("RESULTING_PATH"); }
    inline void kinematic_result::put_resulting_path(resulting_path inst) { putEntityInstance("RESULTING_PATH", inst); }
    inline interpolated_configuration_sequence kinematic_result_get::get_interpolated_configuration_sequence() { return getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE"); }
    inline resulting_path kinematic_result_get::get_resulting_path() { return getEntityInstance("RESULTING_PATH"); }
    inline void kinematic_result_put::put_interpolated_configuration_sequence(interpolated_configuration_sequence inst) { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", inst); }
    inline void kinematic_result_put::put_resulting_path(resulting_path inst) { putEntityInstance("RESULTING_PATH", inst); }
    inline representation language_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void language_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation language_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void language_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline presentation_representation layered_item::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void layered_item::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline representation_item layered_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void layered_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline presentation_representation layered_item_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline representation_item layered_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void layered_item_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void layered_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline pre_defined_marker marker_select::get_pre_defined_marker() { return getEntityInstance("PRE_DEFINED_MARKER"); }
    inline void marker_select::put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
    inline pre_defined_marker marker_select_get::get_pre_defined_marker() { return getEntityInstance("PRE_DEFINED_MARKER"); }
    inline void marker_select_put::put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
    inline measure_with_unit motion_parameter_measure::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void motion_parameter_measure::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit motion_parameter_measure_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void motion_parameter_measure_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline action multi_language_attribute_item::get_action() { return getEntityInstance("ACTION"); }
    inline void multi_language_attribute_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive multi_language_attribute_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void multi_language_attribute_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method multi_language_attribute_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void multi_language_attribute_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property multi_language_attribute_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void multi_language_attribute_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship multi_language_attribute_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline alternate_product_relationship multi_language_attribute_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline application_context multi_language_attribute_item::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void multi_language_attribute_item::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline approval_relationship multi_language_attribute_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline assembly_component_usage_substitute multi_language_attribute_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void multi_language_attribute_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification multi_language_attribute_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void multi_language_attribute_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline configuration_design multi_language_attribute_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void multi_language_attribute_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item multi_language_attribute_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void multi_language_attribute_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract multi_language_attribute_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void multi_language_attribute_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline data_environment multi_language_attribute_item::get_data_environment() { return getEntityInstance("DATA_ENVIRONMENT"); }
    inline void multi_language_attribute_item::put_data_environment(data_environment inst) { putEntityInstance("DATA_ENVIRONMENT", inst); }
    inline date_role multi_language_attribute_item::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void multi_language_attribute_item::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role multi_language_attribute_item::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void multi_language_attribute_item::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline descriptive_representation_item multi_language_attribute_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_relationship multi_language_attribute_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline draughting_title multi_language_attribute_item::get_draughting_title() { return getEntityInstance("DRAUGHTING_TITLE"); }
    inline void multi_language_attribute_item::put_draughting_title(draughting_title inst) { putEntityInstance("DRAUGHTING_TITLE", inst); }
    inline effectivity multi_language_attribute_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void multi_language_attribute_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline effectivity_relationship multi_language_attribute_item::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline event_occurrence multi_language_attribute_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void multi_language_attribute_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline external_source multi_language_attribute_item::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void multi_language_attribute_item::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline general_property multi_language_attribute_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void multi_language_attribute_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship multi_language_attribute_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline geometric_representation_item multi_language_attribute_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline geometric_tolerance multi_language_attribute_item::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline void multi_language_attribute_item::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline group multi_language_attribute_item::get_group() { return getEntityInstance("GROUP"); }
    inline void multi_language_attribute_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship multi_language_attribute_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline identification_role multi_language_attribute_item::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline void multi_language_attribute_item::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline kinematic_pair multi_language_attribute_item::get_kinematic_pair() { return getEntityInstance("KINEMATIC_PAIR"); }
    inline void multi_language_attribute_item::put_kinematic_pair(kinematic_pair inst) { putEntityInstance("KINEMATIC_PAIR", inst); }
    inline mapped_item multi_language_attribute_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void multi_language_attribute_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline name_assignment multi_language_attribute_item::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline organization_relationship multi_language_attribute_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organization_role multi_language_attribute_item::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void multi_language_attribute_item::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline organizational_project multi_language_attribute_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void multi_language_attribute_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project_relationship multi_language_attribute_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline pair_actuator multi_language_attribute_item::get_pair_actuator() { return getEntityInstance("PAIR_ACTUATOR"); }
    inline void multi_language_attribute_item::put_pair_actuator(pair_actuator inst) { putEntityInstance("PAIR_ACTUATOR", inst); }
    inline person_and_organization_role multi_language_attribute_item::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void multi_language_attribute_item::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline presentation_layer_assignment multi_language_attribute_item::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline process_product_association multi_language_attribute_item::get_process_product_association() { return getEntityInstance("PROCESS_PRODUCT_ASSOCIATION"); }
    inline void multi_language_attribute_item::put_process_product_association(process_product_association inst) { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", inst); }
    inline product multi_language_attribute_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void multi_language_attribute_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept multi_language_attribute_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void multi_language_attribute_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature multi_language_attribute_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void multi_language_attribute_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association multi_language_attribute_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void multi_language_attribute_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_relationship multi_language_attribute_item::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline product_definition multi_language_attribute_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void multi_language_attribute_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation multi_language_attribute_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void multi_language_attribute_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship multi_language_attribute_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship multi_language_attribute_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute multi_language_attribute_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void multi_language_attribute_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline product_related_product_category multi_language_attribute_item::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline void multi_language_attribute_item::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline property_definition multi_language_attribute_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void multi_language_attribute_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship multi_language_attribute_item::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline representation multi_language_attribute_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void multi_language_attribute_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_relationship multi_language_attribute_item::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline requirement_for_action_resource multi_language_attribute_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void multi_language_attribute_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property multi_language_attribute_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void multi_language_attribute_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline resource_requirement_type multi_language_attribute_item::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline void multi_language_attribute_item::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline security_classification multi_language_attribute_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void multi_language_attribute_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_aspect multi_language_attribute_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void multi_language_attribute_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship multi_language_attribute_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline styled_item multi_language_attribute_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void multi_language_attribute_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline time_interval_role multi_language_attribute_item::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline void multi_language_attribute_item::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline topological_representation_item multi_language_attribute_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline uncertainty_measure_with_unit multi_language_attribute_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void multi_language_attribute_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline uncertainty_qualifier multi_language_attribute_item::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void multi_language_attribute_item::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline versioned_action_request multi_language_attribute_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void multi_language_attribute_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline versioned_action_request_relationship multi_language_attribute_item::get_versioned_action_request_relationship() { return getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_versioned_action_request_relationship(versioned_action_request_relationship inst) { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", inst); }
    inline action multi_language_attribute_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive multi_language_attribute_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method multi_language_attribute_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property multi_language_attribute_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship multi_language_attribute_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline alternate_product_relationship multi_language_attribute_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline application_context multi_language_attribute_item_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline approval_relationship multi_language_attribute_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline assembly_component_usage_substitute multi_language_attribute_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification multi_language_attribute_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline configuration_design multi_language_attribute_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item multi_language_attribute_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract multi_language_attribute_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline data_environment multi_language_attribute_item_get::get_data_environment() { return getEntityInstance("DATA_ENVIRONMENT"); }
    inline date_role multi_language_attribute_item_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role multi_language_attribute_item_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline descriptive_representation_item multi_language_attribute_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_relationship multi_language_attribute_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline draughting_title multi_language_attribute_item_get::get_draughting_title() { return getEntityInstance("DRAUGHTING_TITLE"); }
    inline effectivity multi_language_attribute_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline effectivity_relationship multi_language_attribute_item_get::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline event_occurrence multi_language_attribute_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline external_source multi_language_attribute_item_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline general_property multi_language_attribute_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship multi_language_attribute_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline geometric_representation_item multi_language_attribute_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline geometric_tolerance multi_language_attribute_item_get::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline group multi_language_attribute_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship multi_language_attribute_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline identification_role multi_language_attribute_item_get::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline kinematic_pair multi_language_attribute_item_get::get_kinematic_pair() { return getEntityInstance("KINEMATIC_PAIR"); }
    inline mapped_item multi_language_attribute_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline name_assignment multi_language_attribute_item_get::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline organization_relationship multi_language_attribute_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organization_role multi_language_attribute_item_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline organizational_project multi_language_attribute_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline organizational_project_relationship multi_language_attribute_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline pair_actuator multi_language_attribute_item_get::get_pair_actuator() { return getEntityInstance("PAIR_ACTUATOR"); }
    inline person_and_organization_role multi_language_attribute_item_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline presentation_layer_assignment multi_language_attribute_item_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline process_product_association multi_language_attribute_item_get::get_process_product_association() { return getEntityInstance("PROCESS_PRODUCT_ASSOCIATION"); }
    inline product multi_language_attribute_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept multi_language_attribute_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature multi_language_attribute_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association multi_language_attribute_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_relationship multi_language_attribute_item_get::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline product_definition multi_language_attribute_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation multi_language_attribute_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship multi_language_attribute_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship multi_language_attribute_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute multi_language_attribute_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline product_related_product_category multi_language_attribute_item_get::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline property_definition multi_language_attribute_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship multi_language_attribute_item_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline representation multi_language_attribute_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_relationship multi_language_attribute_item_get::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline requirement_for_action_resource multi_language_attribute_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property multi_language_attribute_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline resource_requirement_type multi_language_attribute_item_get::get_resource_requirement_type() { return getEntityInstance("RESOURCE_REQUIREMENT_TYPE"); }
    inline security_classification multi_language_attribute_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_aspect multi_language_attribute_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship multi_language_attribute_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline styled_item multi_language_attribute_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline time_interval_role multi_language_attribute_item_get::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline topological_representation_item multi_language_attribute_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline uncertainty_measure_with_unit multi_language_attribute_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline uncertainty_qualifier multi_language_attribute_item_get::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline versioned_action_request multi_language_attribute_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline versioned_action_request_relationship multi_language_attribute_item_get::get_versioned_action_request_relationship() { return getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP"); }
    inline void multi_language_attribute_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void multi_language_attribute_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void multi_language_attribute_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void multi_language_attribute_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void multi_language_attribute_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void multi_language_attribute_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void multi_language_attribute_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void multi_language_attribute_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void multi_language_attribute_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void multi_language_attribute_item_put::put_data_environment(data_environment inst) { putEntityInstance("DATA_ENVIRONMENT", inst); }
    inline void multi_language_attribute_item_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_draughting_title(draughting_title inst) { putEntityInstance("DRAUGHTING_TITLE", inst); }
    inline void multi_language_attribute_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void multi_language_attribute_item_put::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void multi_language_attribute_item_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void multi_language_attribute_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void multi_language_attribute_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline void multi_language_attribute_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void multi_language_attribute_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_kinematic_pair(kinematic_pair inst) { putEntityInstance("KINEMATIC_PAIR", inst); }
    inline void multi_language_attribute_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void multi_language_attribute_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_pair_actuator(pair_actuator inst) { putEntityInstance("PAIR_ACTUATOR", inst); }
    inline void multi_language_attribute_item_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_process_product_association(process_product_association inst) { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", inst); }
    inline void multi_language_attribute_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void multi_language_attribute_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void multi_language_attribute_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void multi_language_attribute_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void multi_language_attribute_item_put::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void multi_language_attribute_item_put::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline void multi_language_attribute_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void multi_language_attribute_item_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void multi_language_attribute_item_put::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void multi_language_attribute_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void multi_language_attribute_item_put::put_resource_requirement_type(resource_requirement_type inst) { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", inst); }
    inline void multi_language_attribute_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void multi_language_attribute_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void multi_language_attribute_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void multi_language_attribute_item_put::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline void multi_language_attribute_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline void multi_language_attribute_item_put::put_versioned_action_request_relationship(versioned_action_request_relationship inst) { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", inst); }
    inline action_request_solution name_attribute_select::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void name_attribute_select::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline address name_attribute_select::get_address() { return getEntityInstance("ADDRESS"); }
    inline void name_attribute_select::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline configuration_design name_attribute_select::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void name_attribute_select::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline context_dependent_shape_representation name_attribute_select::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline void name_attribute_select::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline derived_unit name_attribute_select::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void name_attribute_select::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline effectivity name_attribute_select::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void name_attribute_select::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline person_and_organization name_attribute_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void name_attribute_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product_definition name_attribute_select::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void name_attribute_select::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_substitute name_attribute_select::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void name_attribute_select::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition_representation name_attribute_select::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void name_attribute_select::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline action_request_solution name_attribute_select_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline address name_attribute_select_get::get_address() { return getEntityInstance("ADDRESS"); }
    inline configuration_design name_attribute_select_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline context_dependent_shape_representation name_attribute_select_get::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline derived_unit name_attribute_select_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline effectivity name_attribute_select_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline person_and_organization name_attribute_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product_definition name_attribute_select_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_substitute name_attribute_select_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition_representation name_attribute_select_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void name_attribute_select_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void name_attribute_select_put::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline void name_attribute_select_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void name_attribute_select_put::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline void name_attribute_select_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void name_attribute_select_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void name_attribute_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void name_attribute_select_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void name_attribute_select_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void name_attribute_select_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline kinematic_joint name_item::get_kinematic_joint() { return getEntityInstance("KINEMATIC_JOINT"); }
    inline void name_item::put_kinematic_joint(kinematic_joint inst) { putEntityInstance("KINEMATIC_JOINT", inst); }
    inline kinematic_link name_item::get_kinematic_link() { return getEntityInstance("KINEMATIC_LINK"); }
    inline void name_item::put_kinematic_link(kinematic_link inst) { putEntityInstance("KINEMATIC_LINK", inst); }
    inline kinematic_structure name_item::get_kinematic_structure() { return getEntityInstance("KINEMATIC_STRUCTURE"); }
    inline void name_item::put_kinematic_structure(kinematic_structure inst) { putEntityInstance("KINEMATIC_STRUCTURE", inst); }
    inline kinematic_joint name_item_get::get_kinematic_joint() { return getEntityInstance("KINEMATIC_JOINT"); }
    inline kinematic_link name_item_get::get_kinematic_link() { return getEntityInstance("KINEMATIC_LINK"); }
    inline kinematic_structure name_item_get::get_kinematic_structure() { return getEntityInstance("KINEMATIC_STRUCTURE"); }
    inline void name_item_put::put_kinematic_joint(kinematic_joint inst) { putEntityInstance("KINEMATIC_JOINT", inst); }
    inline void name_item_put::put_kinematic_link(kinematic_link inst) { putEntityInstance("KINEMATIC_LINK", inst); }
    inline void name_item_put::put_kinematic_structure(kinematic_structure inst) { putEntityInstance("KINEMATIC_STRUCTURE", inst); }
    inline action organization_item::get_action() { return getEntityInstance("ACTION"); }
    inline void organization_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive organization_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void organization_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method organization_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void organization_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property organization_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void organization_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship organization_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void organization_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution organization_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void organization_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship organization_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void organization_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment organization_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void organization_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment organization_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment organization_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment organization_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment organization_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval organization_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void organization_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_status organization_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void organization_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute organization_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void organization_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification organization_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void organization_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ organization_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void organization_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system organization_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void organization_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design organization_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void organization_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity organization_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void organization_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item organization_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void organization_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment organization_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void organization_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract organization_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void organization_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file organization_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void organization_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_type organization_item::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline void organization_item::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline draughting_model organization_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void organization_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision organization_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void organization_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline effectivity organization_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void organization_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline event_occurrence organization_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void organization_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action organization_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void organization_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property organization_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void organization_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation organization_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void organization_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation organization_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void organization_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization organization_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void organization_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline organization_relationship organization_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void organization_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project organization_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void organization_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization organization_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void organization_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area organization_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void organization_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product organization_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void organization_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept organization_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void organization_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature organization_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void organization_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association organization_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void organization_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category organization_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void organization_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage organization_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void organization_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition organization_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void organization_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation organization_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void organization_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship organization_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void organization_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship organization_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void organization_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute organization_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void organization_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition organization_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void organization_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource organization_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void organization_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property organization_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void organization_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification organization_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void organization_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level organization_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void organization_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation organization_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void organization_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request organization_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void organization_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action organization_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive organization_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method organization_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property organization_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship organization_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution organization_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship organization_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment organization_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment organization_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment organization_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment organization_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment organization_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval organization_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_status organization_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute organization_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification organization_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ organization_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system organization_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design organization_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity organization_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item organization_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment organization_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract organization_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file organization_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_type organization_item_get::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline draughting_model organization_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision organization_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline effectivity organization_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline event_occurrence organization_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action organization_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property organization_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation organization_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation organization_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization organization_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline organization_relationship organization_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project organization_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization organization_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area organization_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product organization_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept organization_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature organization_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association organization_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category organization_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage organization_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition organization_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation organization_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship organization_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship organization_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute organization_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition organization_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource organization_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property organization_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification organization_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level organization_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation organization_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request organization_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void organization_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void organization_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void organization_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void organization_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void organization_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void organization_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void organization_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void organization_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void organization_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void organization_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void organization_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void organization_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void organization_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void organization_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void organization_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void organization_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void organization_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void organization_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void organization_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void organization_item_put::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline void organization_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void organization_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void organization_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void organization_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void organization_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void organization_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void organization_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void organization_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void organization_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void organization_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void organization_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void organization_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void organization_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void organization_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void organization_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void organization_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void organization_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void organization_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void organization_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void organization_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void organization_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void organization_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void organization_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void organization_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void organization_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void organization_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void organization_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void organization_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void organization_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void organization_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void organization_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline assembly_component_usage organizational_project_item::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void organizational_project_item::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline configuration_item organizational_project_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void organizational_project_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline executed_action organizational_project_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void organizational_project_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline product organizational_project_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void organizational_project_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept organizational_project_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void organizational_project_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_definition organizational_project_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void organizational_project_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation organizational_project_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void organizational_project_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline assembly_component_usage organizational_project_item_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline configuration_item organizational_project_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline executed_action organizational_project_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline product organizational_project_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept organizational_project_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_definition organizational_project_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation organizational_project_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void organizational_project_item_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void organizational_project_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void organizational_project_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void organizational_project_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void organizational_project_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void organizational_project_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void organizational_project_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline pcurve pcurve_or_surface::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline void pcurve_or_surface::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline surface pcurve_or_surface::get_surface() { return getEntityInstance("SURFACE"); }
    inline void pcurve_or_surface::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline pcurve pcurve_or_surface_get::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline surface pcurve_or_surface_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline void pcurve_or_surface_put::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline void pcurve_or_surface_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline action person_and_organization_item::get_action() { return getEntityInstance("ACTION"); }
    inline void person_and_organization_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive person_and_organization_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void person_and_organization_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method person_and_organization_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void person_and_organization_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property person_and_organization_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void person_and_organization_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship person_and_organization_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void person_and_organization_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution person_and_organization_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void person_and_organization_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship person_and_organization_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void person_and_organization_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment person_and_organization_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment person_and_organization_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment person_and_organization_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment person_and_organization_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_status person_and_organization_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void person_and_organization_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute person_and_organization_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void person_and_organization_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification person_and_organization_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void person_and_organization_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ person_and_organization_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void person_and_organization_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system person_and_organization_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void person_and_organization_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design person_and_organization_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void person_and_organization_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity person_and_organization_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void person_and_organization_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item person_and_organization_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void person_and_organization_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment person_and_organization_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void person_and_organization_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract person_and_organization_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void person_and_organization_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file person_and_organization_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void person_and_organization_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_type person_and_organization_item::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline void person_and_organization_item::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline draughting_model person_and_organization_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void person_and_organization_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision person_and_organization_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void person_and_organization_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline event_occurrence person_and_organization_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void person_and_organization_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action person_and_organization_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void person_and_organization_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property person_and_organization_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void person_and_organization_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation person_and_organization_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void person_and_organization_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation person_and_organization_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void person_and_organization_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization person_and_organization_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void person_and_organization_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline organization_relationship person_and_organization_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void person_and_organization_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project person_and_organization_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void person_and_organization_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization person_and_organization_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_and_organization_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area person_and_organization_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void person_and_organization_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product person_and_organization_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void person_and_organization_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept person_and_organization_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void person_and_organization_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature person_and_organization_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void person_and_organization_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association person_and_organization_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void person_and_organization_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category person_and_organization_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void person_and_organization_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage person_and_organization_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void person_and_organization_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition person_and_organization_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void person_and_organization_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation person_and_organization_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void person_and_organization_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship person_and_organization_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void person_and_organization_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship person_and_organization_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void person_and_organization_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute person_and_organization_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void person_and_organization_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition person_and_organization_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void person_and_organization_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource person_and_organization_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void person_and_organization_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property person_and_organization_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void person_and_organization_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification person_and_organization_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void person_and_organization_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level person_and_organization_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void person_and_organization_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation person_and_organization_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void person_and_organization_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request person_and_organization_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void person_and_organization_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action person_and_organization_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive person_and_organization_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method person_and_organization_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property person_and_organization_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship person_and_organization_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution person_and_organization_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship person_and_organization_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment person_and_organization_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment person_and_organization_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment person_and_organization_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment person_and_organization_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_status person_and_organization_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute person_and_organization_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification person_and_organization_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ person_and_organization_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system person_and_organization_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design person_and_organization_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity person_and_organization_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item person_and_organization_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment person_and_organization_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract person_and_organization_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file person_and_organization_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_type person_and_organization_item_get::get_document_type() { return getEntityInstance("DOCUMENT_TYPE"); }
    inline draughting_model person_and_organization_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision person_and_organization_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline event_occurrence person_and_organization_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action person_and_organization_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property person_and_organization_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation person_and_organization_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation person_and_organization_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization person_and_organization_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline organization_relationship person_and_organization_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project person_and_organization_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization person_and_organization_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area person_and_organization_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product person_and_organization_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept person_and_organization_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature person_and_organization_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association person_and_organization_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category person_and_organization_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage person_and_organization_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition person_and_organization_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation person_and_organization_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship person_and_organization_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship person_and_organization_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute person_and_organization_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition person_and_organization_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource person_and_organization_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property person_and_organization_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification person_and_organization_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level person_and_organization_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation person_and_organization_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request person_and_organization_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void person_and_organization_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void person_and_organization_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void person_and_organization_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void person_and_organization_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void person_and_organization_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void person_and_organization_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void person_and_organization_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void person_and_organization_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void person_and_organization_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void person_and_organization_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void person_and_organization_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void person_and_organization_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void person_and_organization_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void person_and_organization_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void person_and_organization_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void person_and_organization_item_put::put_document_type(document_type inst) { putEntityInstance("DOCUMENT_TYPE", inst); }
    inline void person_and_organization_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void person_and_organization_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void person_and_organization_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void person_and_organization_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void person_and_organization_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void person_and_organization_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void person_and_organization_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void person_and_organization_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void person_and_organization_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void person_and_organization_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void person_and_organization_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void person_and_organization_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void person_and_organization_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void person_and_organization_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void person_and_organization_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void person_and_organization_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void person_and_organization_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void person_and_organization_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void person_and_organization_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void person_and_organization_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void person_and_organization_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void person_and_organization_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void person_and_organization_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void person_and_organization_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void person_and_organization_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void person_and_organization_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void person_and_organization_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline person person_organization_select::get_person() { return getEntityInstance("PERSON"); }
    inline void person_organization_select::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline organization person_organization_select::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void person_organization_select::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline person_and_organization person_organization_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_organization_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline person person_organization_select_get::get_person() { return getEntityInstance("PERSON"); }
    inline organization person_organization_select_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline person_and_organization person_organization_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_organization_select_put::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline void person_organization_select_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void person_organization_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline plane plane_or_planar_box::get_plane() { return getEntityInstance("PLANE"); }
    inline void plane_or_planar_box::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline planar_box plane_or_planar_box::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline void plane_or_planar_box::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline plane plane_or_planar_box_get::get_plane() { return getEntityInstance("PLANE"); }
    inline planar_box plane_or_planar_box_get::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline void plane_or_planar_box_put::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline void plane_or_planar_box_put::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline presentation_representation presentation_representation_select::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void presentation_representation_select::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline presentation_set presentation_representation_select::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void presentation_representation_select::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline presentation_representation presentation_representation_select_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline presentation_set presentation_representation_select_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void presentation_representation_select_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void presentation_representation_select_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline presentation_view presentation_size_assignment_select::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void presentation_size_assignment_select::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline presentation_area presentation_size_assignment_select::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void presentation_size_assignment_select::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline area_in_set presentation_size_assignment_select::get_area_in_set() { return getEntityInstance("AREA_IN_SET"); }
    inline void presentation_size_assignment_select::put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
    inline presentation_view presentation_size_assignment_select_get::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline presentation_area presentation_size_assignment_select_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline area_in_set presentation_size_assignment_select_get::get_area_in_set() { return getEntityInstance("AREA_IN_SET"); }
    inline void presentation_size_assignment_select_put::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline void presentation_size_assignment_select_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void presentation_size_assignment_select_put::put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
    inline pre_defined_presentation_style presentation_style_select::get_pre_defined_presentation_style() { return getEntityInstance("PRE_DEFINED_PRESENTATION_STYLE"); }
    inline void presentation_style_select::put_pre_defined_presentation_style(pre_defined_presentation_style inst) { putEntityInstance("PRE_DEFINED_PRESENTATION_STYLE", inst); }
    inline point_style presentation_style_select::get_point_style() { return getEntityInstance("POINT_STYLE"); }
    inline void presentation_style_select::put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }
    inline curve_style presentation_style_select::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline void presentation_style_select::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline surface_style_usage presentation_style_select::get_surface_style_usage() { return getEntityInstance("SURFACE_STYLE_USAGE"); }
    inline void presentation_style_select::put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }
    inline symbol_style presentation_style_select::get_symbol_style() { return getEntityInstance("SYMBOL_STYLE"); }
    inline void presentation_style_select::put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }
    inline fill_area_style presentation_style_select::get_fill_area_style() { return getEntityInstance("FILL_AREA_STYLE"); }
    inline void presentation_style_select::put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }
    inline text_style presentation_style_select::get_text_style() { return getEntityInstance("TEXT_STYLE"); }
    inline void presentation_style_select::put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }
    inline approximation_tolerance presentation_style_select::get_approximation_tolerance() { return getEntityInstance("APPROXIMATION_TOLERANCE"); }
    inline void presentation_style_select::put_approximation_tolerance(approximation_tolerance inst) { putEntityInstance("APPROXIMATION_TOLERANCE", inst); }
    inline externally_defined_style presentation_style_select::get_externally_defined_style() { return getEntityInstance("EXTERNALLY_DEFINED_STYLE"); }
    inline void presentation_style_select::put_externally_defined_style(externally_defined_style inst) { putEntityInstance("EXTERNALLY_DEFINED_STYLE", inst); }
    inline pre_defined_presentation_style presentation_style_select_get::get_pre_defined_presentation_style() { return getEntityInstance("PRE_DEFINED_PRESENTATION_STYLE"); }
    inline point_style presentation_style_select_get::get_point_style() { return getEntityInstance("POINT_STYLE"); }
    inline curve_style presentation_style_select_get::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline surface_style_usage presentation_style_select_get::get_surface_style_usage() { return getEntityInstance("SURFACE_STYLE_USAGE"); }
    inline symbol_style presentation_style_select_get::get_symbol_style() { return getEntityInstance("SYMBOL_STYLE"); }
    inline fill_area_style presentation_style_select_get::get_fill_area_style() { return getEntityInstance("FILL_AREA_STYLE"); }
    inline text_style presentation_style_select_get::get_text_style() { return getEntityInstance("TEXT_STYLE"); }
    inline approximation_tolerance presentation_style_select_get::get_approximation_tolerance() { return getEntityInstance("APPROXIMATION_TOLERANCE"); }
    inline externally_defined_style presentation_style_select_get::get_externally_defined_style() { return getEntityInstance("EXTERNALLY_DEFINED_STYLE"); }
    inline void presentation_style_select_put::put_pre_defined_presentation_style(pre_defined_presentation_style inst) { putEntityInstance("PRE_DEFINED_PRESENTATION_STYLE", inst); }
    inline void presentation_style_select_put::put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }
    inline void presentation_style_select_put::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline void presentation_style_select_put::put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }
    inline void presentation_style_select_put::put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }
    inline void presentation_style_select_put::put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }
    inline void presentation_style_select_put::put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }
    inline void presentation_style_select_put::put_approximation_tolerance(approximation_tolerance inst) { putEntityInstance("APPROXIMATION_TOLERANCE", inst); }
    inline void presentation_style_select_put::put_externally_defined_style(externally_defined_style inst) { putEntityInstance("EXTERNALLY_DEFINED_STYLE", inst); }
    inline action presented_item_select::get_action() { return getEntityInstance("ACTION"); }
    inline void presented_item_select::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method presented_item_select::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void presented_item_select::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_relationship presented_item_select::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void presented_item_select::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline product_concept presented_item_select::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void presented_item_select::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature presented_item_select::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void presented_item_select::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category presented_item_select::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void presented_item_select::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition presented_item_select::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void presented_item_select::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation presented_item_select::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void presented_item_select::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship presented_item_select::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void presented_item_select::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline action presented_item_select_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method presented_item_select_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_relationship presented_item_select_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline product_concept presented_item_select_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature presented_item_select_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category presented_item_select_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition presented_item_select_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation presented_item_select_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship presented_item_select_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void presented_item_select_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void presented_item_select_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void presented_item_select_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void presented_item_select_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void presented_item_select_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void presented_item_select_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void presented_item_select_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void presented_item_select_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void presented_item_select_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product product_or_formation_or_definition::get_product() { return getEntityInstance("PRODUCT"); }
    inline void product_or_formation_or_definition::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition_formation product_or_formation_or_definition::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void product_or_formation_or_definition::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition product_or_formation_or_definition::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_or_formation_or_definition::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product product_or_formation_or_definition_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition_formation product_or_formation_or_definition_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition product_or_formation_or_definition_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_or_formation_or_definition_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void product_or_formation_or_definition_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void product_or_formation_or_definition_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline property_definition property_or_shape_select::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void property_or_shape_select::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition property_or_shape_select_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void property_or_shape_select_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline surface_style_reflectance_ambient rendering_properties_select::get_surface_style_reflectance_ambient() { return getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT"); }
    inline void rendering_properties_select::put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }
    inline surface_style_transparent rendering_properties_select::get_surface_style_transparent() { return getEntityInstance("SURFACE_STYLE_TRANSPARENT"); }
    inline void rendering_properties_select::put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
    inline surface_style_reflectance_ambient rendering_properties_select_get::get_surface_style_reflectance_ambient() { return getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT"); }
    inline surface_style_transparent rendering_properties_select_get::get_surface_style_transparent() { return getEntityInstance("SURFACE_STYLE_TRANSPARENT"); }
    inline void rendering_properties_select_put::put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }
    inline void rendering_properties_select_put::put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
    inline general_property represented_definition::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void represented_definition::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline property_definition represented_definition::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void represented_definition::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship represented_definition::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void represented_definition::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline shape_aspect represented_definition::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void represented_definition::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship represented_definition::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void represented_definition::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline general_property represented_definition_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline property_definition represented_definition_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship represented_definition_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline shape_aspect represented_definition_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship represented_definition_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void represented_definition_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void represented_definition_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void represented_definition_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void represented_definition_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void represented_definition_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline edge reversible_topology_item::get_edge() { return getEntityInstance("EDGE"); }
    inline void reversible_topology_item::put_edge(edge inst) { putEntityInstance("EDGE", inst); }
    inline path reversible_topology_item::get_path() { return getEntityInstance("PATH"); }
    inline void reversible_topology_item::put_path(path inst) { putEntityInstance("PATH", inst); }
    inline face reversible_topology_item::get_face() { return getEntityInstance("FACE"); }
    inline void reversible_topology_item::put_face(face inst) { putEntityInstance("FACE", inst); }
    inline face_bound reversible_topology_item::get_face_bound() { return getEntityInstance("FACE_BOUND"); }
    inline void reversible_topology_item::put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }
    inline closed_shell reversible_topology_item::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void reversible_topology_item::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline open_shell reversible_topology_item::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void reversible_topology_item::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline edge reversible_topology_item_get::get_edge() { return getEntityInstance("EDGE"); }
    inline path reversible_topology_item_get::get_path() { return getEntityInstance("PATH"); }
    inline face reversible_topology_item_get::get_face() { return getEntityInstance("FACE"); }
    inline face_bound reversible_topology_item_get::get_face_bound() { return getEntityInstance("FACE_BOUND"); }
    inline closed_shell reversible_topology_item_get::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline open_shell reversible_topology_item_get::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void reversible_topology_item_put::put_edge(edge inst) { putEntityInstance("EDGE", inst); }
    inline void reversible_topology_item_put::put_path(path inst) { putEntityInstance("PATH", inst); }
    inline void reversible_topology_item_put::put_face(face inst) { putEntityInstance("FACE", inst); }
    inline void reversible_topology_item_put::put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }
    inline void reversible_topology_item_put::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline void reversible_topology_item_put::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline axis2_placement_3d rigid_placement::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void rigid_placement::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline axis2_placement_3d rigid_placement_get::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void rigid_placement_put::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline action_assignment role_select::get_action_assignment() { return getEntityInstance("ACTION_ASSIGNMENT"); }
    inline void role_select::put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }
    inline action_request_assignment role_select::get_action_request_assignment() { return getEntityInstance("ACTION_REQUEST_ASSIGNMENT"); }
    inline void role_select::put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }
    inline approval_assignment role_select::get_approval_assignment() { return getEntityInstance("APPROVAL_ASSIGNMENT"); }
    inline void role_select::put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }
    inline approval_date_time role_select::get_approval_date_time() { return getEntityInstance("APPROVAL_DATE_TIME"); }
    inline void role_select::put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }
    inline certification_assignment role_select::get_certification_assignment() { return getEntityInstance("CERTIFICATION_ASSIGNMENT"); }
    inline void role_select::put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }
    inline contract_assignment role_select::get_contract_assignment() { return getEntityInstance("CONTRACT_ASSIGNMENT"); }
    inline void role_select::put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }
    inline document_reference role_select::get_document_reference() { return getEntityInstance("DOCUMENT_REFERENCE"); }
    inline void role_select::put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }
    inline effectivity_assignment role_select::get_effectivity_assignment() { return getEntityInstance("EFFECTIVITY_ASSIGNMENT"); }
    inline void role_select::put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }
    inline group_assignment role_select::get_group_assignment() { return getEntityInstance("GROUP_ASSIGNMENT"); }
    inline void role_select::put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }
    inline name_assignment role_select::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline void role_select::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline security_classification_assignment role_select::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void role_select::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline action_assignment role_select_get::get_action_assignment() { return getEntityInstance("ACTION_ASSIGNMENT"); }
    inline action_request_assignment role_select_get::get_action_request_assignment() { return getEntityInstance("ACTION_REQUEST_ASSIGNMENT"); }
    inline approval_assignment role_select_get::get_approval_assignment() { return getEntityInstance("APPROVAL_ASSIGNMENT"); }
    inline approval_date_time role_select_get::get_approval_date_time() { return getEntityInstance("APPROVAL_DATE_TIME"); }
    inline certification_assignment role_select_get::get_certification_assignment() { return getEntityInstance("CERTIFICATION_ASSIGNMENT"); }
    inline contract_assignment role_select_get::get_contract_assignment() { return getEntityInstance("CONTRACT_ASSIGNMENT"); }
    inline document_reference role_select_get::get_document_reference() { return getEntityInstance("DOCUMENT_REFERENCE"); }
    inline effectivity_assignment role_select_get::get_effectivity_assignment() { return getEntityInstance("EFFECTIVITY_ASSIGNMENT"); }
    inline group_assignment role_select_get::get_group_assignment() { return getEntityInstance("GROUP_ASSIGNMENT"); }
    inline name_assignment role_select_get::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline security_classification_assignment role_select_get::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void role_select_put::put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }
    inline void role_select_put::put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }
    inline void role_select_put::put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }
    inline void role_select_put::put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }
    inline void role_select_put::put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }
    inline void role_select_put::put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }
    inline void role_select_put::put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }
    inline void role_select_put::put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }
    inline void role_select_put::put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }
    inline void role_select_put::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline void role_select_put::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline action security_classification_item::get_action() { return getEntityInstance("ACTION"); }
    inline void security_classification_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive security_classification_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void security_classification_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_property security_classification_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void security_classification_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline applied_action_assignment security_classification_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void security_classification_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline assembly_component_usage_substitute security_classification_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void security_classification_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline class_system security_classification_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void security_classification_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design security_classification_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void security_classification_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity security_classification_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void security_classification_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configured_effectivity_assignment security_classification_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void security_classification_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline document_file security_classification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void security_classification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model security_classification_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void security_classification_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision security_classification_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void security_classification_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action security_classification_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void security_classification_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property security_classification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void security_classification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation security_classification_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void security_classification_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation security_classification_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void security_classification_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organizational_project security_classification_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void security_classification_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline presentation_area security_classification_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void security_classification_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product security_classification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void security_classification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept security_classification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void security_classification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature security_classification_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void security_classification_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category security_classification_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void security_classification_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition security_classification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void security_classification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation security_classification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void security_classification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship security_classification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void security_classification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition security_classification_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void security_classification_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline resource_property security_classification_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void security_classification_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline shape_representation security_classification_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void security_classification_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request security_classification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void security_classification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action security_classification_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive security_classification_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_property security_classification_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline applied_action_assignment security_classification_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline assembly_component_usage_substitute security_classification_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline class_system security_classification_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design security_classification_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity security_classification_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configured_effectivity_assignment security_classification_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline document_file security_classification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model security_classification_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision security_classification_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action security_classification_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property security_classification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation security_classification_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation security_classification_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organizational_project security_classification_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline presentation_area security_classification_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product security_classification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept security_classification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature security_classification_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category security_classification_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition security_classification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation security_classification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship security_classification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition security_classification_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline resource_property security_classification_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline shape_representation security_classification_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request security_classification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void security_classification_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void security_classification_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void security_classification_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void security_classification_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void security_classification_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void security_classification_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void security_classification_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void security_classification_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void security_classification_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void security_classification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void security_classification_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void security_classification_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void security_classification_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void security_classification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void security_classification_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void security_classification_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void security_classification_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void security_classification_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void security_classification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void security_classification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void security_classification_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void security_classification_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void security_classification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void security_classification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void security_classification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void security_classification_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void security_classification_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void security_classification_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void security_classification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline open_shell shell::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void shell::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline closed_shell shell::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void shell::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline open_shell shell_get::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline closed_shell shell_get::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void shell_put::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline void shell_put::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline measure_with_unit size_select::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void size_select::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit size_select_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void size_select_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline rotation_about_direction spatial_rotation::get_rotation_about_direction() { return getEntityInstance("ROTATION_ABOUT_DIRECTION"); }
    inline void spatial_rotation::put_rotation_about_direction(rotation_about_direction inst) { putEntityInstance("ROTATION_ABOUT_DIRECTION", inst); }
    inline rotation_about_direction spatial_rotation_get::get_rotation_about_direction() { return getEntityInstance("ROTATION_ABOUT_DIRECTION"); }
    inline void spatial_rotation_put::put_rotation_about_direction(rotation_about_direction inst) { putEntityInstance("ROTATION_ABOUT_DIRECTION", inst); }
    inline drawing_revision specified_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void specified_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline drawing_revision specified_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void specified_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline group style_context_select::get_group() { return getEntityInstance("GROUP"); }
    inline void style_context_select::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline presentation_layer_assignment style_context_select::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void style_context_select::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline presentation_set style_context_select::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void style_context_select::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline representation style_context_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void style_context_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_item style_context_select::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void style_context_select::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline shape_representation_relationship style_context_select::get_shape_representation_relationship() { return getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP"); }
    inline void style_context_select::put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }
    inline group style_context_select_get::get_group() { return getEntityInstance("GROUP"); }
    inline presentation_layer_assignment style_context_select_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline presentation_set style_context_select_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline representation style_context_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_item style_context_select_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline shape_representation_relationship style_context_select_get::get_shape_representation_relationship() { return getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP"); }
    inline void style_context_select_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void style_context_select_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void style_context_select_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline void style_context_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void style_context_select_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void style_context_select_put::put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }
    inline action_directive supported_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void supported_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action supported_item::get_action() { return getEntityInstance("ACTION"); }
    inline void supported_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method supported_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void supported_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_directive supported_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action supported_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method supported_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void supported_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void supported_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void supported_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline surface_side_style surface_side_style_select::get_surface_side_style() { return getEntityInstance("SURFACE_SIDE_STYLE"); }
    inline void surface_side_style_select::put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }
    inline surface_side_style surface_side_style_select_get::get_surface_side_style() { return getEntityInstance("SURFACE_SIDE_STYLE"); }
    inline void surface_side_style_select_put::put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }
    inline surface_style_fill_area surface_style_element_select::get_surface_style_fill_area() { return getEntityInstance("SURFACE_STYLE_FILL_AREA"); }
    inline void surface_style_element_select::put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }
    inline surface_style_boundary surface_style_element_select::get_surface_style_boundary() { return getEntityInstance("SURFACE_STYLE_BOUNDARY"); }
    inline void surface_style_element_select::put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }
    inline surface_style_silhouette surface_style_element_select::get_surface_style_silhouette() { return getEntityInstance("SURFACE_STYLE_SILHOUETTE"); }
    inline void surface_style_element_select::put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }
    inline surface_style_segmentation_curve surface_style_element_select::get_surface_style_segmentation_curve() { return getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE"); }
    inline void surface_style_element_select::put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }
    inline surface_style_control_grid surface_style_element_select::get_surface_style_control_grid() { return getEntityInstance("SURFACE_STYLE_CONTROL_GRID"); }
    inline void surface_style_element_select::put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }
    inline surface_style_parameter_line surface_style_element_select::get_surface_style_parameter_line() { return getEntityInstance("SURFACE_STYLE_PARAMETER_LINE"); }
    inline void surface_style_element_select::put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }
    inline surface_style_rendering surface_style_element_select::get_surface_style_rendering() { return getEntityInstance("SURFACE_STYLE_RENDERING"); }
    inline void surface_style_element_select::put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
    inline surface_style_fill_area surface_style_element_select_get::get_surface_style_fill_area() { return getEntityInstance("SURFACE_STYLE_FILL_AREA"); }
    inline surface_style_boundary surface_style_element_select_get::get_surface_style_boundary() { return getEntityInstance("SURFACE_STYLE_BOUNDARY"); }
    inline surface_style_silhouette surface_style_element_select_get::get_surface_style_silhouette() { return getEntityInstance("SURFACE_STYLE_SILHOUETTE"); }
    inline surface_style_segmentation_curve surface_style_element_select_get::get_surface_style_segmentation_curve() { return getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE"); }
    inline surface_style_control_grid surface_style_element_select_get::get_surface_style_control_grid() { return getEntityInstance("SURFACE_STYLE_CONTROL_GRID"); }
    inline surface_style_parameter_line surface_style_element_select_get::get_surface_style_parameter_line() { return getEntityInstance("SURFACE_STYLE_PARAMETER_LINE"); }
    inline surface_style_rendering surface_style_element_select_get::get_surface_style_rendering() { return getEntityInstance("SURFACE_STYLE_RENDERING"); }
    inline void surface_style_element_select_put::put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }
    inline void surface_style_element_select_put::put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }
    inline void surface_style_element_select_put::put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }
    inline void surface_style_element_select_put::put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }
    inline void surface_style_element_select_put::put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }
    inline void surface_style_element_select_put::put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }
    inline void surface_style_element_select_put::put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
    inline symbol_colour symbol_style_select::get_symbol_colour() { return getEntityInstance("SYMBOL_COLOUR"); }
    inline void symbol_style_select::put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
    inline symbol_colour symbol_style_select_get::get_symbol_colour() { return getEntityInstance("SYMBOL_COLOUR"); }
    inline void symbol_style_select_put::put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
    inline annotation_text text_or_character::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void text_or_character::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character text_or_character::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void text_or_character::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline defined_character_glyph text_or_character::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline void text_or_character::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline composite_text text_or_character::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_or_character::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal text_or_character::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_or_character::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text text_or_character_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character text_or_character_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline defined_character_glyph text_or_character_get::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline composite_text text_or_character_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline text_literal text_or_character_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_or_character_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void text_or_character_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void text_or_character_put::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline void text_or_character_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline void text_or_character_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline text_literal text_string_representation_item::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_string_representation_item::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text text_string_representation_item::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void text_string_representation_item::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character text_string_representation_item::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void text_string_representation_item::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline defined_character_glyph text_string_representation_item::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline void text_string_representation_item::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline composite_text text_string_representation_item::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_string_representation_item::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal text_string_representation_item_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline annotation_text text_string_representation_item_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character text_string_representation_item_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline defined_character_glyph text_string_representation_item_get::get_defined_character_glyph() { return getEntityInstance("DEFINED_CHARACTER_GLYPH"); }
    inline composite_text text_string_representation_item_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_string_representation_item_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline void text_string_representation_item_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void text_string_representation_item_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void text_string_representation_item_put::put_defined_character_glyph(defined_character_glyph inst) { putEntityInstance("DEFINED_CHARACTER_GLYPH", inst); }
    inline void text_string_representation_item_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline action time_interval_item::get_action() { return getEntityInstance("ACTION"); }
    inline void time_interval_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive time_interval_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void time_interval_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method time_interval_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void time_interval_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property time_interval_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void time_interval_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship time_interval_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void time_interval_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution time_interval_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void time_interval_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline alternate_product_relationship time_interval_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void time_interval_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment time_interval_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void time_interval_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment time_interval_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void time_interval_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment time_interval_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void time_interval_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval_status time_interval_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void time_interval_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute time_interval_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void time_interval_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification time_interval_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void time_interval_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ time_interval_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void time_interval_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline class_system time_interval_item::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline void time_interval_item::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline configuration_design time_interval_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void time_interval_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_effectivity time_interval_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void time_interval_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item time_interval_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void time_interval_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline configured_effectivity_assignment time_interval_item::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline void time_interval_item::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline contract time_interval_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void time_interval_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file time_interval_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void time_interval_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline draughting_model time_interval_item::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void time_interval_item::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline drawing_revision time_interval_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void time_interval_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline executed_action time_interval_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void time_interval_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property time_interval_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void time_interval_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline material_designation time_interval_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void time_interval_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline mechanical_design_geometric_presentation_representation time_interval_item::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void time_interval_item::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline organization_relationship time_interval_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void time_interval_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_project time_interval_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void time_interval_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization time_interval_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void time_interval_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline presentation_area time_interval_item::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void time_interval_item::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline product time_interval_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void time_interval_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept time_interval_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void time_interval_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature time_interval_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void time_interval_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_association time_interval_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void time_interval_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_category time_interval_item::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void time_interval_item::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_concept_feature_category_usage time_interval_item::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline void time_interval_item::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline product_definition time_interval_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void time_interval_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation time_interval_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void time_interval_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship time_interval_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void time_interval_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship time_interval_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void time_interval_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute time_interval_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void time_interval_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition time_interval_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void time_interval_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline requirement_for_action_resource time_interval_item::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline void time_interval_item::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline resource_property time_interval_item::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline void time_interval_item::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline security_classification time_interval_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void time_interval_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level time_interval_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void time_interval_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_representation time_interval_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void time_interval_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request time_interval_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void time_interval_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action time_interval_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive time_interval_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method time_interval_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property time_interval_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship time_interval_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution time_interval_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline alternate_product_relationship time_interval_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment time_interval_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment time_interval_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment time_interval_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval_status time_interval_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute time_interval_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification time_interval_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ time_interval_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline class_system time_interval_item_get::get_class_system() { return getEntityInstance("CLASS_SYSTEM"); }
    inline configuration_design time_interval_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_effectivity time_interval_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item time_interval_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline configured_effectivity_assignment time_interval_item_get::get_configured_effectivity_assignment() { return getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT"); }
    inline contract time_interval_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file time_interval_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline draughting_model time_interval_item_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline drawing_revision time_interval_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline executed_action time_interval_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property time_interval_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline material_designation time_interval_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline mechanical_design_geometric_presentation_representation time_interval_item_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline organization_relationship time_interval_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_project time_interval_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization time_interval_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline presentation_area time_interval_item_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline product time_interval_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept time_interval_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature time_interval_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_association time_interval_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline product_concept_feature_category time_interval_item_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_concept_feature_category_usage time_interval_item_get::get_product_concept_feature_category_usage() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE"); }
    inline product_definition time_interval_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation time_interval_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship time_interval_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship time_interval_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute time_interval_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition time_interval_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline requirement_for_action_resource time_interval_item_get::get_requirement_for_action_resource() { return getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE"); }
    inline resource_property time_interval_item_get::get_resource_property() { return getEntityInstance("RESOURCE_PROPERTY"); }
    inline security_classification time_interval_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level time_interval_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_representation time_interval_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request time_interval_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void time_interval_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void time_interval_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void time_interval_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void time_interval_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void time_interval_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void time_interval_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void time_interval_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void time_interval_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void time_interval_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void time_interval_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void time_interval_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void time_interval_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void time_interval_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void time_interval_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void time_interval_item_put::put_class_system(class_system inst) { putEntityInstance("CLASS_SYSTEM", inst); }
    inline void time_interval_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void time_interval_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void time_interval_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void time_interval_item_put::put_configured_effectivity_assignment(configured_effectivity_assignment inst) { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void time_interval_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void time_interval_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void time_interval_item_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void time_interval_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void time_interval_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void time_interval_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void time_interval_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void time_interval_item_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void time_interval_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void time_interval_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void time_interval_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void time_interval_item_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void time_interval_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void time_interval_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void time_interval_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void time_interval_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline void time_interval_item_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void time_interval_item_put::put_product_concept_feature_category_usage(product_concept_feature_category_usage inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", inst); }
    inline void time_interval_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void time_interval_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void time_interval_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void time_interval_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void time_interval_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void time_interval_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void time_interval_item_put::put_requirement_for_action_resource(requirement_for_action_resource inst) { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", inst); }
    inline void time_interval_item_put::put_resource_property(resource_property inst) { putEntityInstance("RESOURCE_PROPERTY", inst); }
    inline void time_interval_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void time_interval_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void time_interval_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void time_interval_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline tolerance_value tolerance_method_definition::get_tolerance_value() { return getEntityInstance("TOLERANCE_VALUE"); }
    inline void tolerance_method_definition::put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }
    inline limits_and_fits tolerance_method_definition::get_limits_and_fits() { return getEntityInstance("LIMITS_AND_FITS"); }
    inline void tolerance_method_definition::put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
    inline tolerance_value tolerance_method_definition_get::get_tolerance_value() { return getEntityInstance("TOLERANCE_VALUE"); }
    inline limits_and_fits tolerance_method_definition_get::get_limits_and_fits() { return getEntityInstance("LIMITS_AND_FITS"); }
    inline void tolerance_method_definition_put::put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }
    inline void tolerance_method_definition_put::put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
    inline approximation_tolerance_deviation tolerance_select::get_approximation_tolerance_deviation() { return getEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION"); }
    inline void tolerance_select::put_approximation_tolerance_deviation(approximation_tolerance_deviation inst) { putEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION", inst); }
    inline approximation_tolerance_parameter tolerance_select::get_approximation_tolerance_parameter() { return getEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER"); }
    inline void tolerance_select::put_approximation_tolerance_parameter(approximation_tolerance_parameter inst) { putEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER", inst); }
    inline approximation_tolerance_deviation tolerance_select_get::get_approximation_tolerance_deviation() { return getEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION"); }
    inline approximation_tolerance_parameter tolerance_select_get::get_approximation_tolerance_parameter() { return getEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER"); }
    inline void tolerance_select_put::put_approximation_tolerance_deviation(approximation_tolerance_deviation inst) { putEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION", inst); }
    inline void tolerance_select_put::put_approximation_tolerance_parameter(approximation_tolerance_parameter inst) { putEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER", inst); }
    inline item_defined_transformation transformation::get_item_defined_transformation() { return getEntityInstance("ITEM_DEFINED_TRANSFORMATION"); }
    inline void transformation::put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }
    inline functionally_defined_transformation transformation::get_functionally_defined_transformation() { return getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION"); }
    inline void transformation::put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
    inline item_defined_transformation transformation_get::get_item_defined_transformation() { return getEntityInstance("ITEM_DEFINED_TRANSFORMATION"); }
    inline functionally_defined_transformation transformation_get::get_functionally_defined_transformation() { return getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION"); }
    inline void transformation_put::put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }
    inline void transformation_put::put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
    inline cartesian_point trimming_select::get_cartesian_point() { return getEntityInstance("CARTESIAN_POINT"); }
    inline void trimming_select::put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }
    inline cartesian_point trimming_select_get::get_cartesian_point() { return getEntityInstance("CARTESIAN_POINT"); }
    inline void trimming_select_put::put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }
    inline derived_unit unit::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void unit::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline named_unit unit::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void unit::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline derived_unit unit_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline named_unit unit_get::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void unit_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void unit_put::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline precision_qualifier value_qualifier::get_precision_qualifier() { return getEntityInstance("PRECISION_QUALIFIER"); }
    inline void value_qualifier::put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }
    inline type_qualifier value_qualifier::get_type_qualifier() { return getEntityInstance("TYPE_QUALIFIER"); }
    inline void value_qualifier::put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }
    inline uncertainty_qualifier value_qualifier::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void value_qualifier::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline precision_qualifier value_qualifier_get::get_precision_qualifier() { return getEntityInstance("PRECISION_QUALIFIER"); }
    inline type_qualifier value_qualifier_get::get_type_qualifier() { return getEntityInstance("TYPE_QUALIFIER"); }
    inline uncertainty_qualifier value_qualifier_get::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void value_qualifier_put::put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }
    inline void value_qualifier_put::put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }
    inline void value_qualifier_put::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline vector vector_or_direction::get_vector() { return getEntityInstance("VECTOR"); }
    inline void vector_or_direction::put_vector(vector inst) { putEntityInstance("VECTOR", inst); }
    inline direction vector_or_direction::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void vector_or_direction::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline vector vector_or_direction_get::get_vector() { return getEntityInstance("VECTOR"); }
    inline direction vector_or_direction_get::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void vector_or_direction_put::put_vector(vector inst) { putEntityInstance("VECTOR", inst); }
    inline void vector_or_direction_put::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline generic_expression unary_generic_expression::get_operand() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "operand", sdaiINSTANCE, &inst); return inst; }
    inline void unary_generic_expression::put_operand(generic_expression inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "operand", sdaiINSTANCE, (void*) i); }
    inline action_method action::get_chosen_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "chosen_method", sdaiINSTANCE, &inst); return inst; }
    inline void action::put_chosen_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "chosen_method", sdaiINSTANCE, (void*) i); }
    inline action action_assignment::get_assigned_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_assignment::put_assigned_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action", sdaiINSTANCE, (void*) i); }
    inline action_method action_method_relationship::get_relating_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_method", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_relationship::put_relating_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_method", sdaiINSTANCE, (void*) i); }
    inline action_method action_method_relationship::get_related_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_method", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_relationship::put_related_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_method", sdaiINSTANCE, (void*) i); }
    inline action_property action_property_representation::get_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "property", sdaiINSTANCE, &inst); return inst; }
    inline void action_property_representation::put_property(action_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "property", sdaiINSTANCE, (void*) i); }
    inline representation action_property_representation::get_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation", sdaiINSTANCE, &inst); return inst; }
    inline void action_property_representation::put_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation", sdaiINSTANCE, (void*) i); }
    inline action action_relationship::get_relating_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_relationship::put_relating_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_action", sdaiINSTANCE, (void*) i); }
    inline action action_relationship::get_related_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_relationship::put_related_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_action", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_assignment::get_assigned_action_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action_request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_assignment::put_assigned_action_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action_request", sdaiINSTANCE, (void*) i); }
    inline action_method action_request_solution::get_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "method", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_solution::put_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "method", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_solution::get_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_solution::put_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "request", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_status::get_assigned_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_status::put_assigned_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_request", sdaiINSTANCE, (void*) i); }
    inline action_resource_type action_resource::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void action_resource::put_kind(action_resource_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline resource_requirement_type action_resource_requirement::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void action_resource_requirement::put_kind(resource_requirement_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline executed_action action_status::get_assigned_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_status::put_assigned_action(executed_action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action", sdaiINSTANCE, (void*) i); }
    inline representation_context representation::get_context_of_items() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "context_of_items", sdaiINSTANCE, &inst); return inst; }
    inline void representation::put_context_of_items(representation_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "context_of_items", sdaiINSTANCE, (void*) i); }
    inline surface face_surface::get_face_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "face_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void face_surface::put_face_geometry(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "face_geometry", sdaiINSTANCE, (void*) i); }
    inline product alternate_product_relationship::get_alternate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "alternate", sdaiINSTANCE, &inst); return inst; }
    inline void alternate_product_relationship::put_alternate(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "alternate", sdaiINSTANCE, (void*) i); }
    inline product alternate_product_relationship::get_base_() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_", sdaiINSTANCE, &inst); return inst; }
    inline void alternate_product_relationship::put_base_(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_", sdaiINSTANCE, (void*) i); }
    inline dimensional_exponents named_unit::get_dimensions() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dimensions", sdaiINSTANCE, &inst); return inst; }
    inline void named_unit::put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dimensions", sdaiINSTANCE, (void*) i); }
    inline shape_aspect shape_aspect_relationship::get_relating_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect_relationship::put_relating_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline shape_aspect shape_aspect_relationship::get_related_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect_relationship::put_related_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_size::get_applies_to() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "applies_to", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_size::put_applies_to(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "applies_to", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit geometric_tolerance::get_magnitude() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "magnitude", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance::put_magnitude(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "magnitude", sdaiINSTANCE, (void*) i); }
    inline shape_aspect geometric_tolerance::get_toleranced_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "toleranced_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance::put_toleranced_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "toleranced_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline representation_item styled_item::get_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item", sdaiINSTANCE, &inst); return inst; }
    inline void styled_item::put_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item", sdaiINSTANCE, (void*) i); }
    inline point annotation_fill_area_occurrence::get_fill_style_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_style_target", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_fill_area_occurrence::put_fill_style_target(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_style_target", sdaiINSTANCE, (void*) i); }
    inline annotation_occurrence annotation_occurrence_relationship::get_relating_annotation_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_annotation_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_occurrence_relationship::put_relating_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_annotation_occurrence", sdaiINSTANCE, (void*) i); }
    inline annotation_occurrence annotation_occurrence_relationship::get_related_annotation_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_annotation_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_occurrence_relationship::put_related_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_annotation_occurrence", sdaiINSTANCE, (void*) i); }
    inline representation_map mapped_item::get_mapping_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_source", sdaiINSTANCE, &inst); return inst; }
    inline void mapped_item::put_mapping_source(representation_map inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_source", sdaiINSTANCE, (void*) i); }
    inline representation_item mapped_item::get_mapping_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_target", sdaiINSTANCE, &inst); return inst; }
    inline void mapped_item::put_mapping_target(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_target", sdaiINSTANCE, (void*) i); }
    inline product_definition_shape shape_aspect::get_of_shape() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "of_shape", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect::put_of_shape(product_definition_shape inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "of_shape", sdaiINSTANCE, (void*) i); }
    inline application_context application_context_element::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void application_context_element::put_frame_of_reference(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline application_context application_context_relationship::get_relating_context() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_context", sdaiINSTANCE, &inst); return inst; }
    inline void application_context_relationship::put_relating_context(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_context", sdaiINSTANCE, (void*) i); }
    inline application_context application_context_relationship::get_related_context() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_context", sdaiINSTANCE, &inst); return inst; }
    inline void application_context_relationship::put_related_context(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_context", sdaiINSTANCE, (void*) i); }
    inline application_context application_protocol_definition::get_application() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "application", sdaiINSTANCE, &inst); return inst; }
    inline void application_protocol_definition::put_application(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "application", sdaiINSTANCE, (void*) i); }
    inline approval approval_assignment::get_assigned_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_assignment::put_assigned_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_approval", sdaiINSTANCE, (void*) i); }
    inline certification certification_assignment::get_assigned_certification() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_certification", sdaiINSTANCE, &inst); return inst; }
    inline void certification_assignment::put_assigned_certification(certification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_certification", sdaiINSTANCE, (void*) i); }
    inline group classification_assignment::get_assigned_class() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_class", sdaiINSTANCE, &inst); return inst; }
    inline void classification_assignment::put_assigned_class(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_class", sdaiINSTANCE, (void*) i); }
    inline classification_role classification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void classification_assignment::put_role(classification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline contract contract_assignment::get_assigned_contract() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_contract", sdaiINSTANCE, &inst); return inst; }
    inline void contract_assignment::put_assigned_contract(contract inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_contract", sdaiINSTANCE, (void*) i); }
    inline date_and_time date_and_time_assignment::get_assigned_date_and_time() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_date_and_time", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time_assignment::put_assigned_date_and_time(date_and_time inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_date_and_time", sdaiINSTANCE, (void*) i); }
    inline date_time_role date_and_time_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time_assignment::put_role(date_time_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline date date_assignment::get_assigned_date() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_date", sdaiINSTANCE, &inst); return inst; }
    inline void date_assignment::put_assigned_date(date inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_date", sdaiINSTANCE, (void*) i); }
    inline date_role date_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void date_assignment::put_role(date_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline document document_reference::get_assigned_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_reference::put_assigned_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_document", sdaiINSTANCE, (void*) i); }
    inline document_usage_constraint document_usage_constraint_assignment::get_assigned_document_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_document_usage", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint_assignment::put_assigned_document_usage(document_usage_constraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_document_usage", sdaiINSTANCE, (void*) i); }
    inline document_usage_role document_usage_constraint_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint_assignment::put_role(document_usage_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_assignment::get_assigned_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_assignment::put_assigned_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_effectivity", sdaiINSTANCE, (void*) i); }
    inline event_occurrence event_occurrence_assignment::get_assigned_event_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_event_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_assignment::put_assigned_event_occurrence(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_event_occurrence", sdaiINSTANCE, (void*) i); }
    inline event_occurrence_role event_occurrence_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_assignment::put_role(event_occurrence_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline identification_role identification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void identification_assignment::put_role(identification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline external_source external_identification_assignment::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void external_identification_assignment::put_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline group group_assignment::get_assigned_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_assignment::put_assigned_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_group", sdaiINSTANCE, (void*) i); }
    inline organization organization_assignment::get_assigned_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_assignment::put_assigned_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_organization", sdaiINSTANCE, (void*) i); }
    inline organization_role organization_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void organization_assignment::put_role(organization_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_assignment::get_assigned_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_assignment::put_assigned_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_organizational_project", sdaiINSTANCE, (void*) i); }
    inline organizational_project_role organizational_project_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_assignment::put_role(organizational_project_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline person_and_organization person_and_organization_assignment::get_assigned_person_and_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_person_and_organization", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization_assignment::put_assigned_person_and_organization(person_and_organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_person_and_organization", sdaiINSTANCE, (void*) i); }
    inline person_and_organization_role person_and_organization_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization_assignment::put_role(person_and_organization_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline security_classification security_classification_assignment::get_assigned_security_classification() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_security_classification", sdaiINSTANCE, &inst); return inst; }
    inline void security_classification_assignment::put_assigned_security_classification(security_classification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_security_classification", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_assignment::get_assigned_time_interval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_time_interval", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_assignment::put_assigned_time_interval(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_time_interval", sdaiINSTANCE, (void*) i); }
    inline time_interval_role time_interval_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_assignment::put_role(time_interval_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline approval_status approval::get_status() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "status", sdaiINSTANCE, &inst); return inst; }
    inline void approval::put_status(approval_status inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "status", sdaiINSTANCE, (void*) i); }
    inline approval approval_date_time::get_dated_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dated_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_date_time::put_dated_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dated_approval", sdaiINSTANCE, (void*) i); }
    inline approval approval_person_organization::get_authorized_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "authorized_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_person_organization::put_authorized_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "authorized_approval", sdaiINSTANCE, (void*) i); }
    inline approval_role approval_person_organization::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void approval_person_organization::put_role(approval_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline approval approval_relationship::get_relating_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_relationship::put_relating_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_approval", sdaiINSTANCE, (void*) i); }
    inline approval approval_relationship::get_related_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_relationship::put_related_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_approval", sdaiINSTANCE, (void*) i); }
    inline presentation_area area_in_set::get_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "area", sdaiINSTANCE, &inst); return inst; }
    inline void area_in_set::put_area(presentation_area inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "area", sdaiINSTANCE, (void*) i); }
    inline presentation_set area_in_set::get_in_set() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "in_set", sdaiINSTANCE, &inst); return inst; }
    inline void area_in_set::put_in_set(presentation_set inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "in_set", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_relationship::get_relating_product_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_relationship::put_relating_product_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_definition", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_relationship::get_related_product_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_relationship::put_related_product_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_definition", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage assembly_component_usage_substitute::get_base_() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_", sdaiINSTANCE, &inst); return inst; }
    inline void assembly_component_usage_substitute::put_base_(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage assembly_component_usage_substitute::get_substitute() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "substitute", sdaiINSTANCE, &inst); return inst; }
    inline void assembly_component_usage_substitute::put_substitute(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "substitute", sdaiINSTANCE, (void*) i); }
    inline group attribute_classification_assignment::get_assigned_class() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_class", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_classification_assignment::put_assigned_class(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_class", sdaiINSTANCE, (void*) i); }
    inline classification_role attribute_classification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_classification_assignment::put_role(classification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline attribute_value_role attribute_value_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_value_assignment::put_role(attribute_value_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline cartesian_point placement::get_location() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "location", sdaiINSTANCE, &inst); return inst; }
    inline void placement::put_location(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "location", sdaiINSTANCE, (void*) i); }
    inline direction axis1_placement::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void axis1_placement::put_axis(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_2d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_2d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_3d::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_3d::put_axis(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_3d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_3d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d block::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void block::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline environment generic_variable::get_interpretation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "interpretation", sdaiINSTANCE, &inst); return inst; }
    inline surface pcurve::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void pcurve::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline definitional_representation pcurve::get_reference_to_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, &inst); return inst; }
    inline void pcurve::put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, (void*) i); }
    inline curve surface_curve::get_curve_3d() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_3d", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve::put_curve_3d(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_3d", sdaiINSTANCE, (void*) i); }
    inline cartesian_point box_domain::get_corner() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "corner", sdaiINSTANCE, &inst); return inst; }
    inline void box_domain::put_corner(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "corner", sdaiINSTANCE, (void*) i); }
    inline surface half_space_solid::get_base_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_surface", sdaiINSTANCE, &inst); return inst; }
    inline void half_space_solid::put_base_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_surface", sdaiINSTANCE, (void*) i); }
    inline box_domain boxed_half_space::get_enclosure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "enclosure", sdaiINSTANCE, &inst); return inst; }
    inline void boxed_half_space::put_enclosure(box_domain inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "enclosure", sdaiINSTANCE, (void*) i); }
    inline closed_shell manifold_solid_brep::get_outer() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "outer", sdaiINSTANCE, &inst); return inst; }
    inline void manifold_solid_brep::put_outer(closed_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "outer", sdaiINSTANCE, (void*) i); }
    inline planar_box camera_model_d2::get_view_window() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "view_window", sdaiINSTANCE, &inst); return inst; }
    inline void camera_model_d2::put_view_window(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "view_window", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d camera_model_d3::get_view_reference_system() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "view_reference_system", sdaiINSTANCE, &inst); return inst; }
    inline void camera_model_d3::put_view_reference_system(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "view_reference_system", sdaiINSTANCE, (void*) i); }
    inline view_volume camera_model_d3::get_perspective_of_volume() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "perspective_of_volume", sdaiINSTANCE, &inst); return inst; }
    inline void camera_model_d3::put_perspective_of_volume(view_volume inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "perspective_of_volume", sdaiINSTANCE, (void*) i); }
    inline representation_item representation_map::get_mapping_origin() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_origin", sdaiINSTANCE, &inst); return inst; }
    inline void representation_map::put_mapping_origin(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_origin", sdaiINSTANCE, (void*) i); }
    inline representation representation_map::get_mapped_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapped_representation", sdaiINSTANCE, &inst); return inst; }
    inline void representation_map::put_mapped_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapped_representation", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator::get_axis1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis1", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_axis1(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis1", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator::get_axis2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis2", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_axis2(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis2", sdaiINSTANCE, (void*) i); }
    inline cartesian_point cartesian_transformation_operator::get_local_origin() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "local_origin", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_local_origin(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "local_origin", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator_3d::get_axis3() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis3", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator_3d::put_axis3(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis3", sdaiINSTANCE, (void*) i); }
    inline certification_type certification::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void certification::put_kind(certification_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline planar_extent character_glyph_symbol::get_character_box() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "character_box", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_symbol::put_character_box(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "character_box", sdaiINSTANCE, (void*) i); }
    inline effectivity_assignment effectivity_context_assignment::get_assigned_effectivity_assignment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_effectivity_assignment", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_context_assignment::put_assigned_effectivity_assignment(effectivity_assignment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_effectivity_assignment", sdaiINSTANCE, (void*) i); }
    inline effectivity_context_role effectivity_context_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_context_assignment::put_role(effectivity_context_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline curve composite_curve_segment::get_parent_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_curve", sdaiINSTANCE, &inst); return inst; }
    inline void composite_curve_segment::put_parent_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_curve", sdaiINSTANCE, (void*) i); }
    inline planar_box composite_text_with_blanking_box::get_blanking() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "blanking", sdaiINSTANCE, &inst); return inst; }
    inline void composite_text_with_blanking_box::put_blanking(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "blanking", sdaiINSTANCE, (void*) i); }
    inline planar_extent composite_text_with_extent::get_extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extent", sdaiINSTANCE, &inst); return inst; }
    inline void composite_text_with_extent::put_extent(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extent", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature concept_feature_relationship::get_relating_product_concept_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_concept_feature", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship::put_relating_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_concept_feature", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature concept_feature_relationship::get_related_product_concept_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_concept_feature", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship::put_related_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_concept_feature", sdaiINSTANCE, (void*) i); }
    inline concept_feature_operator concept_feature_relationship_with_condition::get_conditional_operator() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "conditional_operator", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship_with_condition::put_conditional_operator(concept_feature_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "conditional_operator", sdaiINSTANCE, (void*) i); }
    inline concept_feature_relationship_with_condition conditional_concept_feature::get_condition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "condition", sdaiINSTANCE, &inst); return inst; }
    inline void conditional_concept_feature::put_condition(concept_feature_relationship_with_condition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "condition", sdaiINSTANCE, (void*) i); }
    inline product_concept configuration_item::get_item_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item_concept", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_item::put_item_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item_concept", sdaiINSTANCE, (void*) i); }
    inline configuration_item configuration_design::get_configuration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "configuration", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_design::put_configuration(configuration_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "configuration", sdaiINSTANCE, (void*) i); }
    inline product_definition_relationship product_definition_effectivity::get_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "usage", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_effectivity::put_usage(product_definition_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "usage", sdaiINSTANCE, (void*) i); }
    inline configuration_design configuration_effectivity::get_configuration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "configuration", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_effectivity::put_configuration(configuration_design inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "configuration", sdaiINSTANCE, (void*) i); }
    inline configuration_definition configuration_interpolation::get_previous_configuration_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "previous_configuration_definition", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_interpolation::put_previous_configuration_definition(configuration_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "previous_configuration_definition", sdaiINSTANCE, (void*) i); }
    inline configuration_definition configuration_interpolation::get_next_configuration_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "next_configuration_definition", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_interpolation::put_next_configuration_definition(configuration_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "next_configuration_definition", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d elementary_surface::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void elementary_surface::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline connected_face_set connected_face_sub_set::get_parent_face_set() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_face_set", sdaiINSTANCE, &inst); return inst; }
    inline void connected_face_sub_set::put_parent_face_set(connected_face_set inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_face_set", sdaiINSTANCE, (void*) i); }
    inline representation representation_relationship::get_rep_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rep_1", sdaiINSTANCE, &inst); return inst; }
    inline void representation_relationship::put_rep_1(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rep_1", sdaiINSTANCE, (void*) i); }
    inline representation representation_relationship::get_rep_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rep_2", sdaiINSTANCE, &inst); return inst; }
    inline void representation_relationship::put_rep_2(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rep_2", sdaiINSTANCE, (void*) i); }
    inline styled_item over_riding_styled_item::get_over_ridden_style() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "over_ridden_style", sdaiINSTANCE, &inst); return inst; }
    inline void over_riding_styled_item::put_over_ridden_style(styled_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "over_ridden_style", sdaiINSTANCE, (void*) i); }
    inline shape_representation_relationship context_dependent_shape_representation::get_representation_relation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation_relation", sdaiINSTANCE, &inst); return inst; }
    inline void context_dependent_shape_representation::put_representation_relation(shape_representation_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation_relation", sdaiINSTANCE, (void*) i); }
    inline product_definition_shape context_dependent_shape_representation::get_represented_product_relation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "represented_product_relation", sdaiINSTANCE, &inst); return inst; }
    inline void context_dependent_shape_representation::put_represented_product_relation(product_definition_shape inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "represented_product_relation", sdaiINSTANCE, (void*) i); }
    inline contract_type contract::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void contract::put_kind(contract_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit conversion_based_unit::get_conversion_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "conversion_factor", sdaiINSTANCE, &inst); return inst; }
    inline void conversion_based_unit::put_conversion_factor(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "conversion_factor", sdaiINSTANCE, (void*) i); }
    inline surface curve_bounded_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void curve_bounded_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline curve curve_replica::get_parent_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_curve", sdaiINSTANCE, &inst); return inst; }
    inline void curve_replica::put_parent_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_curve", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator curve_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void curve_replica::put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline colour curve_style::get_curve_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_colour", sdaiINSTANCE, &inst); return inst; }
    inline void curve_style::put_curve_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_colour", sdaiINSTANCE, (void*) i); }
    inline surface_rendering_properties curve_style_rendering::get_rendering_properties() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rendering_properties", sdaiINSTANCE, &inst); return inst; }
    inline void curve_style_rendering::put_rendering_properties(surface_rendering_properties inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rendering_properties", sdaiINSTANCE, (void*) i); }
    inline representation_item item_defined_transformation::get_transform_item_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transform_item_1", sdaiINSTANCE, &inst); return inst; }
    inline void item_defined_transformation::put_transform_item_1(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transform_item_1", sdaiINSTANCE, (void*) i); }
    inline representation_item item_defined_transformation::get_transform_item_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transform_item_2", sdaiINSTANCE, &inst); return inst; }
    inline void item_defined_transformation::put_transform_item_2(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transform_item_2", sdaiINSTANCE, (void*) i); }
    inline kinematic_joint kinematic_pair::get_joint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "joint", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_pair::put_joint(kinematic_joint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "joint", sdaiINSTANCE, (void*) i); }
    inline kinematic_pair simple_pair_range::get_applies_to_pair() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "applies_to_pair", sdaiINSTANCE, &inst); return inst; }
    inline void simple_pair_range::put_applies_to_pair(kinematic_pair inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "applies_to_pair", sdaiINSTANCE, (void*) i); }
    inline kinematic_pair pair_value::get_applies_to_pair() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "applies_to_pair", sdaiINSTANCE, &inst); return inst; }
    inline void pair_value::put_applies_to_pair(kinematic_pair inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "applies_to_pair", sdaiINSTANCE, (void*) i); }
    inline date date_and_time::get_date_component() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "date_component", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time::put_date_component(date inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "date_component", sdaiINSTANCE, (void*) i); }
    inline local_time date_and_time::get_time_component() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "time_component", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time::put_time_component(local_time inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "time_component", sdaiINSTANCE, (void*) i); }
    inline shape_aspect_relationship datum_feature::get_feature_basis_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "feature_basis_relationship", sdaiINSTANCE, &inst); return inst; }
    inline datum datum_reference::get_referenced_datum() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "referenced_datum", sdaiINSTANCE, &inst); return inst; }
    inline void datum_reference::put_referenced_datum(datum inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "referenced_datum", sdaiINSTANCE, (void*) i); }
    inline shape_aspect_relationship datum_target::get_target_basis_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "target_basis_relationship", sdaiINSTANCE, &inst); return inst; }
    inline symbol_target defined_symbol::get_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "target", sdaiINSTANCE, &inst); return inst; }
    inline void defined_symbol::put_target(symbol_target inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "target", sdaiINSTANCE, (void*) i); }
    inline surface degenerate_pcurve::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void degenerate_pcurve::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline definitional_representation degenerate_pcurve::get_reference_to_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, &inst); return inst; }
    inline void degenerate_pcurve::put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, (void*) i); }
    inline named_unit derived_unit_element::get_unit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "unit", sdaiINSTANCE, &inst); return inst; }
    inline void derived_unit_element::put_unit(named_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "unit", sdaiINSTANCE, (void*) i); }
    inline environment derived_unit_variable::get_associated_variable_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "associated_variable_environment", sdaiINSTANCE, &inst); return inst; }
    inline draughting_callout draughting_callout_relationship::get_relating_draughting_callout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_draughting_callout", sdaiINSTANCE, &inst); return inst; }
    inline void draughting_callout_relationship::put_relating_draughting_callout(draughting_callout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_draughting_callout", sdaiINSTANCE, (void*) i); }
    inline draughting_callout draughting_callout_relationship::get_related_draughting_callout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_draughting_callout", sdaiINSTANCE, &inst); return inst; }
    inline void draughting_callout_relationship::put_related_draughting_callout(draughting_callout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_draughting_callout", sdaiINSTANCE, (void*) i); }
    inline annotation_curve_occurrence terminator_symbol::get_annotated_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "annotated_curve", sdaiINSTANCE, &inst); return inst; }
    inline void terminator_symbol::put_annotated_curve(annotation_curve_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "annotated_curve", sdaiINSTANCE, (void*) i); }
    inline dimensional_location dimension_related_tolerance_zone_element::get_related_dimension() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_dimension", sdaiINSTANCE, &inst); return inst; }
    inline void dimension_related_tolerance_zone_element::put_related_dimension(dimensional_location inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_dimension", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone_definition dimension_related_tolerance_zone_element::get_related_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_element", sdaiINSTANCE, &inst); return inst; }
    inline void dimension_related_tolerance_zone_element::put_related_element(tolerance_zone_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_element", sdaiINSTANCE, (void*) i); }
    inline shape_dimension_representation dimensional_characteristic_representation::get_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_characteristic_representation::put_representation(shape_dimension_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_location_with_path::get_path() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_location_with_path::put_path(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_size_with_path::get_path() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_size_with_path::put_path(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path", sdaiINSTANCE, (void*) i); }
    inline action_directive directed_action::get_directive() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directive", sdaiINSTANCE, &inst); return inst; }
    inline void directed_action::put_directive(action_directive inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directive", sdaiINSTANCE, (void*) i); }
    inline document_type document::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void document::put_kind(document_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline document document_product_association::get_relating_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_product_association::put_relating_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_document", sdaiINSTANCE, (void*) i); }
    inline document document_relationship::get_relating_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_relationship::put_relating_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_document", sdaiINSTANCE, (void*) i); }
    inline document document_relationship::get_related_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_relationship::put_related_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_document", sdaiINSTANCE, (void*) i); }
    inline document document_representation_type::get_represented_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "represented_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_representation_type::put_represented_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "represented_document", sdaiINSTANCE, (void*) i); }
    inline document document_usage_constraint::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint::put_source(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline representation item_identified_representation_usage::get_used_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "used_representation", sdaiINSTANCE, &inst); return inst; }
    inline void item_identified_representation_usage::put_used_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "used_representation", sdaiINSTANCE, (void*) i); }
    inline representation_item item_identified_representation_usage::get_identified_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "identified_item", sdaiINSTANCE, &inst); return inst; }
    inline void item_identified_representation_usage::put_identified_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "identified_item", sdaiINSTANCE, (void*) i); }
    inline drawing_definition drawing_revision::get_drawing_identifier() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "drawing_identifier", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision::put_drawing_identifier(drawing_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "drawing_identifier", sdaiINSTANCE, (void*) i); }
    inline drawing_revision drawing_revision_sequence::get_predecessor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "predecessor", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision_sequence::put_predecessor(drawing_revision inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "predecessor", sdaiINSTANCE, (void*) i); }
    inline drawing_revision drawing_revision_sequence::get_successor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "successor", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision_sequence::put_successor(drawing_revision inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "successor", sdaiINSTANCE, (void*) i); }
    inline vertex edge::get_edge_start() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_start", sdaiINSTANCE, &inst); return inst; }
    inline void edge::put_edge_start(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_start", sdaiINSTANCE, (void*) i); }
    inline vertex edge::get_edge_end() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_end", sdaiINSTANCE, &inst); return inst; }
    inline void edge::put_edge_end(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_end", sdaiINSTANCE, (void*) i); }
    inline curve edge_curve::get_edge_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void edge_curve::put_edge_geometry(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_geometry", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_relationship::get_related_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_relationship::put_related_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_effectivity", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_relationship::get_relating_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_relationship::put_relating_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_effectivity", sdaiINSTANCE, (void*) i); }
    inline generic_variable environment::get_syntactic_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "syntactic_representation", sdaiINSTANCE, &inst); return inst; }
    inline void environment::put_syntactic_representation(generic_variable inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "syntactic_representation", sdaiINSTANCE, (void*) i); }
    inline variable_semantics environment::get_semantics() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "semantics", sdaiINSTANCE, &inst); return inst; }
    inline void environment::put_semantics(variable_semantics inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "semantics", sdaiINSTANCE, (void*) i); }
    inline cartesian_point evaluated_degenerate_pcurve::get_equivalent_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "equivalent_point", sdaiINSTANCE, &inst); return inst; }
    inline void evaluated_degenerate_pcurve::put_equivalent_point(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "equivalent_point", sdaiINSTANCE, (void*) i); }
    inline event_occurrence_assignment event_occurrence_context_assignment::get_assigned_event_occurrence_assignment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_event_occurrence_assignment", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_context_assignment::put_assigned_event_occurrence_assignment(event_occurrence_assignment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_event_occurrence_assignment", sdaiINSTANCE, (void*) i); }
    inline event_occurrence_context_role event_occurrence_context_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_context_assignment::put_role(event_occurrence_context_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline environment expression_conversion_based_unit::get_associated_variable_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "associated_variable_environment", sdaiINSTANCE, &inst); return inst; }
    inline external_source externally_defined_item::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item::put_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline externally_defined_item externally_defined_item_relationship::get_relating_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_item", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item_relationship::put_relating_item(externally_defined_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_item", sdaiINSTANCE, (void*) i); }
    inline externally_defined_item externally_defined_item_relationship::get_related_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_item", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item_relationship::put_related_item(externally_defined_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_item", sdaiINSTANCE, (void*) i); }
    inline curve_bounded_surface swept_area_solid::get_swept_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_area", sdaiINSTANCE, &inst); return inst; }
    inline void swept_area_solid::put_swept_area(curve_bounded_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_area", sdaiINSTANCE, (void*) i); }
    inline direction extruded_area_solid::get_extruded_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, &inst); return inst; }
    inline void extruded_area_solid::put_extruded_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, (void*) i); }
    inline face_surface swept_face_solid::get_swept_face() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_face", sdaiINSTANCE, &inst); return inst; }
    inline void swept_face_solid::put_swept_face(face_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_face", sdaiINSTANCE, (void*) i); }
    inline direction extruded_face_solid::get_extruded_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, &inst); return inst; }
    inline void extruded_face_solid::put_extruded_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, (void*) i); }
    inline loop face_bound::get_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "bound", sdaiINSTANCE, &inst); return inst; }
    inline void face_bound::put_bound(loop inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "bound", sdaiINSTANCE, (void*) i); }
    inline colour fill_area_style_colour::get_fill_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_colour", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_colour::put_fill_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_colour", sdaiINSTANCE, (void*) i); }
    inline curve_style fill_area_style_hatching::get_hatch_line_appearance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "hatch_line_appearance", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_hatch_line_appearance(curve_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "hatch_line_appearance", sdaiINSTANCE, (void*) i); }
    inline one_direction_repeat_factor fill_area_style_hatching::get_start_of_next_hatch_line() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "start_of_next_hatch_line", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_start_of_next_hatch_line(one_direction_repeat_factor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "start_of_next_hatch_line", sdaiINSTANCE, (void*) i); }
    inline cartesian_point fill_area_style_hatching::get_point_of_reference_hatch_line() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "point_of_reference_hatch_line", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_point_of_reference_hatch_line(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "point_of_reference_hatch_line", sdaiINSTANCE, (void*) i); }
    inline cartesian_point fill_area_style_hatching::get_pattern_start() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pattern_start", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_pattern_start(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pattern_start", sdaiINSTANCE, (void*) i); }
    inline annotation_symbol_occurrence fill_area_style_tile_symbol_with_style::get_symbol() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "symbol", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tile_symbol_with_style::put_symbol(annotation_symbol_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "symbol", sdaiINSTANCE, (void*) i); }
    inline two_direction_repeat_factor fill_area_style_tiles::get_tiling_pattern() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "tiling_pattern", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tiles::put_tiling_pattern(two_direction_repeat_factor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "tiling_pattern", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_association::get_base_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_definition", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_association::put_base_definition(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_definition", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_relationship::get_relating_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_property", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_relationship::put_relating_property(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_property", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_relationship::get_related_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_property", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_relationship::put_related_property(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_property", sdaiINSTANCE, (void*) i); }
    inline geometric_tolerance geometric_tolerance_relationship::get_relating_geometric_tolerance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_geometric_tolerance", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_relationship::put_relating_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_geometric_tolerance", sdaiINSTANCE, (void*) i); }
    inline geometric_tolerance geometric_tolerance_relationship::get_related_geometric_tolerance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_geometric_tolerance", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_relationship::put_related_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_geometric_tolerance", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit geometric_tolerance_with_defined_unit::get_unit_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "unit_size", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_with_defined_unit::put_unit_size(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "unit_size", sdaiINSTANCE, (void*) i); }
    inline group group_relationship::get_relating_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_relationship::put_relating_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_group", sdaiINSTANCE, (void*) i); }
    inline group group_relationship::get_related_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_relationship::put_related_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_group", sdaiINSTANCE, (void*) i); }
    inline mechanism initial_state::get_applies_to_mechanism() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "applies_to_mechanism", sdaiINSTANCE, &inst); return inst; }
    inline void initial_state::put_applies_to_mechanism(mechanism inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "applies_to_mechanism", sdaiINSTANCE, (void*) i); }
    inline kinematic_control kinematic_analysis_consistency::get_control() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "control", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_analysis_consistency::put_control(kinematic_control inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "control", sdaiINSTANCE, (void*) i); }
    inline kinematic_analysis_result kinematic_analysis_consistency::get_result() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "result", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_analysis_consistency::put_result(kinematic_analysis_result inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "result", sdaiINSTANCE, (void*) i); }
    inline mechanism kinematic_analysis_result::get_analysed_mechanism() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "analysed_mechanism", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_analysis_result::put_analysed_mechanism(mechanism inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "analysed_mechanism", sdaiINSTANCE, (void*) i); }
    inline mechanism kinematic_control::get_controlled_mechanism() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "controlled_mechanism", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_control::put_controlled_mechanism(mechanism inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "controlled_mechanism", sdaiINSTANCE, (void*) i); }
    inline kinematic_property_representation_relation kinematic_ground_representation::get_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "property", sdaiINSTANCE, &inst); return inst; }
    inline kinematic_link kinematic_joint::get_first_link() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "first_link", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_joint::put_first_link(kinematic_link inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "first_link", sdaiINSTANCE, (void*) i); }
    inline kinematic_link kinematic_joint::get_second_link() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "second_link", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_joint::put_second_link(kinematic_link inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "second_link", sdaiINSTANCE, (void*) i); }
    inline kinematic_structure kinematic_joint::get_structure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "structure", sdaiINSTANCE, &inst); return inst; }
    inline kinematic_link_representation_relation kinematic_link_representation::get_link_representation_relation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "link_representation_relation", sdaiINSTANCE, &inst); return inst; }
    inline kinematic_link kinematic_link_representation_relation::get_topological_aspects() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "topological_aspects", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_link_representation_relation::put_topological_aspects(kinematic_link inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "topological_aspects", sdaiINSTANCE, (void*) i); }
    inline kinematic_link_representation kinematic_link_representation_relation::get_geometric_aspects() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "geometric_aspects", sdaiINSTANCE, &inst); return inst; }
    inline void kinematic_link_representation_relation::put_geometric_aspects(kinematic_link_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "geometric_aspects", sdaiINSTANCE, (void*) i); }
    inline representation property_definition_representation::get_used_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "used_representation", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_representation::put_used_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "used_representation", sdaiINSTANCE, (void*) i); }
    inline colour light_source::get_light_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "light_colour", sdaiINSTANCE, &inst); return inst; }
    inline void light_source::put_light_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "light_colour", sdaiINSTANCE, (void*) i); }
    inline direction light_source_directional::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_directional::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline cartesian_point light_source_positional::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_positional::put_position(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline cartesian_point light_source_spot::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_spot::put_position(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline direction light_source_spot::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_spot::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline cartesian_point line::get_pnt() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pnt", sdaiINSTANCE, &inst); return inst; }
    inline void line::put_pnt(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pnt", sdaiINSTANCE, (void*) i); }
    inline vector line::get_dir() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dir", sdaiINSTANCE, &inst); return inst; }
    inline void line::put_dir(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dir", sdaiINSTANCE, (void*) i); }
    inline coordinated_universal_time_offset local_time::get_zone() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "zone", sdaiINSTANCE, &inst); return inst; }
    inline void local_time::put_zone(coordinated_universal_time_offset inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "zone", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit lot_effectivity::get_effectivity_lot_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "effectivity_lot_size", sdaiINSTANCE, &inst); return inst; }
    inline void lot_effectivity::put_effectivity_lot_size(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "effectivity_lot_size", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit make_from_usage_option::get_quantity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "quantity", sdaiINSTANCE, &inst); return inst; }
    inline void make_from_usage_option::put_quantity(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "quantity", sdaiINSTANCE, (void*) i); }
    inline material_designation material_designation_characterization::get_designation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "designation", sdaiINSTANCE, &inst); return inst; }
    inline void material_designation_characterization::put_designation(material_designation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "designation", sdaiINSTANCE, (void*) i); }
    inline data_environment material_property_representation::get_dependent_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dependent_environment", sdaiINSTANCE, &inst); return inst; }
    inline void material_property_representation::put_dependent_environment(data_environment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dependent_environment", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit measure_qualification::get_qualified_measure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "qualified_measure", sdaiINSTANCE, &inst); return inst; }
    inline void measure_qualification::put_qualified_measure(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "qualified_measure", sdaiINSTANCE, (void*) i); }
    inline kinematic_structure mechanism::get_structure_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "structure_definition", sdaiINSTANCE, &inst); return inst; }
    inline void mechanism::put_structure_definition(kinematic_structure inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "structure_definition", sdaiINSTANCE, (void*) i); }
    inline kinematic_link mechanism::get_base_() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_", sdaiINSTANCE, &inst); return inst; }
    inline void mechanism::put_base_(kinematic_link inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_", sdaiINSTANCE, (void*) i); }
    inline kinematic_property_definition mechanism::get_containing_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "containing_property", sdaiINSTANCE, &inst); return inst; }
    inline void mechanism::put_containing_property(kinematic_property_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "containing_property", sdaiINSTANCE, (void*) i); }
    inline mechanism mechanism_base_placement::get_base_of_mechanism() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_of_mechanism", sdaiINSTANCE, &inst); return inst; }
    inline void mechanism_base_placement::put_base_of_mechanism(mechanism inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_of_mechanism", sdaiINSTANCE, (void*) i); }
    inline environment named_unit_variable::get_associated_variable_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "associated_variable_environment", sdaiINSTANCE, &inst); return inst; }
    inline curve offset_curve_2d::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_2d::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline curve offset_curve_3d::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_3d::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline direction offset_curve_3d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_3d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline surface offset_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void offset_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline vector one_direction_repeat_factor::get_repeat_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "repeat_factor", sdaiINSTANCE, &inst); return inst; }
    inline void one_direction_repeat_factor::put_repeat_factor(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "repeat_factor", sdaiINSTANCE, (void*) i); }
    inline organization organization_relationship::get_relating_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_relationship::put_relating_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_organization", sdaiINSTANCE, (void*) i); }
    inline organization organization_relationship::get_related_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_relationship::put_related_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_organization", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_relationship::get_relating_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_relationship::put_relating_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_organizational_project", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_relationship::get_related_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_relationship::put_related_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_organizational_project", sdaiINSTANCE, (void*) i); }
    inline closed_shell oriented_closed_shell::get_closed_shell_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "closed_shell_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_closed_shell::put_closed_shell_element(closed_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "closed_shell_element", sdaiINSTANCE, (void*) i); }
    inline edge oriented_edge::get_edge_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_edge::put_edge_element(edge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_element", sdaiINSTANCE, (void*) i); }
    inline face oriented_face::get_face_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "face_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_face::put_face_element(face inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "face_element", sdaiINSTANCE, (void*) i); }
    inline open_shell oriented_open_shell::get_open_shell_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "open_shell_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_open_shell::put_open_shell_element(open_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "open_shell_element", sdaiINSTANCE, (void*) i); }
    inline path oriented_path::get_path_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_path::put_path_element(path inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path_element", sdaiINSTANCE, (void*) i); }
    inline kinematic_pair pair_actuator::get_actuated_pair() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actuated_pair", sdaiINSTANCE, &inst); return inst; }
    inline void pair_actuator::put_actuated_pair(kinematic_pair inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actuated_pair", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit parallel_offset::get_offset() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "offset", sdaiINSTANCE, &inst); return inst; }
    inline void parallel_offset::put_offset(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "offset", sdaiINSTANCE, (void*) i); }
    inline person person_and_organization::get_the_person() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "the_person", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization::put_the_person(person inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "the_person", sdaiINSTANCE, (void*) i); }
    inline organization person_and_organization::get_the_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "the_organization", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization::put_the_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "the_organization", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition::get_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition::put_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "formation", sdaiINSTANCE, (void*) i); }
    inline product_definition_context product_definition::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition::put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline curve planar_curve_pair::get_curve_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_1", sdaiINSTANCE, &inst); return inst; }
    inline void planar_curve_pair::put_curve_1(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_1", sdaiINSTANCE, (void*) i); }
    inline curve planar_curve_pair::get_curve_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_2", sdaiINSTANCE, &inst); return inst; }
    inline void planar_curve_pair::put_curve_2(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_2", sdaiINSTANCE, (void*) i); }
    inline trimmed_curve planar_curve_pair_range::get_range_on_curve_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_curve_1", sdaiINSTANCE, &inst); return inst; }
    inline void planar_curve_pair_range::put_range_on_curve_1(trimmed_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_curve_1", sdaiINSTANCE, (void*) i); }
    inline trimmed_curve planar_curve_pair_range::get_range_on_curve_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_curve_2", sdaiINSTANCE, &inst); return inst; }
    inline void planar_curve_pair_range::put_range_on_curve_2(trimmed_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_curve_2", sdaiINSTANCE, (void*) i); }
    inline curve point_on_curve::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_curve::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline curve point_on_planar_curve_pair::get_pair_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pair_curve", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_planar_curve_pair::put_pair_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pair_curve", sdaiINSTANCE, (void*) i); }
    inline trimmed_curve point_on_planar_curve_pair_range::get_range_on_pair_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_pair_curve", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_planar_curve_pair_range::put_range_on_pair_curve(trimmed_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_pair_curve", sdaiINSTANCE, (void*) i); }
    inline point_on_curve point_on_planar_curve_pair_value::get_actual_point_on_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_curve", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_planar_curve_pair_value::put_actual_point_on_curve(point_on_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_curve", sdaiINSTANCE, (void*) i); }
    inline surface point_on_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline surface point_on_surface_pair::get_pair_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pair_surface", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_surface_pair::put_pair_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pair_surface", sdaiINSTANCE, (void*) i); }
    inline rectangular_trimmed_surface point_on_surface_pair_range::get_range_on_pair_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_pair_surface", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_surface_pair_range::put_range_on_pair_surface(rectangular_trimmed_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_pair_surface", sdaiINSTANCE, (void*) i); }
    inline point_on_surface point_on_surface_pair_value::get_actual_point_on_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_surface", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_surface_pair_value::put_actual_point_on_surface(point_on_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_surface", sdaiINSTANCE, (void*) i); }
    inline point point_replica::get_parent_pt() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_pt", sdaiINSTANCE, &inst); return inst; }
    inline void point_replica::put_parent_pt(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_pt", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator point_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void point_replica::put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline colour point_style::get_marker_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "marker_colour", sdaiINSTANCE, &inst); return inst; }
    inline void point_style::put_marker_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "marker_colour", sdaiINSTANCE, (void*) i); }
    inline planar_box presentation_size::get_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "size", sdaiINSTANCE, &inst); return inst; }
    inline void presentation_size::put_size(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "size", sdaiINSTANCE, (void*) i); }
    inline presented_item presented_item_representation::get_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item", sdaiINSTANCE, &inst); return inst; }
    inline void presented_item_representation::put_item(presented_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item", sdaiINSTANCE, (void*) i); }
    inline product_definition_process process_product_association::get_process() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "process", sdaiINSTANCE, &inst); return inst; }
    inline void process_product_association::put_process(product_definition_process inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "process", sdaiINSTANCE, (void*) i); }
    inline property_process process_property_association::get_process() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "process", sdaiINSTANCE, &inst); return inst; }
    inline void process_property_association::put_process(property_process inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "process", sdaiINSTANCE, (void*) i); }
    inline product_category product_category_relationship::get_category() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "category", sdaiINSTANCE, &inst); return inst; }
    inline void product_category_relationship::put_category(product_category inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "category", sdaiINSTANCE, (void*) i); }
    inline product_category product_category_relationship::get_sub_category() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "sub_category", sdaiINSTANCE, &inst); return inst; }
    inline void product_category_relationship::put_sub_category(product_category inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "sub_category", sdaiINSTANCE, (void*) i); }
    inline product_concept_context product_concept::get_market_context() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "market_context", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept::put_market_context(product_concept_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "market_context", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_feature_association::get_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_feature_association::put_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "concept", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature product_concept_feature_association::get_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "feature", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_feature_association::put_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "feature", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_relationship::get_relating_product_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_relationship::put_relating_product_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_concept", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_relationship::get_related_product_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_relationship::put_related_product_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_concept", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_context_association::get_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "definition", sdaiINSTANCE, (void*) i); }
    inline product_definition_context product_definition_context_association::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline product_definition_context_role product_definition_context_association::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_role(product_definition_context_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline product product_definition_formation::get_of_product() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "of_product", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation::put_of_product(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "of_product", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition_formation_relationship::get_relating_product_definition_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_definition_formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation_relationship::put_relating_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_definition_formation", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition_formation_relationship::get_related_product_definition_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_definition_formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation_relationship::put_related_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_definition_formation", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_occurrence_relationship::get_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_occurrence_relationship::put_occurrence(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "occurrence", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage product_definition_occurrence_relationship::get_occurrence_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "occurrence_usage", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_occurrence_relationship::put_occurrence_usage(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "occurrence_usage", sdaiINSTANCE, (void*) i); }
    inline product_definition_relationship product_definition_substitute::get_context_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "context_relationship", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_substitute::put_context_relationship(product_definition_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "context_relationship", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_substitute::get_substitute_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "substitute_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_substitute::put_substitute_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "substitute_definition", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone tolerance_zone_definition::get_zone() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "zone", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_zone_definition::put_zone(tolerance_zone inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "zone", sdaiINSTANCE, (void*) i); }
    inline shape_aspect projected_zone_definition::get_projection_end() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projection_end", sdaiINSTANCE, &inst); return inst; }
    inline void projected_zone_definition::put_projection_end(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projection_end", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit projected_zone_definition::get_projected_length() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projected_length", sdaiINSTANCE, &inst); return inst; }
    inline void projected_zone_definition::put_projected_length(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projected_length", sdaiINSTANCE, (void*) i); }
    inline property_definition property_definition_relationship::get_relating_property_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_property_definition", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_relationship::put_relating_property_definition(property_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_property_definition", sdaiINSTANCE, (void*) i); }
    inline property_definition property_definition_relationship::get_related_property_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_property_definition", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_relationship::put_related_property_definition(property_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_property_definition", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit quantified_assembly_component_usage::get_quantity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "quantity", sdaiINSTANCE, &inst); return inst; }
    inline void quantified_assembly_component_usage::put_quantity(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "quantity", sdaiINSTANCE, (void*) i); }
    inline surface rectangular_trimmed_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void rectangular_trimmed_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline event_occurrence relative_event_occurrence::get_base_event() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_event", sdaiINSTANCE, &inst); return inst; }
    inline void relative_event_occurrence::put_base_event(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_event", sdaiINSTANCE, (void*) i); }
    inline time_measure_with_unit relative_event_occurrence::get_offset() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "offset", sdaiINSTANCE, &inst); return inst; }
    inline void relative_event_occurrence::put_offset(time_measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "offset", sdaiINSTANCE, (void*) i); }
    inline resource_property resource_property_representation::get_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "property", sdaiINSTANCE, &inst); return inst; }
    inline void resource_property_representation::put_property(resource_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "property", sdaiINSTANCE, (void*) i); }
    inline representation resource_property_representation::get_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation", sdaiINSTANCE, &inst); return inst; }
    inline void resource_property_representation::put_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation", sdaiINSTANCE, (void*) i); }
    inline axis1_placement revolved_area_solid::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void revolved_area_solid::put_axis(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline axis1_placement revolved_face_solid::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void revolved_face_solid::put_axis(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d right_angular_wedge::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_angular_wedge::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline axis1_placement right_circular_cone::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_circular_cone::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline axis1_placement right_circular_cylinder::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_circular_cylinder::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline object_role role_association::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void role_association::put_role(object_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline point_on_curve rolling_curve_pair_value::get_actual_point_on_curve_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_curve_1", sdaiINSTANCE, &inst); return inst; }
    inline void rolling_curve_pair_value::put_actual_point_on_curve_1(point_on_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_curve_1", sdaiINSTANCE, (void*) i); }
    inline surface surface_pair::get_surface_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "surface_1", sdaiINSTANCE, &inst); return inst; }
    inline void surface_pair::put_surface_1(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "surface_1", sdaiINSTANCE, (void*) i); }
    inline surface surface_pair::get_surface_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "surface_2", sdaiINSTANCE, &inst); return inst; }
    inline void surface_pair::put_surface_2(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "surface_2", sdaiINSTANCE, (void*) i); }
    inline point_on_surface rolling_surface_pair_value::get_actual_point_on_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_surface", sdaiINSTANCE, &inst); return inst; }
    inline void rolling_surface_pair_value::put_actual_point_on_surface(point_on_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_surface", sdaiINSTANCE, (void*) i); }
    inline direction rotation_about_direction::get_direction_of_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "direction_of_axis", sdaiINSTANCE, &inst); return inst; }
    inline void rotation_about_direction::put_direction_of_axis(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "direction_of_axis", sdaiINSTANCE, (void*) i); }
    inline curve surface_curve_swept_area_solid::get_directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directrix", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve_swept_area_solid::put_directrix(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directrix", sdaiINSTANCE, (void*) i); }
    inline surface surface_curve_swept_area_solid::get_reference_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve_swept_area_solid::put_reference_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_surface", sdaiINSTANCE, (void*) i); }
    inline runout_zone_orientation runout_zone_definition::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_definition::put_orientation(runout_zone_orientation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit runout_zone_orientation::get_angle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "angle", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_orientation::put_angle(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "angle", sdaiINSTANCE, (void*) i); }
    inline shape_aspect_relationship runout_zone_orientation_reference_direction::get_orientation_defining_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation_defining_relationship", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_orientation_reference_direction::put_orientation_defining_relationship(shape_aspect_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation_defining_relationship", sdaiINSTANCE, (void*) i); }
    inline pcurve seam_edge::get_pcurve_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pcurve_reference", sdaiINSTANCE, &inst); return inst; }
    inline void seam_edge::put_pcurve_reference(pcurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pcurve_reference", sdaiINSTANCE, (void*) i); }
    inline security_classification_level security_classification::get_security_level() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "security_level", sdaiINSTANCE, &inst); return inst; }
    inline void security_classification::put_security_level(security_classification_level inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "security_level", sdaiINSTANCE, (void*) i); }
    inline point_on_curve sliding_curve_pair_value::get_actual_point_on_curve_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_curve_1", sdaiINSTANCE, &inst); return inst; }
    inline void sliding_curve_pair_value::put_actual_point_on_curve_1(point_on_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_curve_1", sdaiINSTANCE, (void*) i); }
    inline point_on_curve sliding_curve_pair_value::get_actual_point_on_curve_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_curve_2", sdaiINSTANCE, &inst); return inst; }
    inline void sliding_curve_pair_value::put_actual_point_on_curve_2(point_on_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_curve_2", sdaiINSTANCE, (void*) i); }
    inline point_on_surface sliding_surface_pair_value::get_actual_point_on_surface_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_surface_1", sdaiINSTANCE, &inst); return inst; }
    inline void sliding_surface_pair_value::put_actual_point_on_surface_1(point_on_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_surface_1", sdaiINSTANCE, (void*) i); }
    inline point_on_surface sliding_surface_pair_value::get_actual_point_on_surface_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_point_on_surface_2", sdaiINSTANCE, &inst); return inst; }
    inline void sliding_surface_pair_value::put_actual_point_on_surface_2(point_on_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_point_on_surface_2", sdaiINSTANCE, (void*) i); }
    inline solid_model solid_replica::get_parent_solid() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_solid", sdaiINSTANCE, &inst); return inst; }
    inline void solid_replica::put_parent_solid(solid_model inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_solid", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator_3d solid_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void solid_replica::put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage specified_higher_usage_occurrence::get_upper_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "upper_usage", sdaiINSTANCE, &inst); return inst; }
    inline void specified_higher_usage_occurrence::put_upper_usage(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "upper_usage", sdaiINSTANCE, (void*) i); }
    inline next_assembly_usage_occurrence specified_higher_usage_occurrence::get_next_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "next_usage", sdaiINSTANCE, &inst); return inst; }
    inline void specified_higher_usage_occurrence::put_next_usage(next_assembly_usage_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "next_usage", sdaiINSTANCE, (void*) i); }
    inline point sphere::get_centre() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "centre", sdaiINSTANCE, &inst); return inst; }
    inline void sphere::put_centre(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "centre", sdaiINSTANCE, (void*) i); }
    inline edge subedge::get_parent_edge() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_edge", sdaiINSTANCE, &inst); return inst; }
    inline void subedge::put_parent_edge(edge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_edge", sdaiINSTANCE, (void*) i); }
    inline face subface::get_parent_face() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_face", sdaiINSTANCE, &inst); return inst; }
    inline void subface::put_parent_face(face inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_face", sdaiINSTANCE, (void*) i); }
    inline curve swept_surface::get_swept_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_curve", sdaiINSTANCE, &inst); return inst; }
    inline void swept_surface::put_swept_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_curve", sdaiINSTANCE, (void*) i); }
    inline vector surface_of_linear_extrusion::get_extrusion_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extrusion_axis", sdaiINSTANCE, &inst); return inst; }
    inline void surface_of_linear_extrusion::put_extrusion_axis(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extrusion_axis", sdaiINSTANCE, (void*) i); }
    inline axis1_placement surface_of_revolution::get_axis_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis_position", sdaiINSTANCE, &inst); return inst; }
    inline void surface_of_revolution::put_axis_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis_position", sdaiINSTANCE, (void*) i); }
    inline rectangular_trimmed_surface surface_pair_range::get_range_on_surface_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_surface_1", sdaiINSTANCE, &inst); return inst; }
    inline void surface_pair_range::put_range_on_surface_1(rectangular_trimmed_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_surface_1", sdaiINSTANCE, (void*) i); }
    inline rectangular_trimmed_surface surface_pair_range::get_range_on_surface_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "range_on_surface_2", sdaiINSTANCE, &inst); return inst; }
    inline void surface_pair_range::put_range_on_surface_2(rectangular_trimmed_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "range_on_surface_2", sdaiINSTANCE, (void*) i); }
    inline bounded_surface surface_patch::get_parent_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_patch::put_parent_surface(bounded_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_surface", sdaiINSTANCE, (void*) i); }
    inline colour surface_rendering_properties::get_rendered_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rendered_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_rendering_properties::put_rendered_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rendered_colour", sdaiINSTANCE, (void*) i); }
    inline surface surface_replica::get_parent_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_replica::put_parent_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_surface", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator_3d surface_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void surface_replica::put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline fill_area_style surface_style_fill_area::get_fill_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_area", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_fill_area::put_fill_area(fill_area_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_area", sdaiINSTANCE, (void*) i); }
    inline colour surface_style_reflectance_ambient_diffuse_specular::get_specular_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "specular_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_reflectance_ambient_diffuse_specular::put_specular_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "specular_colour", sdaiINSTANCE, (void*) i); }
    inline colour surface_style_rendering::get_surface_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "surface_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_rendering::put_surface_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "surface_colour", sdaiINSTANCE, (void*) i); }
    inline curve swept_disk_solid::get_directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directrix", sdaiINSTANCE, &inst); return inst; }
    inline void swept_disk_solid::put_directrix(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directrix", sdaiINSTANCE, (void*) i); }
    inline colour symbol_colour::get_colour_of_symbol() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "colour_of_symbol", sdaiINSTANCE, &inst); return inst; }
    inline void symbol_colour::put_colour_of_symbol(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "colour_of_symbol", sdaiINSTANCE, (void*) i); }
    inline planar_box text_literal_with_blanking_box::get_blanking() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "blanking", sdaiINSTANCE, &inst); return inst; }
    inline void text_literal_with_blanking_box::put_blanking(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "blanking", sdaiINSTANCE, (void*) i); }
    inline planar_extent text_literal_with_extent::get_extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extent", sdaiINSTANCE, &inst); return inst; }
    inline void text_literal_with_extent::put_extent(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extent", sdaiINSTANCE, (void*) i); }
    inline colour text_style_for_defined_font::get_text_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "text_colour", sdaiINSTANCE, &inst); return inst; }
    inline void text_style_for_defined_font::put_text_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "text_colour", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_based_effectivity::get_effectivity_period() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "effectivity_period", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_based_effectivity::put_effectivity_period(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "effectivity_period", sdaiINSTANCE, (void*) i); }
    inline time_measure_with_unit time_interval_with_bounds::get_duration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "duration", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_with_bounds::put_duration(time_measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "duration", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit tolerance_value::get_lower_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "lower_bound", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_value::put_lower_bound(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "lower_bound", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit tolerance_value::get_upper_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "upper_bound", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_value::put_upper_bound(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "upper_bound", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone_form tolerance_zone::get_form() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "form", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_zone::put_form(tolerance_zone_form inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "form", sdaiINSTANCE, (void*) i); }
    inline axis1_placement torus::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void torus::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline curve trimmed_curve::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void trimmed_curve::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline vector two_direction_repeat_factor::get_second_repeat_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "second_repeat_factor", sdaiINSTANCE, &inst); return inst; }
    inline void two_direction_repeat_factor::put_second_repeat_factor(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "second_repeat_factor", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d unconstrained_pair_value::get_actual_placement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "actual_placement", sdaiINSTANCE, &inst); return inst; }
    inline void unconstrained_pair_value::put_actual_placement(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "actual_placement", sdaiINSTANCE, (void*) i); }
    inline direction vector::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void vector::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request versioned_action_request_relationship::get_relating_versioned_action_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_versioned_action_request", sdaiINSTANCE, &inst); return inst; }
    inline void versioned_action_request_relationship::put_relating_versioned_action_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_versioned_action_request", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request versioned_action_request_relationship::get_related_versioned_action_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_versioned_action_request", sdaiINSTANCE, &inst); return inst; }
    inline void versioned_action_request_relationship::put_related_versioned_action_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_versioned_action_request", sdaiINSTANCE, (void*) i); }
    inline vertex vertex_loop::get_loop_vertex() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "loop_vertex", sdaiINSTANCE, &inst); return inst; }
    inline void vertex_loop::put_loop_vertex(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "loop_vertex", sdaiINSTANCE, (void*) i); }
    inline point vertex_point::get_vertex_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "vertex_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void vertex_point::put_vertex_geometry(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "vertex_geometry", sdaiINSTANCE, (void*) i); }
    inline cartesian_point view_volume::get_projection_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projection_point", sdaiINSTANCE, &inst); return inst; }
    inline void view_volume::put_projection_point(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projection_point", sdaiINSTANCE, (void*) i); }
    inline planar_box view_volume::get_view_window() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "view_window", sdaiINSTANCE, &inst); return inst; }
    inline void view_volume::put_view_window(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "view_window", sdaiINSTANCE, (void*) i); }

}

#endif //__RDF_LTD__AP214_H
