//
// Early-binding C++ API for SDAI (C++ wrappers)
//
#ifndef __RDF_LTD__AP203_H
#define __RDF_LTD__AP203_H

#include    <assert.h>
#include    <list>
#include    <string>

#include	"ifcengine.h"

namespace AP203
{
    ///
    typedef int_t SdaiModel;
    typedef int_t SdaiInstance;

    typedef const char* TextValue;
    typedef int_t       IntValue;

    class StringValue : public std::string
    {
    public:
        StringValue(TextValue str) : std::string(str) {}
        operator const char* () const { return c_str(); }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename T> class Nullable
    {
    protected:
        T* m_value;

    public:
        Nullable<T>() : m_value(NULL) {}
        Nullable<T>(T value) { m_value = new T(value); }
        Nullable<T>(const Nullable<T>& src) { if (src.m_value) m_value = new T(*src.m_value); else m_value = NULL; }

        virtual ~Nullable<T>() { if (m_value) { delete m_value; } };

        bool IsNull() const { return !m_value; }
        T Value() const { assert(m_value); if (m_value) return *m_value; else return (T) 0; }

        virtual Nullable<T>& operator=(const Nullable<T>& src)
        {
            if (m_value) { delete m_value; }
            m_value = NULL;
            if (src.m_value) { m_value = new T(*(src.m_value)); }
            return *this;
        }
    };

    //
    //
    enum class LOGICAL_VALUE { False = 0, True, Unknown };
    static TextValue LOGICAL_VALUE_[] = {"F", "T", "U", NULL};

    //
    //
    static int EnumerationNameToIndex(TextValue rEnumValues[], TextValue value)
    {
        if (value) {
            for (int i = 0; rEnumValues[i]; i++) {
                if (0 == _stricmp(value, rEnumValues[i])) {
                    return i;
                }
            }
        }
        return -1;
    }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    class Select
    {
    protected:
        SdaiInstance m_instance;
        TextValue m_attrName;

    private:
        void* m_adb;
        Select* m_outerSelect;

    public:
        void* ADB()
        {
            if (m_outerSelect) {
                return m_outerSelect->ADB();
            }

            if (!m_adb && m_instance && m_attrName) {
                if (!sdaiGetAttrBN(m_instance, m_attrName, sdaiADB, &m_adb)) {
                    sdaiDeleteADB(m_adb);
                    m_adb = NULL;
                }
            }

            return m_adb;
        }

    protected:
        Select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL)
            : m_instance(instance), m_attrName(attrName), m_adb(adb), m_outerSelect(NULL)
        {
            assert(instance);
        }

        Select(Select* outer)
            : m_instance(NULL), m_attrName(NULL), m_adb(NULL), m_outerSelect(outer)
        {
            assert(outer);
            if (m_outerSelect) {
                m_instance = m_outerSelect->m_instance;
            }
        }

        void SetADB(void* adb)
        {
            if (m_outerSelect) {
                m_outerSelect->SetADB(adb);
            }
            else {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance && m_attrName) {
                    sdaiPutAttrBN(m_instance, m_attrName, sdaiADB, m_adb);
                }
            }
        }

        //
        template <typename T> Nullable<T> getSimpleValue(TextValue typeName, IntValue sdaiType)
        {
            Nullable<T> ret;
            if (void* adb = ADB()) {
                const char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    T val = (T) 0;
                    if (sdaiGetADBValue(adb, sdaiType, &val)) {
                        ret = val;
                    }
                }
            }
            return ret;
        }

        //
        template <typename T> void putSimpleValue(TextValue typeName, IntValue sdaiType, T value)
        {
            void* adb = sdaiCreateADB(sdaiType, &value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        TextValue getTextValue(TextValue typeName, IntValue sdaiType)
        {
            TextValue ret = NULL;
            if (void* adb = ADB()) {
                const char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiType, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiType, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        int getEnumerationValue(TextValue typeName, TextValue rEnumValues[])
        {
            int ret = -1;
            if (void* adb = ADB()) {
                const char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    TextValue value = NULL;
                    if (sdaiGetADBValue(adb, sdaiENUM, &value)) {
                        ret = EnumerationNameToIndex(rEnumValues, value);
                    }
                }
            }
            return ret;
        }

        //
        void putEnumerationValue(TextValue typeName, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiENUM, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        SdaiInstance getEntityInstance(TextValue typeName)
        {
            SdaiInstance ret = 0;
            if (auto adb = ADB()) {
                SdaiInstance inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (typeName == NULL || sdaiIsKindOfBN(inst, typeName)) {
                        ret = inst;
                    }
                }
            }
            return ret;
        }

        //
        void putEntityInstance(TextValue typeName, SdaiInstance inst)
        {
            if (inst == 0 || sdaiIsKindOfBN(inst, typeName)) {
                auto adb = sdaiCreateADB(sdaiINSTANCE, (void*) inst);
                SetADB(adb);
            }
            else {
                assert(0);
            }
        }

        //
        SdaiAggr getAggrValue(TextValue typeName)
        {
            SdaiAggr ret = NULL;
            if (void* adb = ADB()) {
                const char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiAGGR, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putAggrValue(TextValue typeName, SdaiAggr value)
        {
            void* adb = sdaiCreateADB(sdaiAGGR, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        bool IsADBType(TextValue typeName)
        {
            if (void* adb = ADB()) {
                const char* path = sdaiGetADBTypePath(adb, 0);
                if (0 == _stricmp(path, typeName)) {
                    return true;
                }
            }
            return false;
        }

        bool IsADBEntity(TextValue typeName)
        {
            if (void* adb = ADB()) {
                IntValue inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (sdaiIsKindOfBN(inst, typeName)) {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 

    template <typename TArrayElem, typename TList> void ArrayToList(TArrayElem arrayElems[], IntValue numOfElems, TList& lst)
    {
        for (IntValue i = 0; i < numOfElems; i++) {
            lst.push_back(arrayElems[i]);
        }
    }

    template <typename TList> class AggrSerializer
    {
    public:
        //
        void FromAttr(TList& lst, SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = NULL;
            sdaiGetAttrBN(instance, attrName, sdaiAGGR, &aggr);
            if (aggr) {
                FromSdaiAggr(lst, instance, aggr);
            }
        }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance inst, SdaiAggr aggr) = 0; 
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) = 0;
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerSimple : public AggrSerializer<TList>
    {
    public:
        AggrSerializerSimple() { assert(sdaiType == sdaiINTEGER || sdaiType == sdaiREAL || sdaiType == sdaiBOOLEAN); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TElem val = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& v : lst) {
                TElem val = v;
                sdaiAppend(aggr, sdaiType, &val);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerText : public AggrSerializer<TList>
    {
    public:
        AggrSerializerText() { assert(sdaiType == sdaiSTRING || sdaiType == sdaiBINARY); }

        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue val;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                TextValue v = val;
                sdaiAppend(aggr, sdaiType, v);
            }
            return aggr;
        }

    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem> class AggrSerializerInstance : public AggrSerializer <TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            auto  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiInstance val = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiINSTANCE, &val);
                TElem elem(val);
                if (val) {
                    lst.push_back(val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            auto aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                SdaiInstance v = val;
                sdaiAppend(aggr, sdaiINSTANCE, (void*) v);
            }
            return aggr;
        }
    };


    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, TextValue* rEnumValues, IntValue sdaiType> class AggrSerializerEnum : public AggrSerializer<TList>
    {
    public:
        AggrSerializerEnum() { assert(sdaiType == sdaiENUM || sdaiType == sdaiLOGICAL); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*instance*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue value = NULL;
                sdaiGetAggrByIndex(aggr, i, sdaiType, &value);
                int val = EnumerationNameToIndex(rEnumValues, value);
                if (val >= 0) {
                    lst.push_back((TElem) val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& val : lst) {
                TextValue value = rEnumValues[(IntValue) val];
                sdaiAppend(aggr, sdaiType, value);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TNestedAggr, typename TNestedSerializer> class AggrSerializerAggr : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiAggr nested = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiAGGR, &nested);
                if (nested) {
                    lst.push_back(TNestedAggr());
                    TNestedSerializer nestedSerializer;
                    nestedSerializer.FromSdaiAggr(lst.back(), instance, nested);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (TNestedAggr& val : lst) {
                TNestedSerializer nestedSerializer;
                SdaiAggr nested = nestedSerializer.ToSdaiAggr(val, instance, NULL);
                sdaiAppend(aggr, sdaiAGGR, nested);
            }
            return aggr;
        }
    };

    template<typename TList, typename TElem> class AggrSerializerSelect : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                void* adb = 0;
                sdaiGetAggrByIndex(aggr, i, sdaiADB, &adb);
                if (adb) {
                    lst.push_back(TElem(instance, NULL, adb));
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                void* adb = val.ADB();
                if (adb) {
                    sdaiAppend(aggr, sdaiADB, adb);
                }
            }
            return aggr;
        }
    };


    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    class Entity
    {
    protected:
        SdaiInstance m_instance;

    public:
        Entity(SdaiInstance instance, TextValue entityName)
        {
            m_instance = instance;

            if (m_instance != 0 && entityName != NULL) {
                if (!sdaiIsKindOfBN(m_instance, entityName)) {
                    m_instance = 0;
                }
            }
        }


        /// <summary>
        /// Conversion  to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        operator SdaiInstance() const { return m_instance; }

    protected:
        //
        //
        int getENUM(TextValue attrName, TextValue rEnumValues[])
        {
            TextValue value = NULL;
            sdaiGetAttrBN(m_instance, attrName, sdaiENUM, (void*) &value);
            return EnumerationNameToIndex(rEnumValues, value);
        }
    };


    //
    // Entities forward declarations
    //

    class absorbed_dose_measure_with_unit;
    class absorbed_dose_unit;
    class abstract_variable;
    class acceleration_measure_with_unit;
    class acceleration_unit;
    class action;
    class action_assignment;
    class action_directive;
    class action_method;
    class action_method_assignment;
    class action_method_relationship;
    class action_method_role;
    class action_property;
    class action_property_representation;
    class action_relationship;
    class action_request_assignment;
    class action_request_solution;
    class action_request_status;
    class action_status;
    class address;
    class advanced_brep_shape_representation;
    class advanced_face;
    class alternate_product_relationship;
    class amount_of_substance_measure_with_unit;
    class amount_of_substance_unit;
    class angle_direction_reference;
    class angular_dimension;
    class angular_location;
    class angular_size;
    class angularity_tolerance;
    class annotation_curve_occurrence;
    class annotation_fill_area;
    class annotation_fill_area_occurrence;
    class annotation_occurrence;
    class annotation_occurrence_associativity;
    class annotation_occurrence_relationship;
    class annotation_plane;
    class annotation_subfigure_occurrence;
    class annotation_symbol;
    class annotation_symbol_occurrence;
    class annotation_text;
    class annotation_text_character;
    class annotation_text_occurrence;
    class apex;
    class application_context;
    class application_context_element;
    class application_protocol_definition;
    class applied_action_assignment;
    class applied_action_method_assignment;
    class applied_action_request_assignment;
    class applied_approval_assignment;
    class applied_attribute_classification_assignment;
    class applied_certification_assignment;
    class applied_classification_assignment;
    class applied_contract_assignment;
    class applied_date_and_time_assignment;
    class applied_date_assignment;
    class applied_document_reference;
    class applied_document_usage_constraint_assignment;
    class applied_effectivity_assignment;
    class applied_event_occurrence_assignment;
    class applied_external_identification_assignment;
    class applied_group_assignment;
    class applied_identification_assignment;
    class applied_name_assignment;
    class applied_organization_assignment;
    class applied_organizational_project_assignment;
    class applied_person_and_organization_assignment;
    class applied_presented_item;
    class applied_security_classification_assignment;
    class applied_time_interval_assignment;
    class applied_usage_right;
    class approval;
    class approval_assignment;
    class approval_date_time;
    class approval_person_organization;
    class approval_relationship;
    class approval_role;
    class approval_status;
    class area_in_set;
    class area_measure_with_unit;
    class area_unit;
    class assembly_component_usage;
    class assembly_component_usage_substitute;
    class assigned_requirement;
    class atomic_formula;
    class attribute_assertion;
    class attribute_classification_assignment;
    class attribute_language_assignment;
    class attribute_value_assignment;
    class attribute_value_role;
    class auxiliary_geometric_representation_item;
    class axis1_placement;
    class axis2_placement_2d;
    class axis2_placement_3d;
    class b_spline_curve;
    class b_spline_curve_with_knots;
    class b_spline_surface;
    class b_spline_surface_with_knots;
    class back_chaining_rule;
    class back_chaining_rule_body;
    class background_colour;
    class beveled_sheet_representation;
    class bezier_curve;
    class bezier_surface;
    class binary_generic_expression;
    class binary_numeric_expression;
    class binary_representation_item;
    class block;
    class boolean_expression;
    class boolean_literal;
    class boolean_representation_item;
    class boolean_result;
    class boundary_curve;
    class bounded_curve;
    class bounded_pcurve;
    class bounded_surface;
    class bounded_surface_curve;
    class box_domain;
    class boxed_half_space;
    class breakdown_context;
    class breakdown_element_group_assignment;
    class breakdown_element_realization;
    class breakdown_element_usage;
    class breakdown_of;
    class brep_with_voids;
    class bytes_representation_item;
    class calendar_date;
    class camera_image;
    class camera_image_3d_with_scale;
    class camera_model;
    class camera_model_d3;
    class camera_model_d3_multi_clipping;
    class camera_model_d3_multi_clipping_intersection;
    class camera_model_d3_multi_clipping_union;
    class camera_model_d3_with_hlhsr;
    class camera_model_with_light_sources;
    class camera_usage;
    class capacitance_measure_with_unit;
    class capacitance_unit;
    class cartesian_point;
    class cartesian_transformation_operator;
    class cartesian_transformation_operator_2d;
    class cartesian_transformation_operator_3d;
    class cc_design_approval;
    class cc_design_certification;
    class cc_design_contract;
    class cc_design_date_and_time_assignment;
    class cc_design_person_and_organization_assignment;
    class cc_design_security_classification;
    class cc_design_specification_reference;
    class celsius_temperature_measure_with_unit;
    class centre_of_symmetry;
    class certification;
    class certification_assignment;
    class certification_type;
    class change;
    class change_request;
    class character_glyph_font_usage;
    class character_glyph_style_outline;
    class character_glyph_style_stroke;
    class character_glyph_symbol;
    class character_glyph_symbol_outline;
    class character_glyph_symbol_stroke;
    class characteristic_data_column_header;
    class characteristic_data_column_header_link;
    class characteristic_data_table_header;
    class characteristic_data_table_header_decomposition;
    class characteristic_type;
    class characterized_class;
    class characterized_object;
    class circle;
    class circular_runout_tolerance;
    class class_;
    class class_by_extension;
    class class_by_intension;
    class class_system;
    class class_usage_effectivity_context_assignment;
    class classification_assignment;
    class classification_role;
    class closed_shell;
    class coaxiality_tolerance;
    class colour;
    class colour_rgb;
    class colour_specification;
    class common_datum;
    class comparison_expression;
    class complex_clause;
    class complex_conjunctive_clause;
    class complex_disjunctive_clause;
    class complex_shelled_solid;
    class composite_assembly_definition;
    class composite_assembly_sequence_definition;
    class composite_assembly_table;
    class composite_curve;
    class composite_curve_on_surface;
    class composite_curve_segment;
    class composite_material_designation;
    class composite_shape_aspect;
    class composite_sheet_representation;
    class composite_text;
    class composite_text_with_associated_curves;
    class composite_text_with_blanking_box;
    class composite_text_with_delineation;
    class composite_text_with_extent;
    class compound_representation_item;
    class compound_shape_representation;
    class concentricity_tolerance;
    class concept_feature_operator;
    class concept_feature_relationship;
    class concept_feature_relationship_with_condition;
    class conditional_concept_feature;
    class conductance_measure_with_unit;
    class conductance_unit;
    class configurable_item;
    class configuration_design;
    class configuration_effectivity;
    class configuration_item;
    class configuration_item_hierarchical_relationship;
    class configuration_item_relationship;
    class configuration_item_revision_sequence;
    class configured_effectivity_assignment;
    class configured_effectivity_context_assignment;
    class conic;
    class conical_stepped_hole_transition;
    class conical_surface;
    class connected_edge_set;
    class connected_face_set;
    class connected_face_sub_set;
    class constructive_geometry_representation;
    class constructive_geometry_representation_relationship;
    class contact_ratio_representation;
    class context_dependent_invisibility;
    class context_dependent_over_riding_styled_item;
    class context_dependent_shape_representation;
    class context_dependent_unit;
    class contract;
    class contract_assignment;
    class contract_relationship;
    class contract_type;
    class conversion_based_unit;
    class coordinated_universal_time_offset;
    class csg_shape_representation;
    class csg_solid;
    class currency;
    class currency_measure_with_unit;
    class curve;
    class curve_bounded_surface;
    class curve_dimension;
    class curve_replica;
    class curve_style;
    class curve_style_font;
    class curve_style_font_and_scaling;
    class curve_style_font_pattern;
    class curve_style_rendering;
    class curve_swept_solid_shape_representation;
    class cylindrical_surface;
    class cylindricity_tolerance;
    class data_environment;
    class date;
    class date_and_time;
    class date_and_time_assignment;
    class date_assignment;
    class date_representation_item;
    class date_role;
    class date_time_representation_item;
    class date_time_role;
    class dated_effectivity;
    class datum;
    class datum_feature;
    class datum_feature_callout;
    class datum_reference;
    class datum_target;
    class datum_target_callout;
    class default_tolerance_table;
    class default_tolerance_table_cell;
    class defined_symbol;
    class definitional_representation;
    class definitional_representation_relationship;
    class definitional_representation_relationship_with_same_context;
    class degenerate_pcurve;
    class degenerate_toroidal_surface;
    class derived_shape_aspect;
    class derived_unit;
    class derived_unit_element;
    class description_attribute;
    class descriptive_representation_item;
    class design_context;
    class design_make_from_relationship;
    class diameter_dimension;
    class dielectric_constant_measure_with_unit;
    class dimension_callout;
    class dimension_callout_component_relationship;
    class dimension_callout_relationship;
    class dimension_curve;
    class dimension_curve_directed_callout;
    class dimension_curve_terminator;
    class dimension_curve_terminator_to_projection_curve_associativity;
    class dimension_pair;
    class dimension_related_tolerance_zone_element;
    class dimension_text_associativity;
    class dimensional_characteristic_representation;
    class dimensional_exponents;
    class dimensional_location;
    class dimensional_location_with_path;
    class dimensional_size;
    class dimensional_size_with_path;
    class directed_action;
    class directed_dimensional_location;
    class direction;
    class document;
    class document_file;
    class document_identifier;
    class document_identifier_assignment;
    class document_product_association;
    class document_product_equivalence;
    class document_reference;
    class document_relationship;
    class document_representation_type;
    class document_type;
    class document_usage_constraint;
    class document_usage_constraint_assignment;
    class document_usage_role;
    class dose_equivalent_measure_with_unit;
    class dose_equivalent_unit;
    class double_offset_shelled_solid;
    class draped_defined_transformation;
    class draughting_annotation_occurrence;
    class draughting_callout;
    class draughting_callout_relationship;
    class draughting_elements;
    class draughting_model;
    class draughting_model_item_association;
    class draughting_pre_defined_colour;
    class draughting_pre_defined_curve_font;
    class draughting_pre_defined_text_font;
    class draughting_subfigure_representation;
    class draughting_symbol_representation;
    class draughting_text_literal_with_delineation;
    class draughting_title;
    class drawing_definition;
    class drawing_revision;
    class drawing_revision_sequence;
    class drawing_sheet_revision;
    class drawing_sheet_revision_sequence;
    class drawing_sheet_revision_usage;
    class edge;
    class edge_based_wireframe_model;
    class edge_based_wireframe_shape_representation;
    class edge_blended_solid;
    class edge_curve;
    class edge_loop;
    class effectivity;
    class effectivity_assignment;
    class effectivity_context_assignment;
    class effectivity_context_role;
    class effectivity_relationship;
    class electric_charge_measure_with_unit;
    class electric_charge_unit;
    class electric_current_measure_with_unit;
    class electric_current_unit;
    class electric_potential_measure_with_unit;
    class electric_potential_unit;
    class elementary_brep_shape_representation;
    class elementary_surface;
    class ellipse;
    class energy_measure_with_unit;
    class energy_unit;
    class entity_assertion;
    class enum_reference_prefix;
    class environment;
    class evaluated_characteristic;
    class evaluated_degenerate_pcurve;
    class evaluation_product_definition;
    class event_occurrence;
    class event_occurrence_assignment;
    class event_occurrence_relationship;
    class event_occurrence_role;
    class exclusive_product_concept_feature_category;
    class executed_action;
    class expanded_uncertainty;
    class explicit_procedural_geometric_representation_item_relationship;
    class explicit_procedural_representation_item_relationship;
    class explicit_procedural_representation_relationship;
    class explicit_procedural_shape_representation_relationship;
    class expression;
    class expression_conversion_based_unit;
    class extension;
    class extent;
    class external_class_library;
    class external_identification_assignment;
    class external_source;
    class external_source_relationship;
    class externally_defined_class;
    class externally_defined_colour;
    class externally_defined_context_dependent_unit;
    class externally_defined_conversion_based_unit;
    class externally_defined_currency;
    class externally_defined_curve_font;
    class externally_defined_dimension_definition;
    class externally_defined_general_property;
    class externally_defined_hatch_style;
    class externally_defined_item;
    class externally_defined_item_relationship;
    class externally_defined_marker;
    class externally_defined_picture_representation_item;
    class externally_defined_representation_item;
    class externally_defined_string;
    class externally_defined_symbol;
    class externally_defined_terminator_symbol;
    class externally_defined_text_font;
    class externally_defined_tile;
    class externally_defined_tile_style;
    class extruded_area_solid;
    class extruded_face_solid;
    class extruded_face_solid_with_draft_angle;
    class extruded_face_solid_with_multiple_draft_angles;
    class extruded_face_solid_with_trim_conditions;
    class face;
    class face_based_surface_model;
    class face_bound;
    class face_outer_bound;
    class face_surface;
    class faceted_brep;
    class faceted_brep_shape_representation;
    class fact_type;
    class fill_area_style;
    class fill_area_style_colour;
    class fill_area_style_hatching;
    class fill_area_style_tile_coloured_region;
    class fill_area_style_tile_curve_with_style;
    class fill_area_style_tile_symbol_with_style;
    class fill_area_style_tiles;
    class flat_pattern_ply_representation_relationship;
    class flatness_tolerance;
    class force_measure_with_unit;
    class force_unit;
    class forward_chaining_rule;
    class forward_chaining_rule_premise;
    class founded_item;
    class frequency_measure_with_unit;
    class frequency_unit;
    class func;
    class functional_breakdown_context;
    class functional_element_usage;
    class functionally_defined_transformation;
    class general_material_property;
    class general_property;
    class general_property_association;
    class general_property_relationship;
    class generic_character_glyph_symbol;
    class generic_expression;
    class generic_literal;
    class generic_variable;
    class geometric_alignment;
    class geometric_curve_set;
    class geometric_intersection;
    class geometric_item_specific_usage;
    class geometric_model_element_relationship;
    class geometric_representation_context;
    class geometric_representation_item;
    class geometric_set;
    class geometric_tolerance;
    class geometric_tolerance_relationship;
    class geometric_tolerance_with_datum_reference;
    class geometric_tolerance_with_defined_unit;
    class geometrical_tolerance_callout;
    class geometrically_bounded_2d_wireframe_representation;
    class geometrically_bounded_surface_shape_representation;
    class geometrically_bounded_wireframe_shape_representation;
    class global_assignment;
    class global_uncertainty_assigned_context;
    class global_unit_assigned_context;
    class ground_fact;
    class group;
    class group_assignment;
    class group_relationship;
    class half_space_solid;
    class hardness_representation;
    class hidden_element_over_riding_styled_item;
    class hyperbola;
    class id_attribute;
    class identification_assignment;
    class identification_role;
    class illuminance_measure_with_unit;
    class illuminance_unit;
    class included_text_block;
    class inclusion_product_concept_feature;
    class indirectly_selected_elements;
    class indirectly_selected_shape_elements;
    class inductance_measure_with_unit;
    class inductance_unit;
    class information_right;
    class information_usage_right;
    class instance_usage_context_assignment;
    class instanced_feature;
    class int_literal;
    class integer_representation_item;
    class intersection_curve;
    class interval_expression;
    class invisibility;
    class iso4217_currency;
    class item_defined_transformation;
    class item_identified_representation_usage;
    class known_source;
    class laid_defined_transformation;
    class laminate_table;
    class language;
    class leader_curve;
    class leader_directed_callout;
    class leader_directed_dimension;
    class leader_terminator;
    class length_measure_with_unit;
    class length_unit;
    class light_source;
    class light_source_ambient;
    class light_source_directional;
    class light_source_positional;
    class light_source_spot;
    class limits_and_fits;
    class line;
    class line_profile_tolerance;
    class linear_dimension;
    class literal_conjunction;
    class literal_disjunction;
    class literal_number;
    class local_time;
    class logical_literal;
    class logical_representation_item;
    class loop;
    class loss_tangent_measure_with_unit;
    class lot_effectivity;
    class luminous_flux_measure_with_unit;
    class luminous_flux_unit;
    class luminous_intensity_measure_with_unit;
    class luminous_intensity_unit;
    class magnetic_flux_density_measure_with_unit;
    class magnetic_flux_density_unit;
    class magnetic_flux_measure_with_unit;
    class magnetic_flux_unit;
    class make_from_usage_option;
    class manifold_solid_brep;
    class manifold_subsurface_shape_representation;
    class manifold_surface_shape_representation;
    class mapped_item;
    class mass_measure_with_unit;
    class mass_unit;
    class material_designation;
    class material_designation_characterization;
    class material_property;
    class material_property_representation;
    class measure_qualification;
    class measure_representation_item;
    class measure_with_unit;
    class mechanical_context;
    class mechanical_design_and_draughting_relationship;
    class mechanical_design_geometric_presentation_area;
    class mechanical_design_geometric_presentation_representation;
    class mechanical_design_presentation_representation_with_draughting;
    class mechanical_design_shaded_presentation_area;
    class mechanical_design_shaded_presentation_representation;
    class min_and_major_ply_orientation_basis;
    class modified_geometric_tolerance;
    class modified_solid;
    class modified_solid_with_placed_configuration;
    class moments_of_inertia_representation;
    class multi_language_attribute_assignment;
    class multiple_arity_boolean_expression;
    class multiple_arity_generic_expression;
    class multiple_arity_numeric_expression;
    class name_assignment;
    class name_attribute;
    class named_unit;
    class next_assembly_usage_occurrence;
    class non_manifold_surface_shape_representation;
    class null_representation_item;
    class numeric_expression;
    class object_role;
    class offset_curve_2d;
    class offset_curve_3d;
    class offset_surface;
    class one_direction_repeat_factor;
    class open_shell;
    class ordinal_date;
    class ordinate_dimension;
    class organization;
    class organization_assignment;
    class organization_relationship;
    class organization_role;
    class organizational_address;
    class organizational_project;
    class organizational_project_assignment;
    class organizational_project_relationship;
    class organizational_project_role;
    class oriented_closed_shell;
    class oriented_edge;
    class oriented_face;
    class oriented_open_shell;
    class oriented_path;
    class oriented_surface;
    class outer_boundary_curve;
    class over_riding_styled_item;
    class package_product_concept_feature;
    class parabola;
    class parallel_offset;
    class parallelism_tolerance;
    class parametric_representation_context;
    class part_laminate_table;
    class partial_document_with_structured_text_representation_assignment;
    class path;
    class pcurve;
    class percentage_laminate_definition;
    class percentage_laminate_table;
    class percentage_ply_definition;
    class perpendicular_to;
    class perpendicularity_tolerance;
    class person;
    class person_and_organization;
    class person_and_organization_address;
    class person_and_organization_assignment;
    class person_and_organization_role;
    class personal_address;
    class physical_breakdown_context;
    class physical_element_usage;
    class picture_representation;
    class picture_representation_item;
    class placed_datum_target_feature;
    class placed_feature;
    class placement;
    class planar_box;
    class planar_extent;
    class plane;
    class plane_angle_measure_with_unit;
    class plane_angle_unit;
    class plus_minus_tolerance;
    class ply_laminate_definition;
    class ply_laminate_sequence_definition;
    class ply_laminate_table;
    class point;
    class point_and_vector;
    class point_on_curve;
    class point_on_surface;
    class point_path;
    class point_replica;
    class point_style;
    class polar_complex_number_literal;
    class poly_loop;
    class polyline;
    class position_tolerance;
    class positioned_sketch;
    class power_measure_with_unit;
    class power_unit;
    class pre_defined_colour;
    class pre_defined_curve_font;
    class pre_defined_dimension_symbol;
    class pre_defined_geometrical_tolerance_symbol;
    class pre_defined_item;
    class pre_defined_marker;
    class pre_defined_point_marker_symbol;
    class pre_defined_surface_condition_symbol;
    class pre_defined_surface_side_style;
    class pre_defined_symbol;
    class pre_defined_terminator_symbol;
    class pre_defined_text_font;
    class pre_defined_tile;
    class precision_qualifier;
    class predefined_picture_representation_item;
    class presentation_area;
    class presentation_layer_assignment;
    class presentation_representation;
    class presentation_set;
    class presentation_size;
    class presentation_style_assignment;
    class presentation_style_by_context;
    class presentation_view;
    class presented_item;
    class presented_item_representation;
    class pressure_measure_with_unit;
    class pressure_unit;
    class procedural_representation;
    class procedural_representation_sequence;
    class procedural_shape_representation;
    class procedural_shape_representation_sequence;
    class product;
    class product_category;
    class product_class;
    class product_concept;
    class product_concept_context;
    class product_concept_feature;
    class product_concept_feature_association;
    class product_concept_feature_category;
    class product_concept_feature_category_usage;
    class product_concept_relationship;
    class product_context;
    class product_definition;
    class product_definition_context;
    class product_definition_context_association;
    class product_definition_context_role;
    class product_definition_effectivity;
    class product_definition_element_relationship;
    class product_definition_formation;
    class product_definition_formation_relationship;
    class product_definition_formation_with_specified_source;
    class product_definition_group_assignment;
    class product_definition_occurrence_relationship;
    class product_definition_relationship;
    class product_definition_shape;
    class product_definition_substitute;
    class product_definition_usage;
    class product_definition_with_associated_documents;
    class product_identification;
    class product_material_composition_relationship;
    class product_related_product_category;
    class product_specification;
    class projected_zone_definition;
    class projection_curve;
    class projection_directed_callout;
    class promissory_usage_occurrence;
    class property_definition;
    class property_definition_relationship;
    class property_definition_representation;
    class qualified_representation_item;
    class qualitative_uncertainty;
    class quantified_assembly_component_usage;
    class quasi_uniform_curve;
    class quasi_uniform_surface;
    class radioactivity_measure_with_unit;
    class radioactivity_unit;
    class radius_dimension;
    class range_characteristic;
    class ratio_measure_with_unit;
    class ratio_unit;
    class rational_b_spline_curve;
    class rational_b_spline_surface;
    class rational_representation_item;
    class real_literal;
    class real_representation_item;
    class rectangular_composite_surface;
    class rectangular_trimmed_surface;
    class referenced_modified_datum;
    class relative_event_occurrence;
    class rep_item_group;
    class reparametrised_composite_curve_segment;
    class representation;
    class representation_context;
    class representation_item;
    class representation_item_relationship;
    class representation_map;
    class representation_relationship;
    class representation_relationship_with_transformation;
    class requirement_assigned_object;
    class requirement_assignment;
    class requirement_source;
    class requirement_view_definition_relationship;
    class resistance_measure_with_unit;
    class resistance_unit;
    class revolved_area_solid;
    class revolved_face_solid;
    class revolved_face_solid_with_trim_conditions;
    class right_angular_wedge;
    class right_circular_cone;
    class right_circular_cylinder;
    class right_to_usage_association;
    class role_association;
    class roundness_tolerance;
    class row_representation_item;
    class row_value;
    class row_variable;
    class rule_action;
    class rule_condition;
    class rule_definition;
    class rule_set;
    class rule_set_group;
    class rule_software_definition;
    class rule_superseded_assignment;
    class rule_supersedence;
    class ruled_surface_swept_area_solid;
    class runout_zone_definition;
    class runout_zone_orientation;
    class runout_zone_orientation_reference_direction;
    class satisfied_requirement;
    class satisfies_requirement;
    class satisfying_item;
    class scalar_variable;
    class scattering_parameter;
    class sculptured_solid;
    class seam_curve;
    class security_classification;
    class security_classification_assignment;
    class security_classification_level;
    class serial_numbered_effectivity;
    class shape_aspect;
    class shape_aspect_associativity;
    class shape_aspect_deriving_relationship;
    class shape_aspect_relationship;
    class shape_definition_representation;
    class shape_dimension_representation;
    class shape_feature_definition;
    class shape_representation;
    class shape_representation_relationship;
    class shape_representation_with_parameters;
    class shell_based_surface_model;
    class shell_based_wireframe_model;
    class shell_based_wireframe_shape_representation;
    class shelled_solid;
    class si_absorbed_dose_unit;
    class si_capacitance_unit;
    class si_conductance_unit;
    class si_dose_equivalent_unit;
    class si_electric_charge_unit;
    class si_electric_potential_unit;
    class si_energy_unit;
    class si_force_unit;
    class si_frequency_unit;
    class si_illuminance_unit;
    class si_inductance_unit;
    class si_magnetic_flux_density_unit;
    class si_magnetic_flux_unit;
    class si_power_unit;
    class si_pressure_unit;
    class si_radioactivity_unit;
    class si_resistance_unit;
    class si_unit;
    class simple_boolean_expression;
    class simple_clause;
    class simple_generic_expression;
    class simple_numeric_expression;
    class slash_expression;
    class smeared_material_definition;
    class solid_angle_measure_with_unit;
    class solid_angle_unit;
    class solid_curve_font;
    class solid_model;
    class solid_replica;
    class solid_with_angle_based_chamfer;
    class solid_with_chamfered_edges;
    class solid_with_circular_pattern;
    class solid_with_circular_pocket;
    class solid_with_circular_protrusion;
    class solid_with_conical_bottom_round_hole;
    class solid_with_constant_radius_edge_blend;
    class solid_with_curved_slot;
    class solid_with_depression;
    class solid_with_double_offset_chamfer;
    class solid_with_flat_bottom_round_hole;
    class solid_with_general_pocket;
    class solid_with_general_protrusion;
    class solid_with_groove;
    class solid_with_hole;
    class solid_with_incomplete_circular_pattern;
    class solid_with_incomplete_rectangular_pattern;
    class solid_with_pocket;
    class solid_with_protrusion;
    class solid_with_rectangular_pattern;
    class solid_with_rectangular_pocket;
    class solid_with_rectangular_protrusion;
    class solid_with_shape_element_pattern;
    class solid_with_single_offset_chamfer;
    class solid_with_slot;
    class solid_with_spherical_bottom_round_hole;
    class solid_with_stepped_round_hole;
    class solid_with_stepped_round_hole_and_conical_transitions;
    class solid_with_straight_slot;
    class solid_with_tee_section_slot;
    class solid_with_through_depression;
    class solid_with_trapezoidal_section_slot;
    class solid_with_variable_radius_edge_blend;
    class source_for_requirement;
    class sourced_requirement;
    class specification_definition;
    class specified_higher_usage_occurrence;
    class sphere;
    class spherical_surface;
    class standard_uncertainty;
    class start_request;
    class start_work;
    class straightness_tolerance;
    class structured_dimension_callout;
    class structured_text_composition;
    class structured_text_representation;
    class styled_item;
    class subedge;
    class subface;
    class supplied_part_relationship;
    class surface;
    class surface_condition_callout;
    class surface_curve;
    class surface_curve_swept_area_solid;
    class surface_of_linear_extrusion;
    class surface_of_revolution;
    class surface_patch;
    class surface_profile_tolerance;
    class surface_rendering_properties;
    class surface_replica;
    class surface_side_style;
    class surface_style_boundary;
    class surface_style_control_grid;
    class surface_style_fill_area;
    class surface_style_parameter_line;
    class surface_style_reflectance_ambient;
    class surface_style_reflectance_ambient_diffuse;
    class surface_style_reflectance_ambient_diffuse_specular;
    class surface_style_rendering;
    class surface_style_rendering_with_properties;
    class surface_style_segmentation_curve;
    class surface_style_silhouette;
    class surface_style_transparent;
    class surface_style_usage;
    class surface_texture_representation;
    class surfaced_open_shell;
    class swept_area_solid;
    class swept_disk_solid;
    class swept_face_solid;
    class swept_surface;
    class symbol;
    class symbol_colour;
    class symbol_representation;
    class symbol_representation_map;
    class symbol_style;
    class symbol_target;
    class symmetric_shape_aspect;
    class symmetry_tolerance;
    class table_representation_item;
    class tactile_appearance_representation;
    class tagged_text_format;
    class tagged_text_item;
    class tangent;
    class terminator_symbol;
    class text_font;
    class text_font_family;
    class text_font_in_family;
    class text_literal;
    class text_literal_with_associated_curves;
    class text_literal_with_blanking_box;
    class text_literal_with_delineation;
    class text_literal_with_extent;
    class text_string_representation;
    class text_style;
    class text_style_for_defined_font;
    class text_style_with_box_characteristics;
    class text_style_with_mirror;
    class text_style_with_spacing;
    class thermal_resistance_measure_with_unit;
    class thermal_resistance_unit;
    class thermodynamic_temperature_measure_with_unit;
    class thermodynamic_temperature_unit;
    class thickened_face_solid;
    class thickness_laminate_definition;
    class thickness_laminate_table;
    class time_interval;
    class time_interval_assignment;
    class time_interval_based_effectivity;
    class time_interval_relationship;
    class time_interval_role;
    class time_interval_with_bounds;
    class time_measure_with_unit;
    class time_unit;
    class tolerance_value;
    class tolerance_zone;
    class tolerance_zone_definition;
    class tolerance_zone_form;
    class topological_representation_item;
    class toroidal_surface;
    class torus;
    class total_runout_tolerance;
    class track_blended_solid;
    class track_blended_solid_with_end_conditions;
    class transformation_with_derived_angle;
    class trimmed_curve;
    class two_direction_repeat_factor;
    class type_qualifier;
    class unary_generic_expression;
    class unary_numeric_expression;
    class uncertainty_assigned_representation;
    class uncertainty_measure_with_unit;
    class uncertainty_qualifier;
    class uniform_curve;
    class uniform_resource_identifier;
    class uniform_surface;
    class usage_association;
    class user_defined_curve_font;
    class user_defined_marker;
    class user_defined_terminator_symbol;
    class user_selected_elements;
    class user_selected_shape_elements;
    class value_range;
    class value_representation_item;
    class variable_semantics;
    class variational_representation_item;
    class vector;
    class vector_style;
    class velocity_measure_with_unit;
    class velocity_unit;
    class versioned_action_request;
    class vertex;
    class vertex_loop;
    class vertex_point;
    class vertex_shell;
    class view_volume;
    class visual_appearance_representation;
    class volume_measure_with_unit;
    class volume_unit;
    class week_of_year_and_day_date;
    class wire_shell;
    class year_month;
    class zone_structural_makeup;

    class action_items;
    class action_items_get;
    class action_items_put;
    class action_method_items;
    class action_method_items_get;
    class action_method_items_put;
    class action_request_item;
    class action_request_item_get;
    class action_request_item_put;
    class angle_direction_reference_select;
    class angle_direction_reference_select_get;
    class angle_direction_reference_select_put;
    class angle_direction_reference_with_a2p3d_select;
    class angle_direction_reference_with_a2p3d_select_get;
    class angle_direction_reference_with_a2p3d_select_put;
    class annotation_plane_element;
    class annotation_plane_element_get;
    class annotation_plane_element_put;
    class annotation_representation_select;
    class annotation_representation_select_get;
    class annotation_representation_select_put;
    class annotation_symbol_occurrence_item;
    class annotation_symbol_occurrence_item_get;
    class annotation_symbol_occurrence_item_put;
    class annotation_text_occurrence_item;
    class annotation_text_occurrence_item_get;
    class annotation_text_occurrence_item_put;
    class approval_item;
    class approval_item_get;
    class approval_item_put;
    class approved_item;
    class approved_item_get;
    class approved_item_put;
    class area_or_view;
    class area_or_view_get;
    class area_or_view_put;
    class attribute_classification_item;
    class attribute_classification_item_get;
    class attribute_classification_item_put;
    class attribute_language_item;
    class attribute_language_item_get;
    class attribute_language_item_put;
    class attribute_type;
    class attribute_type_get;
    class attribute_type_put;
    class axis2_placement;
    class axis2_placement_get;
    class axis2_placement_put;
    class base_solid_select;
    class base_solid_select_get;
    class base_solid_select_put;
    class blend_end_condition_select;
    class blend_end_condition_select_get;
    class blend_end_condition_select_put;
    class boolean_operand;
    class boolean_operand_get;
    class boolean_operand_put;
    class box_characteristic_select;
    class box_characteristic_select_get;
    class box_characteristic_select_put;
    class camera_model_d3_multi_clipping_interection_select;
    class camera_model_d3_multi_clipping_interection_select_get;
    class camera_model_d3_multi_clipping_interection_select_put;
    class camera_model_d3_multi_clipping_union_select;
    class camera_model_d3_multi_clipping_union_select_get;
    class camera_model_d3_multi_clipping_union_select_put;
    class category_usage_item;
    class category_usage_item_get;
    class category_usage_item_put;
    class cc_classified_item;
    class cc_classified_item_get;
    class cc_classified_item_put;
    class cc_person_organization_item;
    class cc_person_organization_item_get;
    class cc_person_organization_item_put;
    class cc_specified_item;
    class cc_specified_item_get;
    class cc_specified_item_put;
    class certification_item;
    class certification_item_get;
    class certification_item_put;
    class certified_item;
    class certified_item_get;
    class certified_item_put;
    class change_request_item;
    class change_request_item_get;
    class change_request_item_put;
    class character_spacing_select;
    class character_spacing_select_get;
    class character_spacing_select_put;
    class character_style_select;
    class character_style_select_get;
    class character_style_select_put;
    class characterized_action_definition;
    class characterized_action_definition_get;
    class characterized_action_definition_put;
    class characterized_definition;
    class characterized_definition_get;
    class characterized_definition_put;
    class characterized_material_property;
    class characterized_material_property_get;
    class characterized_material_property_put;
    class characterized_product_composition_value;
    class characterized_product_composition_value_get;
    class characterized_product_composition_value_put;
    class characterized_product_definition;
    class characterized_product_definition_get;
    class characterized_product_definition_put;
    class class_usage_effectivity_context_item;
    class class_usage_effectivity_context_item_get;
    class class_usage_effectivity_context_item_put;
    class classification_item;
    class classification_item_get;
    class classification_item_put;
    class classified_item;
    class classified_item_get;
    class classified_item_put;
    class compound_item_definition;
    class compound_item_definition_get;
    class compound_item_definition_put;
    class configuration_design_item;
    class configuration_design_item_get;
    class configuration_design_item_put;
    class configured_effectivity_context_item;
    class configured_effectivity_context_item_get;
    class configured_effectivity_context_item_put;
    class configured_effectivity_item;
    class configured_effectivity_item_get;
    class configured_effectivity_item_put;
    class constructive_geometry_representation_or_shape_represenation;
    class constructive_geometry_representation_or_shape_represenation_get;
    class constructive_geometry_representation_or_shape_represenation_put;
    class contract_item;
    class contract_item_get;
    class contract_item_put;
    class contracted_item;
    class contracted_item_get;
    class contracted_item_put;
    class csg_primitive;
    class csg_primitive_get;
    class csg_primitive_put;
    class csg_select;
    class csg_select_get;
    class csg_select_put;
    class curve_font_or_scaled_curve_font_select;
    class curve_font_or_scaled_curve_font_select_get;
    class curve_font_or_scaled_curve_font_select_put;
    class curve_on_surface;
    class curve_on_surface_get;
    class curve_on_surface_put;
    class curve_or_annotation_curve_occurrence;
    class curve_or_annotation_curve_occurrence_get;
    class curve_or_annotation_curve_occurrence_put;
    class curve_or_render;
    class curve_or_render_get;
    class curve_or_render_put;
    class curve_style_font_select;
    class curve_style_font_select_get;
    class curve_style_font_select_put;
    class date_and_time_item;
    class date_and_time_item_get;
    class date_and_time_item_put;
    class date_item;
    class date_item_get;
    class date_item_put;
    class date_time_item;
    class date_time_item_get;
    class date_time_item_put;
    class date_time_or_event_occurrence;
    class date_time_or_event_occurrence_get;
    class date_time_or_event_occurrence_put;
    class date_time_select;
    class date_time_select_get;
    class date_time_select_put;
    class defined_symbol_select;
    class defined_symbol_select_get;
    class defined_symbol_select_put;
    class derived_property_select;
    class derived_property_select_get;
    class derived_property_select_put;
    class description_attribute_select;
    class description_attribute_select_get;
    class description_attribute_select_put;
    class dimensional_characteristic;
    class dimensional_characteristic_get;
    class dimensional_characteristic_put;
    class direction_count_select;
    class direction_count_select_get;
    class direction_count_select_put;
    class document_identifier_assigned_item;
    class document_identifier_assigned_item_get;
    class document_identifier_assigned_item_put;
    class document_reference_item;
    class document_reference_item_get;
    class document_reference_item_put;
    class draughting_callout_element;
    class draughting_callout_element_get;
    class draughting_callout_element_put;
    class draughting_model_item_association_select;
    class draughting_model_item_association_select_get;
    class draughting_model_item_association_select_put;
    class draughting_model_item_select;
    class draughting_model_item_select_get;
    class draughting_model_item_select_put;
    class draughting_titled_item;
    class draughting_titled_item_get;
    class draughting_titled_item_put;
    class effectivity_item;
    class effectivity_item_get;
    class effectivity_item_put;
    class event_occurrence_item;
    class event_occurrence_item_get;
    class event_occurrence_item_put;
    class external_identification_item;
    class external_identification_item_get;
    class external_identification_item_put;
    class fill_area_style_tile_shape_select;
    class fill_area_style_tile_shape_select_get;
    class fill_area_style_tile_shape_select_put;
    class fill_style_select;
    class fill_style_select_get;
    class fill_style_select_put;
    class font_select;
    class font_select_get;
    class font_select_put;
    class founded_item_select;
    class founded_item_select_get;
    class founded_item_select_put;
    class generalized_surface_select;
    class generalized_surface_select_get;
    class generalized_surface_select_put;
    class geometric_item_specific_usage_select;
    class geometric_item_specific_usage_select_get;
    class geometric_item_specific_usage_select_put;
    class geometric_set_select;
    class geometric_set_select_get;
    class geometric_set_select_put;
    class groupable_item;
    class groupable_item_get;
    class groupable_item_put;
    class id_attribute_select;
    class id_attribute_select_get;
    class id_attribute_select_put;
    class identification_item;
    class identification_item_get;
    class identification_item_put;
    class instance_usage_context_select;
    class instance_usage_context_select_get;
    class instance_usage_context_select_put;
    class invisibility_context;
    class invisibility_context_get;
    class invisibility_context_put;
    class invisible_item;
    class invisible_item_get;
    class invisible_item_put;
    class layered_item;
    class layered_item_get;
    class layered_item_put;
    class marker_select;
    class marker_select_get;
    class marker_select_put;
    class measure_value;
    class measure_value_get;
    class measure_value_put;
    class mechanical_design_and_draughting_relationship_select;
    class mechanical_design_and_draughting_relationship_select_get;
    class mechanical_design_and_draughting_relationship_select_put;
    class mechanical_design_geometric_presentation_area_items;
    class mechanical_design_geometric_presentation_area_items_get;
    class mechanical_design_geometric_presentation_area_items_put;
    class mechanical_design_geometric_presentation_representation_items;
    class mechanical_design_geometric_presentation_representation_items_get;
    class mechanical_design_geometric_presentation_representation_items_put;
    class multi_language_attribute_item;
    class multi_language_attribute_item_get;
    class multi_language_attribute_item_put;
    class name_attribute_select;
    class name_attribute_select_get;
    class name_attribute_select_put;
    class name_item;
    class name_item_get;
    class name_item_put;
    class organization_item;
    class organization_item_get;
    class organization_item_put;
    class orientation_basis_select;
    class orientation_basis_select_get;
    class orientation_basis_select_put;
    class pcurve_or_surface;
    class pcurve_or_surface_get;
    class pcurve_or_surface_put;
    class person_and_organization_item;
    class person_and_organization_item_get;
    class person_and_organization_item_put;
    class person_organization_select;
    class person_organization_select_get;
    class person_organization_select_put;
    class picture_representation_item_select;
    class picture_representation_item_select_get;
    class picture_representation_item_select_put;
    class plane_or_planar_box;
    class plane_or_planar_box_get;
    class plane_or_planar_box_put;
    class point_and_vector_member;
    class point_and_vector_member_get;
    class point_and_vector_member_put;
    class presentation_representation_select;
    class presentation_representation_select_get;
    class presentation_representation_select_put;
    class presentation_size_assignment_select;
    class presentation_size_assignment_select_get;
    class presentation_size_assignment_select_put;
    class presentation_style_select;
    class presentation_style_select_get;
    class presentation_style_select_put;
    class presented_item_select;
    class presented_item_select_get;
    class presented_item_select_put;
    class product_definition_or_assembly_relationship;
    class product_definition_or_assembly_relationship_get;
    class product_definition_or_assembly_relationship_put;
    class product_definition_or_breakdown_element_usage;
    class product_definition_or_breakdown_element_usage_get;
    class product_definition_or_breakdown_element_usage_put;
    class product_definition_or_product_definition_relationship;
    class product_definition_or_product_definition_relationship_get;
    class product_definition_or_product_definition_relationship_put;
    class product_or_formation_or_definition;
    class product_or_formation_or_definition_get;
    class product_or_formation_or_definition_put;
    class project_item;
    class project_item_get;
    class project_item_put;
    class rendering_properties_select;
    class rendering_properties_select_get;
    class rendering_properties_select_put;
    class represented_definition;
    class represented_definition_get;
    class represented_definition_put;
    class requirement_assigned_item;
    class requirement_assigned_item_get;
    class requirement_assigned_item_put;
    class requirement_satisfaction_item;
    class requirement_satisfaction_item_get;
    class requirement_satisfaction_item_put;
    class requirement_source_item;
    class requirement_source_item_get;
    class requirement_source_item_put;
    class reversible_topology;
    class reversible_topology_get;
    class reversible_topology_put;
    class reversible_topology_item;
    class reversible_topology_item_get;
    class reversible_topology_item_put;
    class role_select;
    class role_select_get;
    class role_select_put;
    class rule_superseded_item;
    class rule_superseded_item_get;
    class rule_superseded_item_put;
    class security_classification_item;
    class security_classification_item_get;
    class security_classification_item_put;
    class shape_definition;
    class shape_definition_get;
    class shape_definition_put;
    class shell;
    class shell_get;
    class shell_put;
    class size_select;
    class size_select_get;
    class size_select_put;
    class sketch_basis_select;
    class sketch_basis_select_get;
    class sketch_basis_select_put;
    class source_item;
    class source_item_get;
    class source_item_put;
    class start_request_item;
    class start_request_item_get;
    class start_request_item_put;
    class string_representation_item_select;
    class string_representation_item_select_get;
    class string_representation_item_select_put;
    class style_context_select;
    class style_context_select_get;
    class style_context_select_put;
    class surface_side_style_select;
    class surface_side_style_select_get;
    class surface_side_style_select_put;
    class surface_style_element_select;
    class surface_style_element_select_get;
    class surface_style_element_select_put;
    class symbol_style_select;
    class symbol_style_select_get;
    class symbol_style_select_put;
    class text_or_character;
    class text_or_character_get;
    class text_or_character_put;
    class text_string_representation_item;
    class text_string_representation_item_get;
    class text_string_representation_item_put;
    class time_interval_item;
    class time_interval_item_get;
    class time_interval_item_put;
    class tolerance_method_definition;
    class tolerance_method_definition_get;
    class tolerance_method_definition_put;
    class transformation;
    class transformation_get;
    class transformation_put;
    class trim_condition_select;
    class trim_condition_select_get;
    class trim_condition_select_put;
    class trimming_select;
    class trimming_select_get;
    class trimming_select_put;
    class unit;
    class unit_get;
    class unit_put;
    class value_qualifier;
    class value_qualifier_get;
    class value_qualifier_put;
    class vector_or_direction;
    class vector_or_direction_get;
    class vector_or_direction_put;
    class work_item;
    class work_item_get;
    class work_item_put;

        //
        // Enumerations
        //

    enum class ahead_or_behind
    {
        ahead = 0,
        exact = 1,
        behind = 2,
        ___unk = -1
    };

    enum class angle_relator
    {
        equal = 0,
        large = 1,
        small = 2,
        ___unk = -1
    };

    enum class b_spline_curve_form
    {
        polyline_form = 0,
        circular_arc = 1,
        elliptic_arc = 2,
        parabolic_arc = 3,
        hyperbolic_arc = 4,
        unspecified = 5,
        ___unk = -1
    };

    enum class b_spline_surface_form
    {
        plane_surf = 0,
        cylindrical_surf = 1,
        conical_surf = 2,
        spherical_surf = 3,
        toroidal_surf = 4,
        surf_of_revolution = 5,
        ruled_surf = 6,
        generalised_cone = 7,
        quadric_surf = 8,
        surf_of_linear_extrusion = 9,
        unspecified = 10,
        ___unk = -1
    };

    enum class blend_radius_variation_type
    {
        linear_blend = 0,
        cubic_blend = 1,
        unspecified_blend = 2,
        ___unk = -1
    };

    enum class boolean_operator
    {
        union_ = 0,
        intersection = 1,
        difference = 2,
        ___unk = -1
    };

    enum class central_or_parallel
    {
        central = 0,
        parallel = 1,
        ___unk = -1
    };

    enum class dimension_extent_usage
    {
        origin = 0,
        target = 1,
        ___unk = -1
    };

    enum class knot_type
    {
        uniform_knots = 0,
        quasi_uniform_knots = 1,
        piecewise_bezier_knots = 2,
        unspecified = 3,
        ___unk = -1
    };

    enum class limit_condition
    {
        maximum_material_condition = 0,
        least_material_condition = 1,
        regardless_of_feature_size = 2,
        ___unk = -1
    };

    enum class marker_type
    {
        dot = 0,
        x = 1,
        plus = 2,
        asterisk = 3,
        ring = 4,
        square = 5,
        triangle = 6,
        ___unk = -1
    };

    enum class null_style
    {
        null_ = 0,
        ___unk = -1
    };

    enum class preferred_surface_curve_representation
    {
        curve_3d = 0,
        pcurve_s1 = 1,
        pcurve_s2 = 2,
        ___unk = -1
    };

    enum class shading_curve_method
    {
        constant_colour = 0,
        linear_colour = 1,
        ___unk = -1
    };

    enum class shading_surface_method
    {
        constant_shading = 0,
        colour_shading = 1,
        dot_shading = 2,
        normal_shading = 3,
        ___unk = -1
    };

    enum class si_prefix
    {
        exa = 0,
        peta = 1,
        tera = 2,
        giga = 3,
        mega = 4,
        kilo = 5,
        hecto = 6,
        deca = 7,
        deci = 8,
        centi = 9,
        milli = 10,
        micro = 11,
        nano = 12,
        pico = 13,
        femto = 14,
        atto = 15,
        ___unk = -1
    };

    enum class si_unit_name
    {
        metre = 0,
        gram = 1,
        second = 2,
        ampere = 3,
        kelvin = 4,
        mole = 5,
        candela = 6,
        radian = 7,
        steradian = 8,
        hertz = 9,
        newton = 10,
        pascal = 11,
        joule = 12,
        watt = 13,
        coulomb = 14,
        volt = 15,
        farad = 16,
        ohm = 17,
        siemens = 18,
        weber = 19,
        tesla = 20,
        henry = 21,
        degree_Celsius = 22,
        lumen = 23,
        lux = 24,
        becquerel = 25,
        gray = 26,
        sievert = 27,
        ___unk = -1
    };

    enum class source
    {
        made = 0,
        bought = 1,
        not_known = 2,
        ___unk = -1
    };

    enum class surface_side
    {
        positive = 0,
        negative = 1,
        both = 2,
        ___unk = -1
    };

    enum class text_path
    {
        left = 0,
        right = 1,
        up = 2,
        down = 3,
        ___unk = -1
    };

    enum class transition_code
    {
        discontinuous = 0,
        continuous = 1,
        cont_same_gradient = 2,
        cont_same_gradient_same_curvature = 3,
        ___unk = -1
    };

    enum class trim_intent
    {
        blind = 0,
        offset = 1,
        through_all = 2,
        unspecified = 3,
        up_to_next = 4,
        ___unk = -1
    };

    enum class trimming_preference
    {
        cartesian = 0,
        parameter = 1,
        unspecified = 2,
        ___unk = -1
    };
    //
    static TextValue ahead_or_behind_[] = {"ahead", "exact", "behind", NULL};
    static TextValue angle_relator_[] = {"equal", "large", "small", NULL};
    static TextValue b_spline_curve_form_[] = {"polyline_form", "circular_arc", "elliptic_arc", "parabolic_arc", "hyperbolic_arc", "unspecified", NULL};
    static TextValue b_spline_surface_form_[] = {"plane_surf", "cylindrical_surf", "conical_surf", "spherical_surf", "toroidal_surf", "surf_of_revolution", "ruled_surf", "generalised_cone", "quadric_surf", "surf_of_linear_extrusion", "unspecified", NULL};
    static TextValue blend_radius_variation_type_[] = {"linear_blend", "cubic_blend", "unspecified_blend", NULL};
    static TextValue boolean_operator_[] = {"union", "intersection", "difference", NULL};
    static TextValue central_or_parallel_[] = {"central", "parallel", NULL};
    static TextValue dimension_extent_usage_[] = {"origin", "target", NULL};
    static TextValue knot_type_[] = {"uniform_knots", "quasi_uniform_knots", "piecewise_bezier_knots", "unspecified", NULL};
    static TextValue limit_condition_[] = {"maximum_material_condition", "least_material_condition", "regardless_of_feature_size", NULL};
    static TextValue marker_type_[] = {"dot", "x", "plus", "asterisk", "ring", "square", "triangle", NULL};
    static TextValue null_style_[] = {"null", NULL};
    static TextValue preferred_surface_curve_representation_[] = {"curve_3d", "pcurve_s1", "pcurve_s2", NULL};
    static TextValue shading_curve_method_[] = {"constant_colour", "linear_colour", NULL};
    static TextValue shading_surface_method_[] = {"constant_shading", "colour_shading", "dot_shading", "normal_shading", NULL};
    static TextValue si_prefix_[] = {"exa", "peta", "tera", "giga", "mega", "kilo", "hecto", "deca", "deci", "centi", "milli", "micro", "nano", "pico", "femto", "atto", NULL};
    static TextValue si_unit_name_[] = {"metre", "gram", "second", "ampere", "kelvin", "mole", "candela", "radian", "steradian", "hertz", "newton", "pascal", "joule", "watt", "coulomb", "volt", "farad", "ohm", "siemens", "weber", "tesla", "henry", "degree_Celsius", "lumen", "lux", "becquerel", "gray", "sievert", NULL};
    static TextValue source_[] = {"made", "bought", "not_known", NULL};
    static TextValue surface_side_[] = {"positive", "negative", "both", NULL};
    static TextValue text_path_[] = {"left", "right", "up", "down", NULL};
    static TextValue transition_code_[] = {"discontinuous", "continuous", "cont_same_gradient", "cont_same_gradient_same_curvature", NULL};
    static TextValue trim_intent_[] = {"blind", "offset", "through_all", "unspecified", "up_to_next", NULL};
    static TextValue trimming_preference_[] = {"cartesian", "parameter", "unspecified", NULL};

    //
    // Defined types
    // 
    typedef double absorbed_dose_measure;
    typedef double acceleration_measure;
    typedef double amount_of_substance_measure;
    typedef double area_measure;
    typedef double ratio_measure;
    typedef double positive_ratio_measure;
    typedef double box_height;
    typedef double plane_angle_measure;
    typedef double box_rotate_angle;
    typedef plane_angle_measure box_slant_angle;
    typedef positive_ratio_measure box_width;
    typedef double capacitance_measure;
    typedef double celsius_temperature_measure;
    typedef double conductance_measure;
    typedef double context_dependent_measure;
    typedef double count_measure;
    typedef IntValue day_in_month_number;
    typedef IntValue day_in_week_number;
    typedef IntValue day_in_year_number;
    typedef TextValue descriptive_measure;
    typedef IntValue dimension_count;
    typedef double dose_equivalent_measure;
    typedef double electric_charge_measure;
    typedef double electric_current_measure;
    typedef double electric_potential_measure;
    typedef double energy_measure;
    typedef double force_measure;
    typedef double frequency_measure;
    typedef IntValue hour_in_day;
    typedef TextValue identifier;
    typedef double illuminance_measure;
    typedef double inductance_measure;
    typedef action_items ir_usage_item;
    typedef action_items_put ir_usage_item_put;
    typedef action_items_get ir_usage_item_get;
    typedef TextValue label;
    typedef double length_measure;
    typedef std::list<reversible_topology_item> list_of_reversible_topology_item;
    template <typename TList> class list_of_reversible_topology_itemSerializer : public AggrSerializerSelect<TList, reversible_topology_item> {};
    typedef std::list<representation_item> list_representation_item;
    template <typename TList> class list_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef double luminous_flux_measure;
    typedef double luminous_intensity_measure;
    typedef double magnetic_flux_density_measure;
    typedef double magnetic_flux_measure;
    typedef double mass_measure;
    typedef TextValue message;
    typedef IntValue minute_in_hour;
    typedef IntValue month_in_year_number;
    typedef length_measure non_negative_length_measure;
    typedef IntValue nonnegative_integer;
    typedef double numeric_measure;
    typedef double parameter_value;
    typedef std::list<point_and_vector_member> point_and_vector_members;
    template <typename TList> class point_and_vector_membersSerializer : public AggrSerializerSelect<TList, point_and_vector_member> {};
    typedef std::list<point_and_vector> point_path_members;
    template <typename TList> class point_path_membersSerializer : public AggrSerializerInstance<TList, point_and_vector> {};
    typedef nonnegative_integer positive_integer;
    typedef non_negative_length_measure positive_length_measure;
    typedef plane_angle_measure positive_plane_angle_measure;
    typedef double power_measure;
    typedef TextValue presentable_text;
    typedef double pressure_measure;
    typedef double radioactivity_measure;
    typedef double resistance_measure;
    typedef double second_in_minute;
    typedef std::list<reversible_topology_item> set_of_reversible_topology_item;
    template <typename TList> class set_of_reversible_topology_itemSerializer : public AggrSerializerSelect<TList, reversible_topology_item> {};
    typedef std::list<representation_item> set_representation_item;
    template <typename TList> class set_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef double solid_angle_measure;
    typedef TextValue text;
    typedef label text_alignment;
    typedef label text_delineation;
    typedef double thermodynamic_temperature_measure;
    typedef double time_measure;
    typedef IntValue u_direction_count;
    typedef IntValue v_direction_count;
    typedef double velocity_measure;
    typedef double volume_measure;
    typedef IntValue week_in_year_number;
    typedef IntValue year_number;

    class certification_item : public Select
    {
    public:
        certification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item(Select* outer) : Select(outer) {}

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        void put_make_from_usage_option(make_from_usage_option inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
    };


    class certification_item_get : public Select
    {
    public:
        certification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item_get(Select* outer) : Select(outer) {}
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class certification_item_put : public Select
    {
    public:
        certification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certification_item_put(Select* outer) : Select(outer) {}
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_make_from_usage_option(make_from_usage_option inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
    };


    class classified_item : public Select
    {
    public:
        classified_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classified_item(Select* outer) : Select(outer) {}

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class classified_item_get : public Select
    {
    public:
        classified_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classified_item_get(Select* outer) : Select(outer) {}
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class classified_item_put : public Select
    {
    public:
        classified_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classified_item_put(Select* outer) : Select(outer) {}
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class classification_item : public Select
    {
    public:
        classification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        void put_action_request_status(action_request_status inst);

        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        void put_address(address inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        applied_action_request_assignment get_applied_action_request_assignment();
        void put_applied_action_request_assignment(applied_action_request_assignment inst);

        bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        applied_approval_assignment get_applied_approval_assignment();
        void put_applied_approval_assignment(applied_approval_assignment inst);

        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        void put_applied_certification_assignment(applied_certification_assignment inst);

        bool is_applied_contract_assignment() { return IsADBEntity("applied_contract_assignment"); }
        applied_contract_assignment get_applied_contract_assignment();
        void put_applied_contract_assignment(applied_contract_assignment inst);

        bool is_applied_date_and_time_assignment() { return IsADBEntity("applied_date_and_time_assignment"); }
        applied_date_and_time_assignment get_applied_date_and_time_assignment();
        void put_applied_date_and_time_assignment(applied_date_and_time_assignment inst);

        bool is_applied_date_assignment() { return IsADBEntity("applied_date_assignment"); }
        applied_date_assignment get_applied_date_assignment();
        void put_applied_date_assignment(applied_date_assignment inst);

        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        void put_applied_document_reference(applied_document_reference inst);

        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);

        bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        applied_effectivity_assignment get_applied_effectivity_assignment();
        void put_applied_effectivity_assignment(applied_effectivity_assignment inst);

        bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        applied_event_occurrence_assignment get_applied_event_occurrence_assignment();
        void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst);

        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_calendar_date() { return IsADBEntity("calendar_date"); }
        calendar_date get_calendar_date();
        void put_calendar_date(calendar_date inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        void put_characterized_class(characterized_class inst);

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        classified_item _classified_item() { return classified_item(this); }

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        context_dependent_unit get_context_dependent_unit();
        void put_context_dependent_unit(context_dependent_unit inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_conversion_based_unit() { return IsADBEntity("conversion_based_unit"); }
        conversion_based_unit get_conversion_based_unit();
        void put_conversion_based_unit(conversion_based_unit inst);

        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        void put_date_and_time(date_and_time inst);

        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        void put_date_and_time_assignment(date_and_time_assignment inst);

        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        void put_date_assignment(date_assignment inst);

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        void put_directed_action(directed_action inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_identification_assignment() { return IsADBEntity("identification_assignment"); }
        identification_assignment get_identification_assignment();
        void put_identification_assignment(identification_assignment inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_language() { return IsADBEntity("language"); }
        language get_language();
        void put_language(language inst);

        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        void put_measure_representation_item(measure_representation_item inst);

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        multi_language_attribute_assignment get_multi_language_attribute_assignment();
        void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst);

        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        void put_named_unit(named_unit inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        void put_organizational_address(organizational_address inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        void put_person(person inst);

        bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        person_and_organization_address get_person_and_organization_address();
        void put_person_and_organization_address(person_and_organization_address inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        void put_product_definition_context(product_definition_context inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_context() { return IsADBEntity("representation_context"); }
        representation_context get_representation_context();
        void put_representation_context(representation_context inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class classification_item_get : public Select
    {
    public:
        classification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        applied_action_request_assignment get_applied_action_request_assignment();
        bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        applied_approval_assignment get_applied_approval_assignment();
        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        bool is_applied_contract_assignment() { return IsADBEntity("applied_contract_assignment"); }
        applied_contract_assignment get_applied_contract_assignment();
        bool is_applied_date_and_time_assignment() { return IsADBEntity("applied_date_and_time_assignment"); }
        applied_date_and_time_assignment get_applied_date_and_time_assignment();
        bool is_applied_date_assignment() { return IsADBEntity("applied_date_assignment"); }
        applied_date_assignment get_applied_date_assignment();
        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        applied_effectivity_assignment get_applied_effectivity_assignment();
        bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        applied_event_occurrence_assignment get_applied_event_occurrence_assignment();
        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_calendar_date() { return IsADBEntity("calendar_date"); }
        calendar_date get_calendar_date();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        classified_item_get get_classified_item() { return classified_item_get(this); }
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        context_dependent_unit get_context_dependent_unit();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_conversion_based_unit() { return IsADBEntity("conversion_based_unit"); }
        conversion_based_unit get_conversion_based_unit();
        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_identification_assignment() { return IsADBEntity("identification_assignment"); }
        identification_assignment get_identification_assignment();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_language() { return IsADBEntity("language"); }
        language get_language();
        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        multi_language_attribute_assignment get_multi_language_attribute_assignment();
        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        person_and_organization_address get_person_and_organization_address();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_context() { return IsADBEntity("representation_context"); }
        representation_context get_representation_context();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class classification_item_put : public Select
    {
    public:
        classification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        classification_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_action_request_status(action_request_status inst);
        void put_address(address inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_action_request_assignment(applied_action_request_assignment inst);
        void put_applied_approval_assignment(applied_approval_assignment inst);
        void put_applied_certification_assignment(applied_certification_assignment inst);
        void put_applied_contract_assignment(applied_contract_assignment inst);
        void put_applied_date_and_time_assignment(applied_date_and_time_assignment inst);
        void put_applied_date_assignment(applied_date_assignment inst);
        void put_applied_document_reference(applied_document_reference inst);
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);
        void put_applied_effectivity_assignment(applied_effectivity_assignment inst);
        void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst);
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval(approval inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_approval_relationship(approval_relationship inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_calendar_date(calendar_date inst);
        void put_certification(certification inst);
        void put_characterized_class(characterized_class inst);
        void put_characterized_object(characterized_object inst);
        void put_class_(class_ inst);
        classified_item_put put_classified_item() { return classified_item_put(this); }
        void put_configuration_item(configuration_item inst);
        void put_context_dependent_unit(context_dependent_unit inst);
        void put_contract(contract inst);
        void put_conversion_based_unit(conversion_based_unit inst);
        void put_date_and_time(date_and_time inst);
        void put_date_and_time_assignment(date_and_time_assignment inst);
        void put_date_assignment(date_assignment inst);
        void put_derived_unit(derived_unit inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_directed_action(directed_action inst);
        void put_document_file(document_file inst);
        void put_document_relationship(document_relationship inst);
        void put_effectivity(effectivity inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_group(group inst);
        void put_identification_assignment(identification_assignment inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_language(language inst);
        void put_measure_representation_item(measure_representation_item inst);
        void put_measure_with_unit(measure_with_unit inst);
        void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst);
        void put_named_unit(named_unit inst);
        void put_organization(organization inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_address(organizational_address inst);
        void put_organizational_project(organizational_project inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_person(person inst);
        void put_person_and_organization_address(person_and_organization_address inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_context(product_definition_context inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_representation(property_definition_representation inst);
        void put_representation(representation inst);
        void put_representation_context(representation_context inst);
        void put_representation_item(representation_item inst);
        void put_security_classification(security_classification inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_usage_association(usage_association inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class document_reference_item : public Select
    {
    public:
        document_reference_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item(Select* outer) : Select(outer) {}

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        void put_characterized_class(characterized_class inst);

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        void put_dimensional_size(dimensional_size inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        externally_defined_dimension_definition get_externally_defined_dimension_definition();
        void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst);

        bool is_externally_defined_item() { return IsADBEntity("externally_defined_item"); }
        externally_defined_item get_externally_defined_item();
        void put_externally_defined_item(externally_defined_item inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        void put_measure_representation_item(measure_representation_item inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        void put_product_category(product_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_rule_set() { return IsADBEntity("rule_set"); }
        rule_set get_rule_set();
        void put_rule_set(rule_set inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class document_reference_item_get : public Select
    {
    public:
        document_reference_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item_get(Select* outer) : Select(outer) {}
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        externally_defined_dimension_definition get_externally_defined_dimension_definition();
        bool is_externally_defined_item() { return IsADBEntity("externally_defined_item"); }
        externally_defined_item get_externally_defined_item();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_rule_set() { return IsADBEntity("rule_set"); }
        rule_set get_rule_set();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class document_reference_item_put : public Select
    {
    public:
        document_reference_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_reference_item_put(Select* outer) : Select(outer) {}
        void put_action_method(action_method inst);
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_characterized_class(characterized_class inst);
        void put_characterized_object(characterized_object inst);
        void put_configuration_item(configuration_item inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_dimensional_size(dimensional_size inst);
        void put_executed_action(executed_action inst);
        void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst);
        void put_externally_defined_item(externally_defined_item inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_material_designation(material_designation inst);
        void put_measure_representation_item(measure_representation_item inst);
        void put_product(product inst);
        void put_product_category(product_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_representation(representation inst);
        void put_representation_item(representation_item inst);
        void put_rule_set(rule_set inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_usage_association(usage_association inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class identification_item : public Select
    {
    public:
        identification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item(Select* outer) : Select(outer) {}

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        void put_characterized_class(characterized_class inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        void put_dimensional_size(dimensional_size inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        void put_material_designation(material_designation inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        void put_product_category(product_category inst);

        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        void put_product_class(product_class inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_identification() { return IsADBEntity("product_identification"); }
        product_identification get_product_identification();
        void put_product_identification(product_identification inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_rule_set() { return IsADBEntity("rule_set"); }
        rule_set get_rule_set();
        void put_rule_set(rule_set inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        void put_security_classification_level(security_classification_level inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);
    };


    class identification_item_get : public Select
    {
    public:
        identification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item_get(Select* outer) : Select(outer) {}
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        characterized_class get_characterized_class();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_material_designation() { return IsADBEntity("material_designation"); }
        material_designation get_material_designation();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_identification() { return IsADBEntity("product_identification"); }
        product_identification get_product_identification();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_rule_set() { return IsADBEntity("rule_set"); }
        rule_set get_rule_set();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        security_classification_level get_security_classification_level();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class identification_item_put : public Select
    {
    public:
        identification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        identification_item_put(Select* outer) : Select(outer) {}
        void put_approval_status(approval_status inst);
        void put_characterized_class(characterized_class inst);
        void put_class_(class_ inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_dimensional_size(dimensional_size inst);
        void put_document_file(document_file inst);
        void put_general_property(general_property inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_material_designation(material_designation inst);
        void put_organization(organization inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product(product inst);
        void put_product_category(product_category inst);
        void put_product_class(product_class inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_identification(product_identification inst);
        void put_representation(representation inst);
        void put_rule_set(rule_set inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_level(security_classification_level inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_shape_representation(shape_representation inst);
        void put_usage_association(usage_association inst);
    };


    class requirement_assigned_item : public Select
    {
    public:
        requirement_assigned_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_assigned_item(Select* outer) : Select(outer) {}

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        void put_product_class(product_class inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);
    };


    class requirement_assigned_item_get : public Select
    {
    public:
        requirement_assigned_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_assigned_item_get(Select* outer) : Select(outer) {}
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class requirement_assigned_item_put : public Select
    {
    public:
        requirement_assigned_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_assigned_item_put(Select* outer) : Select(outer) {}
        void put_configuration_item(configuration_item inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_product(product inst);
        void put_product_class(product_class inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_representation(representation inst);
        void put_shape_aspect(shape_aspect inst);
    };


    class action_items : public Select
    {
    public:
        action_items(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_items(Select* outer) : Select(outer) {}

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        certification_item _certification_item() { return certification_item(this); }

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        classification_item _classification_item() { return classification_item(this); }

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        document_reference_item _document_reference_item() { return document_reference_item(this); }

        identification_item _identification_item() { return identification_item(this); }

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        requirement_assigned_item _requirement_assigned_item() { return requirement_assigned_item(this); }
    };


    class action_items_get : public Select
    {
    public:
        action_items_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_items_get(Select* outer) : Select(outer) {}
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        certification_item_get get_certification_item() { return certification_item_get(this); }
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        classification_item_get get_classification_item() { return classification_item_get(this); }
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        document_reference_item_get get_document_reference_item() { return document_reference_item_get(this); }
        identification_item_get get_identification_item() { return identification_item_get(this); }
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        requirement_assigned_item_get get_requirement_assigned_item() { return requirement_assigned_item_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class action_items_put : public Select
    {
    public:
        action_items_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_items_put(Select* outer) : Select(outer) {}
        void put_action_directive(action_directive inst);
        certification_item_put put_certification_item() { return certification_item_put(this); }
        void put_characterized_object(characterized_object inst);
        classification_item_put put_classification_item() { return classification_item_put(this); }
        void put_configuration_effectivity(configuration_effectivity inst);
        document_reference_item_put put_document_reference_item() { return document_reference_item_put(this); }
        identification_item_put put_identification_item() { return identification_item_put(this); }
        void put_organization(organization inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        requirement_assigned_item_put put_requirement_assigned_item() { return requirement_assigned_item_put(this); }
    };


    class action_method_items : public Select
    {
    public:
        action_method_items(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_method_items(Select* outer) : Select(outer) {}

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class action_method_items_get : public Select
    {
    public:
        action_method_items_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_method_items_get(Select* outer) : Select(outer) {}
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class action_method_items_put : public Select
    {
    public:
        action_method_items_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_method_items_put(Select* outer) : Select(outer) {}
        void put_product(product inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class action_request_item : public Select
    {
    public:
        action_request_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class action_request_item_get : public Select
    {
    public:
        action_request_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class action_request_item_put : public Select
    {
    public:
        action_request_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        action_request_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class angle_direction_reference_select : public Select
    {
    public:
        angle_direction_reference_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_select(Select* outer) : Select(outer) {}

        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();
        void put_direction(direction inst);

        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        void put_curve(curve inst);

        bool is_point_path() { return IsADBEntity("point_path"); }
        point_path get_point_path();
        void put_point_path(point_path inst);
    };


    class angle_direction_reference_select_get : public Select
    {
    public:
        angle_direction_reference_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_select_get(Select* outer) : Select(outer) {}
        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();
        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        bool is_point_path() { return IsADBEntity("point_path"); }
        point_path get_point_path();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class angle_direction_reference_select_put : public Select
    {
    public:
        angle_direction_reference_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_select_put(Select* outer) : Select(outer) {}
        void put_direction(direction inst);
        void put_curve(curve inst);
        void put_point_path(point_path inst);
    };


    class angle_direction_reference_with_a2p3d_select : public Select
    {
    public:
        angle_direction_reference_with_a2p3d_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_with_a2p3d_select(Select* outer) : Select(outer) {}

        angle_direction_reference_select _angle_direction_reference_select() { return angle_direction_reference_select(this); }

        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class angle_direction_reference_with_a2p3d_select_get : public Select
    {
    public:
        angle_direction_reference_with_a2p3d_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_with_a2p3d_select_get(Select* outer) : Select(outer) {}
        angle_direction_reference_select_get get_angle_direction_reference_select() { return angle_direction_reference_select_get(this); }
        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class angle_direction_reference_with_a2p3d_select_put : public Select
    {
    public:
        angle_direction_reference_with_a2p3d_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        angle_direction_reference_with_a2p3d_select_put(Select* outer) : Select(outer) {}
        angle_direction_reference_select_put put_angle_direction_reference_select() { return angle_direction_reference_select_put(this); }
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class annotation_plane_element : public Select
    {
    public:
        annotation_plane_element(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element(Select* outer) : Select(outer) {}

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);
    };


    class annotation_plane_element_get : public Select
    {
    public:
        annotation_plane_element_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element_get(Select* outer) : Select(outer) {}
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_plane_element_put : public Select
    {
    public:
        annotation_plane_element_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_plane_element_put(Select* outer) : Select(outer) {}
        void put_draughting_callout(draughting_callout inst);
        void put_styled_item(styled_item inst);
    };


    class annotation_representation_select : public Select
    {
    public:
        annotation_representation_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_representation_select(Select* outer) : Select(outer) {}

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        void put_presentation_view(presentation_view inst);

        bool is_symbol_representation() { return IsADBEntity("symbol_representation"); }
        symbol_representation get_symbol_representation();
        void put_symbol_representation(symbol_representation inst);
    };


    class annotation_representation_select_get : public Select
    {
    public:
        annotation_representation_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_representation_select_get(Select* outer) : Select(outer) {}
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        bool is_symbol_representation() { return IsADBEntity("symbol_representation"); }
        symbol_representation get_symbol_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_representation_select_put : public Select
    {
    public:
        annotation_representation_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_representation_select_put(Select* outer) : Select(outer) {}
        void put_presentation_area(presentation_area inst);
        void put_presentation_view(presentation_view inst);
        void put_symbol_representation(symbol_representation inst);
    };


    class annotation_symbol_occurrence_item : public Select
    {
    public:
        annotation_symbol_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item(Select* outer) : Select(outer) {}

        bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        annotation_symbol get_annotation_symbol();
        void put_annotation_symbol(annotation_symbol inst);

        bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        defined_symbol get_defined_symbol();
        void put_defined_symbol(defined_symbol inst);
    };


    class annotation_symbol_occurrence_item_get : public Select
    {
    public:
        annotation_symbol_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        annotation_symbol get_annotation_symbol();
        bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        defined_symbol get_defined_symbol();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_symbol_occurrence_item_put : public Select
    {
    public:
        annotation_symbol_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_symbol_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_annotation_symbol(annotation_symbol inst);
        void put_defined_symbol(defined_symbol inst);
    };


    class annotation_text_occurrence_item : public Select
    {
    public:
        annotation_text_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item(Select* outer) : Select(outer) {}

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);
    };


    class annotation_text_occurrence_item_get : public Select
    {
    public:
        annotation_text_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class annotation_text_occurrence_item_put : public Select
    {
    public:
        annotation_text_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        annotation_text_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_text_literal(text_literal inst);
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_composite_text(composite_text inst);
    };


    class approval_item : public Select
    {
    public:
        approval_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_usage_right() { return IsADBEntity("applied_usage_right"); }
        applied_usage_right get_applied_usage_right();
        void put_applied_usage_right(applied_usage_right inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        void put_date(date inst);

        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        void put_directed_action(directed_action inst);

        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        void put_document(document inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_requirement_assignment() { return IsADBEntity("requirement_assignment"); }
        requirement_assignment get_requirement_assignment();
        void put_requirement_assignment(requirement_assignment inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class approval_item_get : public Select
    {
    public:
        approval_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_usage_right() { return IsADBEntity("applied_usage_right"); }
        applied_usage_right get_applied_usage_right();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_requirement_assignment() { return IsADBEntity("requirement_assignment"); }
        requirement_assignment get_requirement_assignment();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class approval_item_put : public Select
    {
    public:
        approval_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approval_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_usage_right(applied_usage_right inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_date(date inst);
        void put_directed_action(directed_action inst);
        void put_document(document inst);
        void put_document_file(document_file inst);
        void put_effectivity(effectivity inst);
        void put_executed_action(executed_action inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_information_usage_right(information_usage_right inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_representation(representation inst);
        void put_requirement_assignment(requirement_assignment inst);
        void put_security_classification(security_classification inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class approved_item : public Select
    {
    public:
        approved_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approved_item(Select* outer) : Select(outer) {}

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        void put_change(change inst);

        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        void put_change_request(change_request inst);

        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        void put_configuration_effectivity(configuration_effectivity inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        void put_start_request(start_request inst);

        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();
        void put_start_work(start_work inst);
    };


    class approved_item_get : public Select
    {
    public:
        approved_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approved_item_get(Select* outer) : Select(outer) {}
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        configuration_effectivity get_configuration_effectivity();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class approved_item_put : public Select
    {
    public:
        approved_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        approved_item_put(Select* outer) : Select(outer) {}
        void put_certification(certification inst);
        void put_change(change inst);
        void put_change_request(change_request inst);
        void put_configuration_effectivity(configuration_effectivity inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_product(product inst);
        void put_security_classification(security_classification inst);
        void put_start_request(start_request inst);
        void put_start_work(start_work inst);
    };


    class area_or_view : public Select
    {
    public:
        area_or_view(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view(Select* outer) : Select(outer) {}

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        void put_presentation_view(presentation_view inst);
    };


    class area_or_view_get : public Select
    {
    public:
        area_or_view_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view_get(Select* outer) : Select(outer) {}
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class area_or_view_put : public Select
    {
    public:
        area_or_view_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        area_or_view_put(Select* outer) : Select(outer) {}
        void put_presentation_area(presentation_area inst);
        void put_presentation_view(presentation_view inst);
    };


    class attribute_classification_item : public Select
    {
    public:
        attribute_classification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_classification_item(Select* outer) : Select(outer) {}

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);

        bool is_action_property_representation() { return IsADBEntity("action_property_representation"); }
        action_property_representation get_action_property_representation();
        void put_action_property_representation(action_property_representation inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        void put_action_request_status(action_request_status inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        applied_action_request_assignment get_applied_action_request_assignment();
        void put_applied_action_request_assignment(applied_action_request_assignment inst);

        bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        applied_approval_assignment get_applied_approval_assignment();
        void put_applied_approval_assignment(applied_approval_assignment inst);

        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        void put_applied_certification_assignment(applied_certification_assignment inst);

        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        void put_applied_document_reference(applied_document_reference inst);

        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);

        bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        applied_effectivity_assignment get_applied_effectivity_assignment();
        void put_applied_effectivity_assignment(applied_effectivity_assignment inst);

        bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        applied_event_occurrence_assignment get_applied_event_occurrence_assignment();
        void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst);

        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        context_dependent_unit get_context_dependent_unit();
        void put_context_dependent_unit(context_dependent_unit inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        void put_date_and_time_assignment(date_and_time_assignment inst);

        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        void put_date_assignment(date_assignment inst);

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_event_occurrence_relationship() { return IsADBEntity("event_occurrence_relationship"); }
        event_occurrence_relationship get_event_occurrence_relationship();
        void put_event_occurrence_relationship(event_occurrence_relationship inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_language() { return IsADBEntity("language"); }
        language get_language();
        void put_language(language inst);

        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        void put_measure_representation_item(measure_representation_item inst);

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        void put_named_unit(named_unit inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        void put_organizational_address(organizational_address inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        person_and_organization_address get_person_and_organization_address();
        void put_person_and_organization_address(person_and_organization_address inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        void put_product_category(product_category inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_context() { return IsADBEntity("product_concept_context"); }
        product_concept_context get_product_concept_context();
        void put_product_concept_context(product_concept_context inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        void put_product_definition_context(product_definition_context inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_context() { return IsADBEntity("representation_context"); }
        representation_context get_representation_context();
        void put_representation_context(representation_context inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_time_interval_relationship() { return IsADBEntity("time_interval_relationship"); }
        time_interval_relationship get_time_interval_relationship();
        void put_time_interval_relationship(time_interval_relationship inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class attribute_classification_item_get : public Select
    {
    public:
        attribute_classification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_classification_item_get(Select* outer) : Select(outer) {}
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        bool is_action_property_representation() { return IsADBEntity("action_property_representation"); }
        action_property_representation get_action_property_representation();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        applied_action_request_assignment get_applied_action_request_assignment();
        bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        applied_approval_assignment get_applied_approval_assignment();
        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        applied_effectivity_assignment get_applied_effectivity_assignment();
        bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        applied_event_occurrence_assignment get_applied_event_occurrence_assignment();
        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        context_dependent_unit get_context_dependent_unit();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_event_occurrence_relationship() { return IsADBEntity("event_occurrence_relationship"); }
        event_occurrence_relationship get_event_occurrence_relationship();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_language() { return IsADBEntity("language"); }
        language get_language();
        bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        measure_representation_item get_measure_representation_item();
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        person_and_organization_address get_person_and_organization_address();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_context() { return IsADBEntity("product_concept_context"); }
        product_concept_context get_product_concept_context();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_context() { return IsADBEntity("representation_context"); }
        representation_context get_representation_context();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_time_interval_relationship() { return IsADBEntity("time_interval_relationship"); }
        time_interval_relationship get_time_interval_relationship();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class attribute_classification_item_put : public Select
    {
    public:
        attribute_classification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_classification_item_put(Select* outer) : Select(outer) {}
        void put_action_directive(action_directive inst);
        void put_action_method(action_method inst);
        void put_action_property(action_property inst);
        void put_action_property_representation(action_property_representation inst);
        void put_action_relationship(action_relationship inst);
        void put_action_request_solution(action_request_solution inst);
        void put_action_request_status(action_request_status inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_action_request_assignment(applied_action_request_assignment inst);
        void put_applied_approval_assignment(applied_approval_assignment inst);
        void put_applied_certification_assignment(applied_certification_assignment inst);
        void put_applied_document_reference(applied_document_reference inst);
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);
        void put_applied_effectivity_assignment(applied_effectivity_assignment inst);
        void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst);
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval(approval inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_approval_relationship(approval_relationship inst);
        void put_approval_status(approval_status inst);
        void put_certification(certification inst);
        void put_context_dependent_unit(context_dependent_unit inst);
        void put_contract(contract inst);
        void put_date_and_time_assignment(date_and_time_assignment inst);
        void put_date_assignment(date_assignment inst);
        void put_derived_unit(derived_unit inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_file(document_file inst);
        void put_document_relationship(document_relationship inst);
        void put_effectivity(effectivity inst);
        void put_event_occurrence_relationship(event_occurrence_relationship inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_language(language inst);
        void put_measure_representation_item(measure_representation_item inst);
        void put_measure_with_unit(measure_with_unit inst);
        void put_named_unit(named_unit inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organizational_address(organizational_address inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_person_and_organization(person_and_organization inst);
        void put_person_and_organization_address(person_and_organization_address inst);
        void put_product(product inst);
        void put_product_category(product_category inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_context(product_concept_context inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_context(product_definition_context inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_property_definition_representation(property_definition_representation inst);
        void put_representation(representation inst);
        void put_representation_context(representation_context inst);
        void put_representation_item(representation_item inst);
        void put_security_classification(security_classification inst);
        void put_time_interval_relationship(time_interval_relationship inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_usage_association(usage_association inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class attribute_language_item : public Select
    {
    public:
        attribute_language_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item(Select* outer) : Select(outer) {}

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        void put_applied_certification_assignment(applied_certification_assignment inst);

        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        void put_applied_document_reference(applied_document_reference inst);

        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);

        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        void put_attribute_value_assignment(attribute_value_assignment inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_certification_type() { return IsADBEntity("certification_type"); }
        certification_type get_certification_type();
        void put_certification_type(certification_type inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        document_usage_role get_document_usage_role();
        void put_document_usage_role(document_usage_role inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        void put_effectivity_relationship(effectivity_relationship inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        void put_geometric_tolerance(geometric_tolerance inst);

        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        void put_identification_role(identification_role inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        void put_make_from_usage_option(make_from_usage_option inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        multi_language_attribute_assignment get_multi_language_attribute_assignment();
        void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst);

        bool is_object_role() { return IsADBEntity("object_role"); }
        object_role get_object_role();
        void put_object_role(object_role inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        organizational_project_role get_organizational_project_role();
        void put_organizational_project_role(organizational_project_role inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        void put_product_concept_relationship(product_concept_relationship inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        void put_product_definition_context(product_definition_context inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        void put_product_definition_shape(product_definition_shape inst);

        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        void put_product_related_product_category(product_related_product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        void put_security_classification_assignment(security_classification_assignment inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        void put_time_interval_role(time_interval_role inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        void put_uncertainty_qualifier(uncertainty_qualifier inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);
    };


    class attribute_language_item_get : public Select
    {
    public:
        attribute_language_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item_get(Select* outer) : Select(outer) {}
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_certification_type() { return IsADBEntity("certification_type"); }
        certification_type get_certification_type();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        document_usage_role get_document_usage_role();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        multi_language_attribute_assignment get_multi_language_attribute_assignment();
        bool is_object_role() { return IsADBEntity("object_role"); }
        object_role get_object_role();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        organizational_project_role get_organizational_project_role();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class attribute_language_item_put : public Select
    {
    public:
        attribute_language_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_language_item_put(Select* outer) : Select(outer) {}
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_application_context(application_context inst);
        void put_applied_certification_assignment(applied_certification_assignment inst);
        void put_applied_document_reference(applied_document_reference inst);
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval(approval inst);
        void put_approval_relationship(approval_relationship inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_attribute_value_assignment(attribute_value_assignment inst);
        void put_certification(certification inst);
        void put_certification_type(certification_type inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_relationship(document_relationship inst);
        void put_document_usage_role(document_usage_role inst);
        void put_effectivity(effectivity inst);
        void put_effectivity_relationship(effectivity_relationship inst);
        void put_event_occurrence(event_occurrence inst);
        void put_external_source(external_source inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_geometric_tolerance(geometric_tolerance inst);
        void put_identification_role(identification_role inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_make_from_usage_option(make_from_usage_option inst);
        void put_mapped_item(mapped_item inst);
        void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst);
        void put_object_role(object_role inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organization_role(organization_role inst);
        void put_organizational_project(organizational_project inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_organizational_project_role(organizational_project_role inst);
        void put_person_and_organization(person_and_organization inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_relationship(product_concept_relationship inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_context(product_definition_context inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_shape(product_definition_shape inst);
        void put_product_related_product_category(product_related_product_category inst);
        void put_property_definition(property_definition inst);
        void put_representation(representation inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_assignment(security_classification_assignment inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_shape_representation(shape_representation inst);
        void put_time_interval_role(time_interval_role inst);
        void put_topological_representation_item(topological_representation_item inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
        void put_usage_association(usage_association inst);
    };


    class attribute_type : public Select
    {
    public:
        attribute_type(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type(Select* outer) : Select(outer) {}

        bool is_label() { return IsADBType("LABEL"); }
        label get_label() { return getTextValue("LABEL", sdaiSTRING); }
        void put_label(label value) { putTextValue("LABEL", sdaiSTRING, value); }

        bool is_text() { return IsADBType("TEXT"); }
        text get_text() { return getTextValue("TEXT", sdaiSTRING); }
        void put_text(text value) { putTextValue("TEXT", sdaiSTRING, value); }
    };


    class attribute_type_get : public Select
    {
    public:
        attribute_type_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type_get(Select* outer) : Select(outer) {}
        bool is_label() { return IsADBType("LABEL"); }
        label get_label() { return getTextValue("LABEL", sdaiSTRING); }
        bool is_text() { return IsADBType("TEXT"); }
        text get_text() { return getTextValue("TEXT", sdaiSTRING); }

        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class attribute_type_put : public Select
    {
    public:
        attribute_type_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        attribute_type_put(Select* outer) : Select(outer) {}
        void put_label(label value) { putTextValue("LABEL", sdaiSTRING, value); }
        void put_text(text value) { putTextValue("TEXT", sdaiSTRING, value); }
    };


    class axis2_placement : public Select
    {
    public:
        axis2_placement(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement(Select* outer) : Select(outer) {}

        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();
        void put_axis2_placement_2d(axis2_placement_2d inst);

        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class axis2_placement_get : public Select
    {
    public:
        axis2_placement_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement_get(Select* outer) : Select(outer) {}
        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();
        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class axis2_placement_put : public Select
    {
    public:
        axis2_placement_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        axis2_placement_put(Select* outer) : Select(outer) {}
        void put_axis2_placement_2d(axis2_placement_2d inst);
        void put_axis2_placement_3d(axis2_placement_3d inst);
    };


    class csg_primitive : public Select
    {
    public:
        csg_primitive(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive(Select* outer) : Select(outer) {}

        bool is_sphere() { return IsADBEntity("sphere"); }
        sphere get_sphere();
        void put_sphere(sphere inst);

        bool is_block() { return IsADBEntity("block"); }
        block get_block();
        void put_block(block inst);

        bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        right_angular_wedge get_right_angular_wedge();
        void put_right_angular_wedge(right_angular_wedge inst);

        bool is_torus() { return IsADBEntity("torus"); }
        torus get_torus();
        void put_torus(torus inst);

        bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        right_circular_cone get_right_circular_cone();
        void put_right_circular_cone(right_circular_cone inst);

        bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        right_circular_cylinder get_right_circular_cylinder();
        void put_right_circular_cylinder(right_circular_cylinder inst);
    };


    class csg_primitive_get : public Select
    {
    public:
        csg_primitive_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive_get(Select* outer) : Select(outer) {}
        bool is_sphere() { return IsADBEntity("sphere"); }
        sphere get_sphere();
        bool is_block() { return IsADBEntity("block"); }
        block get_block();
        bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        right_angular_wedge get_right_angular_wedge();
        bool is_torus() { return IsADBEntity("torus"); }
        torus get_torus();
        bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        right_circular_cone get_right_circular_cone();
        bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        right_circular_cylinder get_right_circular_cylinder();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class csg_primitive_put : public Select
    {
    public:
        csg_primitive_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_primitive_put(Select* outer) : Select(outer) {}
        void put_sphere(sphere inst);
        void put_block(block inst);
        void put_right_angular_wedge(right_angular_wedge inst);
        void put_torus(torus inst);
        void put_right_circular_cone(right_circular_cone inst);
        void put_right_circular_cylinder(right_circular_cylinder inst);
    };


    class base_solid_select : public Select
    {
    public:
        base_solid_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        base_solid_select(Select* outer) : Select(outer) {}

        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        void put_solid_model(solid_model inst);

        csg_primitive _csg_primitive() { return csg_primitive(this); }

        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        void put_boolean_result(boolean_result inst);
    };


    class base_solid_select_get : public Select
    {
    public:
        base_solid_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        base_solid_select_get(Select* outer) : Select(outer) {}
        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        csg_primitive_get get_csg_primitive() { return csg_primitive_get(this); }
        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class base_solid_select_put : public Select
    {
    public:
        base_solid_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        base_solid_select_put(Select* outer) : Select(outer) {}
        void put_solid_model(solid_model inst);
        csg_primitive_put put_csg_primitive() { return csg_primitive_put(this); }
        void put_boolean_result(boolean_result inst);
    };


    class blend_end_condition_select : public Select
    {
    public:
        blend_end_condition_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        blend_end_condition_select(Select* outer) : Select(outer) {}

        bool is_point_on_curve() { return IsADBEntity("point_on_curve"); }
        point_on_curve get_point_on_curve();
        void put_point_on_curve(point_on_curve inst);

        bool is_edge_curve() { return IsADBEntity("edge_curve"); }
        edge_curve get_edge_curve();
        void put_edge_curve(edge_curve inst);

        bool is_vertex() { return IsADBEntity("vertex"); }
        vertex get_vertex();
        void put_vertex(vertex inst);
    };


    class blend_end_condition_select_get : public Select
    {
    public:
        blend_end_condition_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        blend_end_condition_select_get(Select* outer) : Select(outer) {}
        bool is_point_on_curve() { return IsADBEntity("point_on_curve"); }
        point_on_curve get_point_on_curve();
        bool is_edge_curve() { return IsADBEntity("edge_curve"); }
        edge_curve get_edge_curve();
        bool is_vertex() { return IsADBEntity("vertex"); }
        vertex get_vertex();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class blend_end_condition_select_put : public Select
    {
    public:
        blend_end_condition_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        blend_end_condition_select_put(Select* outer) : Select(outer) {}
        void put_point_on_curve(point_on_curve inst);
        void put_edge_curve(edge_curve inst);
        void put_vertex(vertex inst);
    };


    class boolean_operand : public Select
    {
    public:
        boolean_operand(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand(Select* outer) : Select(outer) {}

        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        void put_solid_model(solid_model inst);

        bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        half_space_solid get_half_space_solid();
        void put_half_space_solid(half_space_solid inst);

        csg_primitive _csg_primitive() { return csg_primitive(this); }

        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        void put_boolean_result(boolean_result inst);
    };


    class boolean_operand_get : public Select
    {
    public:
        boolean_operand_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand_get(Select* outer) : Select(outer) {}
        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        half_space_solid get_half_space_solid();
        csg_primitive_get get_csg_primitive() { return csg_primitive_get(this); }
        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class boolean_operand_put : public Select
    {
    public:
        boolean_operand_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        boolean_operand_put(Select* outer) : Select(outer) {}
        void put_solid_model(solid_model inst);
        void put_half_space_solid(half_space_solid inst);
        csg_primitive_put put_csg_primitive() { return csg_primitive_put(this); }
        void put_boolean_result(boolean_result inst);
    };


    class box_characteristic_select : public Select
    {
    public:
        box_characteristic_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select(Select* outer) : Select(outer) {}

        bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        Nullable<box_height> get_box_height() { return getSimpleValue<box_height>("BOX_HEIGHT", sdaiREAL); }
        void put_box_height(box_height value) { putSimpleValue("BOX_HEIGHT", sdaiREAL, value); }

        bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        Nullable<box_width> get_box_width() { return getSimpleValue<box_width>("BOX_WIDTH", sdaiREAL); }
        void put_box_width(box_width value) { putSimpleValue("BOX_WIDTH", sdaiREAL, value); }

        bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        Nullable<box_slant_angle> get_box_slant_angle() { return getSimpleValue<box_slant_angle>("BOX_SLANT_ANGLE", sdaiREAL); }
        void put_box_slant_angle(box_slant_angle value) { putSimpleValue("BOX_SLANT_ANGLE", sdaiREAL, value); }

        bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        Nullable<box_rotate_angle> get_box_rotate_angle() { return getSimpleValue<box_rotate_angle>("BOX_ROTATE_ANGLE", sdaiREAL); }
        void put_box_rotate_angle(box_rotate_angle value) { putSimpleValue("BOX_ROTATE_ANGLE", sdaiREAL, value); }
    };


    class box_characteristic_select_get : public Select
    {
    public:
        box_characteristic_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select_get(Select* outer) : Select(outer) {}
        bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        Nullable<box_height> get_box_height() { return getSimpleValue<box_height>("BOX_HEIGHT", sdaiREAL); }
        bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        Nullable<box_width> get_box_width() { return getSimpleValue<box_width>("BOX_WIDTH", sdaiREAL); }
        bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        Nullable<box_slant_angle> get_box_slant_angle() { return getSimpleValue<box_slant_angle>("BOX_SLANT_ANGLE", sdaiREAL); }
        bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        Nullable<box_rotate_angle> get_box_rotate_angle() { return getSimpleValue<box_rotate_angle>("BOX_ROTATE_ANGLE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class box_characteristic_select_put : public Select
    {
    public:
        box_characteristic_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        box_characteristic_select_put(Select* outer) : Select(outer) {}
        void put_box_height(box_height value) { putSimpleValue("BOX_HEIGHT", sdaiREAL, value); }
        void put_box_width(box_width value) { putSimpleValue("BOX_WIDTH", sdaiREAL, value); }
        void put_box_slant_angle(box_slant_angle value) { putSimpleValue("BOX_SLANT_ANGLE", sdaiREAL, value); }
        void put_box_rotate_angle(box_rotate_angle value) { putSimpleValue("BOX_ROTATE_ANGLE", sdaiREAL, value); }
    };


    class camera_model_d3_multi_clipping_interection_select : public Select
    {
    public:
        camera_model_d3_multi_clipping_interection_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_interection_select(Select* outer) : Select(outer) {}

        bool is_camera_model_d3_multi_clipping_union() { return IsADBEntity("camera_model_d3_multi_clipping_union"); }
        camera_model_d3_multi_clipping_union get_camera_model_d3_multi_clipping_union();
        void put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst);

        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        void put_plane(plane inst);
    };


    class camera_model_d3_multi_clipping_interection_select_get : public Select
    {
    public:
        camera_model_d3_multi_clipping_interection_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_interection_select_get(Select* outer) : Select(outer) {}
        bool is_camera_model_d3_multi_clipping_union() { return IsADBEntity("camera_model_d3_multi_clipping_union"); }
        camera_model_d3_multi_clipping_union get_camera_model_d3_multi_clipping_union();
        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class camera_model_d3_multi_clipping_interection_select_put : public Select
    {
    public:
        camera_model_d3_multi_clipping_interection_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_interection_select_put(Select* outer) : Select(outer) {}
        void put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst);
        void put_plane(plane inst);
    };


    class camera_model_d3_multi_clipping_union_select : public Select
    {
    public:
        camera_model_d3_multi_clipping_union_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_union_select(Select* outer) : Select(outer) {}

        bool is_camera_model_d3_multi_clipping_intersection() { return IsADBEntity("camera_model_d3_multi_clipping_intersection"); }
        camera_model_d3_multi_clipping_intersection get_camera_model_d3_multi_clipping_intersection();
        void put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst);

        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        void put_plane(plane inst);
    };


    class camera_model_d3_multi_clipping_union_select_get : public Select
    {
    public:
        camera_model_d3_multi_clipping_union_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_union_select_get(Select* outer) : Select(outer) {}
        bool is_camera_model_d3_multi_clipping_intersection() { return IsADBEntity("camera_model_d3_multi_clipping_intersection"); }
        camera_model_d3_multi_clipping_intersection get_camera_model_d3_multi_clipping_intersection();
        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class camera_model_d3_multi_clipping_union_select_put : public Select
    {
    public:
        camera_model_d3_multi_clipping_union_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        camera_model_d3_multi_clipping_union_select_put(Select* outer) : Select(outer) {}
        void put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst);
        void put_plane(plane inst);
    };


    class category_usage_item : public Select
    {
    public:
        category_usage_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item(Select* outer) : Select(outer) {}

        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();
        void put_product_class(product_class inst);
    };


    class category_usage_item_get : public Select
    {
    public:
        category_usage_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item_get(Select* outer) : Select(outer) {}
        bool is_product_class() { return IsADBEntity("product_class"); }
        product_class get_product_class();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class category_usage_item_put : public Select
    {
    public:
        category_usage_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        category_usage_item_put(Select* outer) : Select(outer) {}
        void put_product_class(product_class inst);
    };


    class cc_classified_item : public Select
    {
    public:
        cc_classified_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_classified_item(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class cc_classified_item_get : public Select
    {
    public:
        cc_classified_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_classified_item_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class cc_classified_item_put : public Select
    {
    public:
        cc_classified_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_classified_item_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class cc_person_organization_item : public Select
    {
    public:
        cc_person_organization_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_person_organization_item(Select* outer) : Select(outer) {}

        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        void put_change(change inst);

        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        void put_change_request(change_request inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        void put_start_request(start_request inst);

        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();
        void put_start_work(start_work inst);
    };


    class cc_person_organization_item_get : public Select
    {
    public:
        cc_person_organization_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_person_organization_item_get(Select* outer) : Select(outer) {}
        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class cc_person_organization_item_put : public Select
    {
    public:
        cc_person_organization_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_person_organization_item_put(Select* outer) : Select(outer) {}
        void put_change(change inst);
        void put_change_request(change_request inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_security_classification(security_classification inst);
        void put_start_request(start_request inst);
        void put_start_work(start_work inst);
    };


    class cc_specified_item : public Select
    {
    public:
        cc_specified_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_specified_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);
    };


    class cc_specified_item_get : public Select
    {
    public:
        cc_specified_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_specified_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class cc_specified_item_put : public Select
    {
    public:
        cc_specified_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        cc_specified_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_shape_aspect(shape_aspect inst);
    };


    class certified_item : public Select
    {
    public:
        certified_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certified_item(Select* outer) : Select(outer) {}

        bool is_supplied_part_relationship() { return IsADBEntity("supplied_part_relationship"); }
        supplied_part_relationship get_supplied_part_relationship();
        void put_supplied_part_relationship(supplied_part_relationship inst);
    };


    class certified_item_get : public Select
    {
    public:
        certified_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certified_item_get(Select* outer) : Select(outer) {}
        bool is_supplied_part_relationship() { return IsADBEntity("supplied_part_relationship"); }
        supplied_part_relationship get_supplied_part_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class certified_item_put : public Select
    {
    public:
        certified_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        certified_item_put(Select* outer) : Select(outer) {}
        void put_supplied_part_relationship(supplied_part_relationship inst);
    };


    class change_request_item : public Select
    {
    public:
        change_request_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        change_request_item(Select* outer) : Select(outer) {}

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class change_request_item_get : public Select
    {
    public:
        change_request_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        change_request_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class change_request_item_put : public Select
    {
    public:
        change_request_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        change_request_item_put(Select* outer) : Select(outer) {}
        void put_product_definition_formation(product_definition_formation inst);
    };


    class character_spacing_select : public Select
    {
    public:
        character_spacing_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select(Select* outer) : Select(outer) {}

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class character_spacing_select_get : public Select
    {
    public:
        character_spacing_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select_get(Select* outer) : Select(outer) {}
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class character_spacing_select_put : public Select
    {
    public:
        character_spacing_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_spacing_select_put(Select* outer) : Select(outer) {}
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }
        void put_measure_with_unit(measure_with_unit inst);
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class character_style_select : public Select
    {
    public:
        character_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select(Select* outer) : Select(outer) {}

        bool is_character_glyph_style_stroke() { return IsADBEntity("character_glyph_style_stroke"); }
        character_glyph_style_stroke get_character_glyph_style_stroke();
        void put_character_glyph_style_stroke(character_glyph_style_stroke inst);

        bool is_character_glyph_style_outline() { return IsADBEntity("character_glyph_style_outline"); }
        character_glyph_style_outline get_character_glyph_style_outline();
        void put_character_glyph_style_outline(character_glyph_style_outline inst);

        bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        text_style_for_defined_font get_text_style_for_defined_font();
        void put_text_style_for_defined_font(text_style_for_defined_font inst);
    };


    class character_style_select_get : public Select
    {
    public:
        character_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select_get(Select* outer) : Select(outer) {}
        bool is_character_glyph_style_stroke() { return IsADBEntity("character_glyph_style_stroke"); }
        character_glyph_style_stroke get_character_glyph_style_stroke();
        bool is_character_glyph_style_outline() { return IsADBEntity("character_glyph_style_outline"); }
        character_glyph_style_outline get_character_glyph_style_outline();
        bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        text_style_for_defined_font get_text_style_for_defined_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class character_style_select_put : public Select
    {
    public:
        character_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        character_style_select_put(Select* outer) : Select(outer) {}
        void put_character_glyph_style_stroke(character_glyph_style_stroke inst);
        void put_character_glyph_style_outline(character_glyph_style_outline inst);
        void put_text_style_for_defined_font(text_style_for_defined_font inst);
    };


    class characterized_action_definition : public Select
    {
    public:
        characterized_action_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        void put_action_method_relationship(action_method_relationship inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);
    };


    class characterized_action_definition_get : public Select
    {
    public:
        characterized_action_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        action_method_relationship get_action_method_relationship();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_action_definition_put : public Select
    {
    public:
        characterized_action_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_action_definition_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_method_relationship(action_method_relationship inst);
        void put_action_relationship(action_relationship inst);
    };


    class characterized_product_definition : public Select
    {
    public:
        characterized_product_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class characterized_product_definition_get : public Select
    {
    public:
        characterized_product_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_product_definition_put : public Select
    {
    public:
        characterized_product_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_definition_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class shape_definition : public Select
    {
    public:
        shape_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition(Select* outer) : Select(outer) {}

        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        void put_product_definition_shape(product_definition_shape inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class shape_definition_get : public Select
    {
    public:
        shape_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition_get(Select* outer) : Select(outer) {}
        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class shape_definition_put : public Select
    {
    public:
        shape_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shape_definition_put(Select* outer) : Select(outer) {}
        void put_product_definition_shape(product_definition_shape inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class characterized_definition : public Select
    {
    public:
        characterized_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition(Select* outer) : Select(outer) {}

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        characterized_product_definition _characterized_product_definition() { return characterized_product_definition(this); }

        shape_definition _shape_definition() { return shape_definition(this); }
    };


    class characterized_definition_get : public Select
    {
    public:
        characterized_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition_get(Select* outer) : Select(outer) {}
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        characterized_product_definition_get get_characterized_product_definition() { return characterized_product_definition_get(this); }
        shape_definition_get get_shape_definition() { return shape_definition_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_definition_put : public Select
    {
    public:
        characterized_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_definition_put(Select* outer) : Select(outer) {}
        void put_characterized_object(characterized_object inst);
        characterized_product_definition_put put_characterized_product_definition() { return characterized_product_definition_put(this); }
        shape_definition_put put_shape_definition() { return shape_definition_put(this); }
    };


    class characterized_material_property : public Select
    {
    public:
        characterized_material_property(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property(Select* outer) : Select(outer) {}

        bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        material_property_representation get_material_property_representation();
        void put_material_property_representation(material_property_representation inst);

        bool is_product_material_composition_relationship() { return IsADBEntity("product_material_composition_relationship"); }
        product_material_composition_relationship get_product_material_composition_relationship();
        void put_product_material_composition_relationship(product_material_composition_relationship inst);
    };


    class characterized_material_property_get : public Select
    {
    public:
        characterized_material_property_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property_get(Select* outer) : Select(outer) {}
        bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        material_property_representation get_material_property_representation();
        bool is_product_material_composition_relationship() { return IsADBEntity("product_material_composition_relationship"); }
        product_material_composition_relationship get_product_material_composition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_material_property_put : public Select
    {
    public:
        characterized_material_property_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_material_property_put(Select* outer) : Select(outer) {}
        void put_material_property_representation(material_property_representation inst);
        void put_product_material_composition_relationship(product_material_composition_relationship inst);
    };


    class characterized_product_composition_value : public Select
    {
    public:
        characterized_product_composition_value(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_composition_value(Select* outer) : Select(outer) {}

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);
    };


    class characterized_product_composition_value_get : public Select
    {
    public:
        characterized_product_composition_value_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_composition_value_get(Select* outer) : Select(outer) {}
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class characterized_product_composition_value_put : public Select
    {
    public:
        characterized_product_composition_value_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        characterized_product_composition_value_put(Select* outer) : Select(outer) {}
        void put_measure_with_unit(measure_with_unit inst);
    };


    class class_usage_effectivity_context_item : public Select
    {
    public:
        class_usage_effectivity_context_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class class_usage_effectivity_context_item_get : public Select
    {
    public:
        class_usage_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class class_usage_effectivity_context_item_put : public Select
    {
    public:
        class_usage_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        class_usage_effectivity_context_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
    };


    class compound_item_definition : public Select
    {
    public:
        compound_item_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition(Select* outer) : Select(outer) {}

        bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }

        //TList may be list_representation_item or list of converible elements
        template <typename TList> void get_list_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); list_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be list_representation_item or list of converible elements
        template <typename TList> void put_list_representation_item(TList& lst) { list_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_list_representation_item(TArrayElem arr[], size_t n) { list_representation_item lst; ArrayToList(arr, n, lst); put_list_representation_item(lst); }

        bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }

        //TList may be set_representation_item or list of converible elements
        template <typename TList> void get_set_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); set_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be set_representation_item or list of converible elements
        template <typename TList> void put_set_representation_item(TList& lst) { set_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_set_representation_item(TArrayElem arr[], size_t n) { set_representation_item lst; ArrayToList(arr, n, lst); put_set_representation_item(lst); }
    };


    class compound_item_definition_get : public Select
    {
    public:
        compound_item_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition_get(Select* outer) : Select(outer) {}
        bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }

        //TList may be list_representation_item or list of converible elements
        template <typename TList> void get_list_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); list_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }

        //TList may be set_representation_item or list of converible elements
        template <typename TList> void get_set_representation_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); set_representation_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
    };


    class compound_item_definition_put : public Select
    {
    public:
        compound_item_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        compound_item_definition_put(Select* outer) : Select(outer) {}

                //TList may be list_representation_item or list of converible elements
        template <typename TList> void put_list_representation_item(TList& lst) { list_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_list_representation_item(TArrayElem arr[], size_t n) { list_representation_item lst; ArrayToList(arr, n, lst); put_list_representation_item(lst); }

                //TList may be set_representation_item or list of converible elements
        template <typename TList> void put_set_representation_item(TList& lst) { set_representation_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }

                //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_set_representation_item(TArrayElem arr[], size_t n) { set_representation_item lst; ArrayToList(arr, n, lst); put_set_representation_item(lst); }
    };


    class configuration_design_item : public Select
    {
    public:
        configuration_design_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class configuration_design_item_get : public Select
    {
    public:
        configuration_design_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configuration_design_item_put : public Select
    {
    public:
        configuration_design_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configuration_design_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class configured_effectivity_context_item : public Select
    {
    public:
        configured_effectivity_context_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item(Select* outer) : Select(outer) {}

        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();
        void put_product_concept_feature_association(product_concept_feature_association inst);
    };


    class configured_effectivity_context_item_get : public Select
    {
    public:
        configured_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item_get(Select* outer) : Select(outer) {}
        bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        product_concept_feature_association get_product_concept_feature_association();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configured_effectivity_context_item_put : public Select
    {
    public:
        configured_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_context_item_put(Select* outer) : Select(outer) {}
        void put_product_concept_feature_association(product_concept_feature_association inst);
    };


    class configured_effectivity_item : public Select
    {
    public:
        configured_effectivity_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class configured_effectivity_item_get : public Select
    {
    public:
        configured_effectivity_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class configured_effectivity_item_put : public Select
    {
    public:
        configured_effectivity_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        configured_effectivity_item_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
    };


    class constructive_geometry_representation_or_shape_represenation : public Select
    {
    public:
        constructive_geometry_representation_or_shape_represenation(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        constructive_geometry_representation_or_shape_represenation(Select* outer) : Select(outer) {}

        bool is_constructive_geometry_representation() { return IsADBEntity("constructive_geometry_representation"); }
        constructive_geometry_representation get_constructive_geometry_representation();
        void put_constructive_geometry_representation(constructive_geometry_representation inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);
    };


    class constructive_geometry_representation_or_shape_represenation_get : public Select
    {
    public:
        constructive_geometry_representation_or_shape_represenation_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        constructive_geometry_representation_or_shape_represenation_get(Select* outer) : Select(outer) {}
        bool is_constructive_geometry_representation() { return IsADBEntity("constructive_geometry_representation"); }
        constructive_geometry_representation get_constructive_geometry_representation();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class constructive_geometry_representation_or_shape_represenation_put : public Select
    {
    public:
        constructive_geometry_representation_or_shape_represenation_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        constructive_geometry_representation_or_shape_represenation_put(Select* outer) : Select(outer) {}
        void put_constructive_geometry_representation(constructive_geometry_representation inst);
        void put_shape_representation(shape_representation inst);
    };


    class contract_item : public Select
    {
    public:
        contract_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item(Select* outer) : Select(outer) {}

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        void put_directed_action(directed_action inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class contract_item_get : public Select
    {
    public:
        contract_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item_get(Select* outer) : Select(outer) {}
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class contract_item_put : public Select
    {
    public:
        contract_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contract_item_put(Select* outer) : Select(outer) {}
        void put_action_directive(action_directive inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_directed_action(directed_action inst);
        void put_executed_action(executed_action inst);
        void put_information_usage_right(information_usage_right inst);
        void put_organization(organization inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product(product inst);
        void put_product_definition_formation(product_definition_formation inst);
    };


    class contracted_item : public Select
    {
    public:
        contracted_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contracted_item(Select* outer) : Select(outer) {}

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class contracted_item_get : public Select
    {
    public:
        contracted_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contracted_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class contracted_item_put : public Select
    {
    public:
        contracted_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        contracted_item_put(Select* outer) : Select(outer) {}
        void put_product_definition_formation(product_definition_formation inst);
    };


    class csg_select : public Select
    {
    public:
        csg_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select(Select* outer) : Select(outer) {}

        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        void put_boolean_result(boolean_result inst);

        csg_primitive _csg_primitive() { return csg_primitive(this); }
    };


    class csg_select_get : public Select
    {
    public:
        csg_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select_get(Select* outer) : Select(outer) {}
        bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        boolean_result get_boolean_result();
        csg_primitive_get get_csg_primitive() { return csg_primitive_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class csg_select_put : public Select
    {
    public:
        csg_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        csg_select_put(Select* outer) : Select(outer) {}
        void put_boolean_result(boolean_result inst);
        csg_primitive_put put_csg_primitive() { return csg_primitive_put(this); }
    };


    class curve_style_font_select : public Select
    {
    public:
        curve_style_font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select(Select* outer) : Select(outer) {}

        bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        curve_style_font get_curve_style_font();
        void put_curve_style_font(curve_style_font inst);

        bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        pre_defined_curve_font get_pre_defined_curve_font();
        void put_pre_defined_curve_font(pre_defined_curve_font inst);

        bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        externally_defined_curve_font get_externally_defined_curve_font();
        void put_externally_defined_curve_font(externally_defined_curve_font inst);
    };


    class curve_style_font_select_get : public Select
    {
    public:
        curve_style_font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select_get(Select* outer) : Select(outer) {}
        bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        curve_style_font get_curve_style_font();
        bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        pre_defined_curve_font get_pre_defined_curve_font();
        bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        externally_defined_curve_font get_externally_defined_curve_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_style_font_select_put : public Select
    {
    public:
        curve_style_font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_style_font_select_put(Select* outer) : Select(outer) {}
        void put_curve_style_font(curve_style_font inst);
        void put_pre_defined_curve_font(pre_defined_curve_font inst);
        void put_externally_defined_curve_font(externally_defined_curve_font inst);
    };


    class curve_font_or_scaled_curve_font_select : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select(Select* outer) : Select(outer) {}

        curve_style_font_select _curve_style_font_select() { return curve_style_font_select(this); }

        bool is_curve_style_font_and_scaling() { return IsADBEntity("curve_style_font_and_scaling"); }
        curve_style_font_and_scaling get_curve_style_font_and_scaling();
        void put_curve_style_font_and_scaling(curve_style_font_and_scaling inst);
    };


    class curve_font_or_scaled_curve_font_select_get : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select_get(Select* outer) : Select(outer) {}
        curve_style_font_select_get get_curve_style_font_select() { return curve_style_font_select_get(this); }
        bool is_curve_style_font_and_scaling() { return IsADBEntity("curve_style_font_and_scaling"); }
        curve_style_font_and_scaling get_curve_style_font_and_scaling();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_font_or_scaled_curve_font_select_put : public Select
    {
    public:
        curve_font_or_scaled_curve_font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_font_or_scaled_curve_font_select_put(Select* outer) : Select(outer) {}
        curve_style_font_select_put put_curve_style_font_select() { return curve_style_font_select_put(this); }
        void put_curve_style_font_and_scaling(curve_style_font_and_scaling inst);
    };


    class curve_on_surface : public Select
    {
    public:
        curve_on_surface(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface(Select* outer) : Select(outer) {}

        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        void put_pcurve(pcurve inst);

        bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        surface_curve get_surface_curve();
        void put_surface_curve(surface_curve inst);

        bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        composite_curve_on_surface get_composite_curve_on_surface();
        void put_composite_curve_on_surface(composite_curve_on_surface inst);
    };


    class curve_on_surface_get : public Select
    {
    public:
        curve_on_surface_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface_get(Select* outer) : Select(outer) {}
        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        surface_curve get_surface_curve();
        bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        composite_curve_on_surface get_composite_curve_on_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_on_surface_put : public Select
    {
    public:
        curve_on_surface_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_on_surface_put(Select* outer) : Select(outer) {}
        void put_pcurve(pcurve inst);
        void put_surface_curve(surface_curve inst);
        void put_composite_curve_on_surface(composite_curve_on_surface inst);
    };


    class curve_or_annotation_curve_occurrence : public Select
    {
    public:
        curve_or_annotation_curve_occurrence(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_annotation_curve_occurrence(Select* outer) : Select(outer) {}

        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        void put_curve(curve inst);

        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class curve_or_annotation_curve_occurrence_get : public Select
    {
    public:
        curve_or_annotation_curve_occurrence_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_annotation_curve_occurrence_get(Select* outer) : Select(outer) {}
        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_or_annotation_curve_occurrence_put : public Select
    {
    public:
        curve_or_annotation_curve_occurrence_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_annotation_curve_occurrence_put(Select* outer) : Select(outer) {}
        void put_curve(curve inst);
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class curve_or_render : public Select
    {
    public:
        curve_or_render(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render(Select* outer) : Select(outer) {}

        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        void put_curve_style(curve_style inst);

        bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        curve_style_rendering get_curve_style_rendering();
        void put_curve_style_rendering(curve_style_rendering inst);
    };


    class curve_or_render_get : public Select
    {
    public:
        curve_or_render_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render_get(Select* outer) : Select(outer) {}
        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        curve_style_rendering get_curve_style_rendering();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class curve_or_render_put : public Select
    {
    public:
        curve_or_render_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        curve_or_render_put(Select* outer) : Select(outer) {}
        void put_curve_style(curve_style inst);
        void put_curve_style_rendering(curve_style_rendering inst);
    };


    class date_and_time_item : public Select
    {
    public:
        date_and_time_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        void put_directed_action(directed_action inst);

        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        void put_document(document inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        void put_rule_action(rule_action inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_and_time_item_get : public Select
    {
    public:
        date_and_time_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_and_time_item_put : public Select
    {
    public:
        date_and_time_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_and_time_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_certification(certification inst);
        void put_contract(contract inst);
        void put_directed_action(directed_action inst);
        void put_document(document inst);
        void put_document_file(document_file inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_information_usage_right(information_usage_right inst);
        void put_organizational_project(organizational_project inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_rule_action(rule_action inst);
        void put_security_classification(security_classification inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_item : public Select
    {
    public:
        date_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        void put_directed_action(directed_action inst);

        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        void put_document(document inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_item_get : public Select
    {
    public:
        date_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_directed_action() { return IsADBEntity("directed_action"); }
        directed_action get_directed_action();
        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_item_put : public Select
    {
    public:
        date_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval_person_organization(approval_person_organization inst);
        void put_certification(certification inst);
        void put_contract(contract inst);
        void put_directed_action(directed_action inst);
        void put_document(document inst);
        void put_document_file(document_file inst);
        void put_event_occurrence(event_occurrence inst);
        void put_executed_action(executed_action inst);
        void put_information_usage_right(information_usage_right inst);
        void put_organizational_project(organizational_project inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_security_classification(security_classification inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class date_time_item : public Select
    {
    public:
        date_time_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_item(Select* outer) : Select(outer) {}

        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        void put_approval_person_organization(approval_person_organization inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        void put_change(change inst);

        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        void put_change_request(change_request inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        void put_start_request(start_request inst);

        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();
        void put_start_work(start_work inst);
    };


    class date_time_item_get : public Select
    {
    public:
        date_time_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_item_get(Select* outer) : Select(outer) {}
        bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        approval_person_organization get_approval_person_organization();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_change() { return IsADBEntity("change"); }
        change get_change();
        bool is_change_request() { return IsADBEntity("change_request"); }
        change_request get_change_request();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_start_request() { return IsADBEntity("start_request"); }
        start_request get_start_request();
        bool is_start_work() { return IsADBEntity("start_work"); }
        start_work get_start_work();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_time_item_put : public Select
    {
    public:
        date_time_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_item_put(Select* outer) : Select(outer) {}
        void put_approval_person_organization(approval_person_organization inst);
        void put_certification(certification inst);
        void put_change(change inst);
        void put_change_request(change_request inst);
        void put_contract(contract inst);
        void put_product_definition(product_definition inst);
        void put_security_classification(security_classification inst);
        void put_start_request(start_request inst);
        void put_start_work(start_work inst);
    };


    class date_time_select : public Select
    {
    public:
        date_time_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select(Select* outer) : Select(outer) {}

        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        void put_date(date inst);

        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        void put_date_and_time(date_and_time inst);

        bool is_local_time() { return IsADBEntity("local_time"); }
        local_time get_local_time();
        void put_local_time(local_time inst);
    };


    class date_time_select_get : public Select
    {
    public:
        date_time_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select_get(Select* outer) : Select(outer) {}
        bool is_date() { return IsADBEntity("date"); }
        date get_date();
        bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        date_and_time get_date_and_time();
        bool is_local_time() { return IsADBEntity("local_time"); }
        local_time get_local_time();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_time_select_put : public Select
    {
    public:
        date_time_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_select_put(Select* outer) : Select(outer) {}
        void put_date(date inst);
        void put_date_and_time(date_and_time inst);
        void put_local_time(local_time inst);
    };


    class date_time_or_event_occurrence : public Select
    {
    public:
        date_time_or_event_occurrence(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence(Select* outer) : Select(outer) {}

        date_time_select _date_time_select() { return date_time_select(this); }

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);
    };


    class date_time_or_event_occurrence_get : public Select
    {
    public:
        date_time_or_event_occurrence_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence_get(Select* outer) : Select(outer) {}
        date_time_select_get get_date_time_select() { return date_time_select_get(this); }
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class date_time_or_event_occurrence_put : public Select
    {
    public:
        date_time_or_event_occurrence_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        date_time_or_event_occurrence_put(Select* outer) : Select(outer) {}
        date_time_select_put put_date_time_select() { return date_time_select_put(this); }
        void put_event_occurrence(event_occurrence inst);
    };


    class defined_symbol_select : public Select
    {
    public:
        defined_symbol_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select(Select* outer) : Select(outer) {}

        bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        pre_defined_symbol get_pre_defined_symbol();
        void put_pre_defined_symbol(pre_defined_symbol inst);

        bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        externally_defined_symbol get_externally_defined_symbol();
        void put_externally_defined_symbol(externally_defined_symbol inst);
    };


    class defined_symbol_select_get : public Select
    {
    public:
        defined_symbol_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select_get(Select* outer) : Select(outer) {}
        bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        pre_defined_symbol get_pre_defined_symbol();
        bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        externally_defined_symbol get_externally_defined_symbol();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class defined_symbol_select_put : public Select
    {
    public:
        defined_symbol_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        defined_symbol_select_put(Select* outer) : Select(outer) {}
        void put_pre_defined_symbol(pre_defined_symbol inst);
        void put_externally_defined_symbol(externally_defined_symbol inst);
    };


    class derived_property_select : public Select
    {
    public:
        derived_property_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select(Select* outer) : Select(outer) {}

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();
        void put_action_property(action_property inst);
    };


    class derived_property_select_get : public Select
    {
    public:
        derived_property_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select_get(Select* outer) : Select(outer) {}
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_action_property() { return IsADBEntity("action_property"); }
        action_property get_action_property();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class derived_property_select_put : public Select
    {
    public:
        derived_property_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        derived_property_select_put(Select* outer) : Select(outer) {}
        void put_property_definition(property_definition inst);
        void put_action_property(action_property inst);
    };


    class description_attribute_select : public Select
    {
    public:
        description_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select(Select* outer) : Select(outer) {}

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_approval_role() { return IsADBEntity("approval_role"); }
        approval_role get_approval_role();
        void put_approval_role(approval_role inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);
    };


    class description_attribute_select_get : public Select
    {
    public:
        description_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_approval_role() { return IsADBEntity("approval_role"); }
        approval_role get_approval_role();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class description_attribute_select_put : public Select
    {
    public:
        description_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        description_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action_request_solution(action_request_solution inst);
        void put_application_context(application_context inst);
        void put_approval_role(approval_role inst);
        void put_configuration_design(configuration_design inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);
        void put_effectivity(effectivity inst);
        void put_external_source(external_source inst);
        void put_organization_role(organization_role inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_person_and_organization(person_and_organization inst);
        void put_property_definition_representation(property_definition_representation inst);
        void put_representation(representation inst);
    };


    class dimensional_characteristic : public Select
    {
    public:
        dimensional_characteristic(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic(Select* outer) : Select(outer) {}

        bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        dimensional_location get_dimensional_location();
        void put_dimensional_location(dimensional_location inst);

        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();
        void put_dimensional_size(dimensional_size inst);
    };


    class dimensional_characteristic_get : public Select
    {
    public:
        dimensional_characteristic_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic_get(Select* outer) : Select(outer) {}
        bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        dimensional_location get_dimensional_location();
        bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        dimensional_size get_dimensional_size();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class dimensional_characteristic_put : public Select
    {
    public:
        dimensional_characteristic_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        dimensional_characteristic_put(Select* outer) : Select(outer) {}
        void put_dimensional_location(dimensional_location inst);
        void put_dimensional_size(dimensional_size inst);
    };


    class direction_count_select : public Select
    {
    public:
        direction_count_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select(Select* outer) : Select(outer) {}

        bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        Nullable<u_direction_count> get_u_direction_count() { return getSimpleValue<u_direction_count>("U_DIRECTION_COUNT", sdaiINTEGER); }
        void put_u_direction_count(u_direction_count value) { putSimpleValue("U_DIRECTION_COUNT", sdaiINTEGER, value); }

        bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        Nullable<v_direction_count> get_v_direction_count() { return getSimpleValue<v_direction_count>("V_DIRECTION_COUNT", sdaiINTEGER); }
        void put_v_direction_count(v_direction_count value) { putSimpleValue("V_DIRECTION_COUNT", sdaiINTEGER, value); }
    };


    class direction_count_select_get : public Select
    {
    public:
        direction_count_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select_get(Select* outer) : Select(outer) {}
        bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        Nullable<u_direction_count> get_u_direction_count() { return getSimpleValue<u_direction_count>("U_DIRECTION_COUNT", sdaiINTEGER); }
        bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        Nullable<v_direction_count> get_v_direction_count() { return getSimpleValue<v_direction_count>("V_DIRECTION_COUNT", sdaiINTEGER); }

        Nullable<IntValue> as_int() { IntValue val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
    };


    class direction_count_select_put : public Select
    {
    public:
        direction_count_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        direction_count_select_put(Select* outer) : Select(outer) {}
        void put_u_direction_count(u_direction_count value) { putSimpleValue("U_DIRECTION_COUNT", sdaiINTEGER, value); }
        void put_v_direction_count(v_direction_count value) { putSimpleValue("V_DIRECTION_COUNT", sdaiINTEGER, value); }
    };


    class document_identifier_assigned_item : public Select
    {
    public:
        document_identifier_assigned_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_identifier_assigned_item(Select* outer) : Select(outer) {}

        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        void put_document(document inst);
    };


    class document_identifier_assigned_item_get : public Select
    {
    public:
        document_identifier_assigned_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_identifier_assigned_item_get(Select* outer) : Select(outer) {}
        bool is_document() { return IsADBEntity("document"); }
        document get_document();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class document_identifier_assigned_item_put : public Select
    {
    public:
        document_identifier_assigned_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        document_identifier_assigned_item_put(Select* outer) : Select(outer) {}
        void put_document(document inst);
    };


    class draughting_callout_element : public Select
    {
    public:
        draughting_callout_element(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element(Select* outer) : Select(outer) {}

        bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        annotation_text_occurrence get_annotation_text_occurrence();
        void put_annotation_text_occurrence(annotation_text_occurrence inst);

        bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        annotation_symbol_occurrence get_annotation_symbol_occurrence();
        void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst);

        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class draughting_callout_element_get : public Select
    {
    public:
        draughting_callout_element_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element_get(Select* outer) : Select(outer) {}
        bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        annotation_text_occurrence get_annotation_text_occurrence();
        bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        annotation_symbol_occurrence get_annotation_symbol_occurrence();
        bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        annotation_curve_occurrence get_annotation_curve_occurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_callout_element_put : public Select
    {
    public:
        draughting_callout_element_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_callout_element_put(Select* outer) : Select(outer) {}
        void put_annotation_text_occurrence(annotation_text_occurrence inst);
        void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst);
        void put_annotation_curve_occurrence(annotation_curve_occurrence inst);
    };


    class draughting_model_item_association_select : public Select
    {
    public:
        draughting_model_item_association_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select(Select* outer) : Select(outer) {}

        bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        annotation_occurrence get_annotation_occurrence();
        void put_annotation_occurrence(annotation_occurrence inst);

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_model_item_association_select_get : public Select
    {
    public:
        draughting_model_item_association_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select_get(Select* outer) : Select(outer) {}
        bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        annotation_occurrence get_annotation_occurrence();
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_model_item_association_select_put : public Select
    {
    public:
        draughting_model_item_association_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_association_select_put(Select* outer) : Select(outer) {}
        void put_annotation_occurrence(annotation_occurrence inst);
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_model_item_select : public Select
    {
    public:
        draughting_model_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_select(Select* outer) : Select(outer) {}

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        axis2_placement _axis2_placement() { return axis2_placement(this); }

        bool is_camera_model() { return IsADBEntity("camera_model"); }
        camera_model get_camera_model();
        void put_camera_model(camera_model inst);

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_model_item_select_get : public Select
    {
    public:
        draughting_model_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_select_get(Select* outer) : Select(outer) {}
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        axis2_placement_get get_axis2_placement() { return axis2_placement_get(this); }
        bool is_camera_model() { return IsADBEntity("camera_model"); }
        camera_model get_camera_model();
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_model_item_select_put : public Select
    {
    public:
        draughting_model_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_model_item_select_put(Select* outer) : Select(outer) {}
        void put_mapped_item(mapped_item inst);
        void put_styled_item(styled_item inst);
        axis2_placement_put put_axis2_placement() { return axis2_placement_put(this); }
        void put_camera_model(camera_model inst);
        void put_draughting_callout(draughting_callout inst);
    };


    class draughting_titled_item : public Select
    {
    public:
        draughting_titled_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item(Select* outer) : Select(outer) {}

        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        void put_drawing_revision(drawing_revision inst);

        bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        drawing_sheet_revision get_drawing_sheet_revision();
        void put_drawing_sheet_revision(drawing_sheet_revision inst);
    };


    class draughting_titled_item_get : public Select
    {
    public:
        draughting_titled_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item_get(Select* outer) : Select(outer) {}
        bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        drawing_revision get_drawing_revision();
        bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        drawing_sheet_revision get_drawing_sheet_revision();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class draughting_titled_item_put : public Select
    {
    public:
        draughting_titled_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        draughting_titled_item_put(Select* outer) : Select(outer) {}
        void put_drawing_revision(drawing_revision inst);
        void put_drawing_sheet_revision(drawing_sheet_revision inst);
    };


    class effectivity_item : public Select
    {
    public:
        effectivity_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);
    };


    class effectivity_item_get : public Select
    {
    public:
        effectivity_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class effectivity_item_put : public Select
    {
    public:
        effectivity_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        effectivity_item_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_substitute(product_definition_substitute inst);
    };


    class event_occurrence_item : public Select
    {
    public:
        event_occurrence_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item(Select* outer) : Select(outer) {}

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);
    };


    class event_occurrence_item_get : public Select
    {
    public:
        event_occurrence_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item_get(Select* outer) : Select(outer) {}
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class event_occurrence_item_put : public Select
    {
    public:
        event_occurrence_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        event_occurrence_item_put(Select* outer) : Select(outer) {}
        void put_organizational_project(organizational_project inst);
    };


    class external_identification_item : public Select
    {
    public:
        external_identification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item(Select* outer) : Select(outer) {}

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        void put_action_request_status(action_request_status inst);

        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        void put_applied_organization_assignment(applied_organization_assignment inst);

        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        void put_date_and_time_assignment(date_and_time_assignment inst);

        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        void put_date_assignment(date_assignment inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        externally_defined_class get_externally_defined_class();
        void put_externally_defined_class(externally_defined_class inst);

        bool is_externally_defined_context_dependent_unit() { return IsADBEntity("externally_defined_context_dependent_unit"); }
        externally_defined_context_dependent_unit get_externally_defined_context_dependent_unit();
        void put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst);

        bool is_externally_defined_conversion_based_unit() { return IsADBEntity("externally_defined_conversion_based_unit"); }
        externally_defined_conversion_based_unit get_externally_defined_conversion_based_unit();
        void put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst);

        bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        externally_defined_general_property get_externally_defined_general_property();
        void put_externally_defined_general_property(externally_defined_general_property inst);

        bool is_externally_defined_picture_representation_item() { return IsADBEntity("externally_defined_picture_representation_item"); }
        externally_defined_picture_representation_item get_externally_defined_picture_representation_item();
        void put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst);

        bool is_externally_defined_representation_item() { return IsADBEntity("externally_defined_representation_item"); }
        externally_defined_representation_item get_externally_defined_representation_item();
        void put_externally_defined_representation_item(externally_defined_representation_item inst);

        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        void put_organizational_address(organizational_address inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_trimmed_curve() { return IsADBEntity("trimmed_curve"); }
        trimmed_curve get_trimmed_curve();
        void put_trimmed_curve(trimmed_curve inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class external_identification_item_get : public Select
    {
    public:
        external_identification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item_get(Select* outer) : Select(outer) {}
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        action_request_status get_action_request_status();
        bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        applied_organization_assignment get_applied_organization_assignment();
        bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        applied_person_and_organization_assignment get_applied_person_and_organization_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        date_and_time_assignment get_date_and_time_assignment();
        bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        date_assignment get_date_assignment();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        externally_defined_class get_externally_defined_class();
        bool is_externally_defined_context_dependent_unit() { return IsADBEntity("externally_defined_context_dependent_unit"); }
        externally_defined_context_dependent_unit get_externally_defined_context_dependent_unit();
        bool is_externally_defined_conversion_based_unit() { return IsADBEntity("externally_defined_conversion_based_unit"); }
        externally_defined_conversion_based_unit get_externally_defined_conversion_based_unit();
        bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        externally_defined_general_property get_externally_defined_general_property();
        bool is_externally_defined_picture_representation_item() { return IsADBEntity("externally_defined_picture_representation_item"); }
        externally_defined_picture_representation_item get_externally_defined_picture_representation_item();
        bool is_externally_defined_representation_item() { return IsADBEntity("externally_defined_representation_item"); }
        externally_defined_representation_item get_externally_defined_representation_item();
        bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        organizational_address get_organizational_address();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_trimmed_curve() { return IsADBEntity("trimmed_curve"); }
        trimmed_curve get_trimmed_curve();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class external_identification_item_put : public Select
    {
    public:
        external_identification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        external_identification_item_put(Select* outer) : Select(outer) {}
        void put_action_relationship(action_relationship inst);
        void put_action_request_status(action_request_status inst);
        void put_applied_organization_assignment(applied_organization_assignment inst);
        void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst);
        void put_approval(approval inst);
        void put_approval_status(approval_status inst);
        void put_date_and_time_assignment(date_and_time_assignment inst);
        void put_date_assignment(date_assignment inst);
        void put_document_file(document_file inst);
        void put_external_source(external_source inst);
        void put_externally_defined_class(externally_defined_class inst);
        void put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst);
        void put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst);
        void put_externally_defined_general_property(externally_defined_general_property inst);
        void put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst);
        void put_externally_defined_representation_item(externally_defined_representation_item inst);
        void put_organizational_address(organizational_address inst);
        void put_product_definition(product_definition inst);
        void put_security_classification(security_classification inst);
        void put_trimmed_curve(trimmed_curve inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class fill_area_style_tile_shape_select : public Select
    {
    public:
        fill_area_style_tile_shape_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select(Select* outer) : Select(outer) {}

        bool is_fill_area_style_tile_curve_with_style() { return IsADBEntity("fill_area_style_tile_curve_with_style"); }
        fill_area_style_tile_curve_with_style get_fill_area_style_tile_curve_with_style();
        void put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst);

        bool is_fill_area_style_tile_coloured_region() { return IsADBEntity("fill_area_style_tile_coloured_region"); }
        fill_area_style_tile_coloured_region get_fill_area_style_tile_coloured_region();
        void put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst);

        bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style();
        void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst);

        bool is_pre_defined_tile() { return IsADBEntity("pre_defined_tile"); }
        pre_defined_tile get_pre_defined_tile();
        void put_pre_defined_tile(pre_defined_tile inst);

        bool is_externally_defined_tile() { return IsADBEntity("externally_defined_tile"); }
        externally_defined_tile get_externally_defined_tile();
        void put_externally_defined_tile(externally_defined_tile inst);
    };


    class fill_area_style_tile_shape_select_get : public Select
    {
    public:
        fill_area_style_tile_shape_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select_get(Select* outer) : Select(outer) {}
        bool is_fill_area_style_tile_curve_with_style() { return IsADBEntity("fill_area_style_tile_curve_with_style"); }
        fill_area_style_tile_curve_with_style get_fill_area_style_tile_curve_with_style();
        bool is_fill_area_style_tile_coloured_region() { return IsADBEntity("fill_area_style_tile_coloured_region"); }
        fill_area_style_tile_coloured_region get_fill_area_style_tile_coloured_region();
        bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style();
        bool is_pre_defined_tile() { return IsADBEntity("pre_defined_tile"); }
        pre_defined_tile get_pre_defined_tile();
        bool is_externally_defined_tile() { return IsADBEntity("externally_defined_tile"); }
        externally_defined_tile get_externally_defined_tile();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class fill_area_style_tile_shape_select_put : public Select
    {
    public:
        fill_area_style_tile_shape_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_area_style_tile_shape_select_put(Select* outer) : Select(outer) {}
        void put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst);
        void put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst);
        void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst);
        void put_pre_defined_tile(pre_defined_tile inst);
        void put_externally_defined_tile(externally_defined_tile inst);
    };


    class fill_style_select : public Select
    {
    public:
        fill_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select(Select* outer) : Select(outer) {}

        bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        fill_area_style_colour get_fill_area_style_colour();
        void put_fill_area_style_colour(fill_area_style_colour inst);

        bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        externally_defined_tile_style get_externally_defined_tile_style();
        void put_externally_defined_tile_style(externally_defined_tile_style inst);

        bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        fill_area_style_tiles get_fill_area_style_tiles();
        void put_fill_area_style_tiles(fill_area_style_tiles inst);

        bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        externally_defined_hatch_style get_externally_defined_hatch_style();
        void put_externally_defined_hatch_style(externally_defined_hatch_style inst);

        bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        fill_area_style_hatching get_fill_area_style_hatching();
        void put_fill_area_style_hatching(fill_area_style_hatching inst);
    };


    class fill_style_select_get : public Select
    {
    public:
        fill_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select_get(Select* outer) : Select(outer) {}
        bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        fill_area_style_colour get_fill_area_style_colour();
        bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        externally_defined_tile_style get_externally_defined_tile_style();
        bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        fill_area_style_tiles get_fill_area_style_tiles();
        bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        externally_defined_hatch_style get_externally_defined_hatch_style();
        bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        fill_area_style_hatching get_fill_area_style_hatching();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class fill_style_select_put : public Select
    {
    public:
        fill_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        fill_style_select_put(Select* outer) : Select(outer) {}
        void put_fill_area_style_colour(fill_area_style_colour inst);
        void put_externally_defined_tile_style(externally_defined_tile_style inst);
        void put_fill_area_style_tiles(fill_area_style_tiles inst);
        void put_externally_defined_hatch_style(externally_defined_hatch_style inst);
        void put_fill_area_style_hatching(fill_area_style_hatching inst);
    };


    class font_select : public Select
    {
    public:
        font_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select(Select* outer) : Select(outer) {}

        bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        pre_defined_text_font get_pre_defined_text_font();
        void put_pre_defined_text_font(pre_defined_text_font inst);

        bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        externally_defined_text_font get_externally_defined_text_font();
        void put_externally_defined_text_font(externally_defined_text_font inst);

        bool is_text_font() { return IsADBEntity("text_font"); }
        text_font get_text_font();
        void put_text_font(text_font inst);
    };


    class font_select_get : public Select
    {
    public:
        font_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select_get(Select* outer) : Select(outer) {}
        bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        pre_defined_text_font get_pre_defined_text_font();
        bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        externally_defined_text_font get_externally_defined_text_font();
        bool is_text_font() { return IsADBEntity("text_font"); }
        text_font get_text_font();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class font_select_put : public Select
    {
    public:
        font_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        font_select_put(Select* outer) : Select(outer) {}
        void put_pre_defined_text_font(pre_defined_text_font inst);
        void put_externally_defined_text_font(externally_defined_text_font inst);
        void put_text_font(text_font inst);
    };


    class founded_item_select : public Select
    {
    public:
        founded_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select(Select* outer) : Select(outer) {}

        bool is_founded_item() { return IsADBEntity("founded_item"); }
        founded_item get_founded_item();
        void put_founded_item(founded_item inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);
    };


    class founded_item_select_get : public Select
    {
    public:
        founded_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select_get(Select* outer) : Select(outer) {}
        bool is_founded_item() { return IsADBEntity("founded_item"); }
        founded_item get_founded_item();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class founded_item_select_put : public Select
    {
    public:
        founded_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        founded_item_select_put(Select* outer) : Select(outer) {}
        void put_founded_item(founded_item inst);
        void put_representation_item(representation_item inst);
    };


    class generalized_surface_select : public Select
    {
    public:
        generalized_surface_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        generalized_surface_select(Select* outer) : Select(outer) {}

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);

        bool is_face_surface() { return IsADBEntity("face_surface"); }
        face_surface get_face_surface();
        void put_face_surface(face_surface inst);

        bool is_surfaced_open_shell() { return IsADBEntity("surfaced_open_shell"); }
        surfaced_open_shell get_surfaced_open_shell();
        void put_surfaced_open_shell(surfaced_open_shell inst);
    };


    class generalized_surface_select_get : public Select
    {
    public:
        generalized_surface_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        generalized_surface_select_get(Select* outer) : Select(outer) {}
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        bool is_face_surface() { return IsADBEntity("face_surface"); }
        face_surface get_face_surface();
        bool is_surfaced_open_shell() { return IsADBEntity("surfaced_open_shell"); }
        surfaced_open_shell get_surfaced_open_shell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class generalized_surface_select_put : public Select
    {
    public:
        generalized_surface_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        generalized_surface_select_put(Select* outer) : Select(outer) {}
        void put_surface(surface inst);
        void put_face_surface(face_surface inst);
        void put_surfaced_open_shell(surfaced_open_shell inst);
    };


    class geometric_item_specific_usage_select : public Select
    {
    public:
        geometric_item_specific_usage_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_item_specific_usage_select(Select* outer) : Select(outer) {}

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class geometric_item_specific_usage_select_get : public Select
    {
    public:
        geometric_item_specific_usage_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_item_specific_usage_select_get(Select* outer) : Select(outer) {}
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class geometric_item_specific_usage_select_put : public Select
    {
    public:
        geometric_item_specific_usage_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_item_specific_usage_select_put(Select* outer) : Select(outer) {}
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class geometric_set_select : public Select
    {
    public:
        geometric_set_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select(Select* outer) : Select(outer) {}

        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        void put_point(point inst);

        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        void put_curve(curve inst);

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);
    };


    class geometric_set_select_get : public Select
    {
    public:
        geometric_set_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select_get(Select* outer) : Select(outer) {}
        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        bool is_curve() { return IsADBEntity("curve"); }
        curve get_curve();
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class geometric_set_select_put : public Select
    {
    public:
        geometric_set_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        geometric_set_select_put(Select* outer) : Select(outer) {}
        void put_point(point inst);
        void put_curve(curve inst);
        void put_surface(surface inst);
    };


    class groupable_item : public Select
    {
    public:
        groupable_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        groupable_item(Select* outer) : Select(outer) {}

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_package_product_concept_feature() { return IsADBEntity("package_product_concept_feature"); }
        package_product_concept_feature get_package_product_concept_feature();
        void put_package_product_concept_feature(package_product_concept_feature inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_representation_relationship_with_transformation() { return IsADBEntity("representation_relationship_with_transformation"); }
        representation_relationship_with_transformation get_representation_relationship_with_transformation();
        void put_representation_relationship_with_transformation(representation_relationship_with_transformation inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        shape_representation_relationship get_shape_representation_relationship();
        void put_shape_representation_relationship(shape_representation_relationship inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);
    };


    class groupable_item_get : public Select
    {
    public:
        groupable_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        groupable_item_get(Select* outer) : Select(outer) {}
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_package_product_concept_feature() { return IsADBEntity("package_product_concept_feature"); }
        package_product_concept_feature get_package_product_concept_feature();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_representation_relationship_with_transformation() { return IsADBEntity("representation_relationship_with_transformation"); }
        representation_relationship_with_transformation get_representation_relationship_with_transformation();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        shape_representation_relationship get_shape_representation_relationship();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class groupable_item_put : public Select
    {
    public:
        groupable_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        groupable_item_put(Select* outer) : Select(outer) {}
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_group_relationship(group_relationship inst);
        void put_mapped_item(mapped_item inst);
        void put_package_product_concept_feature(package_product_concept_feature inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_property_definition_representation(property_definition_representation inst);
        void put_representation(representation inst);
        void put_representation_item(representation_item inst);
        void put_representation_relationship_with_transformation(representation_relationship_with_transformation inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_shape_representation_relationship(shape_representation_relationship inst);
        void put_styled_item(styled_item inst);
        void put_topological_representation_item(topological_representation_item inst);
    };


    class id_attribute_select : public Select
    {
    public:
        id_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        void put_address(address inst);

        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        void put_product_category(product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);
    };


    class id_attribute_select_get : public Select
    {
    public:
        id_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        bool is_product_category() { return IsADBEntity("product_category"); }
        product_category get_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class id_attribute_select_put : public Select
    {
    public:
        id_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        id_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_address(address inst);
        void put_product_category(product_category inst);
        void put_property_definition(property_definition inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_application_context(application_context inst);
        void put_group(group inst);
        void put_organizational_project(organizational_project inst);
        void put_representation(representation inst);
    };


    class instance_usage_context_select : public Select
    {
    public:
        instance_usage_context_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        instance_usage_context_select(Select* outer) : Select(outer) {}

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();
        void put_product_definition_usage(product_definition_usage inst);
    };


    class instance_usage_context_select_get : public Select
    {
    public:
        instance_usage_context_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        instance_usage_context_select_get(Select* outer) : Select(outer) {}
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class instance_usage_context_select_put : public Select
    {
    public:
        instance_usage_context_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        instance_usage_context_select_put(Select* outer) : Select(outer) {}
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_usage(product_definition_usage inst);
    };


    class invisibility_context : public Select
    {
    public:
        invisibility_context(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context(Select* outer) : Select(outer) {}

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);
    };


    class invisibility_context_get : public Select
    {
    public:
        invisibility_context_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context_get(Select* outer) : Select(outer) {}
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class invisibility_context_put : public Select
    {
    public:
        invisibility_context_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisibility_context_put(Select* outer) : Select(outer) {}
        void put_draughting_model(draughting_model inst);
        void put_presentation_representation(presentation_representation inst);
        void put_presentation_set(presentation_set inst);
    };


    class invisible_item : public Select
    {
    public:
        invisible_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item(Select* outer) : Select(outer) {}

        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        void put_draughting_callout(draughting_callout inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);
    };


    class invisible_item_get : public Select
    {
    public:
        invisible_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item_get(Select* outer) : Select(outer) {}
        bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        draughting_callout get_draughting_callout();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class invisible_item_put : public Select
    {
    public:
        invisible_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        invisible_item_put(Select* outer) : Select(outer) {}
        void put_draughting_callout(draughting_callout inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_representation(representation inst);
        void put_styled_item(styled_item inst);
    };


    class layered_item : public Select
    {
    public:
        layered_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item(Select* outer) : Select(outer) {}

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);
    };


    class layered_item_get : public Select
    {
    public:
        layered_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item_get(Select* outer) : Select(outer) {}
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class layered_item_put : public Select
    {
    public:
        layered_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        layered_item_put(Select* outer) : Select(outer) {}
        void put_presentation_representation(presentation_representation inst);
        void put_representation_item(representation_item inst);
    };


    class marker_select : public Select
    {
    public:
        marker_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select(Select* outer) : Select(outer) {}

        bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        Nullable<marker_type> get_marker_type() { int v = getEnumerationValue("MARKER_TYPE", marker_type_); if (v >= 0) return (marker_type) v; else return Nullable<marker_type>(); }
        void put_marker_type(marker_type value) { TextValue val = marker_type_[(int) value]; putEnumerationValue("MARKER_TYPE", val); }

        bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        pre_defined_marker get_pre_defined_marker();
        void put_pre_defined_marker(pre_defined_marker inst);
    };


    class marker_select_get : public Select
    {
    public:
        marker_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select_get(Select* outer) : Select(outer) {}
        bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        Nullable<marker_type> get_marker_type() { int v = getEnumerationValue("MARKER_TYPE", marker_type_); if (v >= 0) return (marker_type) v; else return Nullable<marker_type>(); }
        bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        pre_defined_marker get_pre_defined_marker();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class marker_select_put : public Select
    {
    public:
        marker_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        marker_select_put(Select* outer) : Select(outer) {}
        void put_marker_type(marker_type value) { TextValue val = marker_type_[(int) value]; putEnumerationValue("MARKER_TYPE", val); }
        void put_pre_defined_marker(pre_defined_marker inst);
    };


    class measure_value : public Select
    {
    public:
        measure_value(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value(Select* outer) : Select(outer) {}

        bool is_absorbed_dose_measure() { return IsADBType("ABSORBED_DOSE_MEASURE"); }
        Nullable<absorbed_dose_measure> get_absorbed_dose_measure() { return getSimpleValue<absorbed_dose_measure>("ABSORBED_DOSE_MEASURE", sdaiREAL); }
        void put_absorbed_dose_measure(absorbed_dose_measure value) { putSimpleValue("ABSORBED_DOSE_MEASURE", sdaiREAL, value); }

        bool is_dose_equivalent_measure() { return IsADBType("DOSE_EQUIVALENT_MEASURE"); }
        Nullable<dose_equivalent_measure> get_dose_equivalent_measure() { return getSimpleValue<dose_equivalent_measure>("DOSE_EQUIVALENT_MEASURE", sdaiREAL); }
        void put_dose_equivalent_measure(dose_equivalent_measure value) { putSimpleValue("DOSE_EQUIVALENT_MEASURE", sdaiREAL, value); }

        bool is_radioactivity_measure() { return IsADBType("RADIOACTIVITY_MEASURE"); }
        Nullable<radioactivity_measure> get_radioactivity_measure() { return getSimpleValue<radioactivity_measure>("RADIOACTIVITY_MEASURE", sdaiREAL); }
        void put_radioactivity_measure(radioactivity_measure value) { putSimpleValue("RADIOACTIVITY_MEASURE", sdaiREAL, value); }

        bool is_acceleration_measure() { return IsADBType("ACCELERATION_MEASURE"); }
        Nullable<acceleration_measure> get_acceleration_measure() { return getSimpleValue<acceleration_measure>("ACCELERATION_MEASURE", sdaiREAL); }
        void put_acceleration_measure(acceleration_measure value) { putSimpleValue("ACCELERATION_MEASURE", sdaiREAL, value); }

        bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        Nullable<amount_of_substance_measure> get_amount_of_substance_measure() { return getSimpleValue<amount_of_substance_measure>("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL); }
        void put_amount_of_substance_measure(amount_of_substance_measure value) { putSimpleValue("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL, value); }

        bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        Nullable<area_measure> get_area_measure() { return getSimpleValue<area_measure>("AREA_MEASURE", sdaiREAL); }
        void put_area_measure(area_measure value) { putSimpleValue("AREA_MEASURE", sdaiREAL, value); }

        bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        Nullable<celsius_temperature_measure> get_celsius_temperature_measure() { return getSimpleValue<celsius_temperature_measure>("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL); }
        void put_celsius_temperature_measure(celsius_temperature_measure value) { putSimpleValue("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL, value); }

        bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        Nullable<context_dependent_measure> get_context_dependent_measure() { return getSimpleValue<context_dependent_measure>("CONTEXT_DEPENDENT_MEASURE", sdaiREAL); }
        void put_context_dependent_measure(context_dependent_measure value) { putSimpleValue("CONTEXT_DEPENDENT_MEASURE", sdaiREAL, value); }

        bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        Nullable<count_measure> get_count_measure() { return getSimpleValue<count_measure>("COUNT_MEASURE", sdaiREAL); }
        void put_count_measure(count_measure value) { putSimpleValue("COUNT_MEASURE", sdaiREAL, value); }

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }

        bool is_capacitance_measure() { return IsADBType("CAPACITANCE_MEASURE"); }
        Nullable<capacitance_measure> get_capacitance_measure() { return getSimpleValue<capacitance_measure>("CAPACITANCE_MEASURE", sdaiREAL); }
        void put_capacitance_measure(capacitance_measure value) { putSimpleValue("CAPACITANCE_MEASURE", sdaiREAL, value); }

        bool is_electric_charge_measure() { return IsADBType("ELECTRIC_CHARGE_MEASURE"); }
        Nullable<electric_charge_measure> get_electric_charge_measure() { return getSimpleValue<electric_charge_measure>("ELECTRIC_CHARGE_MEASURE", sdaiREAL); }
        void put_electric_charge_measure(electric_charge_measure value) { putSimpleValue("ELECTRIC_CHARGE_MEASURE", sdaiREAL, value); }

        bool is_conductance_measure() { return IsADBType("CONDUCTANCE_MEASURE"); }
        Nullable<conductance_measure> get_conductance_measure() { return getSimpleValue<conductance_measure>("CONDUCTANCE_MEASURE", sdaiREAL); }
        void put_conductance_measure(conductance_measure value) { putSimpleValue("CONDUCTANCE_MEASURE", sdaiREAL, value); }

        bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        Nullable<electric_current_measure> get_electric_current_measure() { return getSimpleValue<electric_current_measure>("ELECTRIC_CURRENT_MEASURE", sdaiREAL); }
        void put_electric_current_measure(electric_current_measure value) { putSimpleValue("ELECTRIC_CURRENT_MEASURE", sdaiREAL, value); }

        bool is_electric_potential_measure() { return IsADBType("ELECTRIC_POTENTIAL_MEASURE"); }
        Nullable<electric_potential_measure> get_electric_potential_measure() { return getSimpleValue<electric_potential_measure>("ELECTRIC_POTENTIAL_MEASURE", sdaiREAL); }
        void put_electric_potential_measure(electric_potential_measure value) { putSimpleValue("ELECTRIC_POTENTIAL_MEASURE", sdaiREAL, value); }

        bool is_energy_measure() { return IsADBType("ENERGY_MEASURE"); }
        Nullable<energy_measure> get_energy_measure() { return getSimpleValue<energy_measure>("ENERGY_MEASURE", sdaiREAL); }
        void put_energy_measure(energy_measure value) { putSimpleValue("ENERGY_MEASURE", sdaiREAL, value); }

        bool is_magnetic_flux_density_measure() { return IsADBType("MAGNETIC_FLUX_DENSITY_MEASURE"); }
        Nullable<magnetic_flux_density_measure> get_magnetic_flux_density_measure() { return getSimpleValue<magnetic_flux_density_measure>("MAGNETIC_FLUX_DENSITY_MEASURE", sdaiREAL); }
        void put_magnetic_flux_density_measure(magnetic_flux_density_measure value) { putSimpleValue("MAGNETIC_FLUX_DENSITY_MEASURE", sdaiREAL, value); }

        bool is_force_measure() { return IsADBType("FORCE_MEASURE"); }
        Nullable<force_measure> get_force_measure() { return getSimpleValue<force_measure>("FORCE_MEASURE", sdaiREAL); }
        void put_force_measure(force_measure value) { putSimpleValue("FORCE_MEASURE", sdaiREAL, value); }

        bool is_frequency_measure() { return IsADBType("FREQUENCY_MEASURE"); }
        Nullable<frequency_measure> get_frequency_measure() { return getSimpleValue<frequency_measure>("FREQUENCY_MEASURE", sdaiREAL); }
        void put_frequency_measure(frequency_measure value) { putSimpleValue("FREQUENCY_MEASURE", sdaiREAL, value); }

        bool is_illuminance_measure() { return IsADBType("ILLUMINANCE_MEASURE"); }
        Nullable<illuminance_measure> get_illuminance_measure() { return getSimpleValue<illuminance_measure>("ILLUMINANCE_MEASURE", sdaiREAL); }
        void put_illuminance_measure(illuminance_measure value) { putSimpleValue("ILLUMINANCE_MEASURE", sdaiREAL, value); }

        bool is_inductance_measure() { return IsADBType("INDUCTANCE_MEASURE"); }
        Nullable<inductance_measure> get_inductance_measure() { return getSimpleValue<inductance_measure>("INDUCTANCE_MEASURE", sdaiREAL); }
        void put_inductance_measure(inductance_measure value) { putSimpleValue("INDUCTANCE_MEASURE", sdaiREAL, value); }

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_luminous_flux_measure() { return IsADBType("LUMINOUS_FLUX_MEASURE"); }
        Nullable<luminous_flux_measure> get_luminous_flux_measure() { return getSimpleValue<luminous_flux_measure>("LUMINOUS_FLUX_MEASURE", sdaiREAL); }
        void put_luminous_flux_measure(luminous_flux_measure value) { putSimpleValue("LUMINOUS_FLUX_MEASURE", sdaiREAL, value); }

        bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        Nullable<luminous_intensity_measure> get_luminous_intensity_measure() { return getSimpleValue<luminous_intensity_measure>("LUMINOUS_INTENSITY_MEASURE", sdaiREAL); }
        void put_luminous_intensity_measure(luminous_intensity_measure value) { putSimpleValue("LUMINOUS_INTENSITY_MEASURE", sdaiREAL, value); }

        bool is_magnetic_flux_measure() { return IsADBType("MAGNETIC_FLUX_MEASURE"); }
        Nullable<magnetic_flux_measure> get_magnetic_flux_measure() { return getSimpleValue<magnetic_flux_measure>("MAGNETIC_FLUX_MEASURE", sdaiREAL); }
        void put_magnetic_flux_measure(magnetic_flux_measure value) { putSimpleValue("MAGNETIC_FLUX_MEASURE", sdaiREAL, value); }

        bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        Nullable<mass_measure> get_mass_measure() { return getSimpleValue<mass_measure>("MASS_MEASURE", sdaiREAL); }
        void put_mass_measure(mass_measure value) { putSimpleValue("MASS_MEASURE", sdaiREAL, value); }

        bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        Nullable<numeric_measure> get_numeric_measure() { return getSimpleValue<numeric_measure>("NUMERIC_MEASURE", sdaiREAL); }
        void put_numeric_measure(numeric_measure value) { putSimpleValue("NUMERIC_MEASURE", sdaiREAL, value); }

        bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        Nullable<non_negative_length_measure> get_non_negative_length_measure() { return getSimpleValue<non_negative_length_measure>("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_non_negative_length_measure(non_negative_length_measure value) { putSimpleValue("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }

        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        Nullable<positive_plane_angle_measure> get_positive_plane_angle_measure() { return getSimpleValue<positive_plane_angle_measure>("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_positive_plane_angle_measure(positive_plane_angle_measure value) { putSimpleValue("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        Nullable<positive_ratio_measure> get_positive_ratio_measure() { return getSimpleValue<positive_ratio_measure>("POSITIVE_RATIO_MEASURE", sdaiREAL); }
        void put_positive_ratio_measure(positive_ratio_measure value) { putSimpleValue("POSITIVE_RATIO_MEASURE", sdaiREAL, value); }

        bool is_power_measure() { return IsADBType("POWER_MEASURE"); }
        Nullable<power_measure> get_power_measure() { return getSimpleValue<power_measure>("POWER_MEASURE", sdaiREAL); }
        void put_power_measure(power_measure value) { putSimpleValue("POWER_MEASURE", sdaiREAL, value); }

        bool is_pressure_measure() { return IsADBType("PRESSURE_MEASURE"); }
        Nullable<pressure_measure> get_pressure_measure() { return getSimpleValue<pressure_measure>("PRESSURE_MEASURE", sdaiREAL); }
        void put_pressure_measure(pressure_measure value) { putSimpleValue("PRESSURE_MEASURE", sdaiREAL, value); }

        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }

        bool is_resistance_measure() { return IsADBType("RESISTANCE_MEASURE"); }
        Nullable<resistance_measure> get_resistance_measure() { return getSimpleValue<resistance_measure>("RESISTANCE_MEASURE", sdaiREAL); }
        void put_resistance_measure(resistance_measure value) { putSimpleValue("RESISTANCE_MEASURE", sdaiREAL, value); }

        bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        Nullable<solid_angle_measure> get_solid_angle_measure() { return getSimpleValue<solid_angle_measure>("SOLID_ANGLE_MEASURE", sdaiREAL); }
        void put_solid_angle_measure(solid_angle_measure value) { putSimpleValue("SOLID_ANGLE_MEASURE", sdaiREAL, value); }

        bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        Nullable<thermodynamic_temperature_measure> get_thermodynamic_temperature_measure() { return getSimpleValue<thermodynamic_temperature_measure>("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL); }
        void put_thermodynamic_temperature_measure(thermodynamic_temperature_measure value) { putSimpleValue("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL, value); }

        bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        Nullable<time_measure> get_time_measure() { return getSimpleValue<time_measure>("TIME_MEASURE", sdaiREAL); }
        void put_time_measure(time_measure value) { putSimpleValue("TIME_MEASURE", sdaiREAL, value); }

        bool is_velocity_measure() { return IsADBType("VELOCITY_MEASURE"); }
        Nullable<velocity_measure> get_velocity_measure() { return getSimpleValue<velocity_measure>("VELOCITY_MEASURE", sdaiREAL); }
        void put_velocity_measure(velocity_measure value) { putSimpleValue("VELOCITY_MEASURE", sdaiREAL, value); }

        bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        Nullable<volume_measure> get_volume_measure() { return getSimpleValue<volume_measure>("VOLUME_MEASURE", sdaiREAL); }
        void put_volume_measure(volume_measure value) { putSimpleValue("VOLUME_MEASURE", sdaiREAL, value); }
    };


    class measure_value_get : public Select
    {
    public:
        measure_value_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value_get(Select* outer) : Select(outer) {}
        bool is_absorbed_dose_measure() { return IsADBType("ABSORBED_DOSE_MEASURE"); }
        Nullable<absorbed_dose_measure> get_absorbed_dose_measure() { return getSimpleValue<absorbed_dose_measure>("ABSORBED_DOSE_MEASURE", sdaiREAL); }
        bool is_dose_equivalent_measure() { return IsADBType("DOSE_EQUIVALENT_MEASURE"); }
        Nullable<dose_equivalent_measure> get_dose_equivalent_measure() { return getSimpleValue<dose_equivalent_measure>("DOSE_EQUIVALENT_MEASURE", sdaiREAL); }
        bool is_radioactivity_measure() { return IsADBType("RADIOACTIVITY_MEASURE"); }
        Nullable<radioactivity_measure> get_radioactivity_measure() { return getSimpleValue<radioactivity_measure>("RADIOACTIVITY_MEASURE", sdaiREAL); }
        bool is_acceleration_measure() { return IsADBType("ACCELERATION_MEASURE"); }
        Nullable<acceleration_measure> get_acceleration_measure() { return getSimpleValue<acceleration_measure>("ACCELERATION_MEASURE", sdaiREAL); }
        bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        Nullable<amount_of_substance_measure> get_amount_of_substance_measure() { return getSimpleValue<amount_of_substance_measure>("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL); }
        bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        Nullable<area_measure> get_area_measure() { return getSimpleValue<area_measure>("AREA_MEASURE", sdaiREAL); }
        bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        Nullable<celsius_temperature_measure> get_celsius_temperature_measure() { return getSimpleValue<celsius_temperature_measure>("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL); }
        bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        Nullable<context_dependent_measure> get_context_dependent_measure() { return getSimpleValue<context_dependent_measure>("CONTEXT_DEPENDENT_MEASURE", sdaiREAL); }
        bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        Nullable<count_measure> get_count_measure() { return getSimpleValue<count_measure>("COUNT_MEASURE", sdaiREAL); }
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        bool is_capacitance_measure() { return IsADBType("CAPACITANCE_MEASURE"); }
        Nullable<capacitance_measure> get_capacitance_measure() { return getSimpleValue<capacitance_measure>("CAPACITANCE_MEASURE", sdaiREAL); }
        bool is_electric_charge_measure() { return IsADBType("ELECTRIC_CHARGE_MEASURE"); }
        Nullable<electric_charge_measure> get_electric_charge_measure() { return getSimpleValue<electric_charge_measure>("ELECTRIC_CHARGE_MEASURE", sdaiREAL); }
        bool is_conductance_measure() { return IsADBType("CONDUCTANCE_MEASURE"); }
        Nullable<conductance_measure> get_conductance_measure() { return getSimpleValue<conductance_measure>("CONDUCTANCE_MEASURE", sdaiREAL); }
        bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        Nullable<electric_current_measure> get_electric_current_measure() { return getSimpleValue<electric_current_measure>("ELECTRIC_CURRENT_MEASURE", sdaiREAL); }
        bool is_electric_potential_measure() { return IsADBType("ELECTRIC_POTENTIAL_MEASURE"); }
        Nullable<electric_potential_measure> get_electric_potential_measure() { return getSimpleValue<electric_potential_measure>("ELECTRIC_POTENTIAL_MEASURE", sdaiREAL); }
        bool is_energy_measure() { return IsADBType("ENERGY_MEASURE"); }
        Nullable<energy_measure> get_energy_measure() { return getSimpleValue<energy_measure>("ENERGY_MEASURE", sdaiREAL); }
        bool is_magnetic_flux_density_measure() { return IsADBType("MAGNETIC_FLUX_DENSITY_MEASURE"); }
        Nullable<magnetic_flux_density_measure> get_magnetic_flux_density_measure() { return getSimpleValue<magnetic_flux_density_measure>("MAGNETIC_FLUX_DENSITY_MEASURE", sdaiREAL); }
        bool is_force_measure() { return IsADBType("FORCE_MEASURE"); }
        Nullable<force_measure> get_force_measure() { return getSimpleValue<force_measure>("FORCE_MEASURE", sdaiREAL); }
        bool is_frequency_measure() { return IsADBType("FREQUENCY_MEASURE"); }
        Nullable<frequency_measure> get_frequency_measure() { return getSimpleValue<frequency_measure>("FREQUENCY_MEASURE", sdaiREAL); }
        bool is_illuminance_measure() { return IsADBType("ILLUMINANCE_MEASURE"); }
        Nullable<illuminance_measure> get_illuminance_measure() { return getSimpleValue<illuminance_measure>("ILLUMINANCE_MEASURE", sdaiREAL); }
        bool is_inductance_measure() { return IsADBType("INDUCTANCE_MEASURE"); }
        Nullable<inductance_measure> get_inductance_measure() { return getSimpleValue<inductance_measure>("INDUCTANCE_MEASURE", sdaiREAL); }
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_luminous_flux_measure() { return IsADBType("LUMINOUS_FLUX_MEASURE"); }
        Nullable<luminous_flux_measure> get_luminous_flux_measure() { return getSimpleValue<luminous_flux_measure>("LUMINOUS_FLUX_MEASURE", sdaiREAL); }
        bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        Nullable<luminous_intensity_measure> get_luminous_intensity_measure() { return getSimpleValue<luminous_intensity_measure>("LUMINOUS_INTENSITY_MEASURE", sdaiREAL); }
        bool is_magnetic_flux_measure() { return IsADBType("MAGNETIC_FLUX_MEASURE"); }
        Nullable<magnetic_flux_measure> get_magnetic_flux_measure() { return getSimpleValue<magnetic_flux_measure>("MAGNETIC_FLUX_MEASURE", sdaiREAL); }
        bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        Nullable<mass_measure> get_mass_measure() { return getSimpleValue<mass_measure>("MASS_MEASURE", sdaiREAL); }
        bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        Nullable<numeric_measure> get_numeric_measure() { return getSimpleValue<numeric_measure>("NUMERIC_MEASURE", sdaiREAL); }
        bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        Nullable<non_negative_length_measure> get_non_negative_length_measure() { return getSimpleValue<non_negative_length_measure>("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        Nullable<positive_plane_angle_measure> get_positive_plane_angle_measure() { return getSimpleValue<positive_plane_angle_measure>("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL); }
        bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        Nullable<positive_ratio_measure> get_positive_ratio_measure() { return getSimpleValue<positive_ratio_measure>("POSITIVE_RATIO_MEASURE", sdaiREAL); }
        bool is_power_measure() { return IsADBType("POWER_MEASURE"); }
        Nullable<power_measure> get_power_measure() { return getSimpleValue<power_measure>("POWER_MEASURE", sdaiREAL); }
        bool is_pressure_measure() { return IsADBType("PRESSURE_MEASURE"); }
        Nullable<pressure_measure> get_pressure_measure() { return getSimpleValue<pressure_measure>("PRESSURE_MEASURE", sdaiREAL); }
        bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        Nullable<ratio_measure> get_ratio_measure() { return getSimpleValue<ratio_measure>("RATIO_MEASURE", sdaiREAL); }
        bool is_resistance_measure() { return IsADBType("RESISTANCE_MEASURE"); }
        Nullable<resistance_measure> get_resistance_measure() { return getSimpleValue<resistance_measure>("RESISTANCE_MEASURE", sdaiREAL); }
        bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        Nullable<solid_angle_measure> get_solid_angle_measure() { return getSimpleValue<solid_angle_measure>("SOLID_ANGLE_MEASURE", sdaiREAL); }
        bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        Nullable<thermodynamic_temperature_measure> get_thermodynamic_temperature_measure() { return getSimpleValue<thermodynamic_temperature_measure>("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL); }
        bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        Nullable<time_measure> get_time_measure() { return getSimpleValue<time_measure>("TIME_MEASURE", sdaiREAL); }
        bool is_velocity_measure() { return IsADBType("VELOCITY_MEASURE"); }
        Nullable<velocity_measure> get_velocity_measure() { return getSimpleValue<velocity_measure>("VELOCITY_MEASURE", sdaiREAL); }
        bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        Nullable<volume_measure> get_volume_measure() { return getSimpleValue<volume_measure>("VOLUME_MEASURE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class measure_value_put : public Select
    {
    public:
        measure_value_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        measure_value_put(Select* outer) : Select(outer) {}
        void put_absorbed_dose_measure(absorbed_dose_measure value) { putSimpleValue("ABSORBED_DOSE_MEASURE", sdaiREAL, value); }
        void put_dose_equivalent_measure(dose_equivalent_measure value) { putSimpleValue("DOSE_EQUIVALENT_MEASURE", sdaiREAL, value); }
        void put_radioactivity_measure(radioactivity_measure value) { putSimpleValue("RADIOACTIVITY_MEASURE", sdaiREAL, value); }
        void put_acceleration_measure(acceleration_measure value) { putSimpleValue("ACCELERATION_MEASURE", sdaiREAL, value); }
        void put_amount_of_substance_measure(amount_of_substance_measure value) { putSimpleValue("AMOUNT_OF_SUBSTANCE_MEASURE", sdaiREAL, value); }
        void put_area_measure(area_measure value) { putSimpleValue("AREA_MEASURE", sdaiREAL, value); }
        void put_celsius_temperature_measure(celsius_temperature_measure value) { putSimpleValue("CELSIUS_TEMPERATURE_MEASURE", sdaiREAL, value); }
        void put_context_dependent_measure(context_dependent_measure value) { putSimpleValue("CONTEXT_DEPENDENT_MEASURE", sdaiREAL, value); }
        void put_count_measure(count_measure value) { putSimpleValue("COUNT_MEASURE", sdaiREAL, value); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
        void put_capacitance_measure(capacitance_measure value) { putSimpleValue("CAPACITANCE_MEASURE", sdaiREAL, value); }
        void put_electric_charge_measure(electric_charge_measure value) { putSimpleValue("ELECTRIC_CHARGE_MEASURE", sdaiREAL, value); }
        void put_conductance_measure(conductance_measure value) { putSimpleValue("CONDUCTANCE_MEASURE", sdaiREAL, value); }
        void put_electric_current_measure(electric_current_measure value) { putSimpleValue("ELECTRIC_CURRENT_MEASURE", sdaiREAL, value); }
        void put_electric_potential_measure(electric_potential_measure value) { putSimpleValue("ELECTRIC_POTENTIAL_MEASURE", sdaiREAL, value); }
        void put_energy_measure(energy_measure value) { putSimpleValue("ENERGY_MEASURE", sdaiREAL, value); }
        void put_magnetic_flux_density_measure(magnetic_flux_density_measure value) { putSimpleValue("MAGNETIC_FLUX_DENSITY_MEASURE", sdaiREAL, value); }
        void put_force_measure(force_measure value) { putSimpleValue("FORCE_MEASURE", sdaiREAL, value); }
        void put_frequency_measure(frequency_measure value) { putSimpleValue("FREQUENCY_MEASURE", sdaiREAL, value); }
        void put_illuminance_measure(illuminance_measure value) { putSimpleValue("ILLUMINANCE_MEASURE", sdaiREAL, value); }
        void put_inductance_measure(inductance_measure value) { putSimpleValue("INDUCTANCE_MEASURE", sdaiREAL, value); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_luminous_flux_measure(luminous_flux_measure value) { putSimpleValue("LUMINOUS_FLUX_MEASURE", sdaiREAL, value); }
        void put_luminous_intensity_measure(luminous_intensity_measure value) { putSimpleValue("LUMINOUS_INTENSITY_MEASURE", sdaiREAL, value); }
        void put_magnetic_flux_measure(magnetic_flux_measure value) { putSimpleValue("MAGNETIC_FLUX_MEASURE", sdaiREAL, value); }
        void put_mass_measure(mass_measure value) { putSimpleValue("MASS_MEASURE", sdaiREAL, value); }
        void put_numeric_measure(numeric_measure value) { putSimpleValue("NUMERIC_MEASURE", sdaiREAL, value); }
        void put_non_negative_length_measure(non_negative_length_measure value) { putSimpleValue("NON_NEGATIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_positive_plane_angle_measure(positive_plane_angle_measure value) { putSimpleValue("POSITIVE_PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        void put_positive_ratio_measure(positive_ratio_measure value) { putSimpleValue("POSITIVE_RATIO_MEASURE", sdaiREAL, value); }
        void put_power_measure(power_measure value) { putSimpleValue("POWER_MEASURE", sdaiREAL, value); }
        void put_pressure_measure(pressure_measure value) { putSimpleValue("PRESSURE_MEASURE", sdaiREAL, value); }
        void put_ratio_measure(ratio_measure value) { putSimpleValue("RATIO_MEASURE", sdaiREAL, value); }
        void put_resistance_measure(resistance_measure value) { putSimpleValue("RESISTANCE_MEASURE", sdaiREAL, value); }
        void put_solid_angle_measure(solid_angle_measure value) { putSimpleValue("SOLID_ANGLE_MEASURE", sdaiREAL, value); }
        void put_thermodynamic_temperature_measure(thermodynamic_temperature_measure value) { putSimpleValue("THERMODYNAMIC_TEMPERATURE_MEASURE", sdaiREAL, value); }
        void put_time_measure(time_measure value) { putSimpleValue("TIME_MEASURE", sdaiREAL, value); }
        void put_velocity_measure(velocity_measure value) { putSimpleValue("VELOCITY_MEASURE", sdaiREAL, value); }
        void put_volume_measure(volume_measure value) { putSimpleValue("VOLUME_MEASURE", sdaiREAL, value); }
    };


    class mechanical_design_and_draughting_relationship_select : public Select
    {
    public:
        mechanical_design_and_draughting_relationship_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_and_draughting_relationship_select(Select* outer) : Select(outer) {}

        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        void put_draughting_model(draughting_model inst);

        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);

        bool is_mechanical_design_presentation_representation_with_draughting() { return IsADBEntity("mechanical_design_presentation_representation_with_draughting"); }
        mechanical_design_presentation_representation_with_draughting get_mechanical_design_presentation_representation_with_draughting();
        void put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst);

        bool is_mechanical_design_shaded_presentation_representation() { return IsADBEntity("mechanical_design_shaded_presentation_representation"); }
        mechanical_design_shaded_presentation_representation get_mechanical_design_shaded_presentation_representation();
        void put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);
    };


    class mechanical_design_and_draughting_relationship_select_get : public Select
    {
    public:
        mechanical_design_and_draughting_relationship_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_and_draughting_relationship_select_get(Select* outer) : Select(outer) {}
        bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        draughting_model get_draughting_model();
        bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation();
        bool is_mechanical_design_presentation_representation_with_draughting() { return IsADBEntity("mechanical_design_presentation_representation_with_draughting"); }
        mechanical_design_presentation_representation_with_draughting get_mechanical_design_presentation_representation_with_draughting();
        bool is_mechanical_design_shaded_presentation_representation() { return IsADBEntity("mechanical_design_shaded_presentation_representation"); }
        mechanical_design_shaded_presentation_representation get_mechanical_design_shaded_presentation_representation();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class mechanical_design_and_draughting_relationship_select_put : public Select
    {
    public:
        mechanical_design_and_draughting_relationship_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_and_draughting_relationship_select_put(Select* outer) : Select(outer) {}
        void put_draughting_model(draughting_model inst);
        void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst);
        void put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst);
        void put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst);
        void put_shape_representation(shape_representation inst);
    };


    class mechanical_design_geometric_presentation_area_items : public Select
    {
    public:
        mechanical_design_geometric_presentation_area_items(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_area_items(Select* outer) : Select(outer) {}

        axis2_placement _axis2_placement() { return axis2_placement(this); }

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);
    };


    class mechanical_design_geometric_presentation_area_items_get : public Select
    {
    public:
        mechanical_design_geometric_presentation_area_items_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_area_items_get(Select* outer) : Select(outer) {}
        axis2_placement_get get_axis2_placement() { return axis2_placement_get(this); }
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class mechanical_design_geometric_presentation_area_items_put : public Select
    {
    public:
        mechanical_design_geometric_presentation_area_items_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_area_items_put(Select* outer) : Select(outer) {}
        axis2_placement_put put_axis2_placement() { return axis2_placement_put(this); }
        void put_mapped_item(mapped_item inst);
    };


    class mechanical_design_geometric_presentation_representation_items : public Select
    {
    public:
        mechanical_design_geometric_presentation_representation_items(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_representation_items(Select* outer) : Select(outer) {}

        axis2_placement _axis2_placement() { return axis2_placement(this); }

        bool is_camera_model_d3() { return IsADBEntity("camera_model_d3"); }
        camera_model_d3 get_camera_model_d3();
        void put_camera_model_d3(camera_model_d3 inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);
    };


    class mechanical_design_geometric_presentation_representation_items_get : public Select
    {
    public:
        mechanical_design_geometric_presentation_representation_items_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_representation_items_get(Select* outer) : Select(outer) {}
        axis2_placement_get get_axis2_placement() { return axis2_placement_get(this); }
        bool is_camera_model_d3() { return IsADBEntity("camera_model_d3"); }
        camera_model_d3 get_camera_model_d3();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class mechanical_design_geometric_presentation_representation_items_put : public Select
    {
    public:
        mechanical_design_geometric_presentation_representation_items_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        mechanical_design_geometric_presentation_representation_items_put(Select* outer) : Select(outer) {}
        axis2_placement_put put_axis2_placement() { return axis2_placement_put(this); }
        void put_camera_model_d3(camera_model_d3 inst);
        void put_mapped_item(mapped_item inst);
        void put_styled_item(styled_item inst);
    };


    class multi_language_attribute_item : public Select
    {
    public:
        multi_language_attribute_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item(Select* outer) : Select(outer) {}

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        void put_application_context(application_context inst);

        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        void put_applied_certification_assignment(applied_certification_assignment inst);

        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        void put_applied_document_reference(applied_document_reference inst);

        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);

        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        void put_approval_relationship(approval_relationship inst);

        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        void put_approval_status(approval_status inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        void put_attribute_value_assignment(attribute_value_assignment inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_certification_type() { return IsADBEntity("certification_type"); }
        certification_type get_certification_type();
        void put_certification_type(certification_type inst);

        bool is_colour() { return IsADBEntity("colour"); }
        colour get_colour();
        void put_colour(colour inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        void put_date_role(date_role inst);

        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        void put_date_time_role(date_time_role inst);

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        void put_document_relationship(document_relationship inst);

        bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        document_usage_role get_document_usage_role();
        void put_document_usage_role(document_usage_role inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        void put_effectivity_relationship(effectivity_relationship inst);

        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        void put_event_occurrence(event_occurrence inst);

        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        void put_external_source(external_source inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        void put_general_property_relationship(general_property_relationship inst);

        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        void put_geometric_representation_item(geometric_representation_item inst);

        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        void put_geometric_tolerance(geometric_tolerance inst);

        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        void put_identification_role(identification_role inst);

        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        void put_information_right(information_right inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        void put_make_from_usage_option(make_from_usage_option inst);

        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        void put_mapped_item(mapped_item inst);

        bool is_object_role() { return IsADBEntity("object_role"); }
        object_role get_object_role();
        void put_object_role(object_role inst);

        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        void put_organization_relationship(organization_relationship inst);

        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        void put_organization_role(organization_role inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        void put_organizational_project_relationship(organizational_project_relationship inst);

        bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        organizational_project_role get_organizational_project_role();
        void put_organizational_project_role(organizational_project_role inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        void put_person_and_organization_role(person_and_organization_role inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        void put_product_concept_relationship(product_concept_relationship inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        void put_product_definition_context(product_definition_context inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        void put_product_definition_shape(product_definition_shape inst);

        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        void put_product_related_product_category(product_related_product_category inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        void put_representation_relationship(representation_relationship inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        void put_security_classification_assignment(security_classification_assignment inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        void put_time_interval_role(time_interval_role inst);

        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        void put_topological_representation_item(topological_representation_item inst);

        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);

        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();
        void put_usage_association(usage_association inst);
    };


    class multi_language_attribute_item_get : public Select
    {
    public:
        multi_language_attribute_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item_get(Select* outer) : Select(outer) {}
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_application_context() { return IsADBEntity("application_context"); }
        application_context get_application_context();
        bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        applied_certification_assignment get_applied_certification_assignment();
        bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        applied_document_reference get_applied_document_reference();
        bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment();
        bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        applied_external_identification_assignment get_applied_external_identification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        applied_organizational_project_assignment get_applied_organizational_project_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        approval_relationship get_approval_relationship();
        bool is_approval_status() { return IsADBEntity("approval_status"); }
        approval_status get_approval_status();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        attribute_value_assignment get_attribute_value_assignment();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_certification_type() { return IsADBEntity("certification_type"); }
        certification_type get_certification_type();
        bool is_colour() { return IsADBEntity("colour"); }
        colour get_colour();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_date_role() { return IsADBEntity("date_role"); }
        date_role get_date_role();
        bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        date_time_role get_date_time_role();
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        document_relationship get_document_relationship();
        bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        document_usage_role get_document_usage_role();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        effectivity_relationship get_effectivity_relationship();
        bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        event_occurrence get_event_occurrence();
        bool is_external_source() { return IsADBEntity("external_source"); }
        external_source get_external_source();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        general_property_relationship get_general_property_relationship();
        bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        geometric_representation_item get_geometric_representation_item();
        bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        geometric_tolerance get_geometric_tolerance();
        bool is_identification_role() { return IsADBEntity("identification_role"); }
        identification_role get_identification_role();
        bool is_information_right() { return IsADBEntity("information_right"); }
        information_right get_information_right();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        mapped_item get_mapped_item();
        bool is_object_role() { return IsADBEntity("object_role"); }
        object_role get_object_role();
        bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        organization_relationship get_organization_relationship();
        bool is_organization_role() { return IsADBEntity("organization_role"); }
        organization_role get_organization_role();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        organizational_project_relationship get_organizational_project_relationship();
        bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        organizational_project_role get_organizational_project_role();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        person_and_organization_role get_person_and_organization_role();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        product_concept_relationship get_product_concept_relationship();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        product_definition_context get_product_definition_context();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        product_definition_shape get_product_definition_shape();
        bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        product_related_product_category get_product_related_product_category();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        time_interval_role get_time_interval_role();
        bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        topological_representation_item get_topological_representation_item();
        bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        uncertainty_measure_with_unit get_uncertainty_measure_with_unit();
        bool is_usage_association() { return IsADBEntity("usage_association"); }
        usage_association get_usage_association();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class multi_language_attribute_item_put : public Select
    {
    public:
        multi_language_attribute_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        multi_language_attribute_item_put(Select* outer) : Select(outer) {}
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_application_context(application_context inst);
        void put_applied_certification_assignment(applied_certification_assignment inst);
        void put_applied_document_reference(applied_document_reference inst);
        void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst);
        void put_applied_external_identification_assignment(applied_external_identification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst);
        void put_approval(approval inst);
        void put_approval_relationship(approval_relationship inst);
        void put_approval_status(approval_status inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_attribute_value_assignment(attribute_value_assignment inst);
        void put_certification(certification inst);
        void put_certification_type(certification_type inst);
        void put_colour(colour inst);
        void put_configuration_design(configuration_design inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_date_role(date_role inst);
        void put_date_time_role(date_time_role inst);
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_document_relationship(document_relationship inst);
        void put_document_usage_role(document_usage_role inst);
        void put_effectivity(effectivity inst);
        void put_effectivity_relationship(effectivity_relationship inst);
        void put_event_occurrence(event_occurrence inst);
        void put_external_source(external_source inst);
        void put_general_property(general_property inst);
        void put_general_property_relationship(general_property_relationship inst);
        void put_geometric_representation_item(geometric_representation_item inst);
        void put_geometric_tolerance(geometric_tolerance inst);
        void put_identification_role(identification_role inst);
        void put_information_right(information_right inst);
        void put_information_usage_right(information_usage_right inst);
        void put_make_from_usage_option(make_from_usage_option inst);
        void put_mapped_item(mapped_item inst);
        void put_object_role(object_role inst);
        void put_organization_relationship(organization_relationship inst);
        void put_organization_role(organization_role inst);
        void put_organizational_project(organizational_project inst);
        void put_organizational_project_relationship(organizational_project_relationship inst);
        void put_organizational_project_role(organizational_project_role inst);
        void put_person_and_organization(person_and_organization inst);
        void put_person_and_organization_role(person_and_organization_role inst);
        void put_product(product inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_relationship(product_concept_relationship inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_context(product_definition_context inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_product_definition_shape(product_definition_shape inst);
        void put_product_related_product_category(product_related_product_category inst);
        void put_property_definition(property_definition inst);
        void put_representation(representation inst);
        void put_representation_relationship(representation_relationship inst);
        void put_security_classification(security_classification inst);
        void put_security_classification_assignment(security_classification_assignment inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
        void put_shape_representation(shape_representation inst);
        void put_time_interval_role(time_interval_role inst);
        void put_topological_representation_item(topological_representation_item inst);
        void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst);
        void put_usage_association(usage_association inst);
    };


    class name_attribute_select : public Select
    {
    public:
        name_attribute_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select(Select* outer) : Select(outer) {}

        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        void put_action_request_solution(action_request_solution inst);

        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        void put_address(address inst);

        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        void put_configuration_design(configuration_design inst);

        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        void put_effectivity(effectivity inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        void put_product_definition_substitute(product_definition_substitute inst);

        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();
        void put_property_definition_representation(property_definition_representation inst);
    };


    class name_attribute_select_get : public Select
    {
    public:
        name_attribute_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select_get(Select* outer) : Select(outer) {}
        bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        action_request_solution get_action_request_solution();
        bool is_address() { return IsADBEntity("address"); }
        address get_address();
        bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        configuration_design get_configuration_design();
        bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        context_dependent_shape_representation get_context_dependent_shape_representation();
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_effectivity() { return IsADBEntity("effectivity"); }
        effectivity get_effectivity();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        product_definition_substitute get_product_definition_substitute();
        bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        property_definition_representation get_property_definition_representation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class name_attribute_select_put : public Select
    {
    public:
        name_attribute_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_attribute_select_put(Select* outer) : Select(outer) {}
        void put_action_request_solution(action_request_solution inst);
        void put_address(address inst);
        void put_configuration_design(configuration_design inst);
        void put_context_dependent_shape_representation(context_dependent_shape_representation inst);
        void put_derived_unit(derived_unit inst);
        void put_effectivity(effectivity inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_substitute(product_definition_substitute inst);
        void put_property_definition_representation(property_definition_representation inst);
    };


    class name_item : public Select
    {
    public:
        name_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_external_class_library() { return IsADBEntity("external_class_library"); }
        external_class_library get_external_class_library();
        void put_external_class_library(external_class_library inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class name_item_get : public Select
    {
    public:
        name_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_external_class_library() { return IsADBEntity("external_class_library"); }
        external_class_library get_external_class_library();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class name_item_put : public Select
    {
    public:
        name_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        name_item_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_external_class_library(external_class_library inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
    };


    class organization_item : public Select
    {
    public:
        organization_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        void put_class_(class_ inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        void put_rule_action(rule_action inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class organization_item_get : public Select
    {
    public:
        organization_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_class_() { return IsADBEntity("class_"); }
        class_ get_class_();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class organization_item_put : public Select
    {
    public:
        organization_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        organization_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval(approval inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_class_(class_ inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_information_usage_right(information_usage_right inst);
        void put_organizational_project(organizational_project inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_property_definition(property_definition inst);
        void put_rule_action(rule_action inst);
        void put_security_classification(security_classification inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class orientation_basis_select : public Select
    {
    public:
        orientation_basis_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        orientation_basis_select(Select* outer) : Select(outer) {}

        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        void put_axis2_placement_3d(axis2_placement_3d inst);

        bool is_min_and_major_ply_orientation_basis() { return IsADBEntity("min_and_major_ply_orientation_basis"); }
        min_and_major_ply_orientation_basis get_min_and_major_ply_orientation_basis();
        void put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst);
    };


    class orientation_basis_select_get : public Select
    {
    public:
        orientation_basis_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        orientation_basis_select_get(Select* outer) : Select(outer) {}
        bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        axis2_placement_3d get_axis2_placement_3d();
        bool is_min_and_major_ply_orientation_basis() { return IsADBEntity("min_and_major_ply_orientation_basis"); }
        min_and_major_ply_orientation_basis get_min_and_major_ply_orientation_basis();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class orientation_basis_select_put : public Select
    {
    public:
        orientation_basis_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        orientation_basis_select_put(Select* outer) : Select(outer) {}
        void put_axis2_placement_3d(axis2_placement_3d inst);
        void put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst);
    };


    class pcurve_or_surface : public Select
    {
    public:
        pcurve_or_surface(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface(Select* outer) : Select(outer) {}

        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        void put_pcurve(pcurve inst);

        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();
        void put_surface(surface inst);
    };


    class pcurve_or_surface_get : public Select
    {
    public:
        pcurve_or_surface_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface_get(Select* outer) : Select(outer) {}
        bool is_pcurve() { return IsADBEntity("pcurve"); }
        pcurve get_pcurve();
        bool is_surface() { return IsADBEntity("surface"); }
        surface get_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class pcurve_or_surface_put : public Select
    {
    public:
        pcurve_or_surface_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        pcurve_or_surface_put(Select* outer) : Select(outer) {}
        void put_pcurve(pcurve inst);
        void put_surface(surface inst);
    };


    class person_and_organization_item : public Select
    {
    public:
        person_and_organization_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        void put_action_directive(action_directive inst);

        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        void put_alternate_product_relationship(alternate_product_relationship inst);

        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        void put_applied_action_assignment(applied_action_assignment inst);

        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        void put_applied_classification_assignment(applied_classification_assignment inst);

        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        void put_applied_identification_assignment(applied_identification_assignment inst);

        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);

        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        void put_approval(approval inst);

        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);

        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        void put_certification(certification inst);

        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        void put_configuration_item(configuration_item inst);

        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        void put_contract(contract inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        void put_information_usage_right(information_usage_right inst);

        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        void put_organizational_project(organizational_project inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        void put_rule_action(rule_action inst);

        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        void put_security_classification(security_classification inst);

        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        void put_shape_representation(shape_representation inst);

        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();
        void put_versioned_action_request(versioned_action_request inst);
    };


    class person_and_organization_item_get : public Select
    {
    public:
        person_and_organization_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_directive() { return IsADBEntity("action_directive"); }
        action_directive get_action_directive();
        bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        alternate_product_relationship get_alternate_product_relationship();
        bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        applied_action_assignment get_applied_action_assignment();
        bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        applied_classification_assignment get_applied_classification_assignment();
        bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        applied_identification_assignment get_applied_identification_assignment();
        bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        applied_security_classification_assignment get_applied_security_classification_assignment();
        bool is_approval() { return IsADBEntity("approval"); }
        approval get_approval();
        bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        assembly_component_usage_substitute get_assembly_component_usage_substitute();
        bool is_certification() { return IsADBEntity("certification"); }
        certification get_certification();
        bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        configuration_item get_configuration_item();
        bool is_contract() { return IsADBEntity("contract"); }
        contract get_contract();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        information_usage_right get_information_usage_right();
        bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        organizational_project get_organizational_project();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        product_definition_formation_relationship get_product_definition_formation_relationship();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_rule_action() { return IsADBEntity("rule_action"); }
        rule_action get_rule_action();
        bool is_security_classification() { return IsADBEntity("security_classification"); }
        security_classification get_security_classification();
        bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        shape_representation get_shape_representation();
        bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        versioned_action_request get_versioned_action_request();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class person_and_organization_item_put : public Select
    {
    public:
        person_and_organization_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_and_organization_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_directive(action_directive inst);
        void put_alternate_product_relationship(alternate_product_relationship inst);
        void put_applied_action_assignment(applied_action_assignment inst);
        void put_applied_classification_assignment(applied_classification_assignment inst);
        void put_applied_identification_assignment(applied_identification_assignment inst);
        void put_applied_security_classification_assignment(applied_security_classification_assignment inst);
        void put_approval(approval inst);
        void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst);
        void put_certification(certification inst);
        void put_configuration_item(configuration_item inst);
        void put_contract(contract inst);
        void put_document_file(document_file inst);
        void put_executed_action(executed_action inst);
        void put_general_property(general_property inst);
        void put_information_usage_right(information_usage_right inst);
        void put_organizational_project(organizational_project inst);
        void put_person_and_organization(person_and_organization inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_formation_relationship(product_definition_formation_relationship inst);
        void put_property_definition(property_definition inst);
        void put_rule_action(rule_action inst);
        void put_security_classification(security_classification inst);
        void put_shape_representation(shape_representation inst);
        void put_versioned_action_request(versioned_action_request inst);
    };


    class person_organization_select : public Select
    {
    public:
        person_organization_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select(Select* outer) : Select(outer) {}

        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        void put_person(person inst);

        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        void put_organization(organization inst);

        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();
        void put_person_and_organization(person_and_organization inst);
    };


    class person_organization_select_get : public Select
    {
    public:
        person_organization_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select_get(Select* outer) : Select(outer) {}
        bool is_person() { return IsADBEntity("person"); }
        person get_person();
        bool is_organization() { return IsADBEntity("organization"); }
        organization get_organization();
        bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        person_and_organization get_person_and_organization();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class person_organization_select_put : public Select
    {
    public:
        person_organization_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        person_organization_select_put(Select* outer) : Select(outer) {}
        void put_person(person inst);
        void put_organization(organization inst);
        void put_person_and_organization(person_and_organization inst);
    };


    class picture_representation_item_select : public Select
    {
    public:
        picture_representation_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        picture_representation_item_select(Select* outer) : Select(outer) {}

        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        void put_styled_item(styled_item inst);

        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();
        void put_planar_box(planar_box inst);

        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();
        void put_axis2_placement_2d(axis2_placement_2d inst);
    };


    class picture_representation_item_select_get : public Select
    {
    public:
        picture_representation_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        picture_representation_item_select_get(Select* outer) : Select(outer) {}
        bool is_styled_item() { return IsADBEntity("styled_item"); }
        styled_item get_styled_item();
        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();
        bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        axis2_placement_2d get_axis2_placement_2d();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class picture_representation_item_select_put : public Select
    {
    public:
        picture_representation_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        picture_representation_item_select_put(Select* outer) : Select(outer) {}
        void put_styled_item(styled_item inst);
        void put_planar_box(planar_box inst);
        void put_axis2_placement_2d(axis2_placement_2d inst);
    };


    class plane_or_planar_box : public Select
    {
    public:
        plane_or_planar_box(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box(Select* outer) : Select(outer) {}

        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        void put_plane(plane inst);

        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();
        void put_planar_box(planar_box inst);
    };


    class plane_or_planar_box_get : public Select
    {
    public:
        plane_or_planar_box_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box_get(Select* outer) : Select(outer) {}
        bool is_plane() { return IsADBEntity("plane"); }
        plane get_plane();
        bool is_planar_box() { return IsADBEntity("planar_box"); }
        planar_box get_planar_box();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class plane_or_planar_box_put : public Select
    {
    public:
        plane_or_planar_box_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        plane_or_planar_box_put(Select* outer) : Select(outer) {}
        void put_plane(plane inst);
        void put_planar_box(planar_box inst);
    };


    class point_and_vector_member : public Select
    {
    public:
        point_and_vector_member(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        point_and_vector_member(Select* outer) : Select(outer) {}

        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        void put_point(point inst);

        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();
        void put_direction(direction inst);
    };


    class point_and_vector_member_get : public Select
    {
    public:
        point_and_vector_member_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        point_and_vector_member_get(Select* outer) : Select(outer) {}
        bool is_point() { return IsADBEntity("point"); }
        point get_point();
        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class point_and_vector_member_put : public Select
    {
    public:
        point_and_vector_member_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        point_and_vector_member_put(Select* outer) : Select(outer) {}
        void put_point(point inst);
        void put_direction(direction inst);
    };


    class presentation_representation_select : public Select
    {
    public:
        presentation_representation_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select(Select* outer) : Select(outer) {}

        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        void put_presentation_representation(presentation_representation inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);
    };


    class presentation_representation_select_get : public Select
    {
    public:
        presentation_representation_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select_get(Select* outer) : Select(outer) {}
        bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        presentation_representation get_presentation_representation();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_representation_select_put : public Select
    {
    public:
        presentation_representation_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_representation_select_put(Select* outer) : Select(outer) {}
        void put_presentation_representation(presentation_representation inst);
        void put_presentation_set(presentation_set inst);
    };


    class presentation_size_assignment_select : public Select
    {
    public:
        presentation_size_assignment_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select(Select* outer) : Select(outer) {}

        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        void put_presentation_view(presentation_view inst);

        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        void put_presentation_area(presentation_area inst);

        bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        area_in_set get_area_in_set();
        void put_area_in_set(area_in_set inst);
    };


    class presentation_size_assignment_select_get : public Select
    {
    public:
        presentation_size_assignment_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select_get(Select* outer) : Select(outer) {}
        bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        presentation_view get_presentation_view();
        bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        presentation_area get_presentation_area();
        bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        area_in_set get_area_in_set();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_size_assignment_select_put : public Select
    {
    public:
        presentation_size_assignment_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_size_assignment_select_put(Select* outer) : Select(outer) {}
        void put_presentation_view(presentation_view inst);
        void put_presentation_area(presentation_area inst);
        void put_area_in_set(area_in_set inst);
    };


    class presentation_style_select : public Select
    {
    public:
        presentation_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select(Select* outer) : Select(outer) {}

        bool is_point_style() { return IsADBEntity("point_style"); }
        point_style get_point_style();
        void put_point_style(point_style inst);

        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        void put_curve_style(curve_style inst);

        bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        surface_style_usage get_surface_style_usage();
        void put_surface_style_usage(surface_style_usage inst);

        bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        symbol_style get_symbol_style();
        void put_symbol_style(symbol_style inst);

        bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        fill_area_style get_fill_area_style();
        void put_fill_area_style(fill_area_style inst);

        bool is_text_style() { return IsADBEntity("text_style"); }
        text_style get_text_style();
        void put_text_style(text_style inst);

        bool is_null_style() { return IsADBType("NULL_STYLE"); }
        Nullable<null_style> get_null_style() { int v = getEnumerationValue("NULL_STYLE", null_style_); if (v >= 0) return (null_style) v; else return Nullable<null_style>(); }
        void put_null_style(null_style value) { TextValue val = null_style_[(int) value]; putEnumerationValue("NULL_STYLE", val); }
    };


    class presentation_style_select_get : public Select
    {
    public:
        presentation_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select_get(Select* outer) : Select(outer) {}
        bool is_point_style() { return IsADBEntity("point_style"); }
        point_style get_point_style();
        bool is_curve_style() { return IsADBEntity("curve_style"); }
        curve_style get_curve_style();
        bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        surface_style_usage get_surface_style_usage();
        bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        symbol_style get_symbol_style();
        bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        fill_area_style get_fill_area_style();
        bool is_text_style() { return IsADBEntity("text_style"); }
        text_style get_text_style();
        bool is_null_style() { return IsADBType("NULL_STYLE"); }
        Nullable<null_style> get_null_style() { int v = getEnumerationValue("NULL_STYLE", null_style_); if (v >= 0) return (null_style) v; else return Nullable<null_style>(); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presentation_style_select_put : public Select
    {
    public:
        presentation_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presentation_style_select_put(Select* outer) : Select(outer) {}
        void put_point_style(point_style inst);
        void put_curve_style(curve_style inst);
        void put_surface_style_usage(surface_style_usage inst);
        void put_symbol_style(symbol_style inst);
        void put_fill_area_style(fill_area_style inst);
        void put_text_style(text_style inst);
        void put_null_style(null_style value) { TextValue val = null_style_[(int) value]; putEnumerationValue("NULL_STYLE", val); }
    };


    class presented_item_select : public Select
    {
    public:
        presented_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        void put_action_method(action_method inst);

        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        void put_action_relationship(action_relationship inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);

        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        void put_product_concept_feature(product_concept_feature inst);

        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        void put_product_concept_feature_category(product_concept_feature_category inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class presented_item_select_get : public Select
    {
    public:
        presented_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_action_method() { return IsADBEntity("action_method"); }
        action_method get_action_method();
        bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        action_relationship get_action_relationship();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        product_concept_feature get_product_concept_feature();
        bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        product_concept_feature_category get_product_concept_feature_category();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class presented_item_select_put : public Select
    {
    public:
        presented_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        presented_item_select_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_action_method(action_method inst);
        void put_action_relationship(action_relationship inst);
        void put_product_concept(product_concept inst);
        void put_product_concept_feature(product_concept_feature inst);
        void put_product_concept_feature_category(product_concept_feature_category inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
    };


    class product_definition_or_assembly_relationship : public Select
    {
    public:
        product_definition_or_assembly_relationship(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_assembly_relationship(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class product_definition_or_assembly_relationship_get : public Select
    {
    public:
        product_definition_or_assembly_relationship_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_assembly_relationship_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class product_definition_or_assembly_relationship_put : public Select
    {
    public:
        product_definition_or_assembly_relationship_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_assembly_relationship_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_product_definition(product_definition inst);
    };


    class product_definition_or_breakdown_element_usage : public Select
    {
    public:
        product_definition_or_breakdown_element_usage(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_breakdown_element_usage(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();
        void put_product_definition_usage(product_definition_usage inst);
    };


    class product_definition_or_breakdown_element_usage_get : public Select
    {
    public:
        product_definition_or_breakdown_element_usage_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_breakdown_element_usage_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class product_definition_or_breakdown_element_usage_put : public Select
    {
    public:
        product_definition_or_breakdown_element_usage_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_breakdown_element_usage_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_usage(product_definition_usage inst);
    };


    class product_definition_or_product_definition_relationship : public Select
    {
    public:
        product_definition_or_product_definition_relationship(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_product_definition_relationship(Select* outer) : Select(outer) {}

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();
        void put_product_definition_usage(product_definition_usage inst);
    };


    class product_definition_or_product_definition_relationship_get : public Select
    {
    public:
        product_definition_or_product_definition_relationship_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_product_definition_relationship_get(Select* outer) : Select(outer) {}
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class product_definition_or_product_definition_relationship_put : public Select
    {
    public:
        product_definition_or_product_definition_relationship_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_definition_or_product_definition_relationship_put(Select* outer) : Select(outer) {}
        void put_product_definition(product_definition inst);
        void put_product_definition_usage(product_definition_usage inst);
    };


    class product_or_formation_or_definition : public Select
    {
    public:
        product_or_formation_or_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition(Select* outer) : Select(outer) {}

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);
    };


    class product_or_formation_or_definition_get : public Select
    {
    public:
        product_or_formation_or_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition_get(Select* outer) : Select(outer) {}
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class product_or_formation_or_definition_put : public Select
    {
    public:
        product_or_formation_or_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        product_or_formation_or_definition_put(Select* outer) : Select(outer) {}
        void put_product(product inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition(product_definition inst);
    };


    class project_item : public Select
    {
    public:
        project_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        project_item(Select* outer) : Select(outer) {}

        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        void put_executed_action(executed_action inst);

        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();
        void put_product_concept(product_concept inst);
    };


    class project_item_get : public Select
    {
    public:
        project_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        project_item_get(Select* outer) : Select(outer) {}
        bool is_executed_action() { return IsADBEntity("executed_action"); }
        executed_action get_executed_action();
        bool is_product_concept() { return IsADBEntity("product_concept"); }
        product_concept get_product_concept();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class project_item_put : public Select
    {
    public:
        project_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        project_item_put(Select* outer) : Select(outer) {}
        void put_executed_action(executed_action inst);
        void put_product_concept(product_concept inst);
    };


    class rendering_properties_select : public Select
    {
    public:
        rendering_properties_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select(Select* outer) : Select(outer) {}

        bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        surface_style_reflectance_ambient get_surface_style_reflectance_ambient();
        void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst);

        bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        surface_style_transparent get_surface_style_transparent();
        void put_surface_style_transparent(surface_style_transparent inst);
    };


    class rendering_properties_select_get : public Select
    {
    public:
        rendering_properties_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select_get(Select* outer) : Select(outer) {}
        bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        surface_style_reflectance_ambient get_surface_style_reflectance_ambient();
        bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        surface_style_transparent get_surface_style_transparent();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class rendering_properties_select_put : public Select
    {
    public:
        rendering_properties_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rendering_properties_select_put(Select* outer) : Select(outer) {}
        void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst);
        void put_surface_style_transparent(surface_style_transparent inst);
    };


    class represented_definition : public Select
    {
    public:
        represented_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition(Select* outer) : Select(outer) {}

        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        void put_general_property(general_property inst);

        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        void put_property_definition(property_definition inst);

        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        void put_property_definition_relationship(property_definition_relationship inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);

        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class represented_definition_get : public Select
    {
    public:
        represented_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition_get(Select* outer) : Select(outer) {}
        bool is_general_property() { return IsADBEntity("general_property"); }
        general_property get_general_property();
        bool is_property_definition() { return IsADBEntity("property_definition"); }
        property_definition get_property_definition();
        bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        property_definition_relationship get_property_definition_relationship();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        shape_aspect_relationship get_shape_aspect_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class represented_definition_put : public Select
    {
    public:
        represented_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        represented_definition_put(Select* outer) : Select(outer) {}
        void put_general_property(general_property inst);
        void put_property_definition(property_definition inst);
        void put_property_definition_relationship(property_definition_relationship inst);
        void put_shape_aspect(shape_aspect inst);
        void put_shape_aspect_relationship(shape_aspect_relationship inst);
    };


    class requirement_satisfaction_item : public Select
    {
    public:
        requirement_satisfaction_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_satisfaction_item(Select* outer) : Select(outer) {}

        requirement_assigned_item _requirement_assigned_item() { return requirement_assigned_item(this); }
    };


    class requirement_satisfaction_item_get : public Select
    {
    public:
        requirement_satisfaction_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_satisfaction_item_get(Select* outer) : Select(outer) {}
        requirement_assigned_item_get get_requirement_assigned_item() { return requirement_assigned_item_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class requirement_satisfaction_item_put : public Select
    {
    public:
        requirement_satisfaction_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_satisfaction_item_put(Select* outer) : Select(outer) {}
        requirement_assigned_item_put put_requirement_assigned_item() { return requirement_assigned_item_put(this); }
    };


    class requirement_source_item : public Select
    {
    public:
        requirement_source_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_source_item(Select* outer) : Select(outer) {}

        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        void put_characterized_object(characterized_object inst);

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        void put_group_relationship(group_relationship inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        void put_product_definition_relationship(product_definition_relationship inst);

        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();
        void put_shape_aspect(shape_aspect inst);
    };


    class requirement_source_item_get : public Select
    {
    public:
        requirement_source_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_source_item_get(Select* outer) : Select(outer) {}
        bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        characterized_object get_characterized_object();
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        group_relationship get_group_relationship();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        product_definition_relationship get_product_definition_relationship();
        bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        shape_aspect get_shape_aspect();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class requirement_source_item_put : public Select
    {
    public:
        requirement_source_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        requirement_source_item_put(Select* outer) : Select(outer) {}
        void put_characterized_object(characterized_object inst);
        void put_group(group inst);
        void put_group_relationship(group_relationship inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_relationship(product_definition_relationship inst);
        void put_shape_aspect(shape_aspect inst);
    };


    class reversible_topology_item : public Select
    {
    public:
        reversible_topology_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item(Select* outer) : Select(outer) {}

        bool is_edge() { return IsADBEntity("edge"); }
        edge get_edge();
        void put_edge(edge inst);

        bool is_path() { return IsADBEntity("path"); }
        path get_path();
        void put_path(path inst);

        bool is_face() { return IsADBEntity("face"); }
        face get_face();
        void put_face(face inst);

        bool is_face_bound() { return IsADBEntity("face_bound"); }
        face_bound get_face_bound();
        void put_face_bound(face_bound inst);

        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        void put_closed_shell(closed_shell inst);

        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        void put_open_shell(open_shell inst);
    };


    class reversible_topology_item_get : public Select
    {
    public:
        reversible_topology_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item_get(Select* outer) : Select(outer) {}
        bool is_edge() { return IsADBEntity("edge"); }
        edge get_edge();
        bool is_path() { return IsADBEntity("path"); }
        path get_path();
        bool is_face() { return IsADBEntity("face"); }
        face get_face();
        bool is_face_bound() { return IsADBEntity("face_bound"); }
        face_bound get_face_bound();
        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class reversible_topology_item_put : public Select
    {
    public:
        reversible_topology_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_item_put(Select* outer) : Select(outer) {}
        void put_edge(edge inst);
        void put_path(path inst);
        void put_face(face inst);
        void put_face_bound(face_bound inst);
        void put_closed_shell(closed_shell inst);
        void put_open_shell(open_shell inst);
    };


    class reversible_topology : public Select
    {
    public:
        reversible_topology(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology(Select* outer) : Select(outer) {}

        reversible_topology_item _reversible_topology_item() { return reversible_topology_item(this); }

        bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_list_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); list_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_list_of_reversible_topology_item(TList& lst) { list_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

        bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_set_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); set_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_set_of_reversible_topology_item(TList& lst) { set_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
    };


    class reversible_topology_get : public Select
    {
    public:
        reversible_topology_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_get(Select* outer) : Select(outer) {}
        reversible_topology_item_get get_reversible_topology_item() { return reversible_topology_item_get(this); }
        bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_list_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); list_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }

        //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void get_set_of_reversible_topology_item(TList& lst) { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); set_of_reversible_topology_itemSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class reversible_topology_put : public Select
    {
    public:
        reversible_topology_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        reversible_topology_put(Select* outer) : Select(outer) {}
        reversible_topology_item_put put_reversible_topology_item() { return reversible_topology_item_put(this); }

                //TList may be list_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_list_of_reversible_topology_item(TList& lst) { list_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

                //TList may be set_of_reversible_topology_item or list of converible elements
        template <typename TList> void put_set_of_reversible_topology_item(TList& lst) { set_of_reversible_topology_itemSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
    };


    class role_select : public Select
    {
    public:
        role_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select(Select* outer) : Select(outer) {}

        bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        action_assignment get_action_assignment();
        void put_action_assignment(action_assignment inst);

        bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        action_request_assignment get_action_request_assignment();
        void put_action_request_assignment(action_request_assignment inst);

        bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        approval_assignment get_approval_assignment();
        void put_approval_assignment(approval_assignment inst);

        bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        approval_date_time get_approval_date_time();
        void put_approval_date_time(approval_date_time inst);

        bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        certification_assignment get_certification_assignment();
        void put_certification_assignment(certification_assignment inst);

        bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        contract_assignment get_contract_assignment();
        void put_contract_assignment(contract_assignment inst);

        bool is_document_reference() { return IsADBEntity("document_reference"); }
        document_reference get_document_reference();
        void put_document_reference(document_reference inst);

        bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        effectivity_assignment get_effectivity_assignment();
        void put_effectivity_assignment(effectivity_assignment inst);

        bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        group_assignment get_group_assignment();
        void put_group_assignment(group_assignment inst);

        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        void put_name_assignment(name_assignment inst);

        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();
        void put_security_classification_assignment(security_classification_assignment inst);
    };


    class role_select_get : public Select
    {
    public:
        role_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select_get(Select* outer) : Select(outer) {}
        bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        action_assignment get_action_assignment();
        bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        action_request_assignment get_action_request_assignment();
        bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        approval_assignment get_approval_assignment();
        bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        approval_date_time get_approval_date_time();
        bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        certification_assignment get_certification_assignment();
        bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        contract_assignment get_contract_assignment();
        bool is_document_reference() { return IsADBEntity("document_reference"); }
        document_reference get_document_reference();
        bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        effectivity_assignment get_effectivity_assignment();
        bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        group_assignment get_group_assignment();
        bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        name_assignment get_name_assignment();
        bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        security_classification_assignment get_security_classification_assignment();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class role_select_put : public Select
    {
    public:
        role_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        role_select_put(Select* outer) : Select(outer) {}
        void put_action_assignment(action_assignment inst);
        void put_action_request_assignment(action_request_assignment inst);
        void put_approval_assignment(approval_assignment inst);
        void put_approval_date_time(approval_date_time inst);
        void put_certification_assignment(certification_assignment inst);
        void put_contract_assignment(contract_assignment inst);
        void put_document_reference(document_reference inst);
        void put_effectivity_assignment(effectivity_assignment inst);
        void put_group_assignment(group_assignment inst);
        void put_name_assignment(name_assignment inst);
        void put_security_classification_assignment(security_classification_assignment inst);
    };


    class rule_superseded_item : public Select
    {
    public:
        rule_superseded_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rule_superseded_item(Select* outer) : Select(outer) {}

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class rule_superseded_item_get : public Select
    {
    public:
        rule_superseded_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rule_superseded_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class rule_superseded_item_put : public Select
    {
    public:
        rule_superseded_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        rule_superseded_item_put(Select* outer) : Select(outer) {}
        void put_product_definition_formation(product_definition_formation inst);
    };


    class security_classification_item : public Select
    {
    public:
        security_classification_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item(Select* outer) : Select(outer) {}

        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        void put_assembly_component_usage(assembly_component_usage inst);

        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        void put_document(document inst);

        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        void put_document_file(document_file inst);

        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        void put_make_from_usage_option(make_from_usage_option inst);

        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        void put_product(product inst);

        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        void put_product_definition(product_definition inst);

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);

        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();
        void put_product_definition_usage(product_definition_usage inst);
    };


    class security_classification_item_get : public Select
    {
    public:
        security_classification_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item_get(Select* outer) : Select(outer) {}
        bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        assembly_component_usage get_assembly_component_usage();
        bool is_document() { return IsADBEntity("document"); }
        document get_document();
        bool is_document_file() { return IsADBEntity("document_file"); }
        document_file get_document_file();
        bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        make_from_usage_option get_make_from_usage_option();
        bool is_product() { return IsADBEntity("product"); }
        product get_product();
        bool is_product_definition() { return IsADBEntity("product_definition"); }
        product_definition get_product_definition();
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        product_definition_usage get_product_definition_usage();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class security_classification_item_put : public Select
    {
    public:
        security_classification_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        security_classification_item_put(Select* outer) : Select(outer) {}
        void put_assembly_component_usage(assembly_component_usage inst);
        void put_document(document inst);
        void put_document_file(document_file inst);
        void put_make_from_usage_option(make_from_usage_option inst);
        void put_product(product inst);
        void put_product_definition(product_definition inst);
        void put_product_definition_formation(product_definition_formation inst);
        void put_product_definition_usage(product_definition_usage inst);
    };


    class shell : public Select
    {
    public:
        shell(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell(Select* outer) : Select(outer) {}

        bool is_vertex_shell() { return IsADBEntity("vertex_shell"); }
        vertex_shell get_vertex_shell();
        void put_vertex_shell(vertex_shell inst);

        bool is_wire_shell() { return IsADBEntity("wire_shell"); }
        wire_shell get_wire_shell();
        void put_wire_shell(wire_shell inst);

        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        void put_open_shell(open_shell inst);

        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();
        void put_closed_shell(closed_shell inst);
    };


    class shell_get : public Select
    {
    public:
        shell_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell_get(Select* outer) : Select(outer) {}
        bool is_vertex_shell() { return IsADBEntity("vertex_shell"); }
        vertex_shell get_vertex_shell();
        bool is_wire_shell() { return IsADBEntity("wire_shell"); }
        wire_shell get_wire_shell();
        bool is_open_shell() { return IsADBEntity("open_shell"); }
        open_shell get_open_shell();
        bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        closed_shell get_closed_shell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class shell_put : public Select
    {
    public:
        shell_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        shell_put(Select* outer) : Select(outer) {}
        void put_vertex_shell(vertex_shell inst);
        void put_wire_shell(wire_shell inst);
        void put_open_shell(open_shell inst);
        void put_closed_shell(closed_shell inst);
    };


    class size_select : public Select
    {
    public:
        size_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select(Select* outer) : Select(outer) {}

        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }

        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        void put_measure_with_unit(measure_with_unit inst);

        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class size_select_get : public Select
    {
    public:
        size_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select_get(Select* outer) : Select(outer) {}
        bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        Nullable<positive_length_measure> get_positive_length_measure() { return getSimpleValue<positive_length_measure>("POSITIVE_LENGTH_MEASURE", sdaiREAL); }
        bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        measure_with_unit get_measure_with_unit();
        bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        descriptive_measure get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class size_select_put : public Select
    {
    public:
        size_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        size_select_put(Select* outer) : Select(outer) {}
        void put_positive_length_measure(positive_length_measure value) { putSimpleValue("POSITIVE_LENGTH_MEASURE", sdaiREAL, value); }
        void put_measure_with_unit(measure_with_unit inst);
        void put_descriptive_measure(descriptive_measure value) { putTextValue("DESCRIPTIVE_MEASURE", sdaiSTRING, value); }
    };


    class sketch_basis_select : public Select
    {
    public:
        sketch_basis_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        sketch_basis_select(Select* outer) : Select(outer) {}

        bool is_curve_bounded_surface() { return IsADBEntity("curve_bounded_surface"); }
        curve_bounded_surface get_curve_bounded_surface();
        void put_curve_bounded_surface(curve_bounded_surface inst);

        bool is_face_surface() { return IsADBEntity("face_surface"); }
        face_surface get_face_surface();
        void put_face_surface(face_surface inst);
    };


    class sketch_basis_select_get : public Select
    {
    public:
        sketch_basis_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        sketch_basis_select_get(Select* outer) : Select(outer) {}
        bool is_curve_bounded_surface() { return IsADBEntity("curve_bounded_surface"); }
        curve_bounded_surface get_curve_bounded_surface();
        bool is_face_surface() { return IsADBEntity("face_surface"); }
        face_surface get_face_surface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class sketch_basis_select_put : public Select
    {
    public:
        sketch_basis_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        sketch_basis_select_put(Select* outer) : Select(outer) {}
        void put_curve_bounded_surface(curve_bounded_surface inst);
        void put_face_surface(face_surface inst);
    };


    class source_item : public Select
    {
    public:
        source_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item(Select* outer) : Select(outer) {}

        bool is_identifier() { return IsADBType("IDENTIFIER"); }
        identifier get_identifier() { return getTextValue("IDENTIFIER", sdaiSTRING); }
        void put_identifier(identifier value) { putTextValue("IDENTIFIER", sdaiSTRING, value); }

        bool is_message() { return IsADBType("MESSAGE"); }
        message get_message() { return getTextValue("MESSAGE", sdaiSTRING); }
        void put_message(message value) { putTextValue("MESSAGE", sdaiSTRING, value); }
    };


    class source_item_get : public Select
    {
    public:
        source_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item_get(Select* outer) : Select(outer) {}
        bool is_identifier() { return IsADBType("IDENTIFIER"); }
        identifier get_identifier() { return getTextValue("IDENTIFIER", sdaiSTRING); }
        bool is_message() { return IsADBType("MESSAGE"); }
        message get_message() { return getTextValue("MESSAGE", sdaiSTRING); }

        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class source_item_put : public Select
    {
    public:
        source_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        source_item_put(Select* outer) : Select(outer) {}
        void put_identifier(identifier value) { putTextValue("IDENTIFIER", sdaiSTRING, value); }
        void put_message(message value) { putTextValue("MESSAGE", sdaiSTRING, value); }
    };


    class start_request_item : public Select
    {
    public:
        start_request_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        start_request_item(Select* outer) : Select(outer) {}

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class start_request_item_get : public Select
    {
    public:
        start_request_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        start_request_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class start_request_item_put : public Select
    {
    public:
        start_request_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        start_request_item_put(Select* outer) : Select(outer) {}
        void put_product_definition_formation(product_definition_formation inst);
    };


    class string_representation_item_select : public Select
    {
    public:
        string_representation_item_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        string_representation_item_select(Select* outer) : Select(outer) {}

        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        void put_descriptive_representation_item(descriptive_representation_item inst);

        bool is_included_text_block() { return IsADBEntity("included_text_block"); }
        included_text_block get_included_text_block();
        void put_included_text_block(included_text_block inst);

        bool is_structured_text_composition() { return IsADBEntity("structured_text_composition"); }
        structured_text_composition get_structured_text_composition();
        void put_structured_text_composition(structured_text_composition inst);
    };


    class string_representation_item_select_get : public Select
    {
    public:
        string_representation_item_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        string_representation_item_select_get(Select* outer) : Select(outer) {}
        bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        descriptive_representation_item get_descriptive_representation_item();
        bool is_included_text_block() { return IsADBEntity("included_text_block"); }
        included_text_block get_included_text_block();
        bool is_structured_text_composition() { return IsADBEntity("structured_text_composition"); }
        structured_text_composition get_structured_text_composition();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class string_representation_item_select_put : public Select
    {
    public:
        string_representation_item_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        string_representation_item_select_put(Select* outer) : Select(outer) {}
        void put_descriptive_representation_item(descriptive_representation_item inst);
        void put_included_text_block(included_text_block inst);
        void put_structured_text_composition(structured_text_composition inst);
    };


    class style_context_select : public Select
    {
    public:
        style_context_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select(Select* outer) : Select(outer) {}

        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        void put_group(group inst);

        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        void put_presentation_layer_assignment(presentation_layer_assignment inst);

        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        void put_presentation_set(presentation_set inst);

        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        void put_representation(representation inst);

        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        void put_representation_item(representation_item inst);

        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();
        void put_representation_relationship(representation_relationship inst);
    };


    class style_context_select_get : public Select
    {
    public:
        style_context_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select_get(Select* outer) : Select(outer) {}
        bool is_group() { return IsADBEntity("group"); }
        group get_group();
        bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        presentation_layer_assignment get_presentation_layer_assignment();
        bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        presentation_set get_presentation_set();
        bool is_representation() { return IsADBEntity("representation"); }
        representation get_representation();
        bool is_representation_item() { return IsADBEntity("representation_item"); }
        representation_item get_representation_item();
        bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        representation_relationship get_representation_relationship();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class style_context_select_put : public Select
    {
    public:
        style_context_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        style_context_select_put(Select* outer) : Select(outer) {}
        void put_group(group inst);
        void put_presentation_layer_assignment(presentation_layer_assignment inst);
        void put_presentation_set(presentation_set inst);
        void put_representation(representation inst);
        void put_representation_item(representation_item inst);
        void put_representation_relationship(representation_relationship inst);
    };


    class surface_side_style_select : public Select
    {
    public:
        surface_side_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select(Select* outer) : Select(outer) {}

        bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        surface_side_style get_surface_side_style();
        void put_surface_side_style(surface_side_style inst);

        bool is_pre_defined_surface_side_style() { return IsADBEntity("pre_defined_surface_side_style"); }
        pre_defined_surface_side_style get_pre_defined_surface_side_style();
        void put_pre_defined_surface_side_style(pre_defined_surface_side_style inst);
    };


    class surface_side_style_select_get : public Select
    {
    public:
        surface_side_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select_get(Select* outer) : Select(outer) {}
        bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        surface_side_style get_surface_side_style();
        bool is_pre_defined_surface_side_style() { return IsADBEntity("pre_defined_surface_side_style"); }
        pre_defined_surface_side_style get_pre_defined_surface_side_style();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class surface_side_style_select_put : public Select
    {
    public:
        surface_side_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_side_style_select_put(Select* outer) : Select(outer) {}
        void put_surface_side_style(surface_side_style inst);
        void put_pre_defined_surface_side_style(pre_defined_surface_side_style inst);
    };


    class surface_style_element_select : public Select
    {
    public:
        surface_style_element_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select(Select* outer) : Select(outer) {}

        bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        surface_style_fill_area get_surface_style_fill_area();
        void put_surface_style_fill_area(surface_style_fill_area inst);

        bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        surface_style_boundary get_surface_style_boundary();
        void put_surface_style_boundary(surface_style_boundary inst);

        bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        surface_style_silhouette get_surface_style_silhouette();
        void put_surface_style_silhouette(surface_style_silhouette inst);

        bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        surface_style_segmentation_curve get_surface_style_segmentation_curve();
        void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst);

        bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        surface_style_control_grid get_surface_style_control_grid();
        void put_surface_style_control_grid(surface_style_control_grid inst);

        bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        surface_style_parameter_line get_surface_style_parameter_line();
        void put_surface_style_parameter_line(surface_style_parameter_line inst);

        bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        surface_style_rendering get_surface_style_rendering();
        void put_surface_style_rendering(surface_style_rendering inst);
    };


    class surface_style_element_select_get : public Select
    {
    public:
        surface_style_element_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select_get(Select* outer) : Select(outer) {}
        bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        surface_style_fill_area get_surface_style_fill_area();
        bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        surface_style_boundary get_surface_style_boundary();
        bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        surface_style_silhouette get_surface_style_silhouette();
        bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        surface_style_segmentation_curve get_surface_style_segmentation_curve();
        bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        surface_style_control_grid get_surface_style_control_grid();
        bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        surface_style_parameter_line get_surface_style_parameter_line();
        bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        surface_style_rendering get_surface_style_rendering();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class surface_style_element_select_put : public Select
    {
    public:
        surface_style_element_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        surface_style_element_select_put(Select* outer) : Select(outer) {}
        void put_surface_style_fill_area(surface_style_fill_area inst);
        void put_surface_style_boundary(surface_style_boundary inst);
        void put_surface_style_silhouette(surface_style_silhouette inst);
        void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst);
        void put_surface_style_control_grid(surface_style_control_grid inst);
        void put_surface_style_parameter_line(surface_style_parameter_line inst);
        void put_surface_style_rendering(surface_style_rendering inst);
    };


    class symbol_style_select : public Select
    {
    public:
        symbol_style_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select(Select* outer) : Select(outer) {}

        bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        symbol_colour get_symbol_colour();
        void put_symbol_colour(symbol_colour inst);
    };


    class symbol_style_select_get : public Select
    {
    public:
        symbol_style_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select_get(Select* outer) : Select(outer) {}
        bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        symbol_colour get_symbol_colour();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class symbol_style_select_put : public Select
    {
    public:
        symbol_style_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        symbol_style_select_put(Select* outer) : Select(outer) {}
        void put_symbol_colour(symbol_colour inst);
    };


    class text_or_character : public Select
    {
    public:
        text_or_character(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character(Select* outer) : Select(outer) {}

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);
    };


    class text_or_character_get : public Select
    {
    public:
        text_or_character_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character_get(Select* outer) : Select(outer) {}
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class text_or_character_put : public Select
    {
    public:
        text_or_character_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_or_character_put(Select* outer) : Select(outer) {}
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_composite_text(composite_text inst);
        void put_text_literal(text_literal inst);
    };


    class text_string_representation_item : public Select
    {
    public:
        text_string_representation_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item(Select* outer) : Select(outer) {}

        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        void put_text_literal(text_literal inst);

        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        void put_annotation_text(annotation_text inst);

        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        void put_annotation_text_character(annotation_text_character inst);

        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        void put_composite_text(composite_text inst);

        axis2_placement _axis2_placement() { return axis2_placement(this); }
    };


    class text_string_representation_item_get : public Select
    {
    public:
        text_string_representation_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item_get(Select* outer) : Select(outer) {}
        bool is_text_literal() { return IsADBEntity("text_literal"); }
        text_literal get_text_literal();
        bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        annotation_text get_annotation_text();
        bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        annotation_text_character get_annotation_text_character();
        bool is_composite_text() { return IsADBEntity("composite_text"); }
        composite_text get_composite_text();
        axis2_placement_get get_axis2_placement() { return axis2_placement_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class text_string_representation_item_put : public Select
    {
    public:
        text_string_representation_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        text_string_representation_item_put(Select* outer) : Select(outer) {}
        void put_text_literal(text_literal inst);
        void put_annotation_text(annotation_text inst);
        void put_annotation_text_character(annotation_text_character inst);
        void put_composite_text(composite_text inst);
        axis2_placement_put put_axis2_placement() { return axis2_placement_put(this); }
    };


    class time_interval_item : public Select
    {
    public:
        time_interval_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item(Select* outer) : Select(outer) {}

        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        void put_action(action inst);

        bool is_time_interval_based_effectivity() { return IsADBEntity("time_interval_based_effectivity"); }
        time_interval_based_effectivity get_time_interval_based_effectivity();
        void put_time_interval_based_effectivity(time_interval_based_effectivity inst);
    };


    class time_interval_item_get : public Select
    {
    public:
        time_interval_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item_get(Select* outer) : Select(outer) {}
        bool is_action() { return IsADBEntity("action"); }
        action get_action();
        bool is_time_interval_based_effectivity() { return IsADBEntity("time_interval_based_effectivity"); }
        time_interval_based_effectivity get_time_interval_based_effectivity();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class time_interval_item_put : public Select
    {
    public:
        time_interval_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        time_interval_item_put(Select* outer) : Select(outer) {}
        void put_action(action inst);
        void put_time_interval_based_effectivity(time_interval_based_effectivity inst);
    };


    class tolerance_method_definition : public Select
    {
    public:
        tolerance_method_definition(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition(Select* outer) : Select(outer) {}

        bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        tolerance_value get_tolerance_value();
        void put_tolerance_value(tolerance_value inst);

        bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        limits_and_fits get_limits_and_fits();
        void put_limits_and_fits(limits_and_fits inst);
    };


    class tolerance_method_definition_get : public Select
    {
    public:
        tolerance_method_definition_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition_get(Select* outer) : Select(outer) {}
        bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        tolerance_value get_tolerance_value();
        bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        limits_and_fits get_limits_and_fits();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class tolerance_method_definition_put : public Select
    {
    public:
        tolerance_method_definition_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        tolerance_method_definition_put(Select* outer) : Select(outer) {}
        void put_tolerance_value(tolerance_value inst);
        void put_limits_and_fits(limits_and_fits inst);
    };


    class transformation : public Select
    {
    public:
        transformation(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation(Select* outer) : Select(outer) {}

        bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        item_defined_transformation get_item_defined_transformation();
        void put_item_defined_transformation(item_defined_transformation inst);

        bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        functionally_defined_transformation get_functionally_defined_transformation();
        void put_functionally_defined_transformation(functionally_defined_transformation inst);
    };


    class transformation_get : public Select
    {
    public:
        transformation_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation_get(Select* outer) : Select(outer) {}
        bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        item_defined_transformation get_item_defined_transformation();
        bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        functionally_defined_transformation get_functionally_defined_transformation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class transformation_put : public Select
    {
    public:
        transformation_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        transformation_put(Select* outer) : Select(outer) {}
        void put_item_defined_transformation(item_defined_transformation inst);
        void put_functionally_defined_transformation(functionally_defined_transformation inst);
    };


    class trim_condition_select : public Select
    {
    public:
        trim_condition_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trim_condition_select(Select* outer) : Select(outer) {}

        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }

        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }

        generalized_surface_select _generalized_surface_select() { return generalized_surface_select(this); }

        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();
        void put_solid_model(solid_model inst);
    };


    class trim_condition_select_get : public Select
    {
    public:
        trim_condition_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trim_condition_select_get(Select* outer) : Select(outer) {}
        bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        Nullable<length_measure> get_length_measure() { return getSimpleValue<length_measure>("LENGTH_MEASURE", sdaiREAL); }
        bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        Nullable<plane_angle_measure> get_plane_angle_measure() { return getSimpleValue<plane_angle_measure>("PLANE_ANGLE_MEASURE", sdaiREAL); }
        generalized_surface_select_get get_generalized_surface_select() { return generalized_surface_select_get(this); }
        bool is_solid_model() { return IsADBEntity("solid_model"); }
        solid_model get_solid_model();

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class trim_condition_select_put : public Select
    {
    public:
        trim_condition_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trim_condition_select_put(Select* outer) : Select(outer) {}
        void put_length_measure(length_measure value) { putSimpleValue("LENGTH_MEASURE", sdaiREAL, value); }
        void put_plane_angle_measure(plane_angle_measure value) { putSimpleValue("PLANE_ANGLE_MEASURE", sdaiREAL, value); }
        generalized_surface_select_put put_generalized_surface_select() { return generalized_surface_select_put(this); }
        void put_solid_model(solid_model inst);
    };


    class trimming_select : public Select
    {
    public:
        trimming_select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select(Select* outer) : Select(outer) {}

        bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        cartesian_point get_cartesian_point();
        void put_cartesian_point(cartesian_point inst);

        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
    };


    class trimming_select_get : public Select
    {
    public:
        trimming_select_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select_get(Select* outer) : Select(outer) {}
        bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        cartesian_point get_cartesian_point();
        bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        Nullable<parameter_value> get_parameter_value() { return getSimpleValue<parameter_value>("PARAMETER_VALUE", sdaiREAL); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class trimming_select_put : public Select
    {
    public:
        trimming_select_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        trimming_select_put(Select* outer) : Select(outer) {}
        void put_cartesian_point(cartesian_point inst);
        void put_parameter_value(parameter_value value) { putSimpleValue("PARAMETER_VALUE", sdaiREAL, value); }
    };


    class unit : public Select
    {
    public:
        unit(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit(Select* outer) : Select(outer) {}

        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        void put_derived_unit(derived_unit inst);

        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();
        void put_named_unit(named_unit inst);
    };


    class unit_get : public Select
    {
    public:
        unit_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit_get(Select* outer) : Select(outer) {}
        bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        derived_unit get_derived_unit();
        bool is_named_unit() { return IsADBEntity("named_unit"); }
        named_unit get_named_unit();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class unit_put : public Select
    {
    public:
        unit_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        unit_put(Select* outer) : Select(outer) {}
        void put_derived_unit(derived_unit inst);
        void put_named_unit(named_unit inst);
    };


    class value_qualifier : public Select
    {
    public:
        value_qualifier(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier(Select* outer) : Select(outer) {}

        bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        precision_qualifier get_precision_qualifier();
        void put_precision_qualifier(precision_qualifier inst);

        bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        type_qualifier get_type_qualifier();
        void put_type_qualifier(type_qualifier inst);

        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
    };


    class value_qualifier_get : public Select
    {
    public:
        value_qualifier_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier_get(Select* outer) : Select(outer) {}
        bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        precision_qualifier get_precision_qualifier();
        bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        type_qualifier get_type_qualifier();
        bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        uncertainty_qualifier get_uncertainty_qualifier();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class value_qualifier_put : public Select
    {
    public:
        value_qualifier_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        value_qualifier_put(Select* outer) : Select(outer) {}
        void put_precision_qualifier(precision_qualifier inst);
        void put_type_qualifier(type_qualifier inst);
        void put_uncertainty_qualifier(uncertainty_qualifier inst);
    };


    class vector_or_direction : public Select
    {
    public:
        vector_or_direction(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction(Select* outer) : Select(outer) {}

        bool is_vector() { return IsADBEntity("vector"); }
        vector get_vector();
        void put_vector(vector inst);

        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();
        void put_direction(direction inst);
    };


    class vector_or_direction_get : public Select
    {
    public:
        vector_or_direction_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction_get(Select* outer) : Select(outer) {}
        bool is_vector() { return IsADBEntity("vector"); }
        vector get_vector();
        bool is_direction() { return IsADBEntity("direction"); }
        direction get_direction();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class vector_or_direction_put : public Select
    {
    public:
        vector_or_direction_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        vector_or_direction_put(Select* outer) : Select(outer) {}
        void put_vector(vector inst);
        void put_direction(direction inst);
    };


    class work_item : public Select
    {
    public:
        work_item(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        work_item(Select* outer) : Select(outer) {}

        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();
        void put_product_definition_formation(product_definition_formation inst);
    };


    class work_item_get : public Select
    {
    public:
        work_item_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        work_item_get(Select* outer) : Select(outer) {}
        bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        product_definition_formation get_product_definition_formation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class work_item_put : public Select
    {
    public:
        work_item_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        work_item_put(Select* outer) : Select(outer) {}
        void put_product_definition_formation(product_definition_formation inst);
    };


        //
        // Unnamed aggregations
        //
    typedef std::list<derived_unit_element> set_of_derived_unit_element;
    template <typename TList> class set_of_derived_unit_elementSerializer : public AggrSerializerInstance<TList, derived_unit_element> {};
    typedef std::list<representation_item> set_of_representation_item;
    template <typename TList> class set_of_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef std::list<versioned_action_request> set_of_versioned_action_request;
    template <typename TList> class set_of_versioned_action_requestSerializer : public AggrSerializerInstance<TList, versioned_action_request> {};
    typedef std::list<face_bound> set_of_face_bound;
    template <typename TList> class set_of_face_boundSerializer : public AggrSerializerInstance<TList, face_bound> {};
    typedef std::list<draughting_callout_element> set_of_draughting_callout_element;
    template <typename TList> class set_of_draughting_callout_elementSerializer : public AggrSerializerSelect<TList, draughting_callout_element> {};
    typedef std::list<datum_reference> set_of_datum_reference;
    template <typename TList> class set_of_datum_referenceSerializer : public AggrSerializerInstance<TList, datum_reference> {};
    typedef std::list<presentation_style_assignment> set_of_presentation_style_assignment;
    template <typename TList> class set_of_presentation_style_assignmentSerializer : public AggrSerializerInstance<TList, presentation_style_assignment> {};
    typedef std::list<curve> set_of_curve;
    template <typename TList> class set_of_curveSerializer : public AggrSerializerInstance<TList, curve> {};
    typedef std::list<annotation_plane_element> set_of_annotation_plane_element;
    template <typename TList> class set_of_annotation_plane_elementSerializer : public AggrSerializerSelect<TList, annotation_plane_element> {};
    typedef std::list<shape_aspect_relationship> set_of_shape_aspect_relationship;
    template <typename TList> class set_of_shape_aspect_relationshipSerializer : public AggrSerializerInstance<TList, shape_aspect_relationship> {};
    typedef std::list<application_context_element> set_of_application_context_element;
    template <typename TList> class set_of_application_context_elementSerializer : public AggrSerializerInstance<TList, application_context_element> {};
    typedef std::list<action_items> set_of_action_items;
    template <typename TList> class set_of_action_itemsSerializer : public AggrSerializerSelect<TList, action_items> {};
    typedef std::list<action_method_items> set_of_action_method_items;
    template <typename TList> class set_of_action_method_itemsSerializer : public AggrSerializerSelect<TList, action_method_items> {};
    typedef std::list<action_request_item> set_of_action_request_item;
    template <typename TList> class set_of_action_request_itemSerializer : public AggrSerializerSelect<TList, action_request_item> {};
    typedef std::list<approval_item> set_of_approval_item;
    template <typename TList> class set_of_approval_itemSerializer : public AggrSerializerSelect<TList, approval_item> {};
    typedef std::list<attribute_classification_item> set_of_attribute_classification_item;
    template <typename TList> class set_of_attribute_classification_itemSerializer : public AggrSerializerSelect<TList, attribute_classification_item> {};
    typedef std::list<certification_item> set_of_certification_item;
    template <typename TList> class set_of_certification_itemSerializer : public AggrSerializerSelect<TList, certification_item> {};
    typedef std::list<classification_item> set_of_classification_item;
    template <typename TList> class set_of_classification_itemSerializer : public AggrSerializerSelect<TList, classification_item> {};
    typedef std::list<contract_item> set_of_contract_item;
    template <typename TList> class set_of_contract_itemSerializer : public AggrSerializerSelect<TList, contract_item> {};
    typedef std::list<date_and_time_item> set_of_date_and_time_item;
    template <typename TList> class set_of_date_and_time_itemSerializer : public AggrSerializerSelect<TList, date_and_time_item> {};
    typedef std::list<date_item> set_of_date_item;
    template <typename TList> class set_of_date_itemSerializer : public AggrSerializerSelect<TList, date_item> {};
    typedef std::list<document_reference_item> set_of_document_reference_item;
    template <typename TList> class set_of_document_reference_itemSerializer : public AggrSerializerSelect<TList, document_reference_item> {};
    typedef std::list<effectivity_item> set_of_effectivity_item;
    template <typename TList> class set_of_effectivity_itemSerializer : public AggrSerializerSelect<TList, effectivity_item> {};
    typedef std::list<event_occurrence_item> set_of_event_occurrence_item;
    template <typename TList> class set_of_event_occurrence_itemSerializer : public AggrSerializerSelect<TList, event_occurrence_item> {};
    typedef std::list<external_identification_item> set_of_external_identification_item;
    template <typename TList> class set_of_external_identification_itemSerializer : public AggrSerializerSelect<TList, external_identification_item> {};
    typedef std::list<groupable_item> set_of_groupable_item;
    template <typename TList> class set_of_groupable_itemSerializer : public AggrSerializerSelect<TList, groupable_item> {};
    typedef std::list<identification_item> set_of_identification_item;
    template <typename TList> class set_of_identification_itemSerializer : public AggrSerializerSelect<TList, identification_item> {};
    typedef std::list<organization_item> set_of_organization_item;
    template <typename TList> class set_of_organization_itemSerializer : public AggrSerializerSelect<TList, organization_item> {};
    typedef std::list<project_item> set_of_project_item;
    template <typename TList> class set_of_project_itemSerializer : public AggrSerializerSelect<TList, project_item> {};
    typedef std::list<person_and_organization_item> set_of_person_and_organization_item;
    template <typename TList> class set_of_person_and_organization_itemSerializer : public AggrSerializerSelect<TList, person_and_organization_item> {};
    typedef std::list<presented_item_select> set_of_presented_item_select;
    template <typename TList> class set_of_presented_item_selectSerializer : public AggrSerializerSelect<TList, presented_item_select> {};
    typedef std::list<security_classification_item> set_of_security_classification_item;
    template <typename TList> class set_of_security_classification_itemSerializer : public AggrSerializerSelect<TList, security_classification_item> {};
    typedef std::list<time_interval_item> set_of_time_interval_item;
    template <typename TList> class set_of_time_interval_itemSerializer : public AggrSerializerSelect<TList, time_interval_item> {};
    typedef std::list<product_definition> set_of_product_definition;
    template <typename TList> class set_of_product_definitionSerializer : public AggrSerializerInstance<TList, product_definition> {};
    typedef std::list<attribute_language_item> set_of_attribute_language_item;
    template <typename TList> class set_of_attribute_language_itemSerializer : public AggrSerializerSelect<TList, attribute_language_item> {};
    typedef std::list<cartesian_point> list_of_cartesian_point;
    template <typename TList> class list_of_cartesian_pointSerializer : public AggrSerializerInstance<TList, cartesian_point> {};
    typedef std::list<IntValue> ListOfIntValue;
    template <typename TList> class ListOfIntValueSerializer : public AggrSerializerSimple<TList, IntValue, sdaiINTEGER> {};
    typedef std::list<parameter_value> list_of_parameter_value;
    template <typename TList> class list_of_parameter_valueSerializer : public AggrSerializerSimple<TList, parameter_value, sdaiREAL> {};
    typedef std::list<list_of_cartesian_point> list_of_list_of_cartesian_point;
    template <typename TList> class list_of_list_of_cartesian_pointSerializer : public AggrSerializerAggr<TList, list_of_cartesian_point, list_of_cartesian_pointSerializer<list_of_cartesian_point>> {};
    typedef std::list<generic_expression> list_of_generic_expression;
    template <typename TList> class list_of_generic_expressionSerializer : public AggrSerializerInstance<TList, generic_expression> {};
    typedef std::list<composite_curve_segment> list_of_composite_curve_segment;
    template <typename TList> class list_of_composite_curve_segmentSerializer : public AggrSerializerInstance<TList, composite_curve_segment> {};
    typedef std::list<pcurve_or_surface> list_of_pcurve_or_surface;
    template <typename TList> class list_of_pcurve_or_surfaceSerializer : public AggrSerializerSelect<TList, pcurve_or_surface> {};
    typedef std::list<product_definition_or_breakdown_element_usage> set_of_product_definition_or_breakdown_element_usage;
    template <typename TList> class set_of_product_definition_or_breakdown_element_usageSerializer : public AggrSerializerSelect<TList, product_definition_or_breakdown_element_usage> {};
    typedef std::list<oriented_closed_shell> set_of_oriented_closed_shell;
    template <typename TList> class set_of_oriented_closed_shellSerializer : public AggrSerializerInstance<TList, oriented_closed_shell> {};
    typedef std::list<camera_model_d3_multi_clipping_interection_select> set_of_camera_model_d3_multi_clipping_interection_select;
    template <typename TList> class set_of_camera_model_d3_multi_clipping_interection_selectSerializer : public AggrSerializerSelect<TList, camera_model_d3_multi_clipping_interection_select> {};
    typedef std::list<camera_model_d3_multi_clipping_union_select> set_of_camera_model_d3_multi_clipping_union_select;
    template <typename TList> class set_of_camera_model_d3_multi_clipping_union_selectSerializer : public AggrSerializerSelect<TList, camera_model_d3_multi_clipping_union_select> {};
    typedef std::list<light_source> set_of_light_source;
    template <typename TList> class set_of_light_sourceSerializer : public AggrSerializerInstance<TList, light_source> {};
    typedef std::list<mapped_item> set_of_mapped_item;
    template <typename TList> class set_of_mapped_itemSerializer : public AggrSerializerInstance<TList, mapped_item> {};
    typedef std::list<length_measure> list_of_length_measure;
    template <typename TList> class list_of_length_measureSerializer : public AggrSerializerSimple<TList, length_measure, sdaiREAL> {};
    typedef std::list<approved_item> set_of_approved_item;
    template <typename TList> class set_of_approved_itemSerializer : public AggrSerializerSelect<TList, approved_item> {};
    typedef std::list<certified_item> set_of_certified_item;
    template <typename TList> class set_of_certified_itemSerializer : public AggrSerializerSelect<TList, certified_item> {};
    typedef std::list<contracted_item> set_of_contracted_item;
    template <typename TList> class set_of_contracted_itemSerializer : public AggrSerializerSelect<TList, contracted_item> {};
    typedef std::list<date_time_item> set_of_date_time_item;
    template <typename TList> class set_of_date_time_itemSerializer : public AggrSerializerSelect<TList, date_time_item> {};
    typedef std::list<cc_person_organization_item> set_of_cc_person_organization_item;
    template <typename TList> class set_of_cc_person_organization_itemSerializer : public AggrSerializerSelect<TList, cc_person_organization_item> {};
    typedef std::list<cc_classified_item> set_of_cc_classified_item;
    template <typename TList> class set_of_cc_classified_itemSerializer : public AggrSerializerSelect<TList, cc_classified_item> {};
    typedef std::list<cc_specified_item> set_of_cc_specified_item;
    template <typename TList> class set_of_cc_specified_itemSerializer : public AggrSerializerSelect<TList, cc_specified_item> {};
    typedef std::list<work_item> set_of_work_item;
    template <typename TList> class set_of_work_itemSerializer : public AggrSerializerSelect<TList, work_item> {};
    typedef std::list<change_request_item> set_of_change_request_item;
    template <typename TList> class set_of_change_request_itemSerializer : public AggrSerializerSelect<TList, change_request_item> {};
    typedef std::list<annotation_fill_area> set_of_annotation_fill_area;
    template <typename TList> class set_of_annotation_fill_areaSerializer : public AggrSerializerInstance<TList, annotation_fill_area> {};
    typedef std::list<class_usage_effectivity_context_item> set_of_class_usage_effectivity_context_item;
    template <typename TList> class set_of_class_usage_effectivity_context_itemSerializer : public AggrSerializerSelect<TList, class_usage_effectivity_context_item> {};
    typedef std::list<face> set_of_face;
    template <typename TList> class set_of_faceSerializer : public AggrSerializerInstance<TList, face> {};
    typedef std::list<face_surface> set_of_face_surface;
    template <typename TList> class set_of_face_surfaceSerializer : public AggrSerializerInstance<TList, face_surface> {};
    typedef std::list<face_surface> list_of_face_surface;
    template <typename TList> class list_of_face_surfaceSerializer : public AggrSerializerInstance<TList, face_surface> {};
    typedef std::list<list_of_face_surface> set_of_list_of_face_surface;
    template <typename TList> class set_of_list_of_face_surfaceSerializer : public AggrSerializerAggr<TList, list_of_face_surface, list_of_face_surfaceSerializer<list_of_face_surface>> {};
    typedef std::list<composite_curve> bag_of_composite_curve;
    template <typename TList> class bag_of_composite_curveSerializer : public AggrSerializerInstance<TList, composite_curve> {};
    typedef std::list<characterized_definition> set_of_characterized_definition;
    template <typename TList> class set_of_characterized_definitionSerializer : public AggrSerializerSelect<TList, characterized_definition> {};
    typedef std::list<text_or_character> set_of_text_or_character;
    template <typename TList> class set_of_text_or_characterSerializer : public AggrSerializerSelect<TList, text_or_character> {};
    typedef std::list<product_concept_feature_association> set_of_product_concept_feature_association;
    template <typename TList> class set_of_product_concept_feature_associationSerializer : public AggrSerializerInstance<TList, product_concept_feature_association> {};
    typedef std::list<configured_effectivity_item> set_of_configured_effectivity_item;
    template <typename TList> class set_of_configured_effectivity_itemSerializer : public AggrSerializerSelect<TList, configured_effectivity_item> {};
    typedef std::list<configured_effectivity_context_item> set_of_configured_effectivity_context_item;
    template <typename TList> class set_of_configured_effectivity_context_itemSerializer : public AggrSerializerSelect<TList, configured_effectivity_context_item> {};
    typedef std::list<edge> set_of_edge;
    template <typename TList> class set_of_edgeSerializer : public AggrSerializerInstance<TList, edge> {};
    typedef std::list<invisible_item> set_of_invisible_item;
    template <typename TList> class set_of_invisible_itemSerializer : public AggrSerializerSelect<TList, invisible_item> {};
    typedef std::list<style_context_select> list_of_style_context_select;
    template <typename TList> class list_of_style_context_selectSerializer : public AggrSerializerSelect<TList, style_context_select> {};
    typedef std::list<boundary_curve> set_of_boundary_curve;
    template <typename TList> class set_of_boundary_curveSerializer : public AggrSerializerInstance<TList, boundary_curve> {};
    typedef std::list<curve_style_font_pattern> list_of_curve_style_font_pattern;
    template <typename TList> class list_of_curve_style_font_patternSerializer : public AggrSerializerInstance<TList, curve_style_font_pattern> {};
    typedef std::list<property_definition_representation> set_of_property_definition_representation;
    template <typename TList> class set_of_property_definition_representationSerializer : public AggrSerializerInstance<TList, property_definition_representation> {};
    typedef std::list<double> list_of_double;
    template <typename TList> class list_of_doubleSerializer : public AggrSerializerSimple<TList, double, sdaiREAL> {};
    typedef std::list<document_representation_type> set_of_document_representation_type;
    template <typename TList> class set_of_document_representation_typeSerializer : public AggrSerializerInstance<TList, document_representation_type> {};
    typedef std::list<document_identifier_assigned_item> set_of_document_identifier_assigned_item;
    template <typename TList> class set_of_document_identifier_assigned_itemSerializer : public AggrSerializerSelect<TList, document_identifier_assigned_item> {};
    typedef std::list<draughting_titled_item> set_of_draughting_titled_item;
    template <typename TList> class set_of_draughting_titled_itemSerializer : public AggrSerializerSelect<TList, draughting_titled_item> {};
    typedef std::list<area_in_set> set_of_area_in_set;
    template <typename TList> class set_of_area_in_setSerializer : public AggrSerializerInstance<TList, area_in_set> {};
    typedef std::list<connected_edge_set> set_of_connected_edge_set;
    template <typename TList> class set_of_connected_edge_setSerializer : public AggrSerializerInstance<TList, connected_edge_set> {};
    typedef std::list<edge_curve> list_of_edge_curve;
    template <typename TList> class list_of_edge_curveSerializer : public AggrSerializerInstance<TList, edge_curve> {};
    typedef std::list<oriented_edge> list_of_oriented_edge;
    template <typename TList> class list_of_oriented_edgeSerializer : public AggrSerializerInstance<TList, oriented_edge> {};
    typedef std::list<list_of_edge_curve> set_of_list_of_edge_curve;
    template <typename TList> class set_of_list_of_edge_curveSerializer : public AggrSerializerAggr<TList, list_of_edge_curve, list_of_edge_curveSerializer<list_of_edge_curve>> {};
    typedef std::list<plane_angle_measure> list_of_plane_angle_measure;
    template <typename TList> class list_of_plane_angle_measureSerializer : public AggrSerializerSimple<TList, plane_angle_measure, sdaiREAL> {};
    typedef std::list<connected_face_set> set_of_connected_face_set;
    template <typename TList> class set_of_connected_face_setSerializer : public AggrSerializerInstance<TList, connected_face_set> {};
    typedef std::list<fill_style_select> set_of_fill_style_select;
    template <typename TList> class set_of_fill_style_selectSerializer : public AggrSerializerSelect<TList, fill_style_select> {};
    typedef std::list<fill_area_style_tile_shape_select> set_of_fill_area_style_tile_shape_select;
    template <typename TList> class set_of_fill_area_style_tile_shape_selectSerializer : public AggrSerializerSelect<TList, fill_area_style_tile_shape_select> {};
    typedef std::list<geometric_set_select> set_of_geometric_set_select;
    template <typename TList> class set_of_geometric_set_selectSerializer : public AggrSerializerSelect<TList, geometric_set_select> {};
    typedef std::list<representation> set_of_representation;
    template <typename TList> class set_of_representationSerializer : public AggrSerializerInstance<TList, representation> {};
    typedef std::list<uncertainty_measure_with_unit> set_of_uncertainty_measure_with_unit;
    template <typename TList> class set_of_uncertainty_measure_with_unitSerializer : public AggrSerializerInstance<TList, uncertainty_measure_with_unit> {};
    typedef std::list<unit> set_of_unit;
    template <typename TList> class set_of_unitSerializer : public AggrSerializerSelect<TList, unit> {};
    typedef std::list<presentation_view> set_of_presentation_view;
    template <typename TList> class set_of_presentation_viewSerializer : public AggrSerializerInstance<TList, presentation_view> {};
    typedef std::list<instance_usage_context_select> set_of_instance_usage_context_select;
    template <typename TList> class set_of_instance_usage_context_selectSerializer : public AggrSerializerSelect<TList, instance_usage_context_select> {};
    typedef std::list<value_qualifier> set_of_value_qualifier;
    template <typename TList> class set_of_value_qualifierSerializer : public AggrSerializerSelect<TList, value_qualifier> {};
    typedef std::list<multi_language_attribute_item> set_of_multi_language_attribute_item;
    template <typename TList> class set_of_multi_language_attribute_itemSerializer : public AggrSerializerSelect<TList, multi_language_attribute_item> {};
    typedef std::list<attribute_language_assignment> set_of_attribute_language_assignment;
    template <typename TList> class set_of_attribute_language_assignmentSerializer : public AggrSerializerInstance<TList, attribute_language_assignment> {};
    typedef std::list<organization> set_of_organization;
    template <typename TList> class set_of_organizationSerializer : public AggrSerializerInstance<TList, organization> {};
    typedef std::list<StringValue> list_of_label;
    template <typename TList> class list_of_labelSerializer : public AggrSerializerText<list_of_label, label, sdaiSTRING> {};
    typedef std::list<person> set_of_person;
    template <typename TList> class set_of_personSerializer : public AggrSerializerInstance<TList, person> {};
    typedef std::list<auxiliary_geometric_representation_item> set_of_auxiliary_geometric_representation_item;
    template <typename TList> class set_of_auxiliary_geometric_representation_itemSerializer : public AggrSerializerInstance<TList, auxiliary_geometric_representation_item> {};
    typedef std::list<layered_item> set_of_layered_item;
    template <typename TList> class set_of_layered_itemSerializer : public AggrSerializerSelect<TList, layered_item> {};
    typedef std::list<presentation_style_select> set_of_presentation_style_select;
    template <typename TList> class set_of_presentation_style_selectSerializer : public AggrSerializerSelect<TList, presentation_style_select> {};
    typedef std::list<representation_item> list_of_representation_item;
    template <typename TList> class list_of_representation_itemSerializer : public AggrSerializerInstance<TList, representation_item> {};
    typedef std::list<product_context> set_of_product_context;
    template <typename TList> class set_of_product_contextSerializer : public AggrSerializerInstance<TList, product_context> {};
    typedef std::list<category_usage_item> set_of_category_usage_item;
    template <typename TList> class set_of_category_usage_itemSerializer : public AggrSerializerSelect<TList, category_usage_item> {};
    typedef std::list<product_definition_or_product_definition_relationship> set_of_product_definition_or_product_definition_relationship;
    template <typename TList> class set_of_product_definition_or_product_definition_relationshipSerializer : public AggrSerializerSelect<TList, product_definition_or_product_definition_relationship> {};
    typedef std::list<document> set_of_document;
    template <typename TList> class set_of_documentSerializer : public AggrSerializerInstance<TList, document> {};
    typedef std::list<characterized_product_composition_value> set_of_characterized_product_composition_value;
    template <typename TList> class set_of_characterized_product_composition_valueSerializer : public AggrSerializerSelect<TList, characterized_product_composition_value> {};
    typedef std::list<product> set_of_product;
    template <typename TList> class set_of_productSerializer : public AggrSerializerInstance<TList, product> {};
    typedef std::list<shape_aspect> set_of_shape_aspect;
    template <typename TList> class set_of_shape_aspectSerializer : public AggrSerializerInstance<TList, shape_aspect> {};
    typedef std::list<list_of_double> list_of_list_of_double;
    template <typename TList> class list_of_list_of_doubleSerializer : public AggrSerializerAggr<TList, list_of_double, list_of_doubleSerializer<list_of_double>> {};
    typedef std::list<surface_patch> list_of_surface_patch;
    template <typename TList> class list_of_surface_patchSerializer : public AggrSerializerInstance<TList, surface_patch> {};
    typedef std::list<list_of_surface_patch> list_of_list_of_surface_patch;
    template <typename TList> class list_of_list_of_surface_patchSerializer : public AggrSerializerAggr<TList, list_of_surface_patch, list_of_surface_patchSerializer<list_of_surface_patch>> {};
    typedef std::list<requirement_assigned_item> set_of_requirement_assigned_item;
    template <typename TList> class set_of_requirement_assigned_itemSerializer : public AggrSerializerSelect<TList, requirement_assigned_item> {};
    typedef std::list<rule_superseded_item> set_of_rule_superseded_item;
    template <typename TList> class set_of_rule_superseded_itemSerializer : public AggrSerializerSelect<TList, rule_superseded_item> {};
    typedef std::list<requirement_satisfaction_item> set_of_requirement_satisfaction_item;
    template <typename TList> class set_of_requirement_satisfaction_itemSerializer : public AggrSerializerSelect<TList, requirement_satisfaction_item> {};
    typedef std::list<shell> set_of_shell;
    template <typename TList> class set_of_shellSerializer : public AggrSerializerSelect<TList, shell> {};
    typedef std::list<positive_length_measure> list_of_positive_length_measure;
    template <typename TList> class list_of_positive_length_measureSerializer : public AggrSerializerSimple<TList, positive_length_measure, sdaiREAL> {};
    typedef std::list<LOGICAL_VALUE> ListOfLOGICAL_VALUE;
    template <typename TList> class ListOfLOGICAL_VALUESerializer : public AggrSerializerEnum<TList, LOGICAL_VALUE, LOGICAL_VALUE_, sdaiLOGICAL> {};
    typedef std::list<positive_integer> set_of_positive_integer;
    template <typename TList> class set_of_positive_integerSerializer : public AggrSerializerSimple<TList, positive_integer, sdaiINTEGER> {};
    typedef std::list<set_of_positive_integer> list_of_set_of_positive_integer;
    template <typename TList> class list_of_set_of_positive_integerSerializer : public AggrSerializerAggr<TList, set_of_positive_integer, set_of_positive_integerSerializer<set_of_positive_integer>> {};
    typedef std::list<conical_stepped_hole_transition> set_of_conical_stepped_hole_transition;
    template <typename TList> class set_of_conical_stepped_hole_transitionSerializer : public AggrSerializerInstance<TList, conical_stepped_hole_transition> {};
    typedef std::list<point> list_of_point;
    template <typename TList> class list_of_pointSerializer : public AggrSerializerInstance<TList, point> {};
    typedef std::list<blend_radius_variation_type> list_of_blend_radius_variation_type;
    template <typename TList> class list_of_blend_radius_variation_typeSerializer : public AggrSerializerEnum<TList, blend_radius_variation_type, blend_radius_variation_type_, sdaiENUM> {};
    typedef std::list<requirement_source_item> set_of_requirement_source_item;
    template <typename TList> class set_of_requirement_source_itemSerializer : public AggrSerializerSelect<TList, requirement_source_item> {};
    typedef std::list<start_request_item> set_of_start_request_item;
    template <typename TList> class set_of_start_request_itemSerializer : public AggrSerializerSelect<TList, start_request_item> {};
    typedef std::list<rectangular_composite_surface> bag_of_rectangular_composite_surface;
    template <typename TList> class bag_of_rectangular_composite_surfaceSerializer : public AggrSerializerInstance<TList, rectangular_composite_surface> {};
    typedef std::list<surface_style_element_select> set_of_surface_style_element_select;
    template <typename TList> class set_of_surface_style_element_selectSerializer : public AggrSerializerSelect<TList, surface_style_element_select> {};
    typedef std::list<direction_count_select> set_of_direction_count_select;
    template <typename TList> class set_of_direction_count_selectSerializer : public AggrSerializerSelect<TList, direction_count_select> {};
    typedef std::list<rendering_properties_select> set_of_rendering_properties_select;
    template <typename TList> class set_of_rendering_properties_selectSerializer : public AggrSerializerSelect<TList, rendering_properties_select> {};
    typedef std::list<character_glyph_font_usage> set_of_character_glyph_font_usage;
    template <typename TList> class set_of_character_glyph_font_usageSerializer : public AggrSerializerInstance<TList, character_glyph_font_usage> {};
    typedef std::list<text_font_in_family> set_of_text_font_in_family;
    template <typename TList> class set_of_text_font_in_familySerializer : public AggrSerializerInstance<TList, text_font_in_family> {};
    typedef std::list<box_characteristic_select> set_of_box_characteristic_select;
    template <typename TList> class set_of_box_characteristic_selectSerializer : public AggrSerializerSelect<TList, box_characteristic_select> {};
    typedef std::list<geometric_tolerance> set_of_geometric_tolerance;
    template <typename TList> class set_of_geometric_toleranceSerializer : public AggrSerializerInstance<TList, geometric_tolerance> {};
    typedef std::list<blend_end_condition_select> list_of_blend_end_condition_select;
    template <typename TList> class list_of_blend_end_condition_selectSerializer : public AggrSerializerSelect<TList, blend_end_condition_select> {};
    typedef std::list<trimming_select> set_of_trimming_select;
    template <typename TList> class set_of_trimming_selectSerializer : public AggrSerializerSelect<TList, trimming_select> {};
    typedef std::list<loop> set_of_loop;
    template <typename TList> class set_of_loopSerializer : public AggrSerializerInstance<TList, loop> {};

        //
        // Entities
        // 


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_with_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_with_unit"); assert(inst); return inst; }

        measure_value_get get_value_component() { return measure_value_get(m_instance, "value_component", NULL); }
        measure_value_put put_value_component() { return measure_value_put(m_instance, "value_component", NULL); }

        unit_get get_unit_component() { return unit_get(m_instance, "unit_component", NULL); }
        unit_put put_unit_component() { return unit_put(m_instance, "unit_component", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of absorbed_dose_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class absorbed_dose_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of absorbed_dose_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        absorbed_dose_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "absorbed_dose_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of absorbed_dose_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static absorbed_dose_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "absorbed_dose_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_unit")
        {}

                /// <summary>
                /// Create new instace of derived_unit and returns object of this C++ class to interact with
                /// </summary>
        static derived_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_unit"); assert(inst); return inst; }

        //TList may be set_of_derived_unit_element or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_derived_unit_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_derived_unit_element or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_derived_unit_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }

        //TArrayElem[] may be derived_unit_element[] or array of convertible elements
        template <typename TArrayElem> void put_elements(TArrayElem arr[], size_t n) { set_of_derived_unit_element lst; ArrayToList(arr, n, lst); put_elements(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of absorbed_dose_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class absorbed_dose_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of absorbed_dose_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        absorbed_dose_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "absorbed_dose_unit")
        {}

                /// <summary>
                /// Create new instace of absorbed_dose_unit and returns object of this C++ class to interact with
                /// </summary>
        static absorbed_dose_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "absorbed_dose_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition")
        {}

                /// <summary>
                /// Create new instace of property_definition and returns object of this C++ class to interact with
                /// </summary>
        static property_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_definition_get get_definition() { return characterized_definition_get(m_instance, "definition", NULL); }
        characterized_definition_put put_definition() { return characterized_definition_put(m_instance, "definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition_representation")
        {}

                /// <summary>
                /// Create new instace of property_definition_representation and returns object of this C++ class to interact with
                /// </summary>
        static property_definition_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition_representation"); assert(inst); return inst; }

        represented_definition_get get_definition() { return represented_definition_get(m_instance, "definition", NULL); }
        represented_definition_put put_definition() { return represented_definition_put(m_instance, "definition", NULL); }

        representation get_used_representation();
        void put_used_representation(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation")
        {}

                /// <summary>
                /// Create new instace of representation and returns object of this C++ class to interact with
                /// </summary>
        static representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_items(TArrayElem arr[], size_t n) { set_of_representation_item lst; ArrayToList(arr, n, lst); put_items(lst); }

        representation_context get_context_of_items();
        void put_context_of_items(representation_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_item")
        {}

                /// <summary>
                /// Create new instace of representation_item and returns object of this C++ class to interact with
                /// </summary>
        static representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_item"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of abstract_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class abstract_variable : public virtual property_definition, public virtual property_definition_representation, public virtual representation, public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of abstract_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        abstract_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "abstract_variable")
        {}

                /// <summary>
                /// Create new instace of abstract_variable and returns object of this C++ class to interact with
                /// </summary>
        static abstract_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "abstract_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of acceleration_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class acceleration_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of acceleration_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        acceleration_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "acceleration_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of acceleration_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static acceleration_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "acceleration_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of acceleration_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class acceleration_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of acceleration_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        acceleration_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "acceleration_unit")
        {}

                /// <summary>
                /// Create new instace of acceleration_unit and returns object of this C++ class to interact with
                /// </summary>
        static acceleration_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "acceleration_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action")
        {}

                /// <summary>
                /// Create new instace of action and returns object of this C++ class to interact with
                /// </summary>
        static action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_method get_chosen_method();
        void put_chosen_method(action_method inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_assignment")
        {}


        action get_assigned_action();
        void put_assigned_action(action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_directive
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_directive : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_directive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_directive(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_directive")
        {}

                /// <summary>
                /// Create new instace of action_directive and returns object of this C++ class to interact with
                /// </summary>
        static action_directive Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_directive"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        text get_analysis() { text val = NULL; if (sdaiGetAttrBN(m_instance, "analysis", sdaiSTRING, &val)) return val; else return NULL; }
        void put_analysis(text value) { sdaiPutAttrBN(m_instance, "analysis", sdaiSTRING, value); }

        text get_comment() { text val = NULL; if (sdaiGetAttrBN(m_instance, "comment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_comment(text value) { sdaiPutAttrBN(m_instance, "comment", sdaiSTRING, value); }

        //TList may be set_of_versioned_action_request or list of converible elements
        template <typename TList> void get_requests(TList& lst) { set_of_versioned_action_requestSerializer<TList> sr; sr.FromAttr(lst, m_instance, "requests"); }

        //TList may be set_of_versioned_action_request or list of converible elements
        template <typename TList> void put_requests(TList& lst) { set_of_versioned_action_requestSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "requests"); }

        //TArrayElem[] may be versioned_action_request[] or array of convertible elements
        template <typename TArrayElem> void put_requests(TArrayElem arr[], size_t n) { set_of_versioned_action_request lst; ArrayToList(arr, n, lst); put_requests(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method")
        {}

                /// <summary>
                /// Create new instace of action_method and returns object of this C++ class to interact with
                /// </summary>
        static action_method Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_method"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        text get_consequence() { text val = NULL; if (sdaiGetAttrBN(m_instance, "consequence", sdaiSTRING, &val)) return val; else return NULL; }
        void put_consequence(text value) { sdaiPutAttrBN(m_instance, "consequence", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method_assignment")
        {}


        action_method get_assigned_action_method();
        void put_assigned_action_method(action_method inst);

        action_method_role get_role();
        void put_role(action_method_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method_relationship")
        {}

                /// <summary>
                /// Create new instace of action_method_relationship and returns object of this C++ class to interact with
                /// </summary>
        static action_method_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_method_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_method get_relating_method();
        void put_relating_method(action_method inst);

        action_method get_related_method();
        void put_related_method(action_method inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_method_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_method_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_method_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_method_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_method_role")
        {}

                /// <summary>
                /// Create new instace of action_method_role and returns object of this C++ class to interact with
                /// </summary>
        static action_method_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_method_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_property : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_property")
        {}

                /// <summary>
                /// Create new instace of action_property and returns object of this C++ class to interact with
                /// </summary>
        static action_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_property"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        characterized_action_definition_get get_definition() { return characterized_action_definition_get(m_instance, "definition", NULL); }
        characterized_action_definition_put put_definition() { return characterized_action_definition_put(m_instance, "definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_property_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_property_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_property_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_property_representation")
        {}

                /// <summary>
                /// Create new instace of action_property_representation and returns object of this C++ class to interact with
                /// </summary>
        static action_property_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_property_representation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action_property get_property();
        void put_property(action_property inst);

        representation get_representation();
        void put_representation(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_relationship")
        {}

                /// <summary>
                /// Create new instace of action_relationship and returns object of this C++ class to interact with
                /// </summary>
        static action_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        action get_relating_action();
        void put_relating_action(action inst);

        action get_related_action();
        void put_related_action(action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_assignment")
        {}


        versioned_action_request get_assigned_action_request();
        void put_assigned_action_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_solution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_solution : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_solution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_solution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_solution")
        {}

                /// <summary>
                /// Create new instace of action_request_solution and returns object of this C++ class to interact with
                /// </summary>
        static action_request_solution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_request_solution"); assert(inst); return inst; }

        action_method get_method();
        void put_method(action_method inst);

        versioned_action_request get_request();
        void put_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_request_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_request_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_request_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_request_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_request_status")
        {}

                /// <summary>
                /// Create new instace of action_request_status and returns object of this C++ class to interact with
                /// </summary>
        static action_request_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_request_status"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        versioned_action_request get_assigned_request();
        void put_assigned_request(versioned_action_request inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of action_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class action_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of action_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        action_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "action_status")
        {}

                /// <summary>
                /// Create new instace of action_status and returns object of this C++ class to interact with
                /// </summary>
        static action_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "action_status"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        executed_action get_assigned_action();
        void put_assigned_action(executed_action inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class address : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "address")
        {}

                /// <summary>
                /// Create new instace of address and returns object of this C++ class to interact with
                /// </summary>
        static address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "address"); assert(inst); return inst; }

        label get_internal_location() { label val = NULL; if (sdaiGetAttrBN(m_instance, "internal_location", sdaiSTRING, &val)) return val; else return NULL; }
        void put_internal_location(label value) { sdaiPutAttrBN(m_instance, "internal_location", sdaiSTRING, value); }

        label get_street_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "street_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_street_number(label value) { sdaiPutAttrBN(m_instance, "street_number", sdaiSTRING, value); }

        label get_street() { label val = NULL; if (sdaiGetAttrBN(m_instance, "street", sdaiSTRING, &val)) return val; else return NULL; }
        void put_street(label value) { sdaiPutAttrBN(m_instance, "street", sdaiSTRING, value); }

        label get_postal_box() { label val = NULL; if (sdaiGetAttrBN(m_instance, "postal_box", sdaiSTRING, &val)) return val; else return NULL; }
        void put_postal_box(label value) { sdaiPutAttrBN(m_instance, "postal_box", sdaiSTRING, value); }

        label get_town() { label val = NULL; if (sdaiGetAttrBN(m_instance, "town", sdaiSTRING, &val)) return val; else return NULL; }
        void put_town(label value) { sdaiPutAttrBN(m_instance, "town", sdaiSTRING, value); }

        label get_region() { label val = NULL; if (sdaiGetAttrBN(m_instance, "region", sdaiSTRING, &val)) return val; else return NULL; }
        void put_region(label value) { sdaiPutAttrBN(m_instance, "region", sdaiSTRING, value); }

        label get_postal_code() { label val = NULL; if (sdaiGetAttrBN(m_instance, "postal_code", sdaiSTRING, &val)) return val; else return NULL; }
        void put_postal_code(label value) { sdaiPutAttrBN(m_instance, "postal_code", sdaiSTRING, value); }

        label get_country() { label val = NULL; if (sdaiGetAttrBN(m_instance, "country", sdaiSTRING, &val)) return val; else return NULL; }
        void put_country(label value) { sdaiPutAttrBN(m_instance, "country", sdaiSTRING, value); }

        label get_facsimile_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "facsimile_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_facsimile_number(label value) { sdaiPutAttrBN(m_instance, "facsimile_number", sdaiSTRING, value); }

        label get_telephone_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "telephone_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_telephone_number(label value) { sdaiPutAttrBN(m_instance, "telephone_number", sdaiSTRING, value); }

        label get_electronic_mail_address() { label val = NULL; if (sdaiGetAttrBN(m_instance, "electronic_mail_address", sdaiSTRING, &val)) return val; else return NULL; }
        void put_electronic_mail_address(label value) { sdaiPutAttrBN(m_instance, "electronic_mail_address", sdaiSTRING, value); }

        label get_telex_number() { label val = NULL; if (sdaiGetAttrBN(m_instance, "telex_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_telex_number(label value) { sdaiPutAttrBN(m_instance, "telex_number", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation")
        {}

                /// <summary>
                /// Create new instace of shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of advanced_brep_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class advanced_brep_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of advanced_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        advanced_brep_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "advanced_brep_shape_representation")
        {}

                /// <summary>
                /// Create new instace of advanced_brep_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static advanced_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "advanced_brep_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of topological_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class topological_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of topological_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        topological_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "topological_representation_item")
        {}

                /// <summary>
                /// Create new instace of topological_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static topological_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "topological_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face")
        {}

                /// <summary>
                /// Create new instace of face and returns object of this C++ class to interact with
                /// </summary>
        static face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face"); assert(inst); return inst; }

        //TList may be set_of_face_bound or list of converible elements
        template <typename TList> void get_bounds(TList& lst) { set_of_face_boundSerializer<TList> sr; sr.FromAttr(lst, m_instance, "bounds"); }

        //TList may be set_of_face_bound or list of converible elements
        template <typename TList> void put_bounds(TList& lst) { set_of_face_boundSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "bounds"); }

        //TArrayElem[] may be face_bound[] or array of convertible elements
        template <typename TArrayElem> void put_bounds(TArrayElem arr[], size_t n) { set_of_face_bound lst; ArrayToList(arr, n, lst); put_bounds(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_representation_item")
        {}

                /// <summary>
                /// Create new instace of geometric_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_surface : public virtual face, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_surface")
        {}

                /// <summary>
                /// Create new instace of face_surface and returns object of this C++ class to interact with
                /// </summary>
        static face_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_surface"); assert(inst); return inst; }

        surface get_face_geometry();
        void put_face_geometry(surface inst);

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of advanced_face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class advanced_face : public virtual face_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of advanced_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        advanced_face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "advanced_face")
        {}

                /// <summary>
                /// Create new instace of advanced_face and returns object of this C++ class to interact with
                /// </summary>
        static advanced_face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "advanced_face"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of alternate_product_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class alternate_product_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of alternate_product_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        alternate_product_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "alternate_product_relationship")
        {}

                /// <summary>
                /// Create new instace of alternate_product_relationship and returns object of this C++ class to interact with
                /// </summary>
        static alternate_product_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "alternate_product_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_definition() { text val = NULL; if (sdaiGetAttrBN(m_instance, "definition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_definition(text value) { sdaiPutAttrBN(m_instance, "definition", sdaiSTRING, value); }

        product get_alternate();
        void put_alternate(product inst);

        product get_base_();
        void put_base_(product inst);

        text get_basis() { text val = NULL; if (sdaiGetAttrBN(m_instance, "basis", sdaiSTRING, &val)) return val; else return NULL; }
        void put_basis(text value) { sdaiPutAttrBN(m_instance, "basis", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of amount_of_substance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class amount_of_substance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of amount_of_substance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        amount_of_substance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "amount_of_substance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of amount_of_substance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static amount_of_substance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "amount_of_substance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of named_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class named_unit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of named_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        named_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "named_unit")
        {}

                /// <summary>
                /// Create new instace of named_unit and returns object of this C++ class to interact with
                /// </summary>
        static named_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "named_unit"); assert(inst); return inst; }

        dimensional_exponents get_dimensions();
        void put_dimensions(dimensional_exponents inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of amount_of_substance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class amount_of_substance_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of amount_of_substance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        amount_of_substance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "amount_of_substance_unit")
        {}

                /// <summary>
                /// Create new instace of amount_of_substance_unit and returns object of this C++ class to interact with
                /// </summary>
        static amount_of_substance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "amount_of_substance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_item_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_item_relationship")
        {}

                /// <summary>
                /// Create new instace of representation_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_item_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        representation_item get_relating_representation_item();
        void put_relating_representation_item(representation_item inst);

        representation_item get_related_representation_item();
        void put_related_representation_item(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angle_direction_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angle_direction_reference : public virtual representation_item_relationship, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angle_direction_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angle_direction_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angle_direction_reference")
        {}

                /// <summary>
                /// Create new instace of angle_direction_reference and returns object of this C++ class to interact with
                /// </summary>
        static angle_direction_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angle_direction_reference"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_callout : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_callout")
        {}

                /// <summary>
                /// Create new instace of draughting_callout and returns object of this C++ class to interact with
                /// </summary>
        static draughting_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_callout"); assert(inst); return inst; }

        //TList may be set_of_draughting_callout_element or list of converible elements
        template <typename TList> void get_contents(TList& lst) { set_of_draughting_callout_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "contents"); }

        //TList may be set_of_draughting_callout_element or list of converible elements
        template <typename TList> void put_contents(TList& lst) { set_of_draughting_callout_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "contents"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve_directed_callout")
        {}

                /// <summary>
                /// Create new instace of dimension_curve_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_dimension")
        {}

                /// <summary>
                /// Create new instace of angular_dimension and returns object of this C++ class to interact with
                /// </summary>
        static angular_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        shape_aspect get_relating_shape_aspect();
        void put_relating_shape_aspect(shape_aspect inst);

        shape_aspect get_related_shape_aspect();
        void put_related_shape_aspect(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_location : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_location")
        {}

                /// <summary>
                /// Create new instace of dimensional_location and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_location"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_location : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_location")
        {}

                /// <summary>
                /// Create new instace of angular_location and returns object of this C++ class to interact with
                /// </summary>
        static angular_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_location"); assert(inst); return inst; }

        Nullable<angle_relator> get_angle_selection() { int v = getENUM("angle_selection", angle_relator_); if (v >= 0) return (angle_relator) v; else return Nullable<angle_relator>(); }
        void put_angle_selection(angle_relator value) { TextValue val = angle_relator_[(int) value]; sdaiPutAttrBN(m_instance, "angle_selection", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_size : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_size")
        {}

                /// <summary>
                /// Create new instace of dimensional_size and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_size"); assert(inst); return inst; }

        shape_aspect get_applies_to();
        void put_applies_to(shape_aspect inst);

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angular_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angular_size : public virtual dimensional_size
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angular_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angular_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angular_size")
        {}

                /// <summary>
                /// Create new instace of angular_size and returns object of this C++ class to interact with
                /// </summary>
        static angular_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angular_size"); assert(inst); return inst; }

        Nullable<angle_relator> get_angle_selection() { int v = getENUM("angle_selection", angle_relator_); if (v >= 0) return (angle_relator) v; else return Nullable<angle_relator>(); }
        void put_angle_selection(angle_relator value) { TextValue val = angle_relator_[(int) value]; sdaiPutAttrBN(m_instance, "angle_selection", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        measure_with_unit get_magnitude();
        void put_magnitude(measure_with_unit inst);

        shape_aspect get_toleranced_shape_aspect();
        void put_toleranced_shape_aspect(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_with_datum_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_with_datum_reference : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_with_datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_with_datum_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_with_datum_reference")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_with_datum_reference and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_with_datum_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_with_datum_reference"); assert(inst); return inst; }

        //TList may be set_of_datum_reference or list of converible elements
        template <typename TList> void get_datum_system(TList& lst) { set_of_datum_referenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "datum_system"); }

        //TList may be set_of_datum_reference or list of converible elements
        template <typename TList> void put_datum_system(TList& lst) { set_of_datum_referenceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "datum_system"); }

        //TArrayElem[] may be datum_reference[] or array of convertible elements
        template <typename TArrayElem> void put_datum_system(TArrayElem arr[], size_t n) { set_of_datum_reference lst; ArrayToList(arr, n, lst); put_datum_system(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of angularity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class angularity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of angularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        angularity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "angularity_tolerance")
        {}

                /// <summary>
                /// Create new instace of angularity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static angularity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "angularity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class styled_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "styled_item")
        {}

                /// <summary>
                /// Create new instace of styled_item and returns object of this C++ class to interact with
                /// </summary>
        static styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "styled_item"); assert(inst); return inst; }

        //TList may be set_of_presentation_style_assignment or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_presentation_style_assignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_presentation_style_assignment or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_presentation_style_assignmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }

        //TArrayElem[] may be presentation_style_assignment[] or array of convertible elements
        template <typename TArrayElem> void put_styles(TArrayElem arr[], size_t n) { set_of_presentation_style_assignment lst; ArrayToList(arr, n, lst); put_styles(lst); }

        representation_item get_item();
        void put_item(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence : public virtual styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_curve_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_curve_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_curve_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_curve_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_curve_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_curve_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_curve_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_curve_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_fill_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_fill_area : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_fill_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_fill_area")
        {}

                /// <summary>
                /// Create new instace of annotation_fill_area and returns object of this C++ class to interact with
                /// </summary>
        static annotation_fill_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_fill_area"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_boundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_fill_area_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_fill_area_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_fill_area_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_fill_area_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_fill_area_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_fill_area_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_fill_area_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_fill_area_occurrence"); assert(inst); return inst; }

        point get_fill_style_target();
        void put_fill_style_target(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence_relationship")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence_relationship and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        annotation_occurrence get_relating_annotation_occurrence();
        void put_relating_annotation_occurrence(annotation_occurrence inst);

        annotation_occurrence get_related_annotation_occurrence();
        void put_related_annotation_occurrence(annotation_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_occurrence_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_occurrence_associativity : public virtual annotation_occurrence_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_occurrence_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_occurrence_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_occurrence_associativity")
        {}

                /// <summary>
                /// Create new instace of annotation_occurrence_associativity and returns object of this C++ class to interact with
                /// </summary>
        static annotation_occurrence_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_occurrence_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_plane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_plane : public virtual annotation_occurrence, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_plane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_plane")
        {}

                /// <summary>
                /// Create new instace of annotation_plane and returns object of this C++ class to interact with
                /// </summary>
        static annotation_plane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_plane"); assert(inst); return inst; }

        //TList may be set_of_annotation_plane_element or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_annotation_plane_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_annotation_plane_element or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_annotation_plane_elementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_symbol_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_symbol_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_symbol_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_symbol_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_symbol_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_symbol_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_symbol_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_symbol_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_subfigure_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_subfigure_occurrence : public virtual annotation_symbol_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_subfigure_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_subfigure_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_subfigure_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_subfigure_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_subfigure_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_subfigure_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mapped_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mapped_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mapped_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mapped_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mapped_item")
        {}

                /// <summary>
                /// Create new instace of mapped_item and returns object of this C++ class to interact with
                /// </summary>
        static mapped_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mapped_item"); assert(inst); return inst; }

        representation_map get_mapping_source();
        void put_mapping_source(representation_map inst);

        representation_item get_mapping_target();
        void put_mapping_target(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_symbol : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_symbol")
        {}

                /// <summary>
                /// Create new instace of annotation_symbol and returns object of this C++ class to interact with
                /// </summary>
        static annotation_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text")
        {}

                /// <summary>
                /// Create new instace of annotation_text and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text_character
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text_character : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text_character
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text_character(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text_character")
        {}

                /// <summary>
                /// Create new instace of annotation_text_character and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text_character Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text_character"); assert(inst); return inst; }

        text_alignment get_alignment() { text_alignment val = NULL; if (sdaiGetAttrBN(m_instance, "alignment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_alignment(text_alignment value) { sdaiPutAttrBN(m_instance, "alignment", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of annotation_text_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class annotation_text_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of annotation_text_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        annotation_text_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "annotation_text_occurrence")
        {}

                /// <summary>
                /// Create new instace of annotation_text_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static annotation_text_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "annotation_text_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect")
        {}

                /// <summary>
                /// Create new instace of shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_shape get_of_shape();
        void put_of_shape(product_definition_shape inst);

        Nullable<LOGICAL_VALUE> get_product_definitional() { int v = getENUM("product_definitional", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_product_definitional(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "product_definitional", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of derived_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static derived_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_deriving_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "deriving_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of apex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class apex : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of apex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        apex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "apex")
        {}

                /// <summary>
                /// Create new instace of apex and returns object of this C++ class to interact with
                /// </summary>
        static apex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "apex"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_context : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_context")
        {}

                /// <summary>
                /// Create new instace of application_context and returns object of this C++ class to interact with
                /// </summary>
        static application_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_context"); assert(inst); return inst; }

        label get_application() { label val = NULL; if (sdaiGetAttrBN(m_instance, "application", sdaiSTRING, &val)) return val; else return NULL; }
        void put_application(label value) { sdaiPutAttrBN(m_instance, "application", sdaiSTRING, value); }

        //TList may be set_of_application_context_element or list of converible elements
        template <typename TList> void get_context_elements(TList& lst) { set_of_application_context_elementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "context_elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_context_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_context_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_context_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_context_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_context_element")
        {}

                /// <summary>
                /// Create new instace of application_context_element and returns object of this C++ class to interact with
                /// </summary>
        static application_context_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_context_element"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        application_context get_frame_of_reference();
        void put_frame_of_reference(application_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of application_protocol_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class application_protocol_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of application_protocol_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        application_protocol_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "application_protocol_definition")
        {}

                /// <summary>
                /// Create new instace of application_protocol_definition and returns object of this C++ class to interact with
                /// </summary>
        static application_protocol_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "application_protocol_definition"); assert(inst); return inst; }

        label get_status() { label val = NULL; if (sdaiGetAttrBN(m_instance, "status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_status(label value) { sdaiPutAttrBN(m_instance, "status", sdaiSTRING, value); }

        label get_application_interpreted_model_schema_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "application_interpreted_model_schema_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_application_interpreted_model_schema_name(label value) { sdaiPutAttrBN(m_instance, "application_interpreted_model_schema_name", sdaiSTRING, value); }

        Nullable<year_number> get_application_protocol_year() { year_number val = (year_number) 0; if (sdaiGetAttrBN(m_instance, "application_protocol_year", sdaiINTEGER, &val)) return val; else return Nullable<year_number>(); }
        void put_application_protocol_year(year_number value) { sdaiPutAttrBN(m_instance, "application_protocol_year", sdaiINTEGER, &value); }

        application_context get_application();
        void put_application(application_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_action_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_action_assignment : public virtual action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_action_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_action_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_action_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_action_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_action_assignment"); assert(inst); return inst; }

        //TList may be set_of_action_items or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_action_itemsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_action_items or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_action_itemsSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_action_method_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_action_method_assignment : public virtual action_method_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_action_method_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_action_method_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_action_method_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_action_method_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_action_method_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_action_method_assignment"); assert(inst); return inst; }

        //TList may be set_of_action_method_items or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_action_method_itemsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_action_method_items or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_action_method_itemsSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_action_request_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_action_request_assignment : public virtual action_request_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_action_request_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_action_request_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_action_request_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_action_request_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_action_request_assignment"); assert(inst); return inst; }

        //TList may be set_of_action_request_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_action_request_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_action_request_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_action_request_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_assignment")
        {}


        approval get_assigned_approval();
        void put_assigned_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_approval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_approval_assignment : public virtual approval_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_approval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_approval_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_approval_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_approval_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_approval_assignment"); assert(inst); return inst; }

        //TList may be set_of_approval_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_approval_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_approval_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_approval_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_classification_assignment")
        {}


        group get_assigned_class();
        void put_assigned_class(group inst);

        label get_attribute_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_name(label value) { sdaiPutAttrBN(m_instance, "attribute_name", sdaiSTRING, value); }

        classification_role get_role();
        void put_role(classification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_attribute_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_attribute_classification_assignment : public virtual attribute_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_attribute_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_attribute_classification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_attribute_classification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_attribute_classification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_attribute_classification_assignment"); assert(inst); return inst; }

        //TList may be set_of_attribute_classification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_attribute_classification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_attribute_classification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_attribute_classification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification_assignment")
        {}


        certification get_assigned_certification();
        void put_assigned_certification(certification inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_certification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_certification_assignment : public virtual certification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_certification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_certification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_certification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_certification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_certification_assignment"); assert(inst); return inst; }

        //TList may be set_of_certification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_certification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_certification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_certification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "classification_assignment")
        {}


        group get_assigned_class();
        void put_assigned_class(group inst);

        classification_role get_role();
        void put_role(classification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_classification_assignment : public virtual classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_classification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_classification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_classification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_classification_assignment"); assert(inst); return inst; }

        //TList may be set_of_classification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_classification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_classification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_classification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract_assignment")
        {}


        contract get_assigned_contract();
        void put_assigned_contract(contract inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_contract_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_contract_assignment : public virtual contract_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_contract_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_contract_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_contract_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_contract_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_contract_assignment"); assert(inst); return inst; }

        //TList may be set_of_contract_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_contract_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_contract_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_contract_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_and_time_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_and_time_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_and_time_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_and_time_assignment")
        {}


        date_and_time get_assigned_date_and_time();
        void put_assigned_date_and_time(date_and_time inst);

        date_time_role get_role();
        void put_role(date_time_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_date_and_time_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_date_and_time_assignment : public virtual date_and_time_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_date_and_time_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_date_and_time_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_date_and_time_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_date_and_time_assignment"); assert(inst); return inst; }

        //TList may be set_of_date_and_time_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_date_and_time_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_date_and_time_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_date_and_time_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_assignment")
        {}


        date get_assigned_date();
        void put_assigned_date(date inst);

        date_role get_role();
        void put_role(date_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_date_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_date_assignment : public virtual date_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_date_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_date_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_date_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_date_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_date_assignment"); assert(inst); return inst; }

        //TList may be set_of_date_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_date_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_date_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_date_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_reference : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_reference")
        {}


        document get_assigned_document();
        void put_assigned_document(document inst);

        label get_source() { label val = NULL; if (sdaiGetAttrBN(m_instance, "source", sdaiSTRING, &val)) return val; else return NULL; }
        void put_source(label value) { sdaiPutAttrBN(m_instance, "source", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_document_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_document_reference : public virtual document_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_document_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_document_reference")
        {}

                /// <summary>
                /// Create new instace of applied_document_reference and returns object of this C++ class to interact with
                /// </summary>
        static applied_document_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_document_reference"); assert(inst); return inst; }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_constraint_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_constraint_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_constraint_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_constraint_assignment")
        {}


        document_usage_constraint get_assigned_document_usage();
        void put_assigned_document_usage(document_usage_constraint inst);

        document_usage_role get_role();
        void put_role(document_usage_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_document_usage_constraint_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_document_usage_constraint_assignment : public virtual document_usage_constraint_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_document_usage_constraint_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_document_usage_constraint_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_document_usage_constraint_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_document_usage_constraint_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_document_usage_constraint_assignment"); assert(inst); return inst; }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_document_reference_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_document_reference_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_assignment")
        {}


        effectivity get_assigned_effectivity();
        void put_assigned_effectivity(effectivity inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_effectivity_assignment : public virtual effectivity_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_effectivity_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_effectivity_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_effectivity_assignment"); assert(inst); return inst; }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_effectivity_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_effectivity_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_assignment")
        {}


        event_occurrence get_assigned_event_occurrence();
        void put_assigned_event_occurrence(event_occurrence inst);

        event_occurrence_role get_role();
        void put_role(event_occurrence_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_event_occurrence_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_event_occurrence_assignment : public virtual event_occurrence_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_event_occurrence_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_event_occurrence_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_event_occurrence_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_event_occurrence_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_event_occurrence_assignment"); assert(inst); return inst; }

        //TList may be set_of_event_occurrence_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_event_occurrence_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_event_occurrence_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_event_occurrence_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class identification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "identification_assignment")
        {}


        identifier get_assigned_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "assigned_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_assigned_id(identifier value) { sdaiPutAttrBN(m_instance, "assigned_id", sdaiSTRING, value); }

        identification_role get_role();
        void put_role(identification_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_identification_assignment : public virtual identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_identification_assignment")
        {}


        external_source get_source();
        void put_source(external_source inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_external_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_external_identification_assignment : public virtual external_identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_external_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_external_identification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_external_identification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_external_identification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_external_identification_assignment"); assert(inst); return inst; }

        //TList may be set_of_external_identification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_external_identification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_external_identification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_external_identification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group_assignment")
        {}


        group get_assigned_group();
        void put_assigned_group(group inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_group_assignment : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_group_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_group_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_group_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_group_assignment"); assert(inst); return inst; }

        //TList may be set_of_groupable_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_groupable_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_groupable_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_groupable_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_identification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_identification_assignment : public virtual identification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_identification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_identification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_identification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_identification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_identification_assignment"); assert(inst); return inst; }

        //TList may be set_of_identification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_identification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_identification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_identification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of name_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class name_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        name_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "name_assignment")
        {}


        label get_assigned_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "assigned_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_assigned_name(label value) { sdaiPutAttrBN(m_instance, "assigned_name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_name_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_name_assignment : public virtual name_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_name_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_name_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_name_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_name_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_name_assignment"); assert(inst); return inst; }

        name_item_get get_item() { return name_item_get(m_instance, "item", NULL); }
        name_item_put put_item() { return name_item_put(m_instance, "item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_assignment")
        {}


        organization get_assigned_organization();
        void put_assigned_organization(organization inst);

        organization_role get_role();
        void put_role(organization_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_organization_assignment : public virtual organization_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_organization_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_organization_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_organization_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_organization_assignment"); assert(inst); return inst; }

        //TList may be set_of_organization_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_organization_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_organization_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_organization_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_assignment")
        {}


        organizational_project get_assigned_organizational_project();
        void put_assigned_organizational_project(organizational_project inst);

        organizational_project_role get_role();
        void put_role(organizational_project_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_organizational_project_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_organizational_project_assignment : public virtual organizational_project_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_organizational_project_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_organizational_project_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_organizational_project_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_organizational_project_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_organizational_project_assignment"); assert(inst); return inst; }

        //TList may be set_of_project_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_project_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_project_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_project_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_assignment")
        {}


        person_and_organization get_assigned_person_and_organization();
        void put_assigned_person_and_organization(person_and_organization inst);

        person_and_organization_role get_role();
        void put_role(person_and_organization_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_person_and_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_person_and_organization_assignment : public virtual person_and_organization_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_person_and_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_person_and_organization_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_person_and_organization_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_person_and_organization_assignment"); assert(inst); return inst; }

        //TList may be set_of_person_and_organization_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_person_and_organization_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_person_and_organization_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_person_and_organization_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presented_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presented_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presented_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presented_item")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_presented_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_presented_item : public virtual presented_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_presented_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_presented_item")
        {}

                /// <summary>
                /// Create new instace of applied_presented_item and returns object of this C++ class to interact with
                /// </summary>
        static applied_presented_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_presented_item"); assert(inst); return inst; }

        //TList may be set_of_presented_item_select or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_presented_item_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_presented_item_select or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_presented_item_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification_assignment")
        {}


        security_classification get_assigned_security_classification();
        void put_assigned_security_classification(security_classification inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_security_classification_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_security_classification_assignment : public virtual security_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_security_classification_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_security_classification_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_security_classification_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_security_classification_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_security_classification_assignment"); assert(inst); return inst; }

        //TList may be set_of_security_classification_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_security_classification_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_security_classification_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_security_classification_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_assignment")
        {}


        time_interval get_assigned_time_interval();
        void put_assigned_time_interval(time_interval inst);

        time_interval_role get_role();
        void put_role(time_interval_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_time_interval_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_time_interval_assignment : public virtual time_interval_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_time_interval_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_time_interval_assignment")
        {}

                /// <summary>
                /// Create new instace of applied_time_interval_assignment and returns object of this C++ class to interact with
                /// </summary>
        static applied_time_interval_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_time_interval_assignment"); assert(inst); return inst; }

        //TList may be set_of_time_interval_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_time_interval_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_time_interval_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_time_interval_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of applied_usage_right
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class applied_usage_right : public virtual applied_action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of applied_usage_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        applied_usage_right(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "applied_usage_right")
        {}

                /// <summary>
                /// Create new instace of applied_usage_right and returns object of this C++ class to interact with
                /// </summary>
        static applied_usage_right Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "applied_usage_right"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval")
        {}

                /// <summary>
                /// Create new instace of approval and returns object of this C++ class to interact with
                /// </summary>
        static approval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval"); assert(inst); return inst; }

        approval_status get_status();
        void put_status(approval_status inst);

        label get_level() { label val = NULL; if (sdaiGetAttrBN(m_instance, "level", sdaiSTRING, &val)) return val; else return NULL; }
        void put_level(label value) { sdaiPutAttrBN(m_instance, "level", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_date_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_date_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_date_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_date_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_date_time")
        {}

                /// <summary>
                /// Create new instace of approval_date_time and returns object of this C++ class to interact with
                /// </summary>
        static approval_date_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_date_time"); assert(inst); return inst; }

        date_time_select_get get_date_time() { return date_time_select_get(m_instance, "date_time", NULL); }
        date_time_select_put put_date_time() { return date_time_select_put(m_instance, "date_time", NULL); }

        approval get_dated_approval();
        void put_dated_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_person_organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_person_organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_person_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_person_organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_person_organization")
        {}

                /// <summary>
                /// Create new instace of approval_person_organization and returns object of this C++ class to interact with
                /// </summary>
        static approval_person_organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_person_organization"); assert(inst); return inst; }

        person_organization_select_get get_person_organization() { return person_organization_select_get(m_instance, "person_organization", NULL); }
        person_organization_select_put put_person_organization() { return person_organization_select_put(m_instance, "person_organization", NULL); }

        approval get_authorized_approval();
        void put_authorized_approval(approval inst);

        approval_role get_role();
        void put_role(approval_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_relationship")
        {}

                /// <summary>
                /// Create new instace of approval_relationship and returns object of this C++ class to interact with
                /// </summary>
        static approval_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        approval get_relating_approval();
        void put_relating_approval(approval inst);

        approval get_related_approval();
        void put_related_approval(approval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_role")
        {}

                /// <summary>
                /// Create new instace of approval_role and returns object of this C++ class to interact with
                /// </summary>
        static approval_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_role"); assert(inst); return inst; }

        label get_role() { label val = NULL; if (sdaiGetAttrBN(m_instance, "role", sdaiSTRING, &val)) return val; else return NULL; }
        void put_role(label value) { sdaiPutAttrBN(m_instance, "role", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of approval_status
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class approval_status : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of approval_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        approval_status(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "approval_status")
        {}

                /// <summary>
                /// Create new instace of approval_status and returns object of this C++ class to interact with
                /// </summary>
        static approval_status Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "approval_status"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_in_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_in_set : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_in_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_in_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_in_set")
        {}

                /// <summary>
                /// Create new instace of area_in_set and returns object of this C++ class to interact with
                /// </summary>
        static area_in_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_in_set"); assert(inst); return inst; }

        presentation_area get_area();
        void put_area(presentation_area inst);

        presentation_set get_in_set();
        void put_in_set(presentation_set inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of area_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static area_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of area_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class area_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of area_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        area_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "area_unit")
        {}

                /// <summary>
                /// Create new instace of area_unit and returns object of this C++ class to interact with
                /// </summary>
        static area_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "area_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition get_relating_product_definition();
        void put_relating_product_definition(product_definition inst);

        product_definition get_related_product_definition();
        void put_related_product_definition(product_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_usage : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_usage")
        {}

                /// <summary>
                /// Create new instace of product_definition_usage and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of assembly_component_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class assembly_component_usage : public virtual product_definition_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        assembly_component_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "assembly_component_usage")
        {}

                /// <summary>
                /// Create new instace of assembly_component_usage and returns object of this C++ class to interact with
                /// </summary>
        static assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "assembly_component_usage"); assert(inst); return inst; }

        identifier get_reference_designator() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "reference_designator", sdaiSTRING, &val)) return val; else return NULL; }
        void put_reference_designator(identifier value) { sdaiPutAttrBN(m_instance, "reference_designator", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of assembly_component_usage_substitute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class assembly_component_usage_substitute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of assembly_component_usage_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        assembly_component_usage_substitute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "assembly_component_usage_substitute")
        {}

                /// <summary>
                /// Create new instace of assembly_component_usage_substitute and returns object of this C++ class to interact with
                /// </summary>
        static assembly_component_usage_substitute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "assembly_component_usage_substitute"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_definition() { text val = NULL; if (sdaiGetAttrBN(m_instance, "definition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_definition(text value) { sdaiPutAttrBN(m_instance, "definition", sdaiSTRING, value); }

        assembly_component_usage get_base_();
        void put_base_(assembly_component_usage inst);

        assembly_component_usage get_substitute();
        void put_substitute(assembly_component_usage inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of assigned_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class assigned_requirement : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of assigned_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        assigned_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "assigned_requirement")
        {}

                /// <summary>
                /// Create new instace of assigned_requirement and returns object of this C++ class to interact with
                /// </summary>
        static assigned_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "assigned_requirement"); assert(inst); return inst; }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_product_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_product_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TArrayElem[] may be product_definition[] or array of convertible elements
        template <typename TArrayElem> void put_items(TArrayElem arr[], size_t n) { set_of_product_definition lst; ArrayToList(arr, n, lst); put_items(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of compound_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class compound_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of compound_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        compound_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "compound_representation_item")
        {}

                /// <summary>
                /// Create new instace of compound_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static compound_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "compound_representation_item"); assert(inst); return inst; }

        compound_item_definition_get get_item_element() { return compound_item_definition_get(m_instance, "item_element", NULL); }
        compound_item_definition_put put_item_element() { return compound_item_definition_put(m_instance, "item_element", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of atomic_formula
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class atomic_formula : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of atomic_formula
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        atomic_formula(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "atomic_formula")
        {}

                /// <summary>
                /// Create new instace of atomic_formula and returns object of this C++ class to interact with
                /// </summary>
        static atomic_formula Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "atomic_formula"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fact_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fact_type : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fact_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fact_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fact_type")
        {}

                /// <summary>
                /// Create new instace of fact_type and returns object of this C++ class to interact with
                /// </summary>
        static fact_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fact_type"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_assertion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_assertion : public virtual fact_type, public virtual property_definition_representation, public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_assertion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_assertion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_assertion")
        {}

                /// <summary>
                /// Create new instace of attribute_assertion and returns object of this C++ class to interact with
                /// </summary>
        static attribute_assertion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "attribute_assertion"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_language_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_language_assignment : public virtual attribute_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_language_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_language_assignment")
        {}

                /// <summary>
                /// Create new instace of attribute_language_assignment and returns object of this C++ class to interact with
                /// </summary>
        static attribute_language_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "attribute_language_assignment"); assert(inst); return inst; }

        //TList may be set_of_attribute_language_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_attribute_language_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_attribute_language_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_attribute_language_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_value_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_value_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_value_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_value_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_value_assignment")
        {}


        label get_attribute_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_name(label value) { sdaiPutAttrBN(m_instance, "attribute_name", sdaiSTRING, value); }

        attribute_type_get get_attribute_value() { return attribute_type_get(m_instance, "attribute_value", NULL); }
        attribute_type_put put_attribute_value() { return attribute_type_put(m_instance, "attribute_value", NULL); }

        attribute_value_role get_role();
        void put_role(attribute_value_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of attribute_value_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class attribute_value_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of attribute_value_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        attribute_value_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "attribute_value_role")
        {}

                /// <summary>
                /// Create new instace of attribute_value_role and returns object of this C++ class to interact with
                /// </summary>
        static attribute_value_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "attribute_value_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of variational_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class variational_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of variational_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        variational_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "variational_representation_item")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of auxiliary_geometric_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class auxiliary_geometric_representation_item : public virtual geometric_representation_item, public virtual variational_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of auxiliary_geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        auxiliary_geometric_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "auxiliary_geometric_representation_item")
        {}

                /// <summary>
                /// Create new instace of auxiliary_geometric_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static auxiliary_geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "auxiliary_geometric_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placement : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placement")
        {}

                /// <summary>
                /// Create new instace of placement and returns object of this C++ class to interact with
                /// </summary>
        static placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placement"); assert(inst); return inst; }

        cartesian_point get_location();
        void put_location(cartesian_point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis1_placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis1_placement : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis1_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis1_placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis1_placement")
        {}

                /// <summary>
                /// Create new instace of axis1_placement and returns object of this C++ class to interact with
                /// </summary>
        static axis1_placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis1_placement"); assert(inst); return inst; }

        direction get_axis();
        void put_axis(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis2_placement_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis2_placement_2d : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis2_placement_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis2_placement_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis2_placement_2d")
        {}

                /// <summary>
                /// Create new instace of axis2_placement_2d and returns object of this C++ class to interact with
                /// </summary>
        static axis2_placement_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis2_placement_2d"); assert(inst); return inst; }

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of axis2_placement_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class axis2_placement_3d : public virtual placement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of axis2_placement_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        axis2_placement_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "axis2_placement_3d")
        {}

                /// <summary>
                /// Create new instace of axis2_placement_3d and returns object of this C++ class to interact with
                /// </summary>
        static axis2_placement_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "axis2_placement_3d"); assert(inst); return inst; }

        direction get_axis();
        void put_axis(direction inst);

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve")
        {}

                /// <summary>
                /// Create new instace of curve and returns object of this C++ class to interact with
                /// </summary>
        static curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_curve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_curve")
        {}

                /// <summary>
                /// Create new instace of bounded_curve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_curve")
        {}

                /// <summary>
                /// Create new instace of b_spline_curve and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_curve"); assert(inst); return inst; }

        Nullable<IntValue> get_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_degree(IntValue value) { sdaiPutAttrBN(m_instance, "degree", sdaiINTEGER, &value); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_control_points_list(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "control_points_list"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_control_points_list(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "control_points_list"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_control_points_list(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_control_points_list(lst); }

        Nullable<b_spline_curve_form> get_curve_form() { int v = getENUM("curve_form", b_spline_curve_form_); if (v >= 0) return (b_spline_curve_form) v; else return Nullable<b_spline_curve_form>(); }
        void put_curve_form(b_spline_curve_form value) { TextValue val = b_spline_curve_form_[(int) value]; sdaiPutAttrBN(m_instance, "curve_form", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_closed_curve() { int v = getENUM("closed_curve", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_closed_curve(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "closed_curve", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_curve_with_knots
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_curve_with_knots : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_curve_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_curve_with_knots(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_curve_with_knots")
        {}

                /// <summary>
                /// Create new instace of b_spline_curve_with_knots and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_curve_with_knots Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_curve_with_knots"); assert(inst); return inst; }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_knot_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "knot_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_knot_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_knot_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_knot_multiplicities(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_knots(lst); }

        Nullable<knot_type> get_knot_spec() { int v = getENUM("knot_spec", knot_type_); if (v >= 0) return (knot_type) v; else return Nullable<knot_type>(); }
        void put_knot_spec(knot_type value) { TextValue val = knot_type_[(int) value]; sdaiPutAttrBN(m_instance, "knot_spec", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface")
        {}

                /// <summary>
                /// Create new instace of surface and returns object of this C++ class to interact with
                /// </summary>
        static surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_surface")
        {}

                /// <summary>
                /// Create new instace of bounded_surface and returns object of this C++ class to interact with
                /// </summary>
        static bounded_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_surface")
        {}

                /// <summary>
                /// Create new instace of b_spline_surface and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_surface"); assert(inst); return inst; }

        Nullable<IntValue> get_u_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "u_degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_u_degree(IntValue value) { sdaiPutAttrBN(m_instance, "u_degree", sdaiINTEGER, &value); }

        Nullable<IntValue> get_v_degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "v_degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_v_degree(IntValue value) { sdaiPutAttrBN(m_instance, "v_degree", sdaiINTEGER, &value); }

        //TList may be list_of_list_of_cartesian_point or list of converible elements
        template <typename TList> void get_control_points_list(TList& lst) { list_of_list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "control_points_list"); }

        //TList may be list_of_list_of_cartesian_point or list of converible elements
        template <typename TList> void put_control_points_list(TList& lst) { list_of_list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "control_points_list"); }

        Nullable<b_spline_surface_form> get_surface_form() { int v = getENUM("surface_form", b_spline_surface_form_); if (v >= 0) return (b_spline_surface_form) v; else return Nullable<b_spline_surface_form>(); }
        void put_surface_form(b_spline_surface_form value) { TextValue val = b_spline_surface_form_[(int) value]; sdaiPutAttrBN(m_instance, "surface_form", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_u_closed() { int v = getENUM("u_closed", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_u_closed(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "u_closed", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_v_closed() { int v = getENUM("v_closed", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_v_closed(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "v_closed", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of b_spline_surface_with_knots
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class b_spline_surface_with_knots : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of b_spline_surface_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        b_spline_surface_with_knots(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "b_spline_surface_with_knots")
        {}

                /// <summary>
                /// Create new instace of b_spline_surface_with_knots and returns object of this C++ class to interact with
                /// </summary>
        static b_spline_surface_with_knots Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "b_spline_surface_with_knots"); assert(inst); return inst; }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_u_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "u_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_u_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "u_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_u_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_u_multiplicities(lst); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_v_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "v_multiplicities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_v_multiplicities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "v_multiplicities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_v_multiplicities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_v_multiplicities(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_u_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "u_knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_u_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "u_knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_u_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_u_knots(lst); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void get_v_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "v_knots"); }

        //TList may be list_of_parameter_value or list of converible elements
        template <typename TList> void put_v_knots(TList& lst) { list_of_parameter_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "v_knots"); }

        //TArrayElem[] may be parameter_value[] or array of convertible elements
        template <typename TArrayElem> void put_v_knots(TArrayElem arr[], size_t n) { list_of_parameter_value lst; ArrayToList(arr, n, lst); put_v_knots(lst); }

        Nullable<knot_type> get_knot_spec() { int v = getENUM("knot_spec", knot_type_); if (v >= 0) return (knot_type) v; else return Nullable<knot_type>(); }
        void put_knot_spec(knot_type value) { TextValue val = knot_type_[(int) value]; sdaiPutAttrBN(m_instance, "knot_spec", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition")
        {}

                /// <summary>
                /// Create new instace of product_definition and returns object of this C++ class to interact with
                /// </summary>
        static product_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_formation get_formation();
        void put_formation(product_definition_formation inst);

        product_definition_context get_frame_of_reference();
        void put_frame_of_reference(product_definition_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_software_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_software_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_software_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_software_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_software_definition")
        {}

                /// <summary>
                /// Create new instace of rule_software_definition and returns object of this C++ class to interact with
                /// </summary>
        static rule_software_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_software_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_definition : public virtual rule_software_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_definition")
        {}

                /// <summary>
                /// Create new instace of rule_definition and returns object of this C++ class to interact with
                /// </summary>
        static rule_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of back_chaining_rule
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class back_chaining_rule : public virtual rule_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of back_chaining_rule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        back_chaining_rule(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "back_chaining_rule")
        {}

                /// <summary>
                /// Create new instace of back_chaining_rule and returns object of this C++ class to interact with
                /// </summary>
        static back_chaining_rule Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "back_chaining_rule"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of back_chaining_rule_body
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class back_chaining_rule_body : public virtual property_definition, public virtual property_definition_representation, public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of back_chaining_rule_body
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        back_chaining_rule_body(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "back_chaining_rule_body")
        {}

                /// <summary>
                /// Create new instace of back_chaining_rule_body and returns object of this C++ class to interact with
                /// </summary>
        static back_chaining_rule_body Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "back_chaining_rule_body"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour")
        {}

                /// <summary>
                /// Create new instace of colour and returns object of this C++ class to interact with
                /// </summary>
        static colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of background_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class background_colour : public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of background_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        background_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "background_colour")
        {}

                /// <summary>
                /// Create new instace of background_colour and returns object of this C++ class to interact with
                /// </summary>
        static background_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "background_colour"); assert(inst); return inst; }

        area_or_view_get get_presentation() { return area_or_view_get(m_instance, "presentation", NULL); }
        area_or_view_put put_presentation() { return area_or_view_put(m_instance, "presentation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of beveled_sheet_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class beveled_sheet_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of beveled_sheet_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        beveled_sheet_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "beveled_sheet_representation")
        {}

                /// <summary>
                /// Create new instace of beveled_sheet_representation and returns object of this C++ class to interact with
                /// </summary>
        static beveled_sheet_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "beveled_sheet_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bezier_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bezier_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bezier_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bezier_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bezier_curve")
        {}

                /// <summary>
                /// Create new instace of bezier_curve and returns object of this C++ class to interact with
                /// </summary>
        static bezier_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bezier_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bezier_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bezier_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bezier_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bezier_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bezier_surface")
        {}

                /// <summary>
                /// Create new instace of bezier_surface and returns object of this C++ class to interact with
                /// </summary>
        static bezier_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bezier_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_expression : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_generic_expression")
        {}


        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void get_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "operands"); }

        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void put_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "operands"); }

        //TArrayElem[] may be generic_expression[] or array of convertible elements
        template <typename TArrayElem> void put_operands(TArrayElem arr[], size_t n) { list_of_generic_expression lst; ArrayToList(arr, n, lst); put_operands(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class numeric_expression : public virtual expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_numeric_expression : public virtual numeric_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of binary_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class binary_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of binary_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        binary_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "binary_representation_item")
        {}

                /// <summary>
                /// Create new instace of binary_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static binary_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "binary_representation_item"); assert(inst); return inst; }

        TextValue get_binary_value() { TextValue val = NULL; if (sdaiGetAttrBN(m_instance, "binary_value", sdaiBINARY, &val)) return val; else return NULL; }
        void put_binary_value(TextValue value) { sdaiPutAttrBN(m_instance, "binary_value", sdaiBINARY, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of block
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class block : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        block(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "block")
        {}

                /// <summary>
                /// Create new instace of block and returns object of this C++ class to interact with
                /// </summary>
        static block Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "block"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);

        Nullable<positive_length_measure> get_x() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "x", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_x(positive_length_measure value) { sdaiPutAttrBN(m_instance, "x", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_y() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "y", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_y(positive_length_measure value) { sdaiPutAttrBN(m_instance, "y", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_z() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "z", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_z(positive_length_measure value) { sdaiPutAttrBN(m_instance, "z", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_expression : public virtual expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_generic_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_boolean_expression : public virtual boolean_expression, public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_literal : public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_literal")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_literal : public virtual simple_boolean_expression, public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_literal")
        {}

                /// <summary>
                /// Create new instace of boolean_literal and returns object of this C++ class to interact with
                /// </summary>
        static boolean_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_literal"); assert(inst); return inst; }

        Nullable<bool> get_the_value() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "the_value", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_the_value(bool value) { sdaiPutAttrBN(m_instance, "the_value", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_representation_item : public virtual representation_item, public virtual boolean_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_representation_item")
        {}

                /// <summary>
                /// Create new instace of boolean_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static boolean_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boolean_result
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boolean_result : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boolean_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boolean_result(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boolean_result")
        {}

                /// <summary>
                /// Create new instace of boolean_result and returns object of this C++ class to interact with
                /// </summary>
        static boolean_result Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boolean_result"); assert(inst); return inst; }

        Nullable<boolean_operator> get_operator_() { int v = getENUM("operator_", boolean_operator_); if (v >= 0) return (boolean_operator) v; else return Nullable<boolean_operator>(); }
        void put_operator_(boolean_operator value) { TextValue val = boolean_operator_[(int) value]; sdaiPutAttrBN(m_instance, "operator_", sdaiENUM, val); }

        boolean_operand_get get_first_operand() { return boolean_operand_get(m_instance, "first_operand", NULL); }
        boolean_operand_put put_first_operand() { return boolean_operand_put(m_instance, "first_operand", NULL); }

        boolean_operand_get get_second_operand() { return boolean_operand_get(m_instance, "second_operand", NULL); }
        boolean_operand_put put_second_operand() { return boolean_operand_put(m_instance, "second_operand", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve")
        {}

                /// <summary>
                /// Create new instace of composite_curve and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve"); assert(inst); return inst; }

        //TList may be list_of_composite_curve_segment or list of converible elements
        template <typename TList> void get_segments(TList& lst) { list_of_composite_curve_segmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segments"); }

        //TList may be list_of_composite_curve_segment or list of converible elements
        template <typename TList> void put_segments(TList& lst) { list_of_composite_curve_segmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segments"); }

        //TArrayElem[] may be composite_curve_segment[] or array of convertible elements
        template <typename TArrayElem> void put_segments(TArrayElem arr[], size_t n) { list_of_composite_curve_segment lst; ArrayToList(arr, n, lst); put_segments(lst); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve_on_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve_on_surface : public virtual composite_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve_on_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve_on_surface")
        {}

                /// <summary>
                /// Create new instace of composite_curve_on_surface and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve_on_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve_on_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boundary_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boundary_curve : public virtual composite_curve_on_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boundary_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boundary_curve")
        {}

                /// <summary>
                /// Create new instace of boundary_curve and returns object of this C++ class to interact with
                /// </summary>
        static boundary_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boundary_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pcurve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pcurve")
        {}

                /// <summary>
                /// Create new instace of pcurve and returns object of this C++ class to interact with
                /// </summary>
        static pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pcurve"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        definitional_representation get_reference_to_curve();
        void put_reference_to_curve(definitional_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_pcurve : public virtual pcurve, public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_pcurve")
        {}

                /// <summary>
                /// Create new instace of bounded_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_pcurve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_curve : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_curve")
        {}

                /// <summary>
                /// Create new instace of surface_curve and returns object of this C++ class to interact with
                /// </summary>
        static surface_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_curve"); assert(inst); return inst; }

        curve get_curve_3d();
        void put_curve_3d(curve inst);

        //TList may be list_of_pcurve_or_surface or list of converible elements
        template <typename TList> void get_associated_geometry(TList& lst) { list_of_pcurve_or_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_geometry"); }

        //TList may be list_of_pcurve_or_surface or list of converible elements
        template <typename TList> void put_associated_geometry(TList& lst) { list_of_pcurve_or_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_geometry"); }

        Nullable<preferred_surface_curve_representation> get_master_representation() { int v = getENUM("master_representation", preferred_surface_curve_representation_); if (v >= 0) return (preferred_surface_curve_representation) v; else return Nullable<preferred_surface_curve_representation>(); }
        void put_master_representation(preferred_surface_curve_representation value) { TextValue val = preferred_surface_curve_representation_[(int) value]; sdaiPutAttrBN(m_instance, "master_representation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bounded_surface_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bounded_surface_curve : public virtual surface_curve, public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bounded_surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bounded_surface_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bounded_surface_curve")
        {}

                /// <summary>
                /// Create new instace of bounded_surface_curve and returns object of this C++ class to interact with
                /// </summary>
        static bounded_surface_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bounded_surface_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of founded_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class founded_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of founded_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        founded_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "founded_item")
        {}

                /// <summary>
                /// Create new instace of founded_item and returns object of this C++ class to interact with
                /// </summary>
        static founded_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "founded_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of box_domain
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class box_domain : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of box_domain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        box_domain(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "box_domain")
        {}

                /// <summary>
                /// Create new instace of box_domain and returns object of this C++ class to interact with
                /// </summary>
        static box_domain Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "box_domain"); assert(inst); return inst; }

        cartesian_point get_corner();
        void put_corner(cartesian_point inst);

        Nullable<positive_length_measure> get_xlength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "xlength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_xlength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "xlength", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_ylength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "ylength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_ylength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "ylength", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_zlength() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "zlength", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_zlength(positive_length_measure value) { sdaiPutAttrBN(m_instance, "zlength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of half_space_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class half_space_solid : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of half_space_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        half_space_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "half_space_solid")
        {}

                /// <summary>
                /// Create new instace of half_space_solid and returns object of this C++ class to interact with
                /// </summary>
        static half_space_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "half_space_solid"); assert(inst); return inst; }

        surface get_base_surface();
        void put_base_surface(surface inst);

        Nullable<bool> get_agreement_flag() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "agreement_flag", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_agreement_flag(bool value) { sdaiPutAttrBN(m_instance, "agreement_flag", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of boxed_half_space
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class boxed_half_space : public virtual half_space_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of boxed_half_space
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        boxed_half_space(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "boxed_half_space")
        {}

                /// <summary>
                /// Create new instace of boxed_half_space and returns object of this C++ class to interact with
                /// </summary>
        static boxed_half_space Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "boxed_half_space"); assert(inst); return inst; }

        box_domain get_enclosure();
        void put_enclosure(box_domain inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of breakdown_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class breakdown_context : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        breakdown_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "breakdown_context")
        {}

                /// <summary>
                /// Create new instace of breakdown_context and returns object of this C++ class to interact with
                /// </summary>
        static breakdown_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "breakdown_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of breakdown_element_group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class breakdown_element_group_assignment : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of breakdown_element_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        breakdown_element_group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "breakdown_element_group_assignment")
        {}

                /// <summary>
                /// Create new instace of breakdown_element_group_assignment and returns object of this C++ class to interact with
                /// </summary>
        static breakdown_element_group_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "breakdown_element_group_assignment"); assert(inst); return inst; }

        //TList may be set_of_product_definition_or_breakdown_element_usage or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_product_definition_or_breakdown_element_usageSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_product_definition_or_breakdown_element_usage or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_product_definition_or_breakdown_element_usageSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characterized_object
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characterized_object : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characterized_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characterized_object(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characterized_object")
        {}

                /// <summary>
                /// Create new instace of characterized_object and returns object of this C++ class to interact with
                /// </summary>
        static characterized_object Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characterized_object"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group")
        {}

                /// <summary>
                /// Create new instace of group and returns object of this C++ class to interact with
                /// </summary>
        static group Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "group"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_element_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_element_relationship : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_element_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_element_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_element_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_element_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_element_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_element_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of breakdown_element_realization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class breakdown_element_realization : public virtual characterized_object, public virtual product_definition_element_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of breakdown_element_realization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        breakdown_element_realization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "breakdown_element_realization")
        {}

                /// <summary>
                /// Create new instace of breakdown_element_realization and returns object of this C++ class to interact with
                /// </summary>
        static breakdown_element_realization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "breakdown_element_realization"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of breakdown_element_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class breakdown_element_usage : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of breakdown_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        breakdown_element_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "breakdown_element_usage")
        {}

                /// <summary>
                /// Create new instace of breakdown_element_usage and returns object of this C++ class to interact with
                /// </summary>
        static breakdown_element_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "breakdown_element_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of breakdown_of
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class breakdown_of : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of breakdown_of
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        breakdown_of(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "breakdown_of")
        {}

                /// <summary>
                /// Create new instace of breakdown_of and returns object of this C++ class to interact with
                /// </summary>
        static breakdown_of Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "breakdown_of"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_model")
        {}

                /// <summary>
                /// Create new instace of solid_model and returns object of this C++ class to interact with
                /// </summary>
        static solid_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_model"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_solid_brep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_solid_brep : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_solid_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_solid_brep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_solid_brep")
        {}

                /// <summary>
                /// Create new instace of manifold_solid_brep and returns object of this C++ class to interact with
                /// </summary>
        static manifold_solid_brep Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_solid_brep"); assert(inst); return inst; }

        closed_shell get_outer();
        void put_outer(closed_shell inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of brep_with_voids
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class brep_with_voids : public virtual manifold_solid_brep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of brep_with_voids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        brep_with_voids(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "brep_with_voids")
        {}

                /// <summary>
                /// Create new instace of brep_with_voids and returns object of this C++ class to interact with
                /// </summary>
        static brep_with_voids Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "brep_with_voids"); assert(inst); return inst; }

        //TList may be set_of_oriented_closed_shell or list of converible elements
        template <typename TList> void get_voids(TList& lst) { set_of_oriented_closed_shellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "voids"); }

        //TList may be set_of_oriented_closed_shell or list of converible elements
        template <typename TList> void put_voids(TList& lst) { set_of_oriented_closed_shellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "voids"); }

        //TArrayElem[] may be oriented_closed_shell[] or array of convertible elements
        template <typename TArrayElem> void put_voids(TArrayElem arr[], size_t n) { set_of_oriented_closed_shell lst; ArrayToList(arr, n, lst); put_voids(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of bytes_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class bytes_representation_item : public virtual binary_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of bytes_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        bytes_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "bytes_representation_item")
        {}

                /// <summary>
                /// Create new instace of bytes_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static bytes_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "bytes_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date")
        {}

                /// <summary>
                /// Create new instace of date and returns object of this C++ class to interact with
                /// </summary>
        static date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date"); assert(inst); return inst; }

        Nullable<year_number> get_year_component() { year_number val = (year_number) 0; if (sdaiGetAttrBN(m_instance, "year_component", sdaiINTEGER, &val)) return val; else return Nullable<year_number>(); }
        void put_year_component(year_number value) { sdaiPutAttrBN(m_instance, "year_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of calendar_date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class calendar_date : public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of calendar_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        calendar_date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "calendar_date")
        {}

                /// <summary>
                /// Create new instace of calendar_date and returns object of this C++ class to interact with
                /// </summary>
        static calendar_date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "calendar_date"); assert(inst); return inst; }

        Nullable<day_in_month_number> get_day_component() { day_in_month_number val = (day_in_month_number) 0; if (sdaiGetAttrBN(m_instance, "day_component", sdaiINTEGER, &val)) return val; else return Nullable<day_in_month_number>(); }
        void put_day_component(day_in_month_number value) { sdaiPutAttrBN(m_instance, "day_component", sdaiINTEGER, &value); }

        Nullable<month_in_year_number> get_month_component() { month_in_year_number val = (month_in_year_number) 0; if (sdaiGetAttrBN(m_instance, "month_component", sdaiINTEGER, &val)) return val; else return Nullable<month_in_year_number>(); }
        void put_month_component(month_in_year_number value) { sdaiPutAttrBN(m_instance, "month_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_image
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_image : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_image
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_image(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_image")
        {}

                /// <summary>
                /// Create new instace of camera_image and returns object of this C++ class to interact with
                /// </summary>
        static camera_image Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_image"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_image_3d_with_scale
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_image_3d_with_scale : public virtual camera_image
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_image_3d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_image_3d_with_scale(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_image_3d_with_scale")
        {}

                /// <summary>
                /// Create new instace of camera_image_3d_with_scale and returns object of this C++ class to interact with
                /// </summary>
        static camera_image_3d_with_scale Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_image_3d_with_scale"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3 : public virtual camera_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3 and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3 Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3"); assert(inst); return inst; }

        axis2_placement_3d get_view_reference_system();
        void put_view_reference_system(axis2_placement_3d inst);

        view_volume get_perspective_of_volume();
        void put_perspective_of_volume(view_volume inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3_multi_clipping : public virtual camera_model_d3
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3_multi_clipping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3_multi_clipping(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3_multi_clipping")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3_multi_clipping and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3_multi_clipping Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping"); assert(inst); return inst; }

        //TList may be set_of_camera_model_d3_multi_clipping_interection_select or list of converible elements
        template <typename TList> void get_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_interection_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "shape_clipping"); }

        //TList may be set_of_camera_model_d3_multi_clipping_interection_select or list of converible elements
        template <typename TList> void put_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_interection_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "shape_clipping"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping_intersection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3_multi_clipping_intersection : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3_multi_clipping_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3_multi_clipping_intersection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3_multi_clipping_intersection")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3_multi_clipping_intersection and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3_multi_clipping_intersection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping_intersection"); assert(inst); return inst; }

        //TList may be set_of_camera_model_d3_multi_clipping_interection_select or list of converible elements
        template <typename TList> void get_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_interection_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "shape_clipping"); }

        //TList may be set_of_camera_model_d3_multi_clipping_interection_select or list of converible elements
        template <typename TList> void put_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_interection_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "shape_clipping"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping_union
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3_multi_clipping_union : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3_multi_clipping_union
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3_multi_clipping_union(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3_multi_clipping_union")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3_multi_clipping_union and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3_multi_clipping_union Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping_union"); assert(inst); return inst; }

        //TList may be set_of_camera_model_d3_multi_clipping_union_select or list of converible elements
        template <typename TList> void get_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_union_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "shape_clipping"); }

        //TList may be set_of_camera_model_d3_multi_clipping_union_select or list of converible elements
        template <typename TList> void put_shape_clipping(TList& lst) { set_of_camera_model_d3_multi_clipping_union_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "shape_clipping"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_d3_with_hlhsr
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_d3_with_hlhsr : public virtual camera_model_d3
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_d3_with_hlhsr
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_d3_with_hlhsr(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_d3_with_hlhsr")
        {}

                /// <summary>
                /// Create new instace of camera_model_d3_with_hlhsr and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_d3_with_hlhsr Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_d3_with_hlhsr"); assert(inst); return inst; }

        Nullable<bool> get_hidden_line_surface_removal() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "hidden_line_surface_removal", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_hidden_line_surface_removal(bool value) { sdaiPutAttrBN(m_instance, "hidden_line_surface_removal", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_model_with_light_sources
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_model_with_light_sources : public virtual camera_model_d3
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_model_with_light_sources
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_model_with_light_sources(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_model_with_light_sources")
        {}

                /// <summary>
                /// Create new instace of camera_model_with_light_sources and returns object of this C++ class to interact with
                /// </summary>
        static camera_model_with_light_sources Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_model_with_light_sources"); assert(inst); return inst; }

        //TList may be set_of_light_source or list of converible elements
        template <typename TList> void get_sources(TList& lst) { set_of_light_sourceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "sources"); }

        //TList may be set_of_light_source or list of converible elements
        template <typename TList> void put_sources(TList& lst) { set_of_light_sourceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "sources"); }

        //TArrayElem[] may be light_source[] or array of convertible elements
        template <typename TArrayElem> void put_sources(TArrayElem arr[], size_t n) { set_of_light_source lst; ArrayToList(arr, n, lst); put_sources(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_map
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_map : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_map(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_map")
        {}

                /// <summary>
                /// Create new instace of representation_map and returns object of this C++ class to interact with
                /// </summary>
        static representation_map Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_map"); assert(inst); return inst; }

        representation_item get_mapping_origin();
        void put_mapping_origin(representation_item inst);

        representation get_mapped_representation();
        void put_mapped_representation(representation inst);

        //TList may be set_of_mapped_item or list of converible elements
        template <typename TList> void get_map_usage(TList& lst) { set_of_mapped_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "map_usage"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of camera_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class camera_usage : public virtual representation_map
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of camera_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        camera_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "camera_usage")
        {}

                /// <summary>
                /// Create new instace of camera_usage and returns object of this C++ class to interact with
                /// </summary>
        static camera_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "camera_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of capacitance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class capacitance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of capacitance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        capacitance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "capacitance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of capacitance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static capacitance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "capacitance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of capacitance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class capacitance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of capacitance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        capacitance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "capacitance_unit")
        {}

                /// <summary>
                /// Create new instace of capacitance_unit and returns object of this C++ class to interact with
                /// </summary>
        static capacitance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "capacitance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point")
        {}

                /// <summary>
                /// Create new instace of point and returns object of this C++ class to interact with
                /// </summary>
        static point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_point : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_point")
        {}

                /// <summary>
                /// Create new instace of cartesian_point and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_point"); assert(inst); return inst; }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void get_coordinates(TList& lst) { list_of_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "coordinates"); }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void put_coordinates(TList& lst) { list_of_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "coordinates"); }

        //TArrayElem[] may be length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_coordinates(TArrayElem arr[], size_t n) { list_of_length_measure lst; ArrayToList(arr, n, lst); put_coordinates(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of functionally_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class functionally_defined_transformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of functionally_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        functionally_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "functionally_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of functionally_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static functionally_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "functionally_defined_transformation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator : public virtual geometric_representation_item, public virtual functionally_defined_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator"); assert(inst); return inst; }

        direction get_axis1();
        void put_axis1(direction inst);

        direction get_axis2();
        void put_axis2(direction inst);

        cartesian_point get_local_origin();
        void put_local_origin(cartesian_point inst);

        Nullable<double> get_scale() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "scale", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_scale(double value) { sdaiPutAttrBN(m_instance, "scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator_2d : public virtual cartesian_transformation_operator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator_2d")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator_2d and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator_2d"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cartesian_transformation_operator_3d : public virtual cartesian_transformation_operator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cartesian_transformation_operator_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cartesian_transformation_operator_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cartesian_transformation_operator_3d")
        {}

                /// <summary>
                /// Create new instace of cartesian_transformation_operator_3d and returns object of this C++ class to interact with
                /// </summary>
        static cartesian_transformation_operator_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cartesian_transformation_operator_3d"); assert(inst); return inst; }

        direction get_axis3();
        void put_axis3(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_approval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_approval : public virtual approval_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_approval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_approval")
        {}

                /// <summary>
                /// Create new instace of cc_design_approval and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_approval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_approval"); assert(inst); return inst; }

        //TList may be set_of_approved_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_approved_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_approved_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_approved_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_certification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_certification : public virtual certification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_certification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_certification")
        {}

                /// <summary>
                /// Create new instace of cc_design_certification and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_certification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_certification"); assert(inst); return inst; }

        //TList may be set_of_certified_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_certified_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_certified_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_certified_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_contract
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_contract : public virtual contract_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_contract(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_contract")
        {}

                /// <summary>
                /// Create new instace of cc_design_contract and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_contract Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_contract"); assert(inst); return inst; }

        //TList may be set_of_contracted_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_contracted_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_contracted_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_contracted_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_date_and_time_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_date_and_time_assignment : public virtual date_and_time_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_date_and_time_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_date_and_time_assignment")
        {}

                /// <summary>
                /// Create new instace of cc_design_date_and_time_assignment and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_date_and_time_assignment"); assert(inst); return inst; }

        //TList may be set_of_date_time_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_date_time_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_date_time_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_date_time_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_person_and_organization_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_person_and_organization_assignment : public virtual person_and_organization_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_person_and_organization_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_person_and_organization_assignment")
        {}

                /// <summary>
                /// Create new instace of cc_design_person_and_organization_assignment and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_person_and_organization_assignment"); assert(inst); return inst; }

        //TList may be set_of_cc_person_organization_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_cc_person_organization_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_cc_person_organization_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_cc_person_organization_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_security_classification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_security_classification : public virtual security_classification_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_security_classification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_security_classification")
        {}

                /// <summary>
                /// Create new instace of cc_design_security_classification and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_security_classification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_security_classification"); assert(inst); return inst; }

        //TList may be set_of_cc_classified_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_cc_classified_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_cc_classified_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_cc_classified_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cc_design_specification_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cc_design_specification_reference : public virtual document_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cc_design_specification_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cc_design_specification_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cc_design_specification_reference")
        {}

                /// <summary>
                /// Create new instace of cc_design_specification_reference and returns object of this C++ class to interact with
                /// </summary>
        static cc_design_specification_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cc_design_specification_reference"); assert(inst); return inst; }

        //TList may be set_of_cc_specified_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_cc_specified_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_cc_specified_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_cc_specified_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of celsius_temperature_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class celsius_temperature_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of celsius_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        celsius_temperature_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "celsius_temperature_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of celsius_temperature_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static celsius_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "celsius_temperature_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of centre_of_symmetry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class centre_of_symmetry : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of centre_of_symmetry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        centre_of_symmetry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "centre_of_symmetry")
        {}

                /// <summary>
                /// Create new instace of centre_of_symmetry and returns object of this C++ class to interact with
                /// </summary>
        static centre_of_symmetry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "centre_of_symmetry"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification")
        {}

                /// <summary>
                /// Create new instace of certification and returns object of this C++ class to interact with
                /// </summary>
        static certification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "certification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        certification_type get_kind();
        void put_kind(certification_type inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of certification_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class certification_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of certification_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        certification_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "certification_type")
        {}

                /// <summary>
                /// Create new instace of certification_type and returns object of this C++ class to interact with
                /// </summary>
        static certification_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "certification_type"); assert(inst); return inst; }

        label get_description() { label val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(label value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of change
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class change : public virtual action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of change
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        change(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "change")
        {}

                /// <summary>
                /// Create new instace of change and returns object of this C++ class to interact with
                /// </summary>
        static change Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "change"); assert(inst); return inst; }

        //TList may be set_of_work_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_work_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_work_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_work_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of change_request
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class change_request : public virtual action_request_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of change_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        change_request(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "change_request")
        {}

                /// <summary>
                /// Create new instace of change_request and returns object of this C++ class to interact with
                /// </summary>
        static change_request Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "change_request"); assert(inst); return inst; }

        //TList may be set_of_change_request_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_change_request_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_change_request_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_change_request_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_font_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_font_usage : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_font_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_font_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_font_usage")
        {}

                /// <summary>
                /// Create new instace of character_glyph_font_usage and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_font_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_font_usage"); assert(inst); return inst; }

        generic_character_glyph_symbol get_character();
        void put_character(generic_character_glyph_symbol inst);

        text_font get_font();
        void put_font(text_font inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_style_outline
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_style_outline : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_style_outline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_style_outline(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_style_outline")
        {}

                /// <summary>
                /// Create new instace of character_glyph_style_outline and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_style_outline Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_style_outline"); assert(inst); return inst; }

        curve_style get_outline_style();
        void put_outline_style(curve_style inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_style_stroke
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_style_stroke : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_style_stroke
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_style_stroke(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_style_stroke")
        {}

                /// <summary>
                /// Create new instace of character_glyph_style_stroke and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_style_stroke Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_style_stroke"); assert(inst); return inst; }

        curve_style get_stroke_style();
        void put_stroke_style(curve_style inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_representation")
        {}

                /// <summary>
                /// Create new instace of symbol_representation and returns object of this C++ class to interact with
                /// </summary>
        static symbol_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_character_glyph_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_character_glyph_symbol : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_character_glyph_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_character_glyph_symbol")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_symbol : public virtual generic_character_glyph_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_symbol")
        {}

                /// <summary>
                /// Create new instace of character_glyph_symbol and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_symbol"); assert(inst); return inst; }

        planar_extent get_character_box();
        void put_character_box(planar_extent inst);

        Nullable<ratio_measure> get_baseline_ratio() { ratio_measure val = (ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "baseline_ratio", sdaiREAL, &val)) return val; else return Nullable<ratio_measure>(); }
        void put_baseline_ratio(ratio_measure value) { sdaiPutAttrBN(m_instance, "baseline_ratio", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_symbol_outline
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_symbol_outline : public virtual character_glyph_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_symbol_outline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_symbol_outline(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_symbol_outline")
        {}

                /// <summary>
                /// Create new instace of character_glyph_symbol_outline and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_symbol_outline Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_symbol_outline"); assert(inst); return inst; }

        //TList may be set_of_annotation_fill_area or list of converible elements
        template <typename TList> void get_outlines(TList& lst) { set_of_annotation_fill_areaSerializer<TList> sr; sr.FromAttr(lst, m_instance, "outlines"); }

        //TList may be set_of_annotation_fill_area or list of converible elements
        template <typename TList> void put_outlines(TList& lst) { set_of_annotation_fill_areaSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "outlines"); }

        //TArrayElem[] may be annotation_fill_area[] or array of convertible elements
        template <typename TArrayElem> void put_outlines(TArrayElem arr[], size_t n) { set_of_annotation_fill_area lst; ArrayToList(arr, n, lst); put_outlines(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of character_glyph_symbol_stroke
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class character_glyph_symbol_stroke : public virtual character_glyph_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of character_glyph_symbol_stroke
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        character_glyph_symbol_stroke(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "character_glyph_symbol_stroke")
        {}

                /// <summary>
                /// Create new instace of character_glyph_symbol_stroke and returns object of this C++ class to interact with
                /// </summary>
        static character_glyph_symbol_stroke Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "character_glyph_symbol_stroke"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_strokes(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "strokes"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_strokes(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "strokes"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_strokes(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_strokes(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property")
        {}

                /// <summary>
                /// Create new instace of general_property and returns object of this C++ class to interact with
                /// </summary>
        static general_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characteristic_data_column_header
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characteristic_data_column_header : public virtual general_property
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characteristic_data_column_header
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characteristic_data_column_header(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characteristic_data_column_header")
        {}

                /// <summary>
                /// Create new instace of characteristic_data_column_header and returns object of this C++ class to interact with
                /// </summary>
        static characteristic_data_column_header Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characteristic_data_column_header"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property_relationship")
        {}

                /// <summary>
                /// Create new instace of general_property_relationship and returns object of this C++ class to interact with
                /// </summary>
        static general_property_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        general_property get_relating_property();
        void put_relating_property(general_property inst);

        general_property get_related_property();
        void put_related_property(general_property inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characteristic_data_column_header_link
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characteristic_data_column_header_link : public virtual general_property_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characteristic_data_column_header_link
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characteristic_data_column_header_link(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characteristic_data_column_header_link")
        {}

                /// <summary>
                /// Create new instace of characteristic_data_column_header_link and returns object of this C++ class to interact with
                /// </summary>
        static characteristic_data_column_header_link Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characteristic_data_column_header_link"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characteristic_data_table_header
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characteristic_data_table_header : public virtual general_property
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characteristic_data_table_header
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characteristic_data_table_header(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characteristic_data_table_header")
        {}

                /// <summary>
                /// Create new instace of characteristic_data_table_header and returns object of this C++ class to interact with
                /// </summary>
        static characteristic_data_table_header Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characteristic_data_table_header"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characteristic_data_table_header_decomposition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characteristic_data_table_header_decomposition : public virtual general_property_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characteristic_data_table_header_decomposition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characteristic_data_table_header_decomposition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characteristic_data_table_header_decomposition")
        {}

                /// <summary>
                /// Create new instace of characteristic_data_table_header_decomposition and returns object of this C++ class to interact with
                /// </summary>
        static characteristic_data_table_header_decomposition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characteristic_data_table_header_decomposition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characteristic_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characteristic_type : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characteristic_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characteristic_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characteristic_type")
        {}

                /// <summary>
                /// Create new instace of characteristic_type and returns object of this C++ class to interact with
                /// </summary>
        static characteristic_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characteristic_type"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_ : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_")
        {}

                /// <summary>
                /// Create new instace of class_ and returns object of this C++ class to interact with
                /// </summary>
        static class_ Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of characterized_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class characterized_class : public virtual characterized_object, public virtual class_
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of characterized_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        characterized_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "characterized_class")
        {}

                /// <summary>
                /// Create new instace of characterized_class and returns object of this C++ class to interact with
                /// </summary>
        static characterized_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "characterized_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conic : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conic")
        {}

                /// <summary>
                /// Create new instace of conic and returns object of this C++ class to interact with
                /// </summary>
        static conic Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conic"); assert(inst); return inst; }

        axis2_placement_get get_position() { return axis2_placement_get(m_instance, "position", NULL); }
        axis2_placement_put put_position() { return axis2_placement_put(m_instance, "position", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circle : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circle")
        {}

                /// <summary>
                /// Create new instace of circle and returns object of this C++ class to interact with
                /// </summary>
        static circle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circle"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of circular_runout_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class circular_runout_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of circular_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        circular_runout_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "circular_runout_tolerance")
        {}

                /// <summary>
                /// Create new instace of circular_runout_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static circular_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "circular_runout_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_by_extension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_by_extension : public virtual class_
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_by_extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_by_extension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_by_extension")
        {}

                /// <summary>
                /// Create new instace of class_by_extension and returns object of this C++ class to interact with
                /// </summary>
        static class_by_extension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_by_extension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_by_intension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_by_intension : public virtual class_
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_by_intension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_by_intension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_by_intension")
        {}

                /// <summary>
                /// Create new instace of class_by_intension and returns object of this C++ class to interact with
                /// </summary>
        static class_by_intension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_by_intension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_system
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_system : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_system(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_system")
        {}

                /// <summary>
                /// Create new instace of class_system and returns object of this C++ class to interact with
                /// </summary>
        static class_system Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_system"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_context_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_context_assignment")
        {}


        effectivity_assignment get_assigned_effectivity_assignment();
        void put_assigned_effectivity_assignment(effectivity_assignment inst);

        effectivity_context_role get_role();
        void put_role(effectivity_context_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of class_usage_effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class class_usage_effectivity_context_assignment : public virtual effectivity_context_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of class_usage_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        class_usage_effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "class_usage_effectivity_context_assignment")
        {}

                /// <summary>
                /// Create new instace of class_usage_effectivity_context_assignment and returns object of this C++ class to interact with
                /// </summary>
        static class_usage_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "class_usage_effectivity_context_assignment"); assert(inst); return inst; }

        //TList may be set_of_class_usage_effectivity_context_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_class_usage_effectivity_context_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_class_usage_effectivity_context_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_class_usage_effectivity_context_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of classification_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class classification_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of classification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        classification_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "classification_role")
        {}

                /// <summary>
                /// Create new instace of classification_role and returns object of this C++ class to interact with
                /// </summary>
        static classification_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "classification_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_face_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_face_set : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_face_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_face_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_face_set")
        {}

                /// <summary>
                /// Create new instace of connected_face_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_face_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_face_set"); assert(inst); return inst; }

        //TList may be set_of_face or list of converible elements
        template <typename TList> void get_cfs_faces(TList& lst) { set_of_faceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "cfs_faces"); }

        //TList may be set_of_face or list of converible elements
        template <typename TList> void put_cfs_faces(TList& lst) { set_of_faceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "cfs_faces"); }

        //TArrayElem[] may be face[] or array of convertible elements
        template <typename TArrayElem> void put_cfs_faces(TArrayElem arr[], size_t n) { set_of_face lst; ArrayToList(arr, n, lst); put_cfs_faces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of closed_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class closed_shell : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        closed_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "closed_shell")
        {}

                /// <summary>
                /// Create new instace of closed_shell and returns object of this C++ class to interact with
                /// </summary>
        static closed_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "closed_shell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of coaxiality_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class coaxiality_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of coaxiality_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        coaxiality_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "coaxiality_tolerance")
        {}

                /// <summary>
                /// Create new instace of coaxiality_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static coaxiality_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "coaxiality_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour_specification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour_specification : public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour_specification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour_specification")
        {}

                /// <summary>
                /// Create new instace of colour_specification and returns object of this C++ class to interact with
                /// </summary>
        static colour_specification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour_specification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of colour_rgb
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class colour_rgb : public virtual colour_specification
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of colour_rgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        colour_rgb(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "colour_rgb")
        {}

                /// <summary>
                /// Create new instace of colour_rgb and returns object of this C++ class to interact with
                /// </summary>
        static colour_rgb Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "colour_rgb"); assert(inst); return inst; }

        Nullable<double> get_red() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "red", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_red(double value) { sdaiPutAttrBN(m_instance, "red", sdaiREAL, &value); }

        Nullable<double> get_green() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "green", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_green(double value) { sdaiPutAttrBN(m_instance, "green", sdaiREAL, &value); }

        Nullable<double> get_blue() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "blue", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_blue(double value) { sdaiPutAttrBN(m_instance, "blue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of composite_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static composite_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_component_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "component_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum")
        {}

                /// <summary>
                /// Create new instace of datum and returns object of this C++ class to interact with
                /// </summary>
        static datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum"); assert(inst); return inst; }

        identifier get_identification() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "identification", sdaiSTRING, &val)) return val; else return NULL; }
        void put_identification(identifier value) { sdaiPutAttrBN(m_instance, "identification", sdaiSTRING, value); }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_established_by_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "established_by_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of common_datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class common_datum : public virtual composite_shape_aspect, public virtual datum
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of common_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        common_datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "common_datum")
        {}

                /// <summary>
                /// Create new instace of common_datum and returns object of this C++ class to interact with
                /// </summary>
        static common_datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "common_datum"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of comparison_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class comparison_expression : public virtual boolean_expression, public virtual binary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of comparison_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        comparison_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "comparison_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of complex_clause
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class complex_clause : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of complex_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        complex_clause(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "complex_clause")
        {}

                /// <summary>
                /// Create new instace of complex_clause and returns object of this C++ class to interact with
                /// </summary>
        static complex_clause Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "complex_clause"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of complex_conjunctive_clause
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class complex_conjunctive_clause : public virtual complex_clause
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of complex_conjunctive_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        complex_conjunctive_clause(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "complex_conjunctive_clause")
        {}

                /// <summary>
                /// Create new instace of complex_conjunctive_clause and returns object of this C++ class to interact with
                /// </summary>
        static complex_conjunctive_clause Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "complex_conjunctive_clause"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of complex_disjunctive_clause
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class complex_disjunctive_clause : public virtual complex_clause
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of complex_disjunctive_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        complex_disjunctive_clause(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "complex_disjunctive_clause")
        {}

                /// <summary>
                /// Create new instace of complex_disjunctive_clause and returns object of this C++ class to interact with
                /// </summary>
        static complex_disjunctive_clause Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "complex_disjunctive_clause"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of modified_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class modified_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of modified_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        modified_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "modified_solid")
        {}


        text get_rationale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "rationale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_rationale(text value) { sdaiPutAttrBN(m_instance, "rationale", sdaiSTRING, value); }

        base_solid_select_get get_base_solid() { return base_solid_select_get(m_instance, "base_solid", NULL); }
        base_solid_select_put put_base_solid() { return base_solid_select_put(m_instance, "base_solid", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shelled_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shelled_solid : public virtual modified_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shelled_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shelled_solid")
        {}

                /// <summary>
                /// Create new instace of shelled_solid and returns object of this C++ class to interact with
                /// </summary>
        static shelled_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shelled_solid"); assert(inst); return inst; }

        //TList may be set_of_face_surface or list of converible elements
        template <typename TList> void get_deleted_face_set(TList& lst) { set_of_face_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "deleted_face_set"); }

        //TList may be set_of_face_surface or list of converible elements
        template <typename TList> void put_deleted_face_set(TList& lst) { set_of_face_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "deleted_face_set"); }

        //TArrayElem[] may be face_surface[] or array of convertible elements
        template <typename TArrayElem> void put_deleted_face_set(TArrayElem arr[], size_t n) { set_of_face_surface lst; ArrayToList(arr, n, lst); put_deleted_face_set(lst); }

        Nullable<length_measure> get_thickness() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "thickness", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_thickness(length_measure value) { sdaiPutAttrBN(m_instance, "thickness", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of complex_shelled_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class complex_shelled_solid : public virtual shelled_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of complex_shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        complex_shelled_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "complex_shelled_solid")
        {}

                /// <summary>
                /// Create new instace of complex_shelled_solid and returns object of this C++ class to interact with
                /// </summary>
        static complex_shelled_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "complex_shelled_solid"); assert(inst); return inst; }

        //TList may be set_of_list_of_face_surface or list of converible elements
        template <typename TList> void get_thickened_face_list(TList& lst) { set_of_list_of_face_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "thickened_face_list"); }

        //TList may be set_of_list_of_face_surface or list of converible elements
        template <typename TList> void put_thickened_face_list(TList& lst) { set_of_list_of_face_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "thickened_face_list"); }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void get_thickness_list(TList& lst) { list_of_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "thickness_list"); }

        //TList may be list_of_length_measure or list of converible elements
        template <typename TList> void put_thickness_list(TList& lst) { list_of_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "thickness_list"); }

        //TArrayElem[] may be length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_thickness_list(TArrayElem arr[], size_t n) { list_of_length_measure lst; ArrayToList(arr, n, lst); put_thickness_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_assembly_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_assembly_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_assembly_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_assembly_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_assembly_definition")
        {}

                /// <summary>
                /// Create new instace of composite_assembly_definition and returns object of this C++ class to interact with
                /// </summary>
        static composite_assembly_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_assembly_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_assembly_sequence_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_assembly_sequence_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_assembly_sequence_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_assembly_sequence_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_assembly_sequence_definition")
        {}

                /// <summary>
                /// Create new instace of composite_assembly_sequence_definition and returns object of this C++ class to interact with
                /// </summary>
        static composite_assembly_sequence_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_assembly_sequence_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of laminate_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class laminate_table : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        laminate_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "laminate_table")
        {}

                /// <summary>
                /// Create new instace of laminate_table and returns object of this C++ class to interact with
                /// </summary>
        static laminate_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "laminate_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of part_laminate_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class part_laminate_table : public virtual laminate_table
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of part_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        part_laminate_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "part_laminate_table")
        {}

                /// <summary>
                /// Create new instace of part_laminate_table and returns object of this C++ class to interact with
                /// </summary>
        static part_laminate_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "part_laminate_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_assembly_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_assembly_table : public virtual part_laminate_table
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_assembly_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_assembly_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_assembly_table")
        {}

                /// <summary>
                /// Create new instace of composite_assembly_table and returns object of this C++ class to interact with
                /// </summary>
        static composite_assembly_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_assembly_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_curve_segment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_curve_segment : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_curve_segment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_curve_segment")
        {}

                /// <summary>
                /// Create new instace of composite_curve_segment and returns object of this C++ class to interact with
                /// </summary>
        static composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_curve_segment"); assert(inst); return inst; }

        Nullable<transition_code> get_transition() { int v = getENUM("transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "transition", sdaiENUM, val); }

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }

        curve get_parent_curve();
        void put_parent_curve(curve inst);

        //TList may be bag_of_composite_curve or list of converible elements
        template <typename TList> void get_using_curves(TList& lst) { bag_of_composite_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "using_curves"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_designation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_designation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_designation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_designation")
        {}

                /// <summary>
                /// Create new instace of material_designation and returns object of this C++ class to interact with
                /// </summary>
        static material_designation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_designation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_characterized_definition or list of converible elements
        template <typename TList> void get_definitions(TList& lst) { set_of_characterized_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "definitions"); }

        //TList may be set_of_characterized_definition or list of converible elements
        template <typename TList> void put_definitions(TList& lst) { set_of_characterized_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "definitions"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_material_designation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_material_designation : public virtual material_designation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_material_designation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_material_designation")
        {}

                /// <summary>
                /// Create new instace of composite_material_designation and returns object of this C++ class to interact with
                /// </summary>
        static composite_material_designation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_material_designation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_sheet_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_sheet_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_sheet_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_sheet_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_sheet_representation")
        {}

                /// <summary>
                /// Create new instace of composite_sheet_representation and returns object of this C++ class to interact with
                /// </summary>
        static composite_sheet_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_sheet_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text")
        {}

                /// <summary>
                /// Create new instace of composite_text and returns object of this C++ class to interact with
                /// </summary>
        static composite_text Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text"); assert(inst); return inst; }

        //TList may be set_of_text_or_character or list of converible elements
        template <typename TList> void get_collected_text(TList& lst) { set_of_text_or_characterSerializer<TList> sr; sr.FromAttr(lst, m_instance, "collected_text"); }

        //TList may be set_of_text_or_character or list of converible elements
        template <typename TList> void put_collected_text(TList& lst) { set_of_text_or_characterSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "collected_text"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_associated_curves
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_associated_curves : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_associated_curves(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_associated_curves")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_associated_curves and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_associated_curves"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_curves"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_curves"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_associated_curves(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_associated_curves(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_blanking_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_blanking_box : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_blanking_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_blanking_box")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_blanking_box and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_blanking_box"); assert(inst); return inst; }

        planar_box get_blanking();
        void put_blanking(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_delineation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_delineation : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_delineation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_delineation")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_delineation and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_delineation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_delineation"); assert(inst); return inst; }

        text_delineation get_delineation() { text_delineation val = NULL; if (sdaiGetAttrBN(m_instance, "delineation", sdaiSTRING, &val)) return val; else return NULL; }
        void put_delineation(text_delineation value) { sdaiPutAttrBN(m_instance, "delineation", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of composite_text_with_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class composite_text_with_extent : public virtual composite_text
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of composite_text_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        composite_text_with_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "composite_text_with_extent")
        {}

                /// <summary>
                /// Create new instace of composite_text_with_extent and returns object of this C++ class to interact with
                /// </summary>
        static composite_text_with_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "composite_text_with_extent"); assert(inst); return inst; }

        planar_extent get_extent();
        void put_extent(planar_extent inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of compound_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class compound_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of compound_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        compound_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "compound_shape_representation")
        {}

                /// <summary>
                /// Create new instace of compound_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static compound_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "compound_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concentricity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concentricity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concentricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concentricity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concentricity_tolerance")
        {}

                /// <summary>
                /// Create new instace of concentricity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static concentricity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concentricity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_operator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_operator : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_operator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_operator")
        {}

                /// <summary>
                /// Create new instace of concept_feature_operator and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_operator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_operator"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_relationship")
        {}

                /// <summary>
                /// Create new instace of concept_feature_relationship and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept_feature get_relating_product_concept_feature();
        void put_relating_product_concept_feature(product_concept_feature inst);

        product_concept_feature get_related_product_concept_feature();
        void put_related_product_concept_feature(product_concept_feature inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of concept_feature_relationship_with_condition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class concept_feature_relationship_with_condition : public virtual concept_feature_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of concept_feature_relationship_with_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        concept_feature_relationship_with_condition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "concept_feature_relationship_with_condition")
        {}

                /// <summary>
                /// Create new instace of concept_feature_relationship_with_condition and returns object of this C++ class to interact with
                /// </summary>
        static concept_feature_relationship_with_condition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "concept_feature_relationship_with_condition"); assert(inst); return inst; }

        concept_feature_operator get_conditional_operator();
        void put_conditional_operator(concept_feature_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conditional_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conditional_concept_feature : public virtual product_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conditional_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conditional_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conditional_concept_feature")
        {}

                /// <summary>
                /// Create new instace of conditional_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static conditional_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conditional_concept_feature"); assert(inst); return inst; }

        concept_feature_relationship_with_condition get_condition();
        void put_condition(concept_feature_relationship_with_condition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conductance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conductance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conductance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conductance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conductance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of conductance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static conductance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conductance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conductance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conductance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conductance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conductance_unit")
        {}

                /// <summary>
                /// Create new instace of conductance_unit and returns object of this C++ class to interact with
                /// </summary>
        static conductance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conductance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_item")
        {}

                /// <summary>
                /// Create new instace of configuration_item and returns object of this C++ class to interact with
                /// </summary>
        static configuration_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_item"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_item_concept();
        void put_item_concept(product_concept inst);

        label get_purpose() { label val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(label value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configurable_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configurable_item : public virtual configuration_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configurable_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configurable_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configurable_item")
        {}

                /// <summary>
                /// Create new instace of configurable_item and returns object of this C++ class to interact with
                /// </summary>
        static configurable_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configurable_item"); assert(inst); return inst; }

        //TList may be set_of_product_concept_feature_association or list of converible elements
        template <typename TList> void get_item_concept_feature(TList& lst) { set_of_product_concept_feature_associationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "item_concept_feature"); }

        //TList may be set_of_product_concept_feature_association or list of converible elements
        template <typename TList> void put_item_concept_feature(TList& lst) { set_of_product_concept_feature_associationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        //TArrayElem[] may be product_concept_feature_association[] or array of convertible elements
        template <typename TArrayElem> void put_item_concept_feature(TArrayElem arr[], size_t n) { set_of_product_concept_feature_association lst; ArrayToList(arr, n, lst); put_item_concept_feature(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_design
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_design : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_design
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_design(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_design")
        {}

                /// <summary>
                /// Create new instace of configuration_design and returns object of this C++ class to interact with
                /// </summary>
        static configuration_design Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_design"); assert(inst); return inst; }

        configuration_item get_configuration();
        void put_configuration(configuration_item inst);

        configuration_design_item_get get_design() { return configuration_design_item_get(m_instance, "design", NULL); }
        configuration_design_item_put put_design() { return configuration_design_item_put(m_instance, "design", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity")
        {}

                /// <summary>
                /// Create new instace of effectivity and returns object of this C++ class to interact with
                /// </summary>
        static effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_effectivity")
        {}

                /// <summary>
                /// Create new instace of product_definition_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_effectivity"); assert(inst); return inst; }

        product_definition_relationship get_usage();
        void put_usage(product_definition_relationship inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_effectivity : public virtual product_definition_effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_effectivity")
        {}

                /// <summary>
                /// Create new instace of configuration_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static configuration_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_effectivity"); assert(inst); return inst; }

        configuration_design get_configuration();
        void put_configuration(configuration_design inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_item_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_item_relationship")
        {}

                /// <summary>
                /// Create new instace of configuration_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static configuration_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_item_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        configuration_item get_relating_configuration_item();
        void put_relating_configuration_item(configuration_item inst);

        configuration_item get_related_configuration_item();
        void put_related_configuration_item(configuration_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_item_hierarchical_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_item_hierarchical_relationship : public virtual configuration_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_item_hierarchical_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_item_hierarchical_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_item_hierarchical_relationship")
        {}

                /// <summary>
                /// Create new instace of configuration_item_hierarchical_relationship and returns object of this C++ class to interact with
                /// </summary>
        static configuration_item_hierarchical_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_item_hierarchical_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configuration_item_revision_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configuration_item_revision_sequence : public virtual configuration_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configuration_item_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configuration_item_revision_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configuration_item_revision_sequence")
        {}

                /// <summary>
                /// Create new instace of configuration_item_revision_sequence and returns object of this C++ class to interact with
                /// </summary>
        static configuration_item_revision_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configuration_item_revision_sequence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configured_effectivity_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configured_effectivity_assignment : public virtual effectivity_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configured_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configured_effectivity_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configured_effectivity_assignment")
        {}

                /// <summary>
                /// Create new instace of configured_effectivity_assignment and returns object of this C++ class to interact with
                /// </summary>
        static configured_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configured_effectivity_assignment"); assert(inst); return inst; }

        //TList may be set_of_configured_effectivity_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_configured_effectivity_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_configured_effectivity_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_configured_effectivity_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of configured_effectivity_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class configured_effectivity_context_assignment : public virtual effectivity_context_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of configured_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        configured_effectivity_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "configured_effectivity_context_assignment")
        {}

                /// <summary>
                /// Create new instace of configured_effectivity_context_assignment and returns object of this C++ class to interact with
                /// </summary>
        static configured_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "configured_effectivity_context_assignment"); assert(inst); return inst; }

        //TList may be set_of_configured_effectivity_context_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_configured_effectivity_context_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_configured_effectivity_context_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_configured_effectivity_context_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conical_stepped_hole_transition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conical_stepped_hole_transition : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conical_stepped_hole_transition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conical_stepped_hole_transition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conical_stepped_hole_transition")
        {}

                /// <summary>
                /// Create new instace of conical_stepped_hole_transition and returns object of this C++ class to interact with
                /// </summary>
        static conical_stepped_hole_transition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conical_stepped_hole_transition"); assert(inst); return inst; }

        Nullable<positive_integer> get_transition_number() { positive_integer val = (positive_integer) 0; if (sdaiGetAttrBN(m_instance, "transition_number", sdaiINTEGER, &val)) return val; else return Nullable<positive_integer>(); }
        void put_transition_number(positive_integer value) { sdaiPutAttrBN(m_instance, "transition_number", sdaiINTEGER, &value); }

        Nullable<plane_angle_measure> get_cone_apex_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "cone_apex_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_cone_apex_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "cone_apex_angle", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_cone_base_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "cone_base_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_cone_base_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "cone_base_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of elementary_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class elementary_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of elementary_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        elementary_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "elementary_surface")
        {}

                /// <summary>
                /// Create new instace of elementary_surface and returns object of this C++ class to interact with
                /// </summary>
        static elementary_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "elementary_surface"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conical_surface")
        {}

                /// <summary>
                /// Create new instace of conical_surface and returns object of this C++ class to interact with
                /// </summary>
        static conical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conical_surface"); assert(inst); return inst; }

        Nullable<length_measure> get_radius() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius(length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_semi_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_semi_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "semi_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_edge_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_edge_set : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_edge_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_edge_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_edge_set")
        {}

                /// <summary>
                /// Create new instace of connected_edge_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_edge_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_edge_set"); assert(inst); return inst; }

        //TList may be set_of_edge or list of converible elements
        template <typename TList> void get_ces_edges(TList& lst) { set_of_edgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ces_edges"); }

        //TList may be set_of_edge or list of converible elements
        template <typename TList> void put_ces_edges(TList& lst) { set_of_edgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ces_edges"); }

        //TArrayElem[] may be edge[] or array of convertible elements
        template <typename TArrayElem> void put_ces_edges(TArrayElem arr[], size_t n) { set_of_edge lst; ArrayToList(arr, n, lst); put_ces_edges(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of connected_face_sub_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class connected_face_sub_set : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of connected_face_sub_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        connected_face_sub_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "connected_face_sub_set")
        {}

                /// <summary>
                /// Create new instace of connected_face_sub_set and returns object of this C++ class to interact with
                /// </summary>
        static connected_face_sub_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "connected_face_sub_set"); assert(inst); return inst; }

        connected_face_set get_parent_face_set();
        void put_parent_face_set(connected_face_set inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of constructive_geometry_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class constructive_geometry_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of constructive_geometry_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        constructive_geometry_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "constructive_geometry_representation")
        {}

                /// <summary>
                /// Create new instace of constructive_geometry_representation and returns object of this C++ class to interact with
                /// </summary>
        static constructive_geometry_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "constructive_geometry_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_relationship")
        {}

                /// <summary>
                /// Create new instace of representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        representation get_rep_1();
        void put_rep_1(representation inst);

        representation get_rep_2();
        void put_rep_2(representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of constructive_geometry_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class constructive_geometry_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of constructive_geometry_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        constructive_geometry_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "constructive_geometry_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of constructive_geometry_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static constructive_geometry_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "constructive_geometry_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contact_ratio_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contact_ratio_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contact_ratio_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contact_ratio_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contact_ratio_representation")
        {}

                /// <summary>
                /// Create new instace of contact_ratio_representation and returns object of this C++ class to interact with
                /// </summary>
        static contact_ratio_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contact_ratio_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of invisibility
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class invisibility : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        invisibility(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "invisibility")
        {}

                /// <summary>
                /// Create new instace of invisibility and returns object of this C++ class to interact with
                /// </summary>
        static invisibility Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "invisibility"); assert(inst); return inst; }

        //TList may be set_of_invisible_item or list of converible elements
        template <typename TList> void get_invisible_items(TList& lst) { set_of_invisible_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "invisible_items"); }

        //TList may be set_of_invisible_item or list of converible elements
        template <typename TList> void put_invisible_items(TList& lst) { set_of_invisible_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "invisible_items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_invisibility
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_invisibility : public virtual invisibility
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_invisibility(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_invisibility")
        {}

                /// <summary>
                /// Create new instace of context_dependent_invisibility and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_invisibility Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_invisibility"); assert(inst); return inst; }

        invisibility_context_get get_presentation_context() { return invisibility_context_get(m_instance, "presentation_context", NULL); }
        invisibility_context_put put_presentation_context() { return invisibility_context_put(m_instance, "presentation_context", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class over_riding_styled_item : public virtual styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "over_riding_styled_item"); assert(inst); return inst; }

        styled_item get_over_ridden_style();
        void put_over_ridden_style(styled_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_over_riding_styled_item : public virtual over_riding_styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of context_dependent_over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_over_riding_styled_item"); assert(inst); return inst; }

        //TList may be list_of_style_context_select or list of converible elements
        template <typename TList> void get_style_context(TList& lst) { list_of_style_context_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "style_context"); }

        //TList may be list_of_style_context_select or list of converible elements
        template <typename TList> void put_style_context(TList& lst) { list_of_style_context_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "style_context"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_shape_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_shape_representation")
        {}

                /// <summary>
                /// Create new instace of context_dependent_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_shape_representation"); assert(inst); return inst; }

        shape_representation_relationship get_representation_relation();
        void put_representation_relation(shape_representation_relationship inst);

        product_definition_shape get_represented_product_relation();
        void put_represented_product_relation(product_definition_shape inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of context_dependent_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class context_dependent_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        context_dependent_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "context_dependent_unit")
        {}

                /// <summary>
                /// Create new instace of context_dependent_unit and returns object of this C++ class to interact with
                /// </summary>
        static context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "context_dependent_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract")
        {}

                /// <summary>
                /// Create new instace of contract and returns object of this C++ class to interact with
                /// </summary>
        static contract Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contract"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        contract_type get_kind();
        void put_kind(contract_type inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract_relationship")
        {}

                /// <summary>
                /// Create new instace of contract_relationship and returns object of this C++ class to interact with
                /// </summary>
        static contract_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contract_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        contract get_relating_contract();
        void put_relating_contract(contract inst);

        contract get_related_contract();
        void put_related_contract(contract inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of contract_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class contract_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of contract_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        contract_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "contract_type")
        {}

                /// <summary>
                /// Create new instace of contract_type and returns object of this C++ class to interact with
                /// </summary>
        static contract_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "contract_type"); assert(inst); return inst; }

        label get_description() { label val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(label value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of conversion_based_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class conversion_based_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        conversion_based_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "conversion_based_unit")
        {}

                /// <summary>
                /// Create new instace of conversion_based_unit and returns object of this C++ class to interact with
                /// </summary>
        static conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "conversion_based_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        measure_with_unit get_conversion_factor();
        void put_conversion_factor(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of coordinated_universal_time_offset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class coordinated_universal_time_offset : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of coordinated_universal_time_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        coordinated_universal_time_offset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "coordinated_universal_time_offset")
        {}

                /// <summary>
                /// Create new instace of coordinated_universal_time_offset and returns object of this C++ class to interact with
                /// </summary>
        static coordinated_universal_time_offset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "coordinated_universal_time_offset"); assert(inst); return inst; }

        Nullable<IntValue> get_hour_offset() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "hour_offset", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_hour_offset(IntValue value) { sdaiPutAttrBN(m_instance, "hour_offset", sdaiINTEGER, &value); }

        Nullable<IntValue> get_minute_offset() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "minute_offset", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_minute_offset(IntValue value) { sdaiPutAttrBN(m_instance, "minute_offset", sdaiINTEGER, &value); }

        Nullable<ahead_or_behind> get_sense() { int v = getENUM("sense", ahead_or_behind_); if (v >= 0) return (ahead_or_behind) v; else return Nullable<ahead_or_behind>(); }
        void put_sense(ahead_or_behind value) { TextValue val = ahead_or_behind_[(int) value]; sdaiPutAttrBN(m_instance, "sense", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of csg_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class csg_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of csg_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        csg_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "csg_shape_representation")
        {}

                /// <summary>
                /// Create new instace of csg_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static csg_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "csg_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of csg_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class csg_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of csg_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        csg_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "csg_solid")
        {}

                /// <summary>
                /// Create new instace of csg_solid and returns object of this C++ class to interact with
                /// </summary>
        static csg_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "csg_solid"); assert(inst); return inst; }

        csg_select_get get_tree_root_expression() { return csg_select_get(m_instance, "tree_root_expression", NULL); }
        csg_select_put put_tree_root_expression() { return csg_select_put(m_instance, "tree_root_expression", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of currency
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class currency : public virtual context_dependent_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        currency(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "currency")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of currency_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class currency_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of currency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        currency_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "currency_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of currency_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static currency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "currency_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_bounded_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_bounded_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_bounded_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_bounded_surface")
        {}

                /// <summary>
                /// Create new instace of curve_bounded_surface and returns object of this C++ class to interact with
                /// </summary>
        static curve_bounded_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_bounded_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        //TList may be set_of_boundary_curve or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_boundary_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_boundary_curve or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_boundary_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be boundary_curve[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_boundary_curve lst; ArrayToList(arr, n, lst); put_boundaries(lst); }

        Nullable<bool> get_implicit_outer() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "implicit_outer", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_implicit_outer(bool value) { sdaiPutAttrBN(m_instance, "implicit_outer", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_dimension")
        {}

                /// <summary>
                /// Create new instace of curve_dimension and returns object of this C++ class to interact with
                /// </summary>
        static curve_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_replica : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_replica")
        {}

                /// <summary>
                /// Create new instace of curve_replica and returns object of this C++ class to interact with
                /// </summary>
        static curve_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_replica"); assert(inst); return inst; }

        curve get_parent_curve();
        void put_parent_curve(curve inst);

        cartesian_transformation_operator get_transformation();
        void put_transformation(cartesian_transformation_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style")
        {}

                /// <summary>
                /// Create new instace of curve_style and returns object of this C++ class to interact with
                /// </summary>
        static curve_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        curve_font_or_scaled_curve_font_select_get get_curve_font() { return curve_font_or_scaled_curve_font_select_get(m_instance, "curve_font", NULL); }
        curve_font_or_scaled_curve_font_select_put put_curve_font() { return curve_font_or_scaled_curve_font_select_put(m_instance, "curve_font", NULL); }

        size_select_get get_curve_width() { return size_select_get(m_instance, "curve_width", NULL); }
        size_select_put put_curve_width() { return size_select_put(m_instance, "curve_width", NULL); }

        colour get_curve_colour();
        void put_curve_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_font : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_font")
        {}

                /// <summary>
                /// Create new instace of curve_style_font and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_font"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be list_of_curve_style_font_pattern or list of converible elements
        template <typename TList> void get_pattern_list(TList& lst) { list_of_curve_style_font_patternSerializer<TList> sr; sr.FromAttr(lst, m_instance, "pattern_list"); }

        //TList may be list_of_curve_style_font_pattern or list of converible elements
        template <typename TList> void put_pattern_list(TList& lst) { list_of_curve_style_font_patternSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "pattern_list"); }

        //TArrayElem[] may be curve_style_font_pattern[] or array of convertible elements
        template <typename TArrayElem> void put_pattern_list(TArrayElem arr[], size_t n) { list_of_curve_style_font_pattern lst; ArrayToList(arr, n, lst); put_pattern_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_font_and_scaling
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_font_and_scaling : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_font_and_scaling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_font_and_scaling(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_font_and_scaling")
        {}

                /// <summary>
                /// Create new instace of curve_style_font_and_scaling and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_font_and_scaling Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_font_and_scaling"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        curve_style_font_select_get get_curve_font() { return curve_style_font_select_get(m_instance, "curve_font", NULL); }
        curve_style_font_select_put put_curve_font() { return curve_style_font_select_put(m_instance, "curve_font", NULL); }

        Nullable<double> get_curve_font_scaling() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "curve_font_scaling", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_curve_font_scaling(double value) { sdaiPutAttrBN(m_instance, "curve_font_scaling", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_font_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_font_pattern : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_font_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_font_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_font_pattern")
        {}

                /// <summary>
                /// Create new instace of curve_style_font_pattern and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_font_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_font_pattern"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_visible_segment_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "visible_segment_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_visible_segment_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "visible_segment_length", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_invisible_segment_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "invisible_segment_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_invisible_segment_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "invisible_segment_length", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_style_rendering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_style_rendering : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_style_rendering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_style_rendering")
        {}

                /// <summary>
                /// Create new instace of curve_style_rendering and returns object of this C++ class to interact with
                /// </summary>
        static curve_style_rendering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_style_rendering"); assert(inst); return inst; }

        Nullable<shading_curve_method> get_rendering_method() { int v = getENUM("rendering_method", shading_curve_method_); if (v >= 0) return (shading_curve_method) v; else return Nullable<shading_curve_method>(); }
        void put_rendering_method(shading_curve_method value) { TextValue val = shading_curve_method_[(int) value]; sdaiPutAttrBN(m_instance, "rendering_method", sdaiENUM, val); }

        surface_rendering_properties get_rendering_properties();
        void put_rendering_properties(surface_rendering_properties inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of curve_swept_solid_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class curve_swept_solid_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of curve_swept_solid_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        curve_swept_solid_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "curve_swept_solid_shape_representation")
        {}

                /// <summary>
                /// Create new instace of curve_swept_solid_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static curve_swept_solid_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "curve_swept_solid_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindrical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindrical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindrical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindrical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindrical_surface")
        {}

                /// <summary>
                /// Create new instace of cylindrical_surface and returns object of this C++ class to interact with
                /// </summary>
        static cylindrical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindrical_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of cylindricity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class cylindricity_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of cylindricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        cylindricity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "cylindricity_tolerance")
        {}

                /// <summary>
                /// Create new instace of cylindricity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static cylindricity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "cylindricity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of data_environment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class data_environment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of data_environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        data_environment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "data_environment")
        {}

                /// <summary>
                /// Create new instace of data_environment and returns object of this C++ class to interact with
                /// </summary>
        static data_environment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "data_environment"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_property_definition_representation or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_property_definition_representationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_property_definition_representation or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_property_definition_representationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }

        //TArrayElem[] may be property_definition_representation[] or array of convertible elements
        template <typename TArrayElem> void put_elements(TArrayElem arr[], size_t n) { set_of_property_definition_representation lst; ArrayToList(arr, n, lst); put_elements(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_and_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_and_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_and_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_and_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_and_time")
        {}

                /// <summary>
                /// Create new instace of date_and_time and returns object of this C++ class to interact with
                /// </summary>
        static date_and_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_and_time"); assert(inst); return inst; }

        date get_date_component();
        void put_date_component(date inst);

        local_time get_time_component();
        void put_time_component(local_time inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_representation_item : public virtual representation_item, public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_representation_item")
        {}

                /// <summary>
                /// Create new instace of date_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static date_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_role")
        {}

                /// <summary>
                /// Create new instace of date_role and returns object of this C++ class to interact with
                /// </summary>
        static date_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_time_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_time_representation_item : public virtual representation_item, public virtual date_and_time
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_time_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_time_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_time_representation_item")
        {}

                /// <summary>
                /// Create new instace of date_time_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static date_time_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_time_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of date_time_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class date_time_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of date_time_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        date_time_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "date_time_role")
        {}

                /// <summary>
                /// Create new instace of date_time_role and returns object of this C++ class to interact with
                /// </summary>
        static date_time_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "date_time_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dated_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dated_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dated_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dated_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dated_effectivity")
        {}

                /// <summary>
                /// Create new instace of dated_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static dated_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dated_effectivity"); assert(inst); return inst; }

        date_time_or_event_occurrence_get get_effectivity_end_date() { return date_time_or_event_occurrence_get(m_instance, "effectivity_end_date", NULL); }
        date_time_or_event_occurrence_put put_effectivity_end_date() { return date_time_or_event_occurrence_put(m_instance, "effectivity_end_date", NULL); }

        date_time_or_event_occurrence_get get_effectivity_start_date() { return date_time_or_event_occurrence_get(m_instance, "effectivity_start_date", NULL); }
        date_time_or_event_occurrence_put put_effectivity_start_date() { return date_time_or_event_occurrence_put(m_instance, "effectivity_start_date", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_feature : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_feature")
        {}

                /// <summary>
                /// Create new instace of datum_feature and returns object of this C++ class to interact with
                /// </summary>
        static datum_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_feature"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_feature_basis_relationship(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "feature_basis_relationship"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_feature_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_feature_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_feature_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_feature_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_feature_callout")
        {}

                /// <summary>
                /// Create new instace of datum_feature_callout and returns object of this C++ class to interact with
                /// </summary>
        static datum_feature_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_feature_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_reference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_reference : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_reference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_reference")
        {}

                /// <summary>
                /// Create new instace of datum_reference and returns object of this C++ class to interact with
                /// </summary>
        static datum_reference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_reference"); assert(inst); return inst; }

        Nullable<IntValue> get_precedence() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "precedence", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_precedence(IntValue value) { sdaiPutAttrBN(m_instance, "precedence", sdaiINTEGER, &value); }

        datum get_referenced_datum();
        void put_referenced_datum(datum inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_target
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_target : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_target(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_target")
        {}

                /// <summary>
                /// Create new instace of datum_target and returns object of this C++ class to interact with
                /// </summary>
        static datum_target Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_target"); assert(inst); return inst; }

        identifier get_target_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "target_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_target_id(identifier value) { sdaiPutAttrBN(m_instance, "target_id", sdaiSTRING, value); }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_target_basis_relationship(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "target_basis_relationship"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of datum_target_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class datum_target_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of datum_target_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        datum_target_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "datum_target_callout")
        {}

                /// <summary>
                /// Create new instace of datum_target_callout and returns object of this C++ class to interact with
                /// </summary>
        static datum_target_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "datum_target_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of default_tolerance_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class default_tolerance_table : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of default_tolerance_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        default_tolerance_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "default_tolerance_table")
        {}

                /// <summary>
                /// Create new instace of default_tolerance_table and returns object of this C++ class to interact with
                /// </summary>
        static default_tolerance_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "default_tolerance_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of default_tolerance_table_cell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class default_tolerance_table_cell : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of default_tolerance_table_cell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        default_tolerance_table_cell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "default_tolerance_table_cell")
        {}

                /// <summary>
                /// Create new instace of default_tolerance_table_cell and returns object of this C++ class to interact with
                /// </summary>
        static default_tolerance_table_cell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "default_tolerance_table_cell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class defined_symbol : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "defined_symbol")
        {}

                /// <summary>
                /// Create new instace of defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "defined_symbol"); assert(inst); return inst; }

        defined_symbol_select_get get_definition() { return defined_symbol_select_get(m_instance, "definition", NULL); }
        defined_symbol_select_put put_definition() { return defined_symbol_select_put(m_instance, "definition", NULL); }

        symbol_target get_target();
        void put_target(symbol_target inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of definitional_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class definitional_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of definitional_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        definitional_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "definitional_representation")
        {}

                /// <summary>
                /// Create new instace of definitional_representation and returns object of this C++ class to interact with
                /// </summary>
        static definitional_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "definitional_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of definitional_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class definitional_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of definitional_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        definitional_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "definitional_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of definitional_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static definitional_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "definitional_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of definitional_representation_relationship_with_same_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class definitional_representation_relationship_with_same_context : public virtual definitional_representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of definitional_representation_relationship_with_same_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        definitional_representation_relationship_with_same_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "definitional_representation_relationship_with_same_context")
        {}

                /// <summary>
                /// Create new instace of definitional_representation_relationship_with_same_context and returns object of this C++ class to interact with
                /// </summary>
        static definitional_representation_relationship_with_same_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "definitional_representation_relationship_with_same_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of degenerate_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class degenerate_pcurve : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        degenerate_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "degenerate_pcurve")
        {}

                /// <summary>
                /// Create new instace of degenerate_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "degenerate_pcurve"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        definitional_representation get_reference_to_curve();
        void put_reference_to_curve(definitional_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of toroidal_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class toroidal_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        toroidal_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "toroidal_surface")
        {}

                /// <summary>
                /// Create new instace of toroidal_surface and returns object of this C++ class to interact with
                /// </summary>
        static toroidal_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "toroidal_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_major_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "major_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_major_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "major_radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_minor_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "minor_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_minor_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "minor_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of degenerate_toroidal_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class degenerate_toroidal_surface : public virtual toroidal_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of degenerate_toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        degenerate_toroidal_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "degenerate_toroidal_surface")
        {}

                /// <summary>
                /// Create new instace of degenerate_toroidal_surface and returns object of this C++ class to interact with
                /// </summary>
        static degenerate_toroidal_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "degenerate_toroidal_surface"); assert(inst); return inst; }

        Nullable<bool> get_select_outer() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "select_outer", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_select_outer(bool value) { sdaiPutAttrBN(m_instance, "select_outer", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of derived_unit_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class derived_unit_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of derived_unit_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        derived_unit_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "derived_unit_element")
        {}

                /// <summary>
                /// Create new instace of derived_unit_element and returns object of this C++ class to interact with
                /// </summary>
        static derived_unit_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "derived_unit_element"); assert(inst); return inst; }

        named_unit get_unit();
        void put_unit(named_unit inst);

        Nullable<double> get_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_exponent(double value) { sdaiPutAttrBN(m_instance, "exponent", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of description_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class description_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of description_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        description_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "description_attribute")
        {}

                /// <summary>
                /// Create new instace of description_attribute and returns object of this C++ class to interact with
                /// </summary>
        static description_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "description_attribute"); assert(inst); return inst; }

        text get_attribute_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(text value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        description_attribute_select_get get_described_item() { return description_attribute_select_get(m_instance, "described_item", NULL); }
        description_attribute_select_put put_described_item() { return description_attribute_select_put(m_instance, "described_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of descriptive_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class descriptive_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of descriptive_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        descriptive_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "descriptive_representation_item")
        {}

                /// <summary>
                /// Create new instace of descriptive_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static descriptive_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "descriptive_representation_item"); assert(inst); return inst; }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context")
        {}

                /// <summary>
                /// Create new instace of product_definition_context and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context"); assert(inst); return inst; }

        label get_life_cycle_stage() { label val = NULL; if (sdaiGetAttrBN(m_instance, "life_cycle_stage", sdaiSTRING, &val)) return val; else return NULL; }
        void put_life_cycle_stage(label value) { sdaiPutAttrBN(m_instance, "life_cycle_stage", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of design_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class design_context : public virtual product_definition_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of design_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        design_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "design_context")
        {}

                /// <summary>
                /// Create new instace of design_context and returns object of this C++ class to interact with
                /// </summary>
        static design_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "design_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of design_make_from_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class design_make_from_relationship : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of design_make_from_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        design_make_from_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "design_make_from_relationship")
        {}

                /// <summary>
                /// Create new instace of design_make_from_relationship and returns object of this C++ class to interact with
                /// </summary>
        static design_make_from_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "design_make_from_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of diameter_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class diameter_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of diameter_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        diameter_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "diameter_dimension")
        {}

                /// <summary>
                /// Create new instace of diameter_dimension and returns object of this C++ class to interact with
                /// </summary>
        static diameter_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "diameter_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ratio_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ratio_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ratio_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ratio_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ratio_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of ratio_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static ratio_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ratio_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dielectric_constant_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dielectric_constant_measure_with_unit : public virtual ratio_measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dielectric_constant_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dielectric_constant_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dielectric_constant_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of dielectric_constant_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static dielectric_constant_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dielectric_constant_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout")
        {}

                /// <summary>
                /// Create new instace of dimension_callout and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_callout_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_callout_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_callout_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_callout_relationship")
        {}

                /// <summary>
                /// Create new instace of draughting_callout_relationship and returns object of this C++ class to interact with
                /// </summary>
        static draughting_callout_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_callout_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        draughting_callout get_relating_draughting_callout();
        void put_relating_draughting_callout(draughting_callout inst);

        draughting_callout get_related_draughting_callout();
        void put_related_draughting_callout(draughting_callout inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout_component_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout_component_relationship : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout_component_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout_component_relationship")
        {}

                /// <summary>
                /// Create new instace of dimension_callout_component_relationship and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout_component_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout_component_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_callout_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_callout_relationship : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_callout_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_callout_relationship")
        {}

                /// <summary>
                /// Create new instace of dimension_callout_relationship and returns object of this C++ class to interact with
                /// </summary>
        static dimension_callout_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_callout_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve")
        {}

                /// <summary>
                /// Create new instace of dimension_curve and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class terminator_symbol : public virtual annotation_symbol_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "terminator_symbol"); assert(inst); return inst; }

        annotation_curve_occurrence get_annotated_curve();
        void put_annotated_curve(annotation_curve_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve_terminator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve_terminator : public virtual terminator_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve_terminator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve_terminator")
        {}

                /// <summary>
                /// Create new instace of dimension_curve_terminator and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve_terminator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve_terminator"); assert(inst); return inst; }

        Nullable<dimension_extent_usage> get_role() { int v = getENUM("role", dimension_extent_usage_); if (v >= 0) return (dimension_extent_usage) v; else return Nullable<dimension_extent_usage>(); }
        void put_role(dimension_extent_usage value) { TextValue val = dimension_extent_usage_[(int) value]; sdaiPutAttrBN(m_instance, "role", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_curve_terminator_to_projection_curve_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_curve_terminator_to_projection_curve_associativity : public virtual annotation_occurrence_associativity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_curve_terminator_to_projection_curve_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_curve_terminator_to_projection_curve_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_curve_terminator_to_projection_curve_associativity")
        {}

                /// <summary>
                /// Create new instace of dimension_curve_terminator_to_projection_curve_associativity and returns object of this C++ class to interact with
                /// </summary>
        static dimension_curve_terminator_to_projection_curve_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_curve_terminator_to_projection_curve_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_pair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_pair : public virtual draughting_callout_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_pair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_pair")
        {}

                /// <summary>
                /// Create new instace of dimension_pair and returns object of this C++ class to interact with
                /// </summary>
        static dimension_pair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_pair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_related_tolerance_zone_element
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_related_tolerance_zone_element : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_related_tolerance_zone_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_related_tolerance_zone_element(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_related_tolerance_zone_element")
        {}

                /// <summary>
                /// Create new instace of dimension_related_tolerance_zone_element and returns object of this C++ class to interact with
                /// </summary>
        static dimension_related_tolerance_zone_element Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_related_tolerance_zone_element"); assert(inst); return inst; }

        dimensional_location get_related_dimension();
        void put_related_dimension(dimensional_location inst);

        tolerance_zone_definition get_related_element();
        void put_related_element(tolerance_zone_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal")
        {}

                /// <summary>
                /// Create new instace of text_literal and returns object of this C++ class to interact with
                /// </summary>
        static text_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal"); assert(inst); return inst; }

        presentable_text get_literal() { presentable_text val = NULL; if (sdaiGetAttrBN(m_instance, "literal", sdaiSTRING, &val)) return val; else return NULL; }
        void put_literal(presentable_text value) { sdaiPutAttrBN(m_instance, "literal", sdaiSTRING, value); }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }

        text_alignment get_alignment() { text_alignment val = NULL; if (sdaiGetAttrBN(m_instance, "alignment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_alignment(text_alignment value) { sdaiPutAttrBN(m_instance, "alignment", sdaiSTRING, value); }

        Nullable<text_path> get_path() { int v = getENUM("path", text_path_); if (v >= 0) return (text_path) v; else return Nullable<text_path>(); }
        void put_path(text_path value) { TextValue val = text_path_[(int) value]; sdaiPutAttrBN(m_instance, "path", sdaiENUM, val); }

        font_select_get get_font() { return font_select_get(m_instance, "font", NULL); }
        font_select_put put_font() { return font_select_put(m_instance, "font", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimension_text_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimension_text_associativity : public virtual text_literal, public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimension_text_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimension_text_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimension_text_associativity")
        {}

                /// <summary>
                /// Create new instace of dimension_text_associativity and returns object of this C++ class to interact with
                /// </summary>
        static dimension_text_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimension_text_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_characteristic_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_characteristic_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_characteristic_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_characteristic_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_characteristic_representation")
        {}

                /// <summary>
                /// Create new instace of dimensional_characteristic_representation and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_characteristic_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_characteristic_representation"); assert(inst); return inst; }

        dimensional_characteristic_get get_dimension() { return dimensional_characteristic_get(m_instance, "dimension", NULL); }
        dimensional_characteristic_put put_dimension() { return dimensional_characteristic_put(m_instance, "dimension", NULL); }

        shape_dimension_representation get_representation();
        void put_representation(shape_dimension_representation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_exponents
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_exponents : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_exponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_exponents(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_exponents")
        {}

                /// <summary>
                /// Create new instace of dimensional_exponents and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_exponents Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_exponents"); assert(inst); return inst; }

        Nullable<double> get_length_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "length_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_length_exponent(double value) { sdaiPutAttrBN(m_instance, "length_exponent", sdaiREAL, &value); }

        Nullable<double> get_mass_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "mass_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_mass_exponent(double value) { sdaiPutAttrBN(m_instance, "mass_exponent", sdaiREAL, &value); }

        Nullable<double> get_time_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "time_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_time_exponent(double value) { sdaiPutAttrBN(m_instance, "time_exponent", sdaiREAL, &value); }

        Nullable<double> get_electric_current_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "electric_current_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_electric_current_exponent(double value) { sdaiPutAttrBN(m_instance, "electric_current_exponent", sdaiREAL, &value); }

        Nullable<double> get_thermodynamic_temperature_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "thermodynamic_temperature_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_thermodynamic_temperature_exponent(double value) { sdaiPutAttrBN(m_instance, "thermodynamic_temperature_exponent", sdaiREAL, &value); }

        Nullable<double> get_amount_of_substance_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "amount_of_substance_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_amount_of_substance_exponent(double value) { sdaiPutAttrBN(m_instance, "amount_of_substance_exponent", sdaiREAL, &value); }

        Nullable<double> get_luminous_intensity_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "luminous_intensity_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_luminous_intensity_exponent(double value) { sdaiPutAttrBN(m_instance, "luminous_intensity_exponent", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_location_with_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_location_with_path : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_location_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_location_with_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_location_with_path")
        {}

                /// <summary>
                /// Create new instace of dimensional_location_with_path and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_location_with_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_location_with_path"); assert(inst); return inst; }

        shape_aspect get_path();
        void put_path(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dimensional_size_with_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dimensional_size_with_path : public virtual dimensional_size
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dimensional_size_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dimensional_size_with_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dimensional_size_with_path")
        {}

                /// <summary>
                /// Create new instace of dimensional_size_with_path and returns object of this C++ class to interact with
                /// </summary>
        static dimensional_size_with_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dimensional_size_with_path"); assert(inst); return inst; }

        shape_aspect get_path();
        void put_path(shape_aspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of executed_action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class executed_action : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of executed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        executed_action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "executed_action")
        {}

                /// <summary>
                /// Create new instace of executed_action and returns object of this C++ class to interact with
                /// </summary>
        static executed_action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "executed_action"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of directed_action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class directed_action : public virtual executed_action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of directed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        directed_action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "directed_action")
        {}

                /// <summary>
                /// Create new instace of directed_action and returns object of this C++ class to interact with
                /// </summary>
        static directed_action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "directed_action"); assert(inst); return inst; }

        action_directive get_directive();
        void put_directive(action_directive inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of directed_dimensional_location
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class directed_dimensional_location : public virtual dimensional_location
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of directed_dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        directed_dimensional_location(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "directed_dimensional_location")
        {}

                /// <summary>
                /// Create new instace of directed_dimensional_location and returns object of this C++ class to interact with
                /// </summary>
        static directed_dimensional_location Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "directed_dimensional_location"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of direction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class direction : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        direction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "direction")
        {}

                /// <summary>
                /// Create new instace of direction and returns object of this C++ class to interact with
                /// </summary>
        static direction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "direction"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_direction_ratios(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "direction_ratios"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_direction_ratios(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "direction_ratios"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_direction_ratios(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_direction_ratios(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document")
        {}

                /// <summary>
                /// Create new instace of document and returns object of this C++ class to interact with
                /// </summary>
        static document Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document_type get_kind();
        void put_kind(document_type inst);

        //TList may be set_of_document_representation_type or list of converible elements
        template <typename TList> void get_representation_types(TList& lst) { set_of_document_representation_typeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "representation_types"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_file
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_file : public virtual document, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_file(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_file")
        {}

                /// <summary>
                /// Create new instace of document_file and returns object of this C++ class to interact with
                /// </summary>
        static document_file Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_file"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_identifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_identifier : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_identifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_identifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_identifier")
        {}

                /// <summary>
                /// Create new instace of document_identifier and returns object of this C++ class to interact with
                /// </summary>
        static document_identifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_identifier"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_identifier_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_identifier_assignment : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_identifier_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_identifier_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_identifier_assignment")
        {}

                /// <summary>
                /// Create new instace of document_identifier_assignment and returns object of this C++ class to interact with
                /// </summary>
        static document_identifier_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_identifier_assignment"); assert(inst); return inst; }

        //TList may be set_of_document_identifier_assigned_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_document_identifier_assigned_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_document_identifier_assigned_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_document_identifier_assigned_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_product_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_product_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_product_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_product_association")
        {}

                /// <summary>
                /// Create new instace of document_product_association and returns object of this C++ class to interact with
                /// </summary>
        static document_product_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_product_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document get_relating_document();
        void put_relating_document(document inst);

        product_or_formation_or_definition_get get_related_product() { return product_or_formation_or_definition_get(m_instance, "related_product", NULL); }
        product_or_formation_or_definition_put put_related_product() { return product_or_formation_or_definition_put(m_instance, "related_product", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_product_equivalence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_product_equivalence : public virtual document_product_association
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_product_equivalence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_product_equivalence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_product_equivalence")
        {}

                /// <summary>
                /// Create new instace of document_product_equivalence and returns object of this C++ class to interact with
                /// </summary>
        static document_product_equivalence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_product_equivalence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_relationship")
        {}

                /// <summary>
                /// Create new instace of document_relationship and returns object of this C++ class to interact with
                /// </summary>
        static document_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        document get_relating_document();
        void put_relating_document(document inst);

        document get_related_document();
        void put_related_document(document inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_representation_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_representation_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_representation_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_representation_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_representation_type")
        {}

                /// <summary>
                /// Create new instace of document_representation_type and returns object of this C++ class to interact with
                /// </summary>
        static document_representation_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_representation_type"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        document get_represented_document();
        void put_represented_document(document inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_type
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_type : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_type(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_type")
        {}

                /// <summary>
                /// Create new instace of document_type and returns object of this C++ class to interact with
                /// </summary>
        static document_type Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_type"); assert(inst); return inst; }

        label get_product_data_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "product_data_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_product_data_type(label value) { sdaiPutAttrBN(m_instance, "product_data_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_constraint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_constraint : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_constraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_constraint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_constraint")
        {}

                /// <summary>
                /// Create new instace of document_usage_constraint and returns object of this C++ class to interact with
                /// </summary>
        static document_usage_constraint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_usage_constraint"); assert(inst); return inst; }

        document get_source();
        void put_source(document inst);

        label get_subject_element() { label val = NULL; if (sdaiGetAttrBN(m_instance, "subject_element", sdaiSTRING, &val)) return val; else return NULL; }
        void put_subject_element(label value) { sdaiPutAttrBN(m_instance, "subject_element", sdaiSTRING, value); }

        text get_subject_element_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "subject_element_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_subject_element_value(text value) { sdaiPutAttrBN(m_instance, "subject_element_value", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of document_usage_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class document_usage_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of document_usage_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        document_usage_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "document_usage_role")
        {}

                /// <summary>
                /// Create new instace of document_usage_role and returns object of this C++ class to interact with
                /// </summary>
        static document_usage_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "document_usage_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dose_equivalent_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dose_equivalent_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dose_equivalent_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dose_equivalent_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dose_equivalent_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of dose_equivalent_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static dose_equivalent_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dose_equivalent_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of dose_equivalent_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class dose_equivalent_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of dose_equivalent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        dose_equivalent_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "dose_equivalent_unit")
        {}

                /// <summary>
                /// Create new instace of dose_equivalent_unit and returns object of this C++ class to interact with
                /// </summary>
        static dose_equivalent_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "dose_equivalent_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of double_offset_shelled_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class double_offset_shelled_solid : public virtual shelled_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of double_offset_shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        double_offset_shelled_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "double_offset_shelled_solid")
        {}

                /// <summary>
                /// Create new instace of double_offset_shelled_solid and returns object of this C++ class to interact with
                /// </summary>
        static double_offset_shelled_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "double_offset_shelled_solid"); assert(inst); return inst; }

        Nullable<length_measure> get_thickness2() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "thickness2", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_thickness2(length_measure value) { sdaiPutAttrBN(m_instance, "thickness2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of item_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class item_defined_transformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of item_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        item_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "item_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of item_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static item_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "item_defined_transformation"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        representation_item get_transform_item_1();
        void put_transform_item_1(representation_item inst);

        representation_item get_transform_item_2();
        void put_transform_item_2(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of transformation_with_derived_angle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class transformation_with_derived_angle : public virtual item_defined_transformation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of transformation_with_derived_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        transformation_with_derived_angle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "transformation_with_derived_angle")
        {}

                /// <summary>
                /// Create new instace of transformation_with_derived_angle and returns object of this C++ class to interact with
                /// </summary>
        static transformation_with_derived_angle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "transformation_with_derived_angle"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draped_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draped_defined_transformation : public virtual transformation_with_derived_angle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draped_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draped_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draped_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of draped_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static draped_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draped_defined_transformation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_annotation_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_annotation_occurrence : public virtual annotation_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_annotation_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_annotation_occurrence")
        {}

                /// <summary>
                /// Create new instace of draughting_annotation_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static draughting_annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_annotation_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_elements : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_elements")
        {}

                /// <summary>
                /// Create new instace of draughting_elements and returns object of this C++ class to interact with
                /// </summary>
        static draughting_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_elements"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_model : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_model")
        {}

                /// <summary>
                /// Create new instace of draughting_model and returns object of this C++ class to interact with
                /// </summary>
        static draughting_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_model"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of item_identified_representation_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class item_identified_representation_usage : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of item_identified_representation_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        item_identified_representation_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "item_identified_representation_usage")
        {}

                /// <summary>
                /// Create new instace of item_identified_representation_usage and returns object of this C++ class to interact with
                /// </summary>
        static item_identified_representation_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "item_identified_representation_usage"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        represented_definition_get get_definition() { return represented_definition_get(m_instance, "definition", NULL); }
        represented_definition_put put_definition() { return represented_definition_put(m_instance, "definition", NULL); }

        representation get_used_representation();
        void put_used_representation(representation inst);

        representation_item get_identified_item();
        void put_identified_item(representation_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_model_item_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_model_item_association : public virtual item_identified_representation_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_model_item_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_model_item_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_model_item_association")
        {}

                /// <summary>
                /// Create new instace of draughting_model_item_association and returns object of this C++ class to interact with
                /// </summary>
        static draughting_model_item_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_model_item_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_item")
        {}

                /// <summary>
                /// Create new instace of pre_defined_item and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_item"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_colour : public virtual pre_defined_item, public virtual colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_colour")
        {}

                /// <summary>
                /// Create new instace of pre_defined_colour and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_colour : public virtual pre_defined_colour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_colour")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_colour and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_curve_font : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of pre_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_curve_font : public virtual pre_defined_curve_font
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_text_font : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of pre_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_pre_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_pre_defined_text_font : public virtual pre_defined_text_font
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_pre_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_pre_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of draughting_pre_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static draughting_pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_pre_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_subfigure_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_subfigure_representation : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_subfigure_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_subfigure_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_subfigure_representation")
        {}

                /// <summary>
                /// Create new instace of draughting_subfigure_representation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_subfigure_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_subfigure_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_symbol_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_symbol_representation : public virtual symbol_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_symbol_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_symbol_representation")
        {}

                /// <summary>
                /// Create new instace of draughting_symbol_representation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_symbol_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_symbol_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_delineation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_delineation : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_delineation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_delineation")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_delineation and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_delineation"); assert(inst); return inst; }

        text_delineation get_delineation() { text_delineation val = NULL; if (sdaiGetAttrBN(m_instance, "delineation", sdaiSTRING, &val)) return val; else return NULL; }
        void put_delineation(text_delineation value) { sdaiPutAttrBN(m_instance, "delineation", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_text_literal_with_delineation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_text_literal_with_delineation : public virtual text_literal_with_delineation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_text_literal_with_delineation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_text_literal_with_delineation")
        {}

                /// <summary>
                /// Create new instace of draughting_text_literal_with_delineation and returns object of this C++ class to interact with
                /// </summary>
        static draughting_text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_text_literal_with_delineation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of draughting_title
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class draughting_title : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of draughting_title
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        draughting_title(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "draughting_title")
        {}

                /// <summary>
                /// Create new instace of draughting_title and returns object of this C++ class to interact with
                /// </summary>
        static draughting_title Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "draughting_title"); assert(inst); return inst; }

        //TList may be set_of_draughting_titled_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_draughting_titled_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_draughting_titled_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_draughting_titled_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        label get_language() { label val = NULL; if (sdaiGetAttrBN(m_instance, "language", sdaiSTRING, &val)) return val; else return NULL; }
        void put_language(label value) { sdaiPutAttrBN(m_instance, "language", sdaiSTRING, value); }

        text get_contents() { text val = NULL; if (sdaiGetAttrBN(m_instance, "contents", sdaiSTRING, &val)) return val; else return NULL; }
        void put_contents(text value) { sdaiPutAttrBN(m_instance, "contents", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_definition")
        {}

                /// <summary>
                /// Create new instace of drawing_definition and returns object of this C++ class to interact with
                /// </summary>
        static drawing_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_definition"); assert(inst); return inst; }

        identifier get_drawing_number() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "drawing_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_drawing_number(identifier value) { sdaiPutAttrBN(m_instance, "drawing_number", sdaiSTRING, value); }

        label get_drawing_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "drawing_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_drawing_type(label value) { sdaiPutAttrBN(m_instance, "drawing_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_set : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_set")
        {}

                /// <summary>
                /// Create new instace of presentation_set and returns object of this C++ class to interact with
                /// </summary>
        static presentation_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_set"); assert(inst); return inst; }

        //TList may be set_of_area_in_set or list of converible elements
        template <typename TList> void get_areas(TList& lst) { set_of_area_in_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "areas"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_revision
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_revision : public virtual presentation_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_revision(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_revision")
        {}

                /// <summary>
                /// Create new instace of drawing_revision and returns object of this C++ class to interact with
                /// </summary>
        static drawing_revision Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_revision"); assert(inst); return inst; }

        identifier get_revision_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "revision_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_revision_identifier(identifier value) { sdaiPutAttrBN(m_instance, "revision_identifier", sdaiSTRING, value); }

        drawing_definition get_drawing_identifier();
        void put_drawing_identifier(drawing_definition inst);

        text get_intended_scale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "intended_scale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_intended_scale(text value) { sdaiPutAttrBN(m_instance, "intended_scale", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_revision_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_revision_sequence : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_revision_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_revision_sequence")
        {}

                /// <summary>
                /// Create new instace of drawing_revision_sequence and returns object of this C++ class to interact with
                /// </summary>
        static drawing_revision_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_revision_sequence"); assert(inst); return inst; }

        drawing_revision get_predecessor();
        void put_predecessor(drawing_revision inst);

        drawing_revision get_successor();
        void put_successor(drawing_revision inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_representation")
        {}

                /// <summary>
                /// Create new instace of presentation_representation and returns object of this C++ class to interact with
                /// </summary>
        static presentation_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_area : public virtual presentation_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_area")
        {}

                /// <summary>
                /// Create new instace of presentation_area and returns object of this C++ class to interact with
                /// </summary>
        static presentation_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_revision
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_revision : public virtual presentation_area
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_revision(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_revision")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_revision and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_revision Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_revision"); assert(inst); return inst; }

        identifier get_revision_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "revision_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_revision_identifier(identifier value) { sdaiPutAttrBN(m_instance, "revision_identifier", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_revision_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_revision_sequence : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_revision_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_revision_sequence")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_revision_sequence and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_revision_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_revision_sequence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of drawing_sheet_revision_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class drawing_sheet_revision_usage : public virtual area_in_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of drawing_sheet_revision_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        drawing_sheet_revision_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "drawing_sheet_revision_usage")
        {}

                /// <summary>
                /// Create new instace of drawing_sheet_revision_usage and returns object of this C++ class to interact with
                /// </summary>
        static drawing_sheet_revision_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "drawing_sheet_revision_usage"); assert(inst); return inst; }

        identifier get_sheet_number() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "sheet_number", sdaiSTRING, &val)) return val; else return NULL; }
        void put_sheet_number(identifier value) { sdaiPutAttrBN(m_instance, "sheet_number", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge")
        {}

                /// <summary>
                /// Create new instace of edge and returns object of this C++ class to interact with
                /// </summary>
        static edge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge"); assert(inst); return inst; }

        vertex get_edge_start();
        void put_edge_start(vertex inst);

        vertex get_edge_end();
        void put_edge_end(vertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_based_wireframe_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_based_wireframe_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_based_wireframe_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_based_wireframe_model")
        {}

                /// <summary>
                /// Create new instace of edge_based_wireframe_model and returns object of this C++ class to interact with
                /// </summary>
        static edge_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_based_wireframe_model"); assert(inst); return inst; }

        //TList may be set_of_connected_edge_set or list of converible elements
        template <typename TList> void get_ebwm_boundary(TList& lst) { set_of_connected_edge_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ebwm_boundary"); }

        //TList may be set_of_connected_edge_set or list of converible elements
        template <typename TList> void put_ebwm_boundary(TList& lst) { set_of_connected_edge_setSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }

        //TArrayElem[] may be connected_edge_set[] or array of convertible elements
        template <typename TArrayElem> void put_ebwm_boundary(TArrayElem arr[], size_t n) { set_of_connected_edge_set lst; ArrayToList(arr, n, lst); put_ebwm_boundary(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_based_wireframe_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_based_wireframe_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_based_wireframe_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_based_wireframe_shape_representation")
        {}

                /// <summary>
                /// Create new instace of edge_based_wireframe_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static edge_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_based_wireframe_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_blended_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_blended_solid : public virtual modified_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_blended_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_blended_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_blended_solid")
        {}


        //TList may be list_of_edge_curve or list of converible elements
        template <typename TList> void get_blended_edges(TList& lst) { list_of_edge_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "blended_edges"); }

        //TList may be list_of_edge_curve or list of converible elements
        template <typename TList> void put_blended_edges(TList& lst) { list_of_edge_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "blended_edges"); }

        //TArrayElem[] may be edge_curve[] or array of convertible elements
        template <typename TArrayElem> void put_blended_edges(TArrayElem arr[], size_t n) { list_of_edge_curve lst; ArrayToList(arr, n, lst); put_blended_edges(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_curve : public virtual edge, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_curve")
        {}

                /// <summary>
                /// Create new instace of edge_curve and returns object of this C++ class to interact with
                /// </summary>
        static edge_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_curve"); assert(inst); return inst; }

        curve get_edge_geometry();
        void put_edge_geometry(curve inst);

        Nullable<bool> get_same_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_same_sense(bool value) { sdaiPutAttrBN(m_instance, "same_sense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class loop : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "loop")
        {}

                /// <summary>
                /// Create new instace of loop and returns object of this C++ class to interact with
                /// </summary>
        static loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "loop"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class path : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "path")
        {}

                /// <summary>
                /// Create new instace of path and returns object of this C++ class to interact with
                /// </summary>
        static path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "path"); assert(inst); return inst; }

        //TList may be list_of_oriented_edge or list of converible elements
        template <typename TList> void get_edge_list(TList& lst) { list_of_oriented_edgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "edge_list"); }

        //TList may be list_of_oriented_edge or list of converible elements
        template <typename TList> void put_edge_list(TList& lst) { list_of_oriented_edgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "edge_list"); }

        //TArrayElem[] may be oriented_edge[] or array of convertible elements
        template <typename TArrayElem> void put_edge_list(TArrayElem arr[], size_t n) { list_of_oriented_edge lst; ArrayToList(arr, n, lst); put_edge_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of edge_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class edge_loop : public virtual loop, public virtual path
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of edge_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        edge_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "edge_loop")
        {}

                /// <summary>
                /// Create new instace of edge_loop and returns object of this C++ class to interact with
                /// </summary>
        static edge_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "edge_loop"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_context_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_context_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_context_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_context_role")
        {}

                /// <summary>
                /// Create new instace of effectivity_context_role and returns object of this C++ class to interact with
                /// </summary>
        static effectivity_context_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity_context_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of effectivity_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class effectivity_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of effectivity_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        effectivity_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "effectivity_relationship")
        {}

                /// <summary>
                /// Create new instace of effectivity_relationship and returns object of this C++ class to interact with
                /// </summary>
        static effectivity_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "effectivity_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        effectivity get_related_effectivity();
        void put_related_effectivity(effectivity inst);

        effectivity get_relating_effectivity();
        void put_relating_effectivity(effectivity inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_charge_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_charge_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_charge_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_charge_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_charge_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of electric_charge_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_charge_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_charge_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_charge_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_charge_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_charge_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_charge_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_charge_unit")
        {}

                /// <summary>
                /// Create new instace of electric_charge_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_charge_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_charge_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_current_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_current_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_current_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_current_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_current_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of electric_current_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_current_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_current_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_current_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_current_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_current_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_current_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_current_unit")
        {}

                /// <summary>
                /// Create new instace of electric_current_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_current_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_current_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_potential_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_potential_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_potential_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_potential_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_potential_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of electric_potential_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_potential_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_potential_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of electric_potential_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class electric_potential_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of electric_potential_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        electric_potential_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "electric_potential_unit")
        {}

                /// <summary>
                /// Create new instace of electric_potential_unit and returns object of this C++ class to interact with
                /// </summary>
        static electric_potential_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "electric_potential_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of elementary_brep_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class elementary_brep_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of elementary_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        elementary_brep_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "elementary_brep_shape_representation")
        {}

                /// <summary>
                /// Create new instace of elementary_brep_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static elementary_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "elementary_brep_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ellipse
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ellipse : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ellipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ellipse(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ellipse")
        {}

                /// <summary>
                /// Create new instace of ellipse and returns object of this C++ class to interact with
                /// </summary>
        static ellipse Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ellipse"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_semi_axis_1() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis_1", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis_1(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis_1", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_semi_axis_2() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis_2", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis_2(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis_2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of energy_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class energy_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of energy_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        energy_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "energy_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of energy_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static energy_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "energy_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of energy_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class energy_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of energy_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        energy_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "energy_unit")
        {}

                /// <summary>
                /// Create new instace of energy_unit and returns object of this C++ class to interact with
                /// </summary>
        static energy_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "energy_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of entity_assertion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class entity_assertion : public virtual fact_type
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of entity_assertion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        entity_assertion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "entity_assertion")
        {}

                /// <summary>
                /// Create new instace of entity_assertion and returns object of this C++ class to interact with
                /// </summary>
        static entity_assertion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "entity_assertion"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of enum_reference_prefix
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class enum_reference_prefix : public virtual descriptive_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of enum_reference_prefix
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        enum_reference_prefix(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "enum_reference_prefix")
        {}

                /// <summary>
                /// Create new instace of enum_reference_prefix and returns object of this C++ class to interact with
                /// </summary>
        static enum_reference_prefix Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "enum_reference_prefix"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of environment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class environment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        environment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "environment")
        {}

                /// <summary>
                /// Create new instace of environment and returns object of this C++ class to interact with
                /// </summary>
        static environment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "environment"); assert(inst); return inst; }

        generic_variable get_syntactic_representation();
        void put_syntactic_representation(generic_variable inst);

        variable_semantics get_semantics();
        void put_semantics(variable_semantics inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of evaluated_characteristic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class evaluated_characteristic : public virtual representation, public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of evaluated_characteristic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        evaluated_characteristic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "evaluated_characteristic")
        {}

                /// <summary>
                /// Create new instace of evaluated_characteristic and returns object of this C++ class to interact with
                /// </summary>
        static evaluated_characteristic Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "evaluated_characteristic"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of evaluated_degenerate_pcurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class evaluated_degenerate_pcurve : public virtual degenerate_pcurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of evaluated_degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        evaluated_degenerate_pcurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "evaluated_degenerate_pcurve")
        {}

                /// <summary>
                /// Create new instace of evaluated_degenerate_pcurve and returns object of this C++ class to interact with
                /// </summary>
        static evaluated_degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "evaluated_degenerate_pcurve"); assert(inst); return inst; }

        cartesian_point get_equivalent_point();
        void put_equivalent_point(cartesian_point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of evaluation_product_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class evaluation_product_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of evaluation_product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        evaluation_product_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "evaluation_product_definition")
        {}

                /// <summary>
                /// Create new instace of evaluation_product_definition and returns object of this C++ class to interact with
                /// </summary>
        static evaluation_product_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "evaluation_product_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence")
        {}

                /// <summary>
                /// Create new instace of event_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_relationship")
        {}

                /// <summary>
                /// Create new instace of event_occurrence_relationship and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        event_occurrence get_relating_event();
        void put_relating_event(event_occurrence inst);

        event_occurrence get_related_event();
        void put_related_event(event_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of event_occurrence_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class event_occurrence_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of event_occurrence_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        event_occurrence_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "event_occurrence_role")
        {}

                /// <summary>
                /// Create new instace of event_occurrence_role and returns object of this C++ class to interact with
                /// </summary>
        static event_occurrence_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "event_occurrence_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_category : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_category")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_category and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_category"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of exclusive_product_concept_feature_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class exclusive_product_concept_feature_category : public virtual product_concept_feature_category
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of exclusive_product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        exclusive_product_concept_feature_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "exclusive_product_concept_feature_category")
        {}

                /// <summary>
                /// Create new instace of exclusive_product_concept_feature_category and returns object of this C++ class to interact with
                /// </summary>
        static exclusive_product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "exclusive_product_concept_feature_category"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_qualifier")
        {}

                /// <summary>
                /// Create new instace of uncertainty_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_qualifier"); assert(inst); return inst; }

        label get_measure_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "measure_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_measure_name(label value) { sdaiPutAttrBN(m_instance, "measure_name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of standard_uncertainty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class standard_uncertainty : public virtual uncertainty_qualifier
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of standard_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        standard_uncertainty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "standard_uncertainty")
        {}

                /// <summary>
                /// Create new instace of standard_uncertainty and returns object of this C++ class to interact with
                /// </summary>
        static standard_uncertainty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "standard_uncertainty"); assert(inst); return inst; }

        Nullable<double> get_uncertainty_value() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "uncertainty_value", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_uncertainty_value(double value) { sdaiPutAttrBN(m_instance, "uncertainty_value", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of expanded_uncertainty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class expanded_uncertainty : public virtual standard_uncertainty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of expanded_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        expanded_uncertainty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "expanded_uncertainty")
        {}

                /// <summary>
                /// Create new instace of expanded_uncertainty and returns object of this C++ class to interact with
                /// </summary>
        static expanded_uncertainty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "expanded_uncertainty"); assert(inst); return inst; }

        Nullable<double> get_coverage_factor() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "coverage_factor", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_coverage_factor(double value) { sdaiPutAttrBN(m_instance, "coverage_factor", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of explicit_procedural_representation_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class explicit_procedural_representation_item_relationship : public virtual representation_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of explicit_procedural_representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        explicit_procedural_representation_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "explicit_procedural_representation_item_relationship")
        {}

                /// <summary>
                /// Create new instace of explicit_procedural_representation_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static explicit_procedural_representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "explicit_procedural_representation_item_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of explicit_procedural_geometric_representation_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class explicit_procedural_geometric_representation_item_relationship : public virtual explicit_procedural_representation_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of explicit_procedural_geometric_representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        explicit_procedural_geometric_representation_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "explicit_procedural_geometric_representation_item_relationship")
        {}

                /// <summary>
                /// Create new instace of explicit_procedural_geometric_representation_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static explicit_procedural_geometric_representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "explicit_procedural_geometric_representation_item_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of explicit_procedural_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class explicit_procedural_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of explicit_procedural_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        explicit_procedural_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "explicit_procedural_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of explicit_procedural_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static explicit_procedural_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "explicit_procedural_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of explicit_procedural_shape_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class explicit_procedural_shape_representation_relationship : public virtual explicit_procedural_representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of explicit_procedural_shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        explicit_procedural_shape_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "explicit_procedural_shape_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of explicit_procedural_shape_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static explicit_procedural_shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "explicit_procedural_shape_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of variable_semantics
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class variable_semantics : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of variable_semantics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        variable_semantics(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "variable_semantics")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of expression_conversion_based_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class expression_conversion_based_unit : public virtual context_dependent_unit, public virtual variable_semantics
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of expression_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        expression_conversion_based_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "expression_conversion_based_unit")
        {}

                /// <summary>
                /// Create new instace of expression_conversion_based_unit and returns object of this C++ class to interact with
                /// </summary>
        static expression_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "expression_conversion_based_unit"); assert(inst); return inst; }

        environment get_associated_variable_environment();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extension : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extension")
        {}

                /// <summary>
                /// Create new instace of extension and returns object of this C++ class to interact with
                /// </summary>
        static extension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extent : public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extent")
        {}

                /// <summary>
                /// Create new instace of extent and returns object of this C++ class to interact with
                /// </summary>
        static extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extent"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_source : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_source")
        {}

                /// <summary>
                /// Create new instace of external_source and returns object of this C++ class to interact with
                /// </summary>
        static external_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "external_source"); assert(inst); return inst; }

        source_item_get get_source_id() { return source_item_get(m_instance, "source_id", NULL); }
        source_item_put put_source_id() { return source_item_put(m_instance, "source_id", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_class_library
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_class_library : public virtual external_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_class_library
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_class_library(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_class_library")
        {}

                /// <summary>
                /// Create new instace of external_class_library and returns object of this C++ class to interact with
                /// </summary>
        static external_class_library Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "external_class_library"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of external_source_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class external_source_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of external_source_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        external_source_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "external_source_relationship")
        {}

                /// <summary>
                /// Create new instace of external_source_relationship and returns object of this C++ class to interact with
                /// </summary>
        static external_source_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "external_source_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        external_source get_relating_source();
        void put_relating_source(external_source inst);

        external_source get_related_source();
        void put_related_source(external_source inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_item : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_item")
        {}

                /// <summary>
                /// Create new instace of externally_defined_item and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_item"); assert(inst); return inst; }

        source_item_get get_item_id() { return source_item_get(m_instance, "item_id", NULL); }
        source_item_put put_item_id() { return source_item_put(m_instance, "item_id", NULL); }

        external_source get_source();
        void put_source(external_source inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_class : public virtual class_, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_class")
        {}

                /// <summary>
                /// Create new instace of externally_defined_class and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_colour : public virtual colour_specification, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_colour")
        {}

                /// <summary>
                /// Create new instace of externally_defined_colour and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_colour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_context_dependent_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_context_dependent_unit : public virtual context_dependent_unit, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_context_dependent_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_context_dependent_unit")
        {}

                /// <summary>
                /// Create new instace of externally_defined_context_dependent_unit and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_context_dependent_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_conversion_based_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_conversion_based_unit : public virtual conversion_based_unit, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_conversion_based_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_conversion_based_unit")
        {}

                /// <summary>
                /// Create new instace of externally_defined_conversion_based_unit and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_conversion_based_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_currency
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_currency : public virtual currency, public virtual externally_defined_context_dependent_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_currency(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_currency")
        {}

                /// <summary>
                /// Create new instace of externally_defined_currency and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_currency Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_currency"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_curve_font : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of externally_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_dimension_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_dimension_definition : public virtual dimensional_size, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_dimension_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_dimension_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_dimension_definition")
        {}

                /// <summary>
                /// Create new instace of externally_defined_dimension_definition and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_dimension_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_dimension_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_general_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_general_property : public virtual general_property, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_general_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_general_property")
        {}

                /// <summary>
                /// Create new instace of externally_defined_general_property and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_general_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_general_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_hatch_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_hatch_style : public virtual externally_defined_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_hatch_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_hatch_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_hatch_style")
        {}

                /// <summary>
                /// Create new instace of externally_defined_hatch_style and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_hatch_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_hatch_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_item_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_item_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_item_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_item_relationship")
        {}

                /// <summary>
                /// Create new instace of externally_defined_item_relationship and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_item_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_item_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        externally_defined_item get_relating_item();
        void put_relating_item(externally_defined_item inst);

        externally_defined_item get_related_item();
        void put_related_item(externally_defined_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_symbol : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_symbol")
        {}

                /// <summary>
                /// Create new instace of externally_defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_marker
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_marker : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_marker(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_marker")
        {}

                /// <summary>
                /// Create new instace of pre_defined_marker and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_marker Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_marker"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_marker
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_marker : public virtual externally_defined_symbol, public virtual pre_defined_marker
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_marker(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_marker")
        {}

                /// <summary>
                /// Create new instace of externally_defined_marker and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_marker Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_marker"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of picture_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class picture_representation_item : public virtual bytes_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        picture_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "picture_representation_item")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_picture_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_picture_representation_item : public virtual picture_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_picture_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_picture_representation_item")
        {}

                /// <summary>
                /// Create new instace of externally_defined_picture_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_picture_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_picture_representation_item"); assert(inst); return inst; }

        applied_external_identification_assignment get_source();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_representation_item : public virtual representation_item, public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_representation_item")
        {}

                /// <summary>
                /// Create new instace of externally_defined_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_string
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_string : public virtual externally_defined_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_string
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_string(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_string")
        {}

                /// <summary>
                /// Create new instace of externally_defined_string and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_string Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_string"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_terminator_symbol : public virtual externally_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of externally_defined_terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_terminator_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_text_font : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_text_font")
        {}

                /// <summary>
                /// Create new instace of externally_defined_text_font and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_text_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_tile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_tile : public virtual externally_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_tile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_tile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_tile")
        {}

                /// <summary>
                /// Create new instace of externally_defined_tile and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_tile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_tile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of externally_defined_tile_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class externally_defined_tile_style : public virtual externally_defined_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of externally_defined_tile_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        externally_defined_tile_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "externally_defined_tile_style")
        {}

                /// <summary>
                /// Create new instace of externally_defined_tile_style and returns object of this C++ class to interact with
                /// </summary>
        static externally_defined_tile_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "externally_defined_tile_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_area_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_area_solid"); assert(inst); return inst; }

        curve_bounded_surface get_swept_area();
        void put_swept_area(curve_bounded_surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_area_solid")
        {}

                /// <summary>
                /// Create new instace of extruded_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static extruded_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_area_solid"); assert(inst); return inst; }

        direction get_extruded_direction();
        void put_extruded_direction(direction inst);

        Nullable<positive_length_measure> get_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_face_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_face_solid")
        {}

                /// <summary>
                /// Create new instace of swept_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_face_solid"); assert(inst); return inst; }

        face_surface get_swept_face();
        void put_swept_face(face_surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_face_solid : public virtual swept_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_face_solid")
        {}

                /// <summary>
                /// Create new instace of extruded_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static extruded_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_face_solid"); assert(inst); return inst; }

        direction get_extruded_direction();
        void put_extruded_direction(direction inst);

        Nullable<positive_length_measure> get_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_face_solid_with_trim_conditions
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_face_solid_with_trim_conditions : public virtual extruded_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_face_solid_with_trim_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_face_solid_with_trim_conditions(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_face_solid_with_trim_conditions")
        {}

                /// <summary>
                /// Create new instace of extruded_face_solid_with_trim_conditions and returns object of this C++ class to interact with
                /// </summary>
        static extruded_face_solid_with_trim_conditions Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_face_solid_with_trim_conditions"); assert(inst); return inst; }

        trim_condition_select_get get_first_trim_condition() { return trim_condition_select_get(m_instance, "first_trim_condition", NULL); }
        trim_condition_select_put put_first_trim_condition() { return trim_condition_select_put(m_instance, "first_trim_condition", NULL); }

        trim_condition_select_get get_second_trim_condition() { return trim_condition_select_get(m_instance, "second_trim_condition", NULL); }
        trim_condition_select_put put_second_trim_condition() { return trim_condition_select_put(m_instance, "second_trim_condition", NULL); }

        Nullable<trim_intent> get_first_trim_intent() { int v = getENUM("first_trim_intent", trim_intent_); if (v >= 0) return (trim_intent) v; else return Nullable<trim_intent>(); }
        void put_first_trim_intent(trim_intent value) { TextValue val = trim_intent_[(int) value]; sdaiPutAttrBN(m_instance, "first_trim_intent", sdaiENUM, val); }

        Nullable<trim_intent> get_second_trim_intent() { int v = getENUM("second_trim_intent", trim_intent_); if (v >= 0) return (trim_intent) v; else return Nullable<trim_intent>(); }
        void put_second_trim_intent(trim_intent value) { TextValue val = trim_intent_[(int) value]; sdaiPutAttrBN(m_instance, "second_trim_intent", sdaiENUM, val); }

        Nullable<non_negative_length_measure> get_first_offset() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "first_offset", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_first_offset(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "first_offset", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_second_offset() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "second_offset", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_second_offset(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "second_offset", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_face_solid_with_draft_angle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_face_solid_with_draft_angle : public virtual extruded_face_solid_with_trim_conditions
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_face_solid_with_draft_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_face_solid_with_draft_angle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_face_solid_with_draft_angle")
        {}

                /// <summary>
                /// Create new instace of extruded_face_solid_with_draft_angle and returns object of this C++ class to interact with
                /// </summary>
        static extruded_face_solid_with_draft_angle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_face_solid_with_draft_angle"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_draft_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "draft_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_draft_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "draft_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of extruded_face_solid_with_multiple_draft_angles
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class extruded_face_solid_with_multiple_draft_angles : public virtual extruded_face_solid_with_trim_conditions
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of extruded_face_solid_with_multiple_draft_angles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        extruded_face_solid_with_multiple_draft_angles(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "extruded_face_solid_with_multiple_draft_angles")
        {}

                /// <summary>
                /// Create new instace of extruded_face_solid_with_multiple_draft_angles and returns object of this C++ class to interact with
                /// </summary>
        static extruded_face_solid_with_multiple_draft_angles Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "extruded_face_solid_with_multiple_draft_angles"); assert(inst); return inst; }

        //TList may be set_of_list_of_edge_curve or list of converible elements
        template <typename TList> void get_drafted_edges(TList& lst) { set_of_list_of_edge_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "drafted_edges"); }

        //TList may be set_of_list_of_edge_curve or list of converible elements
        template <typename TList> void put_drafted_edges(TList& lst) { set_of_list_of_edge_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "drafted_edges"); }

        //TList may be list_of_plane_angle_measure or list of converible elements
        template <typename TList> void get_draft_angles(TList& lst) { list_of_plane_angle_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "draft_angles"); }

        //TList may be list_of_plane_angle_measure or list of converible elements
        template <typename TList> void put_draft_angles(TList& lst) { list_of_plane_angle_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "draft_angles"); }

        //TArrayElem[] may be plane_angle_measure[] or array of convertible elements
        template <typename TArrayElem> void put_draft_angles(TArrayElem arr[], size_t n) { list_of_plane_angle_measure lst; ArrayToList(arr, n, lst); put_draft_angles(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_based_surface_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_based_surface_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_based_surface_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_based_surface_model")
        {}

                /// <summary>
                /// Create new instace of face_based_surface_model and returns object of this C++ class to interact with
                /// </summary>
        static face_based_surface_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_based_surface_model"); assert(inst); return inst; }

        //TList may be set_of_connected_face_set or list of converible elements
        template <typename TList> void get_fbsm_faces(TList& lst) { set_of_connected_face_setSerializer<TList> sr; sr.FromAttr(lst, m_instance, "fbsm_faces"); }

        //TList may be set_of_connected_face_set or list of converible elements
        template <typename TList> void put_fbsm_faces(TList& lst) { set_of_connected_face_setSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "fbsm_faces"); }

        //TArrayElem[] may be connected_face_set[] or array of convertible elements
        template <typename TArrayElem> void put_fbsm_faces(TArrayElem arr[], size_t n) { set_of_connected_face_set lst; ArrayToList(arr, n, lst); put_fbsm_faces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_bound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_bound : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_bound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_bound")
        {}

                /// <summary>
                /// Create new instace of face_bound and returns object of this C++ class to interact with
                /// </summary>
        static face_bound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_bound"); assert(inst); return inst; }

        loop get_bound();
        void put_bound(loop inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of face_outer_bound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class face_outer_bound : public virtual face_bound
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of face_outer_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        face_outer_bound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "face_outer_bound")
        {}

                /// <summary>
                /// Create new instace of face_outer_bound and returns object of this C++ class to interact with
                /// </summary>
        static face_outer_bound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "face_outer_bound"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of faceted_brep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class faceted_brep : public virtual manifold_solid_brep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of faceted_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        faceted_brep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "faceted_brep")
        {}

                /// <summary>
                /// Create new instace of faceted_brep and returns object of this C++ class to interact with
                /// </summary>
        static faceted_brep Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "faceted_brep"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of faceted_brep_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class faceted_brep_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of faceted_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        faceted_brep_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "faceted_brep_shape_representation")
        {}

                /// <summary>
                /// Create new instace of faceted_brep_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static faceted_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "faceted_brep_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style")
        {}

                /// <summary>
                /// Create new instace of fill_area_style and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_fill_style_select or list of converible elements
        template <typename TList> void get_fill_styles(TList& lst) { set_of_fill_style_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "fill_styles"); }

        //TList may be set_of_fill_style_select or list of converible elements
        template <typename TList> void put_fill_styles(TList& lst) { set_of_fill_style_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "fill_styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_colour")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_colour and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_colour"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        colour get_fill_colour();
        void put_fill_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_hatching
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_hatching : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_hatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_hatching(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_hatching")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_hatching and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_hatching Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_hatching"); assert(inst); return inst; }

        curve_style get_hatch_line_appearance();
        void put_hatch_line_appearance(curve_style inst);

        one_direction_repeat_factor get_start_of_next_hatch_line();
        void put_start_of_next_hatch_line(one_direction_repeat_factor inst);

        cartesian_point get_point_of_reference_hatch_line();
        void put_point_of_reference_hatch_line(cartesian_point inst);

        cartesian_point get_pattern_start();
        void put_pattern_start(cartesian_point inst);

        Nullable<plane_angle_measure> get_hatch_line_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "hatch_line_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_hatch_line_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "hatch_line_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tile_coloured_region
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tile_coloured_region : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tile_coloured_region
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tile_coloured_region(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tile_coloured_region")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tile_coloured_region and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tile_coloured_region Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tile_coloured_region"); assert(inst); return inst; }

        curve_or_annotation_curve_occurrence_get get_closed_curve() { return curve_or_annotation_curve_occurrence_get(m_instance, "closed_curve", NULL); }
        curve_or_annotation_curve_occurrence_put put_closed_curve() { return curve_or_annotation_curve_occurrence_put(m_instance, "closed_curve", NULL); }

        colour get_region_colour();
        void put_region_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tile_curve_with_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tile_curve_with_style : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tile_curve_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tile_curve_with_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tile_curve_with_style")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tile_curve_with_style and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tile_curve_with_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tile_curve_with_style"); assert(inst); return inst; }

        annotation_curve_occurrence get_styled_curve();
        void put_styled_curve(annotation_curve_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tile_symbol_with_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tile_symbol_with_style : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tile_symbol_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tile_symbol_with_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tile_symbol_with_style")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tile_symbol_with_style and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tile_symbol_with_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tile_symbol_with_style"); assert(inst); return inst; }

        annotation_symbol_occurrence get_symbol();
        void put_symbol(annotation_symbol_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of fill_area_style_tiles
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class fill_area_style_tiles : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of fill_area_style_tiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        fill_area_style_tiles(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "fill_area_style_tiles")
        {}

                /// <summary>
                /// Create new instace of fill_area_style_tiles and returns object of this C++ class to interact with
                /// </summary>
        static fill_area_style_tiles Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "fill_area_style_tiles"); assert(inst); return inst; }

        two_direction_repeat_factor get_tiling_pattern();
        void put_tiling_pattern(two_direction_repeat_factor inst);

        //TList may be set_of_fill_area_style_tile_shape_select or list of converible elements
        template <typename TList> void get_tiles(TList& lst) { set_of_fill_area_style_tile_shape_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "tiles"); }

        //TList may be set_of_fill_area_style_tile_shape_select or list of converible elements
        template <typename TList> void put_tiles(TList& lst) { set_of_fill_area_style_tile_shape_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "tiles"); }

        Nullable<positive_ratio_measure> get_tiling_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "tiling_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_tiling_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "tiling_scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation_relationship : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of flat_pattern_ply_representation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class flat_pattern_ply_representation_relationship : public virtual shape_representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of flat_pattern_ply_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        flat_pattern_ply_representation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "flat_pattern_ply_representation_relationship")
        {}

                /// <summary>
                /// Create new instace of flat_pattern_ply_representation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static flat_pattern_ply_representation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "flat_pattern_ply_representation_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of flatness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class flatness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of flatness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        flatness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "flatness_tolerance")
        {}

                /// <summary>
                /// Create new instace of flatness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static flatness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "flatness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of force_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class force_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of force_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        force_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "force_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of force_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static force_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "force_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of force_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class force_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of force_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        force_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "force_unit")
        {}

                /// <summary>
                /// Create new instace of force_unit and returns object of this C++ class to interact with
                /// </summary>
        static force_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "force_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of forward_chaining_rule
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class forward_chaining_rule : public virtual rule_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of forward_chaining_rule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        forward_chaining_rule(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "forward_chaining_rule")
        {}

                /// <summary>
                /// Create new instace of forward_chaining_rule and returns object of this C++ class to interact with
                /// </summary>
        static forward_chaining_rule Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "forward_chaining_rule"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of forward_chaining_rule_premise
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class forward_chaining_rule_premise : public virtual property_definition, public virtual property_definition_representation, public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of forward_chaining_rule_premise
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        forward_chaining_rule_premise(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "forward_chaining_rule_premise")
        {}

                /// <summary>
                /// Create new instace of forward_chaining_rule_premise and returns object of this C++ class to interact with
                /// </summary>
        static forward_chaining_rule_premise Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "forward_chaining_rule_premise"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of frequency_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class frequency_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of frequency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        frequency_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "frequency_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of frequency_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static frequency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "frequency_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of frequency_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class frequency_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of frequency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        frequency_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "frequency_unit")
        {}

                /// <summary>
                /// Create new instace of frequency_unit and returns object of this C++ class to interact with
                /// </summary>
        static frequency_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "frequency_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of func
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class func : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of func
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        func(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "func")
        {}

                /// <summary>
                /// Create new instace of func and returns object of this C++ class to interact with
                /// </summary>
        static func Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "func"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of functional_breakdown_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class functional_breakdown_context : public virtual breakdown_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of functional_breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        functional_breakdown_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "functional_breakdown_context")
        {}

                /// <summary>
                /// Create new instace of functional_breakdown_context and returns object of this C++ class to interact with
                /// </summary>
        static functional_breakdown_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "functional_breakdown_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of functional_element_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class functional_element_usage : public virtual breakdown_element_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of functional_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        functional_element_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "functional_element_usage")
        {}

                /// <summary>
                /// Create new instace of functional_element_usage and returns object of this C++ class to interact with
                /// </summary>
        static functional_element_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "functional_element_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_material_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_material_property : public virtual general_property
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_material_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_material_property")
        {}

                /// <summary>
                /// Create new instace of general_material_property and returns object of this C++ class to interact with
                /// </summary>
        static general_material_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_material_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of general_property_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class general_property_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of general_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        general_property_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "general_property_association")
        {}

                /// <summary>
                /// Create new instace of general_property_association and returns object of this C++ class to interact with
                /// </summary>
        static general_property_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "general_property_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        general_property get_base_definition();
        void put_base_definition(general_property inst);

        derived_property_select_get get_derived_definition() { return derived_property_select_get(m_instance, "derived_definition", NULL); }
        derived_property_select_put put_derived_definition() { return derived_property_select_put(m_instance, "derived_definition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of generic_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class generic_variable : public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of generic_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        generic_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "generic_variable")
        {}


        environment get_interpretation();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_alignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_alignment : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_alignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_alignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_alignment")
        {}

                /// <summary>
                /// Create new instace of geometric_alignment and returns object of this C++ class to interact with
                /// </summary>
        static geometric_alignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_alignment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_set : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_set")
        {}

                /// <summary>
                /// Create new instace of geometric_set and returns object of this C++ class to interact with
                /// </summary>
        static geometric_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_set"); assert(inst); return inst; }

        //TList may be set_of_geometric_set_select or list of converible elements
        template <typename TList> void get_elements(TList& lst) { set_of_geometric_set_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be set_of_geometric_set_select or list of converible elements
        template <typename TList> void put_elements(TList& lst) { set_of_geometric_set_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_curve_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_curve_set : public virtual geometric_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_curve_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_curve_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_curve_set")
        {}

                /// <summary>
                /// Create new instace of geometric_curve_set and returns object of this C++ class to interact with
                /// </summary>
        static geometric_curve_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_curve_set"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_intersection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_intersection : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_intersection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_intersection")
        {}

                /// <summary>
                /// Create new instace of geometric_intersection and returns object of this C++ class to interact with
                /// </summary>
        static geometric_intersection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_intersection"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_item_specific_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_item_specific_usage : public virtual item_identified_representation_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_item_specific_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_item_specific_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_item_specific_usage")
        {}

                /// <summary>
                /// Create new instace of geometric_item_specific_usage and returns object of this C++ class to interact with
                /// </summary>
        static geometric_item_specific_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_item_specific_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_model_element_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_model_element_relationship : public virtual geometric_representation_item, public virtual representation_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_model_element_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_model_element_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_model_element_relationship")
        {}

                /// <summary>
                /// Create new instace of geometric_model_element_relationship and returns object of this C++ class to interact with
                /// </summary>
        static geometric_model_element_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_model_element_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_context : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_context")
        {}

                /// <summary>
                /// Create new instace of representation_context and returns object of this C++ class to interact with
                /// </summary>
        static representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_context"); assert(inst); return inst; }

        identifier get_context_identifier() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "context_identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_context_identifier(identifier value) { sdaiPutAttrBN(m_instance, "context_identifier", sdaiSTRING, value); }

        text get_context_type() { text val = NULL; if (sdaiGetAttrBN(m_instance, "context_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_context_type(text value) { sdaiPutAttrBN(m_instance, "context_type", sdaiSTRING, value); }

        //TList may be set_of_representation or list of converible elements
        template <typename TList> void get_representations_in_context(TList& lst) { set_of_representationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "representations_in_context"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_representation_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_representation_context")
        {}

                /// <summary>
                /// Create new instace of geometric_representation_context and returns object of this C++ class to interact with
                /// </summary>
        static geometric_representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_representation_context"); assert(inst); return inst; }

        Nullable<dimension_count> get_coordinate_space_dimension() { dimension_count val = (dimension_count) 0; if (sdaiGetAttrBN(m_instance, "coordinate_space_dimension", sdaiINTEGER, &val)) return val; else return Nullable<dimension_count>(); }
        void put_coordinate_space_dimension(dimension_count value) { sdaiPutAttrBN(m_instance, "coordinate_space_dimension", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_relationship")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_relationship and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        geometric_tolerance get_relating_geometric_tolerance();
        void put_relating_geometric_tolerance(geometric_tolerance inst);

        geometric_tolerance get_related_geometric_tolerance();
        void put_related_geometric_tolerance(geometric_tolerance inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometric_tolerance_with_defined_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometric_tolerance_with_defined_unit : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometric_tolerance_with_defined_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometric_tolerance_with_defined_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometric_tolerance_with_defined_unit")
        {}

                /// <summary>
                /// Create new instace of geometric_tolerance_with_defined_unit and returns object of this C++ class to interact with
                /// </summary>
        static geometric_tolerance_with_defined_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometric_tolerance_with_defined_unit"); assert(inst); return inst; }

        measure_with_unit get_unit_size();
        void put_unit_size(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrical_tolerance_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrical_tolerance_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrical_tolerance_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrical_tolerance_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrical_tolerance_callout")
        {}

                /// <summary>
                /// Create new instace of geometrical_tolerance_callout and returns object of this C++ class to interact with
                /// </summary>
        static geometrical_tolerance_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrical_tolerance_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_2d_wireframe_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_2d_wireframe_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_2d_wireframe_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_2d_wireframe_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_2d_wireframe_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_2d_wireframe_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_2d_wireframe_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_2d_wireframe_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of geometrically_bounded_wireframe_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class geometrically_bounded_wireframe_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of geometrically_bounded_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        geometrically_bounded_wireframe_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "geometrically_bounded_wireframe_shape_representation")
        {}

                /// <summary>
                /// Create new instace of geometrically_bounded_wireframe_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static geometrically_bounded_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "geometrically_bounded_wireframe_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of global_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class global_assignment : public virtual representation_item_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of global_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        global_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "global_assignment")
        {}

                /// <summary>
                /// Create new instace of global_assignment and returns object of this C++ class to interact with
                /// </summary>
        static global_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "global_assignment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of global_uncertainty_assigned_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class global_uncertainty_assigned_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of global_uncertainty_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        global_uncertainty_assigned_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "global_uncertainty_assigned_context")
        {}

                /// <summary>
                /// Create new instace of global_uncertainty_assigned_context and returns object of this C++ class to interact with
                /// </summary>
        static global_uncertainty_assigned_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "global_uncertainty_assigned_context"); assert(inst); return inst; }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void get_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "uncertainty"); }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void put_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "uncertainty"); }

        //TArrayElem[] may be uncertainty_measure_with_unit[] or array of convertible elements
        template <typename TArrayElem> void put_uncertainty(TArrayElem arr[], size_t n) { set_of_uncertainty_measure_with_unit lst; ArrayToList(arr, n, lst); put_uncertainty(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of global_unit_assigned_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class global_unit_assigned_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of global_unit_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        global_unit_assigned_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "global_unit_assigned_context")
        {}

                /// <summary>
                /// Create new instace of global_unit_assigned_context and returns object of this C++ class to interact with
                /// </summary>
        static global_unit_assigned_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "global_unit_assigned_context"); assert(inst); return inst; }

        //TList may be set_of_unit or list of converible elements
        template <typename TList> void get_units(TList& lst) { set_of_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "units"); }

        //TList may be set_of_unit or list of converible elements
        template <typename TList> void put_units(TList& lst) { set_of_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "units"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ground_fact
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ground_fact : public virtual atomic_formula
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ground_fact
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ground_fact(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ground_fact")
        {}

                /// <summary>
                /// Create new instace of ground_fact and returns object of this C++ class to interact with
                /// </summary>
        static ground_fact Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ground_fact"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of group_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class group_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of group_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        group_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "group_relationship")
        {}

                /// <summary>
                /// Create new instace of group_relationship and returns object of this C++ class to interact with
                /// </summary>
        static group_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "group_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        group get_relating_group();
        void put_relating_group(group inst);

        group get_related_group();
        void put_related_group(group inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hardness_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hardness_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hardness_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hardness_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hardness_representation")
        {}

                /// <summary>
                /// Create new instace of hardness_representation and returns object of this C++ class to interact with
                /// </summary>
        static hardness_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hardness_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hidden_element_over_riding_styled_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hidden_element_over_riding_styled_item : public virtual context_dependent_over_riding_styled_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hidden_element_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hidden_element_over_riding_styled_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hidden_element_over_riding_styled_item")
        {}

                /// <summary>
                /// Create new instace of hidden_element_over_riding_styled_item and returns object of this C++ class to interact with
                /// </summary>
        static hidden_element_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hidden_element_over_riding_styled_item"); assert(inst); return inst; }

        //TList may be set_of_presentation_view or list of converible elements
        template <typename TList> void get_container(TList& lst) { set_of_presentation_viewSerializer<TList> sr; sr.FromAttr(lst, m_instance, "container"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of hyperbola
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class hyperbola : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of hyperbola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        hyperbola(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "hyperbola")
        {}

                /// <summary>
                /// Create new instace of hyperbola and returns object of this C++ class to interact with
                /// </summary>
        static hyperbola Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "hyperbola"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_semi_axis() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_axis", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_axis(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_axis", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_semi_imag_axis() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_imag_axis", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_semi_imag_axis(positive_length_measure value) { sdaiPutAttrBN(m_instance, "semi_imag_axis", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of id_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class id_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of id_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        id_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "id_attribute")
        {}

                /// <summary>
                /// Create new instace of id_attribute and returns object of this C++ class to interact with
                /// </summary>
        static id_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "id_attribute"); assert(inst); return inst; }

        identifier get_attribute_value() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(identifier value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        id_attribute_select_get get_identified_item() { return id_attribute_select_get(m_instance, "identified_item", NULL); }
        id_attribute_select_put put_identified_item() { return id_attribute_select_put(m_instance, "identified_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of identification_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class identification_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of identification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        identification_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "identification_role")
        {}

                /// <summary>
                /// Create new instace of identification_role and returns object of this C++ class to interact with
                /// </summary>
        static identification_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "identification_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of illuminance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class illuminance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of illuminance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        illuminance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "illuminance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of illuminance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static illuminance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "illuminance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of illuminance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class illuminance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of illuminance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        illuminance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "illuminance_unit")
        {}

                /// <summary>
                /// Create new instace of illuminance_unit and returns object of this C++ class to interact with
                /// </summary>
        static illuminance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "illuminance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of included_text_block
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class included_text_block : public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of included_text_block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        included_text_block(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "included_text_block")
        {}

                /// <summary>
                /// Create new instace of included_text_block and returns object of this C++ class to interact with
                /// </summary>
        static included_text_block Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "included_text_block"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of inclusion_product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class inclusion_product_concept_feature : public virtual conditional_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of inclusion_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        inclusion_product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "inclusion_product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of inclusion_product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static inclusion_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "inclusion_product_concept_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of user_selected_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class user_selected_elements : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of user_selected_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        user_selected_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "user_selected_elements")
        {}

                /// <summary>
                /// Create new instace of user_selected_elements and returns object of this C++ class to interact with
                /// </summary>
        static user_selected_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "user_selected_elements"); assert(inst); return inst; }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void get_picked_items(TList& lst) { set_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "picked_items"); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void put_picked_items(TList& lst) { set_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "picked_items"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_picked_items(TArrayElem arr[], size_t n) { set_of_representation_item lst; ArrayToList(arr, n, lst); put_picked_items(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of indirectly_selected_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class indirectly_selected_elements : public virtual user_selected_elements
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of indirectly_selected_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        indirectly_selected_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "indirectly_selected_elements")
        {}

                /// <summary>
                /// Create new instace of indirectly_selected_elements and returns object of this C++ class to interact with
                /// </summary>
        static indirectly_selected_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "indirectly_selected_elements"); assert(inst); return inst; }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void get_indirectly_picked_items(TList& lst) { set_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "indirectly_picked_items"); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void put_indirectly_picked_items(TList& lst) { set_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "indirectly_picked_items"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_indirectly_picked_items(TArrayElem arr[], size_t n) { set_of_representation_item lst; ArrayToList(arr, n, lst); put_indirectly_picked_items(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of user_selected_shape_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class user_selected_shape_elements : public virtual user_selected_elements
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of user_selected_shape_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        user_selected_shape_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "user_selected_shape_elements")
        {}

                /// <summary>
                /// Create new instace of user_selected_shape_elements and returns object of this C++ class to interact with
                /// </summary>
        static user_selected_shape_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "user_selected_shape_elements"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of indirectly_selected_shape_elements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class indirectly_selected_shape_elements : public virtual indirectly_selected_elements, public virtual user_selected_shape_elements
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of indirectly_selected_shape_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        indirectly_selected_shape_elements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "indirectly_selected_shape_elements")
        {}

                /// <summary>
                /// Create new instace of indirectly_selected_shape_elements and returns object of this C++ class to interact with
                /// </summary>
        static indirectly_selected_shape_elements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "indirectly_selected_shape_elements"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of inductance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class inductance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of inductance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        inductance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "inductance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of inductance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static inductance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "inductance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of inductance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class inductance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of inductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        inductance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "inductance_unit")
        {}

                /// <summary>
                /// Create new instace of inductance_unit and returns object of this C++ class to interact with
                /// </summary>
        static inductance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "inductance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of information_right
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class information_right : public virtual action_method
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of information_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        information_right(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "information_right")
        {}

                /// <summary>
                /// Create new instace of information_right and returns object of this C++ class to interact with
                /// </summary>
        static information_right Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "information_right"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of information_usage_right
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class information_usage_right : public virtual action_method
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of information_usage_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        information_usage_right(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "information_usage_right")
        {}

                /// <summary>
                /// Create new instace of information_usage_right and returns object of this C++ class to interact with
                /// </summary>
        static information_usage_right Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "information_usage_right"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of instance_usage_context_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class instance_usage_context_assignment : public virtual product_definition_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of instance_usage_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        instance_usage_context_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "instance_usage_context_assignment")
        {}

                /// <summary>
                /// Create new instace of instance_usage_context_assignment and returns object of this C++ class to interact with
                /// </summary>
        static instance_usage_context_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "instance_usage_context_assignment"); assert(inst); return inst; }

        //TList may be set_of_instance_usage_context_select or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_instance_usage_context_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_instance_usage_context_select or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_instance_usage_context_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_feature_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_feature_definition : public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_feature_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_feature_definition")
        {}

                /// <summary>
                /// Create new instace of shape_feature_definition and returns object of this C++ class to interact with
                /// </summary>
        static shape_feature_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_feature_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of instanced_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class instanced_feature : public virtual shape_aspect, public virtual shape_feature_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of instanced_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        instanced_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "instanced_feature")
        {}

                /// <summary>
                /// Create new instace of instanced_feature and returns object of this C++ class to interact with
                /// </summary>
        static instanced_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "instanced_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_numeric_expression : public virtual numeric_expression, public virtual simple_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of literal_number
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class literal_number : public virtual simple_numeric_expression, public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of literal_number
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        literal_number(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "literal_number")
        {}


        Nullable<double> get_the_value() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "the_value", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_the_value(double value) { sdaiPutAttrBN(m_instance, "the_value", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of int_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class int_literal : public virtual literal_number
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of int_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        int_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "int_literal")
        {}

                /// <summary>
                /// Create new instace of int_literal and returns object of this C++ class to interact with
                /// </summary>
        static int_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "int_literal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of integer_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class integer_representation_item : public virtual representation_item, public virtual int_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of integer_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        integer_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "integer_representation_item")
        {}

                /// <summary>
                /// Create new instace of integer_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static integer_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "integer_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of intersection_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class intersection_curve : public virtual surface_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of intersection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        intersection_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "intersection_curve")
        {}

                /// <summary>
                /// Create new instace of intersection_curve and returns object of this C++ class to interact with
                /// </summary>
        static intersection_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "intersection_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_generic_expression")
        {}


        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void get_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "operands"); }

        //TList may be list_of_generic_expression or list of converible elements
        template <typename TList> void put_operands(TList& lst) { list_of_generic_expressionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "operands"); }

        //TArrayElem[] may be generic_expression[] or array of convertible elements
        template <typename TArrayElem> void put_operands(TArrayElem arr[], size_t n) { list_of_generic_expression lst; ArrayToList(arr, n, lst); put_operands(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of interval_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class interval_expression : public virtual boolean_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of interval_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        interval_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "interval_expression")
        {}

                /// <summary>
                /// Create new instace of interval_expression and returns object of this C++ class to interact with
                /// </summary>
        static interval_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "interval_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of iso4217_currency
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class iso4217_currency : public virtual currency
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of iso4217_currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        iso4217_currency(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "iso4217_currency")
        {}

                /// <summary>
                /// Create new instace of iso4217_currency and returns object of this C++ class to interact with
                /// </summary>
        static iso4217_currency Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "iso4217_currency"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of known_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class known_source : public virtual external_source, public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of known_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        known_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "known_source")
        {}

                /// <summary>
                /// Create new instace of known_source and returns object of this C++ class to interact with
                /// </summary>
        static known_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "known_source"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of laid_defined_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class laid_defined_transformation : public virtual transformation_with_derived_angle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of laid_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        laid_defined_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "laid_defined_transformation")
        {}

                /// <summary>
                /// Create new instace of laid_defined_transformation and returns object of this C++ class to interact with
                /// </summary>
        static laid_defined_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "laid_defined_transformation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of language
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class language : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of language
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        language(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "language")
        {}

                /// <summary>
                /// Create new instace of language and returns object of this C++ class to interact with
                /// </summary>
        static language Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "language"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_curve")
        {}

                /// <summary>
                /// Create new instace of leader_curve and returns object of this C++ class to interact with
                /// </summary>
        static leader_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_directed_callout")
        {}

                /// <summary>
                /// Create new instace of leader_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static leader_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_directed_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_directed_dimension : public virtual leader_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_directed_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_directed_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_directed_dimension")
        {}

                /// <summary>
                /// Create new instace of leader_directed_dimension and returns object of this C++ class to interact with
                /// </summary>
        static leader_directed_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_directed_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of leader_terminator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class leader_terminator : public virtual terminator_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of leader_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        leader_terminator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "leader_terminator")
        {}

                /// <summary>
                /// Create new instace of leader_terminator and returns object of this C++ class to interact with
                /// </summary>
        static leader_terminator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "leader_terminator"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of length_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class length_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        length_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "length_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of length_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "length_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of length_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class length_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        length_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "length_unit")
        {}

                /// <summary>
                /// Create new instace of length_unit and returns object of this C++ class to interact with
                /// </summary>
        static length_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "length_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source")
        {}

                /// <summary>
                /// Create new instace of light_source and returns object of this C++ class to interact with
                /// </summary>
        static light_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source"); assert(inst); return inst; }

        colour get_light_colour();
        void put_light_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_ambient
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_ambient : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_ambient(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_ambient")
        {}

                /// <summary>
                /// Create new instace of light_source_ambient and returns object of this C++ class to interact with
                /// </summary>
        static light_source_ambient Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_ambient"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_directional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_directional : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_directional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_directional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_directional")
        {}

                /// <summary>
                /// Create new instace of light_source_directional and returns object of this C++ class to interact with
                /// </summary>
        static light_source_directional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_directional"); assert(inst); return inst; }

        direction get_orientation();
        void put_orientation(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_positional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_positional : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_positional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_positional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_positional")
        {}

                /// <summary>
                /// Create new instace of light_source_positional and returns object of this C++ class to interact with
                /// </summary>
        static light_source_positional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_positional"); assert(inst); return inst; }

        cartesian_point get_position();
        void put_position(cartesian_point inst);

        Nullable<double> get_constant_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "constant_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_constant_attenuation(double value) { sdaiPutAttrBN(m_instance, "constant_attenuation", sdaiREAL, &value); }

        Nullable<double> get_distance_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "distance_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_distance_attenuation(double value) { sdaiPutAttrBN(m_instance, "distance_attenuation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of light_source_spot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class light_source_spot : public virtual light_source
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of light_source_spot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        light_source_spot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "light_source_spot")
        {}

                /// <summary>
                /// Create new instace of light_source_spot and returns object of this C++ class to interact with
                /// </summary>
        static light_source_spot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "light_source_spot"); assert(inst); return inst; }

        cartesian_point get_position();
        void put_position(cartesian_point inst);

        direction get_orientation();
        void put_orientation(direction inst);

        Nullable<double> get_concentration_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "concentration_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_concentration_exponent(double value) { sdaiPutAttrBN(m_instance, "concentration_exponent", sdaiREAL, &value); }

        Nullable<double> get_constant_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "constant_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_constant_attenuation(double value) { sdaiPutAttrBN(m_instance, "constant_attenuation", sdaiREAL, &value); }

        Nullable<double> get_distance_attenuation() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "distance_attenuation", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_distance_attenuation(double value) { sdaiPutAttrBN(m_instance, "distance_attenuation", sdaiREAL, &value); }

        Nullable<positive_plane_angle_measure> get_spread_angle() { positive_plane_angle_measure val = (positive_plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "spread_angle", sdaiREAL, &val)) return val; else return Nullable<positive_plane_angle_measure>(); }
        void put_spread_angle(positive_plane_angle_measure value) { sdaiPutAttrBN(m_instance, "spread_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of limits_and_fits
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class limits_and_fits : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of limits_and_fits
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        limits_and_fits(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "limits_and_fits")
        {}

                /// <summary>
                /// Create new instace of limits_and_fits and returns object of this C++ class to interact with
                /// </summary>
        static limits_and_fits Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "limits_and_fits"); assert(inst); return inst; }

        label get_form_variance() { label val = NULL; if (sdaiGetAttrBN(m_instance, "form_variance", sdaiSTRING, &val)) return val; else return NULL; }
        void put_form_variance(label value) { sdaiPutAttrBN(m_instance, "form_variance", sdaiSTRING, value); }

        label get_zone_variance() { label val = NULL; if (sdaiGetAttrBN(m_instance, "zone_variance", sdaiSTRING, &val)) return val; else return NULL; }
        void put_zone_variance(label value) { sdaiPutAttrBN(m_instance, "zone_variance", sdaiSTRING, value); }

        label get_grade() { label val = NULL; if (sdaiGetAttrBN(m_instance, "grade", sdaiSTRING, &val)) return val; else return NULL; }
        void put_grade(label value) { sdaiPutAttrBN(m_instance, "grade", sdaiSTRING, value); }

        text get_source() { text val = NULL; if (sdaiGetAttrBN(m_instance, "source", sdaiSTRING, &val)) return val; else return NULL; }
        void put_source(text value) { sdaiPutAttrBN(m_instance, "source", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of line
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class line : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        line(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "line")
        {}

                /// <summary>
                /// Create new instace of line and returns object of this C++ class to interact with
                /// </summary>
        static line Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "line"); assert(inst); return inst; }

        cartesian_point get_pnt();
        void put_pnt(cartesian_point inst);

        vector get_dir();
        void put_dir(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of line_profile_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class line_profile_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of line_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        line_profile_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "line_profile_tolerance")
        {}

                /// <summary>
                /// Create new instace of line_profile_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static line_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "line_profile_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of linear_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class linear_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of linear_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        linear_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "linear_dimension")
        {}

                /// <summary>
                /// Create new instace of linear_dimension and returns object of this C++ class to interact with
                /// </summary>
        static linear_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "linear_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of simple_clause
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class simple_clause : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of simple_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        simple_clause(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "simple_clause")
        {}

                /// <summary>
                /// Create new instace of simple_clause and returns object of this C++ class to interact with
                /// </summary>
        static simple_clause Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "simple_clause"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of literal_conjunction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class literal_conjunction : public virtual simple_clause
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of literal_conjunction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        literal_conjunction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "literal_conjunction")
        {}

                /// <summary>
                /// Create new instace of literal_conjunction and returns object of this C++ class to interact with
                /// </summary>
        static literal_conjunction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "literal_conjunction"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of literal_disjunction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class literal_disjunction : public virtual simple_clause
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of literal_disjunction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        literal_disjunction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "literal_disjunction")
        {}

                /// <summary>
                /// Create new instace of literal_disjunction and returns object of this C++ class to interact with
                /// </summary>
        static literal_disjunction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "literal_disjunction"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of local_time
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class local_time : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of local_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        local_time(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "local_time")
        {}

                /// <summary>
                /// Create new instace of local_time and returns object of this C++ class to interact with
                /// </summary>
        static local_time Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "local_time"); assert(inst); return inst; }

        Nullable<hour_in_day> get_hour_component() { hour_in_day val = (hour_in_day) 0; if (sdaiGetAttrBN(m_instance, "hour_component", sdaiINTEGER, &val)) return val; else return Nullable<hour_in_day>(); }
        void put_hour_component(hour_in_day value) { sdaiPutAttrBN(m_instance, "hour_component", sdaiINTEGER, &value); }

        Nullable<minute_in_hour> get_minute_component() { minute_in_hour val = (minute_in_hour) 0; if (sdaiGetAttrBN(m_instance, "minute_component", sdaiINTEGER, &val)) return val; else return Nullable<minute_in_hour>(); }
        void put_minute_component(minute_in_hour value) { sdaiPutAttrBN(m_instance, "minute_component", sdaiINTEGER, &value); }

        Nullable<second_in_minute> get_second_component() { second_in_minute val = (second_in_minute) 0; if (sdaiGetAttrBN(m_instance, "second_component", sdaiREAL, &val)) return val; else return Nullable<second_in_minute>(); }
        void put_second_component(second_in_minute value) { sdaiPutAttrBN(m_instance, "second_component", sdaiREAL, &value); }

        coordinated_universal_time_offset get_zone();
        void put_zone(coordinated_universal_time_offset inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of logical_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class logical_literal : public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of logical_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        logical_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "logical_literal")
        {}

                /// <summary>
                /// Create new instace of logical_literal and returns object of this C++ class to interact with
                /// </summary>
        static logical_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "logical_literal"); assert(inst); return inst; }

        Nullable<LOGICAL_VALUE> get_lit_value() { int v = getENUM("lit_value", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_lit_value(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "lit_value", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of logical_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class logical_representation_item : public virtual representation_item, public virtual logical_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of logical_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        logical_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "logical_representation_item")
        {}

                /// <summary>
                /// Create new instace of logical_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static logical_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "logical_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of loss_tangent_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class loss_tangent_measure_with_unit : public virtual ratio_measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of loss_tangent_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        loss_tangent_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "loss_tangent_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of loss_tangent_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static loss_tangent_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "loss_tangent_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of lot_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class lot_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of lot_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        lot_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "lot_effectivity")
        {}

                /// <summary>
                /// Create new instace of lot_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static lot_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "lot_effectivity"); assert(inst); return inst; }

        identifier get_effectivity_lot_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_lot_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_lot_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_lot_id", sdaiSTRING, value); }

        measure_with_unit get_effectivity_lot_size();
        void put_effectivity_lot_size(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_flux_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_flux_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_flux_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_flux_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_flux_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_flux_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_flux_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_flux_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_flux_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_flux_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_flux_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_flux_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_flux_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_flux_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_flux_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_intensity_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_intensity_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_intensity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_intensity_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_intensity_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_intensity_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_intensity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_intensity_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of luminous_intensity_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class luminous_intensity_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of luminous_intensity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        luminous_intensity_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "luminous_intensity_unit")
        {}

                /// <summary>
                /// Create new instace of luminous_intensity_unit and returns object of this C++ class to interact with
                /// </summary>
        static luminous_intensity_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "luminous_intensity_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of magnetic_flux_density_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class magnetic_flux_density_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of magnetic_flux_density_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        magnetic_flux_density_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "magnetic_flux_density_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of magnetic_flux_density_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static magnetic_flux_density_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "magnetic_flux_density_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of magnetic_flux_density_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class magnetic_flux_density_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of magnetic_flux_density_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        magnetic_flux_density_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "magnetic_flux_density_unit")
        {}

                /// <summary>
                /// Create new instace of magnetic_flux_density_unit and returns object of this C++ class to interact with
                /// </summary>
        static magnetic_flux_density_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "magnetic_flux_density_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of magnetic_flux_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class magnetic_flux_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of magnetic_flux_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        magnetic_flux_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "magnetic_flux_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of magnetic_flux_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static magnetic_flux_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "magnetic_flux_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of magnetic_flux_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class magnetic_flux_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of magnetic_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        magnetic_flux_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "magnetic_flux_unit")
        {}

                /// <summary>
                /// Create new instace of magnetic_flux_unit and returns object of this C++ class to interact with
                /// </summary>
        static magnetic_flux_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "magnetic_flux_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of make_from_usage_option
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class make_from_usage_option : public virtual product_definition_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of make_from_usage_option
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        make_from_usage_option(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "make_from_usage_option")
        {}

                /// <summary>
                /// Create new instace of make_from_usage_option and returns object of this C++ class to interact with
                /// </summary>
        static make_from_usage_option Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "make_from_usage_option"); assert(inst); return inst; }

        Nullable<IntValue> get_ranking() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "ranking", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_ranking(IntValue value) { sdaiPutAttrBN(m_instance, "ranking", sdaiINTEGER, &value); }

        text get_ranking_rationale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "ranking_rationale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ranking_rationale(text value) { sdaiPutAttrBN(m_instance, "ranking_rationale", sdaiSTRING, value); }

        measure_with_unit get_quantity();
        void put_quantity(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_subsurface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_subsurface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_subsurface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_subsurface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_subsurface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of manifold_subsurface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static manifold_subsurface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_subsurface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of manifold_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class manifold_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        manifold_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "manifold_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of manifold_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "manifold_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mass_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mass_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mass_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mass_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mass_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of mass_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static mass_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mass_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mass_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mass_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mass_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mass_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mass_unit")
        {}

                /// <summary>
                /// Create new instace of mass_unit and returns object of this C++ class to interact with
                /// </summary>
        static mass_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mass_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_designation_characterization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_designation_characterization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_designation_characterization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_designation_characterization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_designation_characterization")
        {}

                /// <summary>
                /// Create new instace of material_designation_characterization and returns object of this C++ class to interact with
                /// </summary>
        static material_designation_characterization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_designation_characterization"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        material_designation get_designation();
        void put_designation(material_designation inst);

        characterized_material_property_get get_property() { return characterized_material_property_get(m_instance, "property", NULL); }
        characterized_material_property_put put_property() { return characterized_material_property_put(m_instance, "property", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_property
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_property : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_property(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_property")
        {}

                /// <summary>
                /// Create new instace of material_property and returns object of this C++ class to interact with
                /// </summary>
        static material_property Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_property"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of material_property_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class material_property_representation : public virtual property_definition_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of material_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        material_property_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "material_property_representation")
        {}

                /// <summary>
                /// Create new instace of material_property_representation and returns object of this C++ class to interact with
                /// </summary>
        static material_property_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "material_property_representation"); assert(inst); return inst; }

        data_environment get_dependent_environment();
        void put_dependent_environment(data_environment inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_qualification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_qualification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_qualification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_qualification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_qualification")
        {}

                /// <summary>
                /// Create new instace of measure_qualification and returns object of this C++ class to interact with
                /// </summary>
        static measure_qualification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_qualification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        measure_with_unit get_qualified_measure();
        void put_qualified_measure(measure_with_unit inst);

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void get_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr; sr.FromAttr(lst, m_instance, "qualifiers"); }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void put_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "qualifiers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of measure_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class measure_representation_item : public virtual representation_item, public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of measure_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        measure_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "measure_representation_item")
        {}

                /// <summary>
                /// Create new instace of measure_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static measure_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "measure_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_context")
        {}

                /// <summary>
                /// Create new instace of product_context and returns object of this C++ class to interact with
                /// </summary>
        static product_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_context"); assert(inst); return inst; }

        label get_discipline_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "discipline_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_discipline_type(label value) { sdaiPutAttrBN(m_instance, "discipline_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_context : public virtual product_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_context")
        {}

                /// <summary>
                /// Create new instace of mechanical_context and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_and_draughting_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_and_draughting_relationship : public virtual definitional_representation_relationship_with_same_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_and_draughting_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_and_draughting_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_and_draughting_relationship")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_and_draughting_relationship and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_and_draughting_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_and_draughting_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_geometric_presentation_area : public virtual presentation_area
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_geometric_presentation_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_geometric_presentation_area")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_geometric_presentation_area and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_geometric_presentation_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_geometric_presentation_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_geometric_presentation_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_geometric_presentation_representation")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_geometric_presentation_representation and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_geometric_presentation_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_presentation_representation_with_draughting
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_presentation_representation_with_draughting : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_presentation_representation_with_draughting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_presentation_representation_with_draughting(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_presentation_representation_with_draughting")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_presentation_representation_with_draughting and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_presentation_representation_with_draughting Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_presentation_representation_with_draughting"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_shaded_presentation_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_shaded_presentation_area : public virtual presentation_area
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_shaded_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_shaded_presentation_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_shaded_presentation_area")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_shaded_presentation_area and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_shaded_presentation_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_shaded_presentation_area"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of mechanical_design_shaded_presentation_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class mechanical_design_shaded_presentation_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of mechanical_design_shaded_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        mechanical_design_shaded_presentation_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "mechanical_design_shaded_presentation_representation")
        {}

                /// <summary>
                /// Create new instace of mechanical_design_shaded_presentation_representation and returns object of this C++ class to interact with
                /// </summary>
        static mechanical_design_shaded_presentation_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "mechanical_design_shaded_presentation_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of min_and_major_ply_orientation_basis
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class min_and_major_ply_orientation_basis : public virtual representation_item_relationship, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of min_and_major_ply_orientation_basis
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        min_and_major_ply_orientation_basis(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "min_and_major_ply_orientation_basis")
        {}

                /// <summary>
                /// Create new instace of min_and_major_ply_orientation_basis and returns object of this C++ class to interact with
                /// </summary>
        static min_and_major_ply_orientation_basis Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "min_and_major_ply_orientation_basis"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of modified_geometric_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class modified_geometric_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of modified_geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        modified_geometric_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "modified_geometric_tolerance")
        {}

                /// <summary>
                /// Create new instace of modified_geometric_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static modified_geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "modified_geometric_tolerance"); assert(inst); return inst; }

        Nullable<limit_condition> get_modifier() { int v = getENUM("modifier", limit_condition_); if (v >= 0) return (limit_condition) v; else return Nullable<limit_condition>(); }
        void put_modifier(limit_condition value) { TextValue val = limit_condition_[(int) value]; sdaiPutAttrBN(m_instance, "modifier", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of modified_solid_with_placed_configuration
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class modified_solid_with_placed_configuration : public virtual modified_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of modified_solid_with_placed_configuration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        modified_solid_with_placed_configuration(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "modified_solid_with_placed_configuration")
        {}


        axis2_placement_3d get_placing();
        void put_placing(axis2_placement_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of moments_of_inertia_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class moments_of_inertia_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of moments_of_inertia_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        moments_of_inertia_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "moments_of_inertia_representation")
        {}

                /// <summary>
                /// Create new instace of moments_of_inertia_representation and returns object of this C++ class to interact with
                /// </summary>
        static moments_of_inertia_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "moments_of_inertia_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multi_language_attribute_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multi_language_attribute_assignment : public virtual attribute_value_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multi_language_attribute_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multi_language_attribute_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multi_language_attribute_assignment")
        {}

                /// <summary>
                /// Create new instace of multi_language_attribute_assignment and returns object of this C++ class to interact with
                /// </summary>
        static multi_language_attribute_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "multi_language_attribute_assignment"); assert(inst); return inst; }

        //TList may be set_of_multi_language_attribute_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_multi_language_attribute_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_multi_language_attribute_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_multi_language_attribute_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TList may be set_of_attribute_language_assignment or list of converible elements
        template <typename TList> void get_language_indication(TList& lst) { set_of_attribute_language_assignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "language_indication"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_boolean_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_boolean_expression : public virtual boolean_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_boolean_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_boolean_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of multiple_arity_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class multiple_arity_numeric_expression : public virtual numeric_expression, public virtual multiple_arity_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of multiple_arity_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        multiple_arity_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "multiple_arity_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of name_attribute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class name_attribute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of name_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        name_attribute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "name_attribute")
        {}

                /// <summary>
                /// Create new instace of name_attribute and returns object of this C++ class to interact with
                /// </summary>
        static name_attribute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "name_attribute"); assert(inst); return inst; }

        label get_attribute_value() { label val = NULL; if (sdaiGetAttrBN(m_instance, "attribute_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_attribute_value(label value) { sdaiPutAttrBN(m_instance, "attribute_value", sdaiSTRING, value); }

        name_attribute_select_get get_named_item() { return name_attribute_select_get(m_instance, "named_item", NULL); }
        name_attribute_select_put put_named_item() { return name_attribute_select_put(m_instance, "named_item", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of next_assembly_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class next_assembly_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of next_assembly_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        next_assembly_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "next_assembly_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of next_assembly_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static next_assembly_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "next_assembly_usage_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of non_manifold_surface_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class non_manifold_surface_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of non_manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        non_manifold_surface_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "non_manifold_surface_shape_representation")
        {}

                /// <summary>
                /// Create new instace of non_manifold_surface_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static non_manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "non_manifold_surface_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of null_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class null_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of null_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        null_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "null_representation_item")
        {}

                /// <summary>
                /// Create new instace of null_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static null_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "null_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of object_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class object_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of object_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        object_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "object_role")
        {}

                /// <summary>
                /// Create new instace of object_role and returns object of this C++ class to interact with
                /// </summary>
        static object_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "object_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_curve_2d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_curve_2d : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_curve_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_curve_2d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_curve_2d")
        {}

                /// <summary>
                /// Create new instace of offset_curve_2d and returns object of this C++ class to interact with
                /// </summary>
        static offset_curve_2d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_curve_2d"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_curve_3d
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_curve_3d : public virtual curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_curve_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_curve_3d(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_curve_3d")
        {}

                /// <summary>
                /// Create new instace of offset_curve_3d and returns object of this C++ class to interact with
                /// </summary>
        static offset_curve_3d Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_curve_3d"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }

        direction get_ref_direction();
        void put_ref_direction(direction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of offset_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class offset_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of offset_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        offset_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "offset_surface")
        {}

                /// <summary>
                /// Create new instace of offset_surface and returns object of this C++ class to interact with
                /// </summary>
        static offset_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "offset_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<length_measure> get_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_distance(length_measure value) { sdaiPutAttrBN(m_instance, "distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_self_intersect() { int v = getENUM("self_intersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_self_intersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "self_intersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of one_direction_repeat_factor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class one_direction_repeat_factor : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of one_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        one_direction_repeat_factor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "one_direction_repeat_factor")
        {}

                /// <summary>
                /// Create new instace of one_direction_repeat_factor and returns object of this C++ class to interact with
                /// </summary>
        static one_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "one_direction_repeat_factor"); assert(inst); return inst; }

        vector get_repeat_factor();
        void put_repeat_factor(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of open_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class open_shell : public virtual connected_face_set
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        open_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "open_shell")
        {}

                /// <summary>
                /// Create new instace of open_shell and returns object of this C++ class to interact with
                /// </summary>
        static open_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "open_shell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ordinal_date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ordinal_date : public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ordinal_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ordinal_date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ordinal_date")
        {}

                /// <summary>
                /// Create new instace of ordinal_date and returns object of this C++ class to interact with
                /// </summary>
        static ordinal_date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ordinal_date"); assert(inst); return inst; }

        Nullable<day_in_year_number> get_day_component() { day_in_year_number val = (day_in_year_number) 0; if (sdaiGetAttrBN(m_instance, "day_component", sdaiINTEGER, &val)) return val; else return Nullable<day_in_year_number>(); }
        void put_day_component(day_in_year_number value) { sdaiPutAttrBN(m_instance, "day_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projection_directed_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projection_directed_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projection_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projection_directed_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projection_directed_callout")
        {}

                /// <summary>
                /// Create new instace of projection_directed_callout and returns object of this C++ class to interact with
                /// </summary>
        static projection_directed_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projection_directed_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ordinate_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ordinate_dimension : public virtual projection_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ordinate_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ordinate_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ordinate_dimension")
        {}

                /// <summary>
                /// Create new instace of ordinate_dimension and returns object of this C++ class to interact with
                /// </summary>
        static ordinate_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ordinate_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization")
        {}

                /// <summary>
                /// Create new instace of organization and returns object of this C++ class to interact with
                /// </summary>
        static organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_relationship")
        {}

                /// <summary>
                /// Create new instace of organization_relationship and returns object of this C++ class to interact with
                /// </summary>
        static organization_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        organization get_relating_organization();
        void put_relating_organization(organization inst);

        organization get_related_organization();
        void put_related_organization(organization inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organization_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organization_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organization_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organization_role")
        {}

                /// <summary>
                /// Create new instace of organization_role and returns object of this C++ class to interact with
                /// </summary>
        static organization_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organization_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_address : public virtual address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_address")
        {}

                /// <summary>
                /// Create new instace of organizational_address and returns object of this C++ class to interact with
                /// </summary>
        static organizational_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_address"); assert(inst); return inst; }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void get_organizations(TList& lst) { set_of_organizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "organizations"); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void put_organizations(TList& lst) { set_of_organizationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "organizations"); }

        //TArrayElem[] may be organization[] or array of convertible elements
        template <typename TArrayElem> void put_organizations(TArrayElem arr[], size_t n) { set_of_organization lst; ArrayToList(arr, n, lst); put_organizations(lst); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project")
        {}

                /// <summary>
                /// Create new instace of organizational_project and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void get_responsible_organizations(TList& lst) { set_of_organizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "responsible_organizations"); }

        //TList may be set_of_organization or list of converible elements
        template <typename TList> void put_responsible_organizations(TList& lst) { set_of_organizationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "responsible_organizations"); }

        //TArrayElem[] may be organization[] or array of convertible elements
        template <typename TArrayElem> void put_responsible_organizations(TArrayElem arr[], size_t n) { set_of_organization lst; ArrayToList(arr, n, lst); put_responsible_organizations(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_relationship")
        {}

                /// <summary>
                /// Create new instace of organizational_project_relationship and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        organizational_project get_relating_organizational_project();
        void put_relating_organizational_project(organizational_project inst);

        organizational_project get_related_organizational_project();
        void put_related_organizational_project(organizational_project inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of organizational_project_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class organizational_project_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of organizational_project_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        organizational_project_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "organizational_project_role")
        {}

                /// <summary>
                /// Create new instace of organizational_project_role and returns object of this C++ class to interact with
                /// </summary>
        static organizational_project_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "organizational_project_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_closed_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_closed_shell : public virtual closed_shell
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_closed_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_closed_shell")
        {}

                /// <summary>
                /// Create new instace of oriented_closed_shell and returns object of this C++ class to interact with
                /// </summary>
        static oriented_closed_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_closed_shell"); assert(inst); return inst; }

        closed_shell get_closed_shell_element();
        void put_closed_shell_element(closed_shell inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_edge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_edge : public virtual edge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_edge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_edge")
        {}

                /// <summary>
                /// Create new instace of oriented_edge and returns object of this C++ class to interact with
                /// </summary>
        static oriented_edge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_edge"); assert(inst); return inst; }

        edge get_edge_element();
        void put_edge_element(edge inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_face
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_face : public virtual face
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_face(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_face")
        {}

                /// <summary>
                /// Create new instace of oriented_face and returns object of this C++ class to interact with
                /// </summary>
        static oriented_face Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_face"); assert(inst); return inst; }

        face get_face_element();
        void put_face_element(face inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_open_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_open_shell : public virtual open_shell
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_open_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_open_shell")
        {}

                /// <summary>
                /// Create new instace of oriented_open_shell and returns object of this C++ class to interact with
                /// </summary>
        static oriented_open_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_open_shell"); assert(inst); return inst; }

        open_shell get_open_shell_element();
        void put_open_shell_element(open_shell inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_path : public virtual path
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_path")
        {}

                /// <summary>
                /// Create new instace of oriented_path and returns object of this C++ class to interact with
                /// </summary>
        static oriented_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_path"); assert(inst); return inst; }

        path get_path_element();
        void put_path_element(path inst);

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of oriented_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class oriented_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of oriented_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        oriented_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "oriented_surface")
        {}

                /// <summary>
                /// Create new instace of oriented_surface and returns object of this C++ class to interact with
                /// </summary>
        static oriented_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "oriented_surface"); assert(inst); return inst; }

        Nullable<bool> get_orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_orientation(bool value) { sdaiPutAttrBN(m_instance, "orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of outer_boundary_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class outer_boundary_curve : public virtual boundary_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of outer_boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        outer_boundary_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "outer_boundary_curve")
        {}

                /// <summary>
                /// Create new instace of outer_boundary_curve and returns object of this C++ class to interact with
                /// </summary>
        static outer_boundary_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "outer_boundary_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of package_product_concept_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class package_product_concept_feature : public virtual product_concept_feature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of package_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        package_product_concept_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "package_product_concept_feature")
        {}

                /// <summary>
                /// Create new instace of package_product_concept_feature and returns object of this C++ class to interact with
                /// </summary>
        static package_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "package_product_concept_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parabola
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parabola : public virtual conic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parabola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parabola(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parabola")
        {}

                /// <summary>
                /// Create new instace of parabola and returns object of this C++ class to interact with
                /// </summary>
        static parabola Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parabola"); assert(inst); return inst; }

        Nullable<length_measure> get_focal_dist() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "focal_dist", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_focal_dist(length_measure value) { sdaiPutAttrBN(m_instance, "focal_dist", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parallel_offset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parallel_offset : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parallel_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parallel_offset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parallel_offset")
        {}

                /// <summary>
                /// Create new instace of parallel_offset and returns object of this C++ class to interact with
                /// </summary>
        static parallel_offset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parallel_offset"); assert(inst); return inst; }

        measure_with_unit get_offset();
        void put_offset(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parallelism_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parallelism_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parallelism_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parallelism_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parallelism_tolerance")
        {}

                /// <summary>
                /// Create new instace of parallelism_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static parallelism_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parallelism_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of parametric_representation_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class parametric_representation_context : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of parametric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        parametric_representation_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "parametric_representation_context")
        {}

                /// <summary>
                /// Create new instace of parametric_representation_context and returns object of this C++ class to interact with
                /// </summary>
        static parametric_representation_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "parametric_representation_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of partial_document_with_structured_text_representation_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class partial_document_with_structured_text_representation_assignment : public virtual applied_document_usage_constraint_assignment, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of partial_document_with_structured_text_representation_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        partial_document_with_structured_text_representation_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "partial_document_with_structured_text_representation_assignment")
        {}

                /// <summary>
                /// Create new instace of partial_document_with_structured_text_representation_assignment and returns object of this C++ class to interact with
                /// </summary>
        static partial_document_with_structured_text_representation_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "partial_document_with_structured_text_representation_assignment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of percentage_laminate_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class percentage_laminate_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of percentage_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        percentage_laminate_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "percentage_laminate_definition")
        {}

                /// <summary>
                /// Create new instace of percentage_laminate_definition and returns object of this C++ class to interact with
                /// </summary>
        static percentage_laminate_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "percentage_laminate_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of zone_structural_makeup
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class zone_structural_makeup : public virtual laminate_table
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of zone_structural_makeup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        zone_structural_makeup(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "zone_structural_makeup")
        {}

                /// <summary>
                /// Create new instace of zone_structural_makeup and returns object of this C++ class to interact with
                /// </summary>
        static zone_structural_makeup Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "zone_structural_makeup"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of percentage_laminate_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class percentage_laminate_table : public virtual zone_structural_makeup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of percentage_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        percentage_laminate_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "percentage_laminate_table")
        {}

                /// <summary>
                /// Create new instace of percentage_laminate_table and returns object of this C++ class to interact with
                /// </summary>
        static percentage_laminate_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "percentage_laminate_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of percentage_ply_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class percentage_ply_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of percentage_ply_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        percentage_ply_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "percentage_ply_definition")
        {}

                /// <summary>
                /// Create new instace of percentage_ply_definition and returns object of this C++ class to interact with
                /// </summary>
        static percentage_ply_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "percentage_ply_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of perpendicular_to
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class perpendicular_to : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of perpendicular_to
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        perpendicular_to(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "perpendicular_to")
        {}

                /// <summary>
                /// Create new instace of perpendicular_to and returns object of this C++ class to interact with
                /// </summary>
        static perpendicular_to Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "perpendicular_to"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of perpendicularity_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class perpendicularity_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of perpendicularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        perpendicularity_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "perpendicularity_tolerance")
        {}

                /// <summary>
                /// Create new instace of perpendicularity_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static perpendicularity_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "perpendicularity_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person")
        {}

                /// <summary>
                /// Create new instace of person and returns object of this C++ class to interact with
                /// </summary>
        static person Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_last_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "last_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_last_name(label value) { sdaiPutAttrBN(m_instance, "last_name", sdaiSTRING, value); }

        label get_first_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "first_name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_first_name(label value) { sdaiPutAttrBN(m_instance, "first_name", sdaiSTRING, value); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_middle_names(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "middle_names"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_middle_names(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "middle_names"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_middle_names(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_middle_names(lst); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_prefix_titles(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "prefix_titles"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_prefix_titles(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "prefix_titles"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_prefix_titles(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_prefix_titles(lst); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void get_suffix_titles(TList& lst) { list_of_labelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "suffix_titles"); }

        //TList may be list_of_label or list of converible elements
        template <typename TList> void put_suffix_titles(TList& lst) { list_of_labelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "suffix_titles"); }

        //TArrayElem[] may be label[] or array of convertible elements
        template <typename TArrayElem> void put_suffix_titles(TArrayElem arr[], size_t n) { list_of_label lst; ArrayToList(arr, n, lst); put_suffix_titles(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization")
        {}

                /// <summary>
                /// Create new instace of person_and_organization and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization"); assert(inst); return inst; }

        person get_the_person();
        void put_the_person(person inst);

        organization get_the_organization();
        void put_the_organization(organization inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of personal_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class personal_address : public virtual address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of personal_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        personal_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "personal_address")
        {}

                /// <summary>
                /// Create new instace of personal_address and returns object of this C++ class to interact with
                /// </summary>
        static personal_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "personal_address"); assert(inst); return inst; }

        //TList may be set_of_person or list of converible elements
        template <typename TList> void get_people(TList& lst) { set_of_personSerializer<TList> sr; sr.FromAttr(lst, m_instance, "people"); }

        //TList may be set_of_person or list of converible elements
        template <typename TList> void put_people(TList& lst) { set_of_personSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "people"); }

        //TArrayElem[] may be person[] or array of convertible elements
        template <typename TArrayElem> void put_people(TArrayElem arr[], size_t n) { set_of_person lst; ArrayToList(arr, n, lst); put_people(lst); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_address
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_address : public virtual organizational_address, public virtual personal_address
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_address(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_address")
        {}

                /// <summary>
                /// Create new instace of person_and_organization_address and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization_address Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization_address"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of person_and_organization_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class person_and_organization_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of person_and_organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        person_and_organization_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "person_and_organization_role")
        {}

                /// <summary>
                /// Create new instace of person_and_organization_role and returns object of this C++ class to interact with
                /// </summary>
        static person_and_organization_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "person_and_organization_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of physical_breakdown_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class physical_breakdown_context : public virtual breakdown_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of physical_breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        physical_breakdown_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "physical_breakdown_context")
        {}

                /// <summary>
                /// Create new instace of physical_breakdown_context and returns object of this C++ class to interact with
                /// </summary>
        static physical_breakdown_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "physical_breakdown_context"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of physical_element_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class physical_element_usage : public virtual breakdown_element_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of physical_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        physical_element_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "physical_element_usage")
        {}

                /// <summary>
                /// Create new instace of physical_element_usage and returns object of this C++ class to interact with
                /// </summary>
        static physical_element_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "physical_element_usage"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_view
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_view : public virtual presentation_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_view
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_view(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_view")
        {}

                /// <summary>
                /// Create new instace of presentation_view and returns object of this C++ class to interact with
                /// </summary>
        static presentation_view Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_view"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of picture_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class picture_representation : public virtual presentation_view
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of picture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        picture_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "picture_representation")
        {}

                /// <summary>
                /// Create new instace of picture_representation and returns object of this C++ class to interact with
                /// </summary>
        static picture_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "picture_representation"); assert(inst); return inst; }

        presentation_size get_size();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placed_datum_target_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placed_datum_target_feature : public virtual datum_target
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placed_datum_target_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placed_datum_target_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placed_datum_target_feature")
        {}

                /// <summary>
                /// Create new instace of placed_datum_target_feature and returns object of this C++ class to interact with
                /// </summary>
        static placed_datum_target_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placed_datum_target_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of placed_feature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class placed_feature : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of placed_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        placed_feature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "placed_feature")
        {}

                /// <summary>
                /// Create new instace of placed_feature and returns object of this C++ class to interact with
                /// </summary>
        static placed_feature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "placed_feature"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_extent : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_extent")
        {}

                /// <summary>
                /// Create new instace of planar_extent and returns object of this C++ class to interact with
                /// </summary>
        static planar_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_extent"); assert(inst); return inst; }

        Nullable<length_measure> get_size_in_x() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "size_in_x", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_size_in_x(length_measure value) { sdaiPutAttrBN(m_instance, "size_in_x", sdaiREAL, &value); }

        Nullable<length_measure> get_size_in_y() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "size_in_y", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_size_in_y(length_measure value) { sdaiPutAttrBN(m_instance, "size_in_y", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of planar_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class planar_box : public virtual planar_extent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of planar_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        planar_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "planar_box")
        {}

                /// <summary>
                /// Create new instace of planar_box and returns object of this C++ class to interact with
                /// </summary>
        static planar_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "planar_box"); assert(inst); return inst; }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane")
        {}

                /// <summary>
                /// Create new instace of plane and returns object of this C++ class to interact with
                /// </summary>
        static plane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane_angle_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane_angle_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane_angle_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane_angle_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of plane_angle_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static plane_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane_angle_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plane_angle_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plane_angle_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plane_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plane_angle_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plane_angle_unit")
        {}

                /// <summary>
                /// Create new instace of plane_angle_unit and returns object of this C++ class to interact with
                /// </summary>
        static plane_angle_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plane_angle_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of plus_minus_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class plus_minus_tolerance : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of plus_minus_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        plus_minus_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "plus_minus_tolerance")
        {}

                /// <summary>
                /// Create new instace of plus_minus_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static plus_minus_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "plus_minus_tolerance"); assert(inst); return inst; }

        tolerance_method_definition_get get_range() { return tolerance_method_definition_get(m_instance, "range", NULL); }
        tolerance_method_definition_put put_range() { return tolerance_method_definition_put(m_instance, "range", NULL); }

        dimensional_characteristic_get get_toleranced_dimension() { return dimensional_characteristic_get(m_instance, "toleranced_dimension", NULL); }
        dimensional_characteristic_put put_toleranced_dimension() { return dimensional_characteristic_put(m_instance, "toleranced_dimension", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ply_laminate_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ply_laminate_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ply_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ply_laminate_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ply_laminate_definition")
        {}

                /// <summary>
                /// Create new instace of ply_laminate_definition and returns object of this C++ class to interact with
                /// </summary>
        static ply_laminate_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ply_laminate_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ply_laminate_sequence_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ply_laminate_sequence_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ply_laminate_sequence_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ply_laminate_sequence_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ply_laminate_sequence_definition")
        {}

                /// <summary>
                /// Create new instace of ply_laminate_sequence_definition and returns object of this C++ class to interact with
                /// </summary>
        static ply_laminate_sequence_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ply_laminate_sequence_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ply_laminate_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ply_laminate_table : public virtual part_laminate_table
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ply_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ply_laminate_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ply_laminate_table")
        {}

                /// <summary>
                /// Create new instace of ply_laminate_table and returns object of this C++ class to interact with
                /// </summary>
        static ply_laminate_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ply_laminate_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_and_vector
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_and_vector : public virtual compound_representation_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_and_vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_and_vector(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_and_vector")
        {}

                /// <summary>
                /// Create new instace of point_and_vector and returns object of this C++ class to interact with
                /// </summary>
        static point_and_vector Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_and_vector"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_curve : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_curve")
        {}

                /// <summary>
                /// Create new instace of point_on_curve and returns object of this C++ class to interact with
                /// </summary>
        static point_on_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_curve"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        Nullable<parameter_value> get_point_parameter() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_on_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_on_surface : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_on_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_on_surface")
        {}

                /// <summary>
                /// Create new instace of point_on_surface and returns object of this C++ class to interact with
                /// </summary>
        static point_on_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_on_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<parameter_value> get_point_parameter_u() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter_u", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter_u(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter_u", sdaiREAL, &value); }

        Nullable<parameter_value> get_point_parameter_v() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "point_parameter_v", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_point_parameter_v(parameter_value value) { sdaiPutAttrBN(m_instance, "point_parameter_v", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_path
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_path : public virtual compound_representation_item, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_path(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_path")
        {}

                /// <summary>
                /// Create new instace of point_path and returns object of this C++ class to interact with
                /// </summary>
        static point_path Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_path"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_replica : public virtual point
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_replica")
        {}

                /// <summary>
                /// Create new instace of point_replica and returns object of this C++ class to interact with
                /// </summary>
        static point_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_replica"); assert(inst); return inst; }

        point get_parent_pt();
        void put_parent_pt(point inst);

        cartesian_transformation_operator get_transformation();
        void put_transformation(cartesian_transformation_operator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of point_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class point_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of point_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        point_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "point_style")
        {}

                /// <summary>
                /// Create new instace of point_style and returns object of this C++ class to interact with
                /// </summary>
        static point_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "point_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        marker_select_get get_marker() { return marker_select_get(m_instance, "marker", NULL); }
        marker_select_put put_marker() { return marker_select_put(m_instance, "marker", NULL); }

        size_select_get get_marker_size() { return size_select_get(m_instance, "marker_size", NULL); }
        size_select_put put_marker_size() { return size_select_put(m_instance, "marker_size", NULL); }

        colour get_marker_colour();
        void put_marker_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of polar_complex_number_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class polar_complex_number_literal : public virtual generic_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of polar_complex_number_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        polar_complex_number_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "polar_complex_number_literal")
        {}

                /// <summary>
                /// Create new instace of polar_complex_number_literal and returns object of this C++ class to interact with
                /// </summary>
        static polar_complex_number_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "polar_complex_number_literal"); assert(inst); return inst; }

        Nullable<double> get_radius() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_radius(double value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<double> get_angle() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "angle", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_angle(double value) { sdaiPutAttrBN(m_instance, "angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of poly_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class poly_loop : public virtual loop, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of poly_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        poly_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "poly_loop")
        {}

                /// <summary>
                /// Create new instace of poly_loop and returns object of this C++ class to interact with
                /// </summary>
        static poly_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "poly_loop"); assert(inst); return inst; }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_polygon(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "polygon"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_polygon(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "polygon"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_polygon(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_polygon(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of polyline
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class polyline : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of polyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        polyline(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "polyline")
        {}

                /// <summary>
                /// Create new instace of polyline and returns object of this C++ class to interact with
                /// </summary>
        static polyline Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "polyline"); assert(inst); return inst; }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void get_points(TList& lst) { list_of_cartesian_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "points"); }

        //TList may be list_of_cartesian_point or list of converible elements
        template <typename TList> void put_points(TList& lst) { list_of_cartesian_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "points"); }

        //TArrayElem[] may be cartesian_point[] or array of convertible elements
        template <typename TArrayElem> void put_points(TArrayElem arr[], size_t n) { list_of_cartesian_point lst; ArrayToList(arr, n, lst); put_points(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of position_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class position_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of position_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        position_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "position_tolerance")
        {}

                /// <summary>
                /// Create new instace of position_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static position_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "position_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of positioned_sketch
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class positioned_sketch : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of positioned_sketch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        positioned_sketch(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "positioned_sketch")
        {}

                /// <summary>
                /// Create new instace of positioned_sketch and returns object of this C++ class to interact with
                /// </summary>
        static positioned_sketch Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "positioned_sketch"); assert(inst); return inst; }

        sketch_basis_select_get get_sketch_basis() { return sketch_basis_select_get(m_instance, "sketch_basis", NULL); }
        sketch_basis_select_put put_sketch_basis() { return sketch_basis_select_put(m_instance, "sketch_basis", NULL); }

        //TList may be set_of_auxiliary_geometric_representation_item or list of converible elements
        template <typename TList> void get_auxiliary_elements(TList& lst) { set_of_auxiliary_geometric_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "auxiliary_elements"); }

        //TList may be set_of_auxiliary_geometric_representation_item or list of converible elements
        template <typename TList> void put_auxiliary_elements(TList& lst) { set_of_auxiliary_geometric_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "auxiliary_elements"); }

        //TArrayElem[] may be auxiliary_geometric_representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_auxiliary_elements(TArrayElem arr[], size_t n) { set_of_auxiliary_geometric_representation_item lst; ArrayToList(arr, n, lst); put_auxiliary_elements(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of power_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class power_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of power_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        power_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "power_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of power_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static power_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "power_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of power_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class power_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of power_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        power_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "power_unit")
        {}

                /// <summary>
                /// Create new instace of power_unit and returns object of this C++ class to interact with
                /// </summary>
        static power_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "power_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_symbol : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_dimension_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_dimension_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_dimension_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_dimension_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_dimension_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_dimension_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_dimension_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_dimension_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_geometrical_tolerance_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_geometrical_tolerance_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_geometrical_tolerance_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_geometrical_tolerance_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_geometrical_tolerance_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_geometrical_tolerance_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_geometrical_tolerance_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_geometrical_tolerance_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_point_marker_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_point_marker_symbol : public virtual pre_defined_marker, public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_point_marker_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_point_marker_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_point_marker_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_point_marker_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_point_marker_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_point_marker_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_surface_condition_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_surface_condition_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_surface_condition_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_surface_condition_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_surface_condition_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_surface_condition_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_surface_condition_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_surface_condition_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_surface_side_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_surface_side_style : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_surface_side_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_surface_side_style")
        {}

                /// <summary>
                /// Create new instace of pre_defined_surface_side_style and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_surface_side_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_surface_side_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_terminator_symbol : public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of pre_defined_terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_terminator_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pre_defined_tile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pre_defined_tile : public virtual pre_defined_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pre_defined_tile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pre_defined_tile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pre_defined_tile")
        {}

                /// <summary>
                /// Create new instace of pre_defined_tile and returns object of this C++ class to interact with
                /// </summary>
        static pre_defined_tile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pre_defined_tile"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of precision_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class precision_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of precision_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        precision_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "precision_qualifier")
        {}

                /// <summary>
                /// Create new instace of precision_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static precision_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "precision_qualifier"); assert(inst); return inst; }

        Nullable<IntValue> get_precision_value() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "precision_value", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_precision_value(IntValue value) { sdaiPutAttrBN(m_instance, "precision_value", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of predefined_picture_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class predefined_picture_representation_item : public virtual picture_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of predefined_picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        predefined_picture_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "predefined_picture_representation_item")
        {}

                /// <summary>
                /// Create new instace of predefined_picture_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static predefined_picture_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "predefined_picture_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_layer_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_layer_assignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_layer_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_layer_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_layer_assignment")
        {}

                /// <summary>
                /// Create new instace of presentation_layer_assignment and returns object of this C++ class to interact with
                /// </summary>
        static presentation_layer_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_layer_assignment"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_layered_item or list of converible elements
        template <typename TList> void get_assigned_items(TList& lst) { set_of_layered_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "assigned_items"); }

        //TList may be set_of_layered_item or list of converible elements
        template <typename TList> void put_assigned_items(TList& lst) { set_of_layered_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "assigned_items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_size
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_size : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_size(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_size")
        {}

                /// <summary>
                /// Create new instace of presentation_size and returns object of this C++ class to interact with
                /// </summary>
        static presentation_size Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_size"); assert(inst); return inst; }

        presentation_size_assignment_select_get get_unit() { return presentation_size_assignment_select_get(m_instance, "unit", NULL); }
        presentation_size_assignment_select_put put_unit() { return presentation_size_assignment_select_put(m_instance, "unit", NULL); }

        planar_box get_size();
        void put_size(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_style_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_style_assignment : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_style_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_style_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_style_assignment")
        {}

                /// <summary>
                /// Create new instace of presentation_style_assignment and returns object of this C++ class to interact with
                /// </summary>
        static presentation_style_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_style_assignment"); assert(inst); return inst; }

        //TList may be set_of_presentation_style_select or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_presentation_style_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_presentation_style_select or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_presentation_style_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presentation_style_by_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presentation_style_by_context : public virtual presentation_style_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presentation_style_by_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presentation_style_by_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presentation_style_by_context")
        {}

                /// <summary>
                /// Create new instace of presentation_style_by_context and returns object of this C++ class to interact with
                /// </summary>
        static presentation_style_by_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presentation_style_by_context"); assert(inst); return inst; }

        style_context_select_get get_style_context() { return style_context_select_get(m_instance, "style_context", NULL); }
        style_context_select_put put_style_context() { return style_context_select_put(m_instance, "style_context", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of presented_item_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class presented_item_representation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of presented_item_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        presented_item_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "presented_item_representation")
        {}

                /// <summary>
                /// Create new instace of presented_item_representation and returns object of this C++ class to interact with
                /// </summary>
        static presented_item_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "presented_item_representation"); assert(inst); return inst; }

        presentation_representation_select_get get_presentation() { return presentation_representation_select_get(m_instance, "presentation", NULL); }
        presentation_representation_select_put put_presentation() { return presentation_representation_select_put(m_instance, "presentation", NULL); }

        presented_item get_item();
        void put_item(presented_item inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pressure_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pressure_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pressure_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pressure_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pressure_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of pressure_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static pressure_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pressure_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of pressure_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class pressure_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of pressure_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        pressure_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "pressure_unit")
        {}

                /// <summary>
                /// Create new instace of pressure_unit and returns object of this C++ class to interact with
                /// </summary>
        static pressure_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "pressure_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of procedural_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class procedural_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of procedural_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        procedural_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "procedural_representation")
        {}

                /// <summary>
                /// Create new instace of procedural_representation and returns object of this C++ class to interact with
                /// </summary>
        static procedural_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "procedural_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of procedural_representation_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class procedural_representation_sequence : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of procedural_representation_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        procedural_representation_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "procedural_representation_sequence")
        {}

                /// <summary>
                /// Create new instace of procedural_representation_sequence and returns object of this C++ class to interact with
                /// </summary>
        static procedural_representation_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "procedural_representation_sequence"); assert(inst); return inst; }

        //TList may be list_of_representation_item or list of converible elements
        template <typename TList> void get_elements(TList& lst) { list_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "elements"); }

        //TList may be list_of_representation_item or list of converible elements
        template <typename TList> void put_elements(TList& lst) { list_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "elements"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_elements(TArrayElem arr[], size_t n) { list_of_representation_item lst; ArrayToList(arr, n, lst); put_elements(lst); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void get_suppressed_items(TList& lst) { set_of_representation_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "suppressed_items"); }

        //TList may be set_of_representation_item or list of converible elements
        template <typename TList> void put_suppressed_items(TList& lst) { set_of_representation_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "suppressed_items"); }

        //TArrayElem[] may be representation_item[] or array of convertible elements
        template <typename TArrayElem> void put_suppressed_items(TArrayElem arr[], size_t n) { set_of_representation_item lst; ArrayToList(arr, n, lst); put_suppressed_items(lst); }

        text get_rationale() { text val = NULL; if (sdaiGetAttrBN(m_instance, "rationale", sdaiSTRING, &val)) return val; else return NULL; }
        void put_rationale(text value) { sdaiPutAttrBN(m_instance, "rationale", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of procedural_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class procedural_shape_representation : public virtual procedural_representation, public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of procedural_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        procedural_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "procedural_shape_representation")
        {}

                /// <summary>
                /// Create new instace of procedural_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static procedural_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "procedural_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of procedural_shape_representation_sequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class procedural_shape_representation_sequence : public virtual geometric_representation_item, public virtual procedural_representation_sequence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of procedural_shape_representation_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        procedural_shape_representation_sequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "procedural_shape_representation_sequence")
        {}

                /// <summary>
                /// Create new instace of procedural_shape_representation_sequence and returns object of this C++ class to interact with
                /// </summary>
        static procedural_shape_representation_sequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "procedural_shape_representation_sequence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product")
        {}

                /// <summary>
                /// Create new instace of product and returns object of this C++ class to interact with
                /// </summary>
        static product Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_product_context or list of converible elements
        template <typename TList> void get_frame_of_reference(TList& lst) { set_of_product_contextSerializer<TList> sr; sr.FromAttr(lst, m_instance, "frame_of_reference"); }

        //TList may be set_of_product_context or list of converible elements
        template <typename TList> void put_frame_of_reference(TList& lst) { set_of_product_contextSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "frame_of_reference"); }

        //TArrayElem[] may be product_context[] or array of convertible elements
        template <typename TArrayElem> void put_frame_of_reference(TArrayElem arr[], size_t n) { set_of_product_context lst; ArrayToList(arr, n, lst); put_frame_of_reference(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_category : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_category")
        {}

                /// <summary>
                /// Create new instace of product_category and returns object of this C++ class to interact with
                /// </summary>
        static product_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_category"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept")
        {}

                /// <summary>
                /// Create new instace of product_concept and returns object of this C++ class to interact with
                /// </summary>
        static product_concept Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept_context get_market_context();
        void put_market_context(product_concept_context inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_class
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_class : public virtual product_concept, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_class(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_class")
        {}

                /// <summary>
                /// Create new instace of product_class and returns object of this C++ class to interact with
                /// </summary>
        static product_class Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_class"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_context
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_context : public virtual application_context_element
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_context(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_context")
        {}

                /// <summary>
                /// Create new instace of product_concept_context and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_context Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_context"); assert(inst); return inst; }

        label get_market_segment_type() { label val = NULL; if (sdaiGetAttrBN(m_instance, "market_segment_type", sdaiSTRING, &val)) return val; else return NULL; }
        void put_market_segment_type(label value) { sdaiPutAttrBN(m_instance, "market_segment_type", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_association")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_association and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_association"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_concept();
        void put_concept(product_concept inst);

        product_concept_feature get_feature();
        void put_feature(product_concept_feature inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_feature_category_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_feature_category_usage : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_feature_category_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_feature_category_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_feature_category_usage")
        {}

                /// <summary>
                /// Create new instace of product_concept_feature_category_usage and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_feature_category_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_feature_category_usage"); assert(inst); return inst; }

        //TList may be set_of_category_usage_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_category_usage_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_category_usage_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_category_usage_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_concept_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_concept_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_concept_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_concept_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_concept_relationship")
        {}

                /// <summary>
                /// Create new instace of product_concept_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_concept_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_concept_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_concept get_relating_product_concept();
        void put_relating_product_concept(product_concept inst);

        product_concept get_related_product_concept();
        void put_related_product_concept(product_concept inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context_association")
        {}

                /// <summary>
                /// Create new instace of product_definition_context_association and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context_association"); assert(inst); return inst; }

        product_definition get_definition();
        void put_definition(product_definition inst);

        product_definition_context get_frame_of_reference();
        void put_frame_of_reference(product_definition_context inst);

        product_definition_context_role get_role();
        void put_role(product_definition_context_role inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_context_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_context_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_context_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_context_role")
        {}

                /// <summary>
                /// Create new instace of product_definition_context_role and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_context_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_context_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product get_of_product();
        void put_of_product(product inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation_relationship"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_formation get_relating_product_definition_formation();
        void put_relating_product_definition_formation(product_definition_formation inst);

        product_definition_formation get_related_product_definition_formation();
        void put_related_product_definition_formation(product_definition_formation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_formation_with_specified_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_formation_with_specified_source : public virtual product_definition_formation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_formation_with_specified_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_formation_with_specified_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_formation_with_specified_source")
        {}

                /// <summary>
                /// Create new instace of product_definition_formation_with_specified_source and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_formation_with_specified_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_formation_with_specified_source"); assert(inst); return inst; }

        Nullable<source> get_make_or_buy() { int v = getENUM("make_or_buy", source_); if (v >= 0) return (source) v; else return Nullable<source>(); }
        void put_make_or_buy(source value) { TextValue val = source_[(int) value]; sdaiPutAttrBN(m_instance, "make_or_buy", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_group_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_group_assignment : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_group_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_group_assignment")
        {}

                /// <summary>
                /// Create new instace of product_definition_group_assignment and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_group_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_group_assignment"); assert(inst); return inst; }

        //TList may be set_of_product_definition_or_product_definition_relationship or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_product_definition_or_product_definition_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_product_definition_or_product_definition_relationship or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_product_definition_or_product_definition_relationshipSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_occurrence_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_occurrence_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_occurrence_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_occurrence_relationship")
        {}

                /// <summary>
                /// Create new instace of product_definition_occurrence_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_occurrence_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition get_occurrence();
        void put_occurrence(product_definition inst);

        assembly_component_usage get_occurrence_usage();
        void put_occurrence_usage(assembly_component_usage inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_shape
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_shape : public virtual property_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_shape(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_shape")
        {}

                /// <summary>
                /// Create new instace of product_definition_shape and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_shape Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_shape"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_substitute
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_substitute : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_substitute(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_substitute")
        {}

                /// <summary>
                /// Create new instace of product_definition_substitute and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_substitute Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_substitute"); assert(inst); return inst; }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        product_definition_relationship get_context_relationship();
        void put_context_relationship(product_definition_relationship inst);

        product_definition get_substitute_definition();
        void put_substitute_definition(product_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_definition_with_associated_documents
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_definition_with_associated_documents : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_definition_with_associated_documents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_definition_with_associated_documents(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_definition_with_associated_documents")
        {}

                /// <summary>
                /// Create new instace of product_definition_with_associated_documents and returns object of this C++ class to interact with
                /// </summary>
        static product_definition_with_associated_documents Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_definition_with_associated_documents"); assert(inst); return inst; }

        //TList may be set_of_document or list of converible elements
        template <typename TList> void get_documentation_ids(TList& lst) { set_of_documentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "documentation_ids"); }

        //TList may be set_of_document or list of converible elements
        template <typename TList> void put_documentation_ids(TList& lst) { set_of_documentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "documentation_ids"); }

        //TArrayElem[] may be document[] or array of convertible elements
        template <typename TArrayElem> void put_documentation_ids(TArrayElem arr[], size_t n) { set_of_document lst; ArrayToList(arr, n, lst); put_documentation_ids(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_identification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_identification : public virtual configuration_item, public virtual characterized_object
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_identification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_identification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_identification")
        {}

                /// <summary>
                /// Create new instace of product_identification and returns object of this C++ class to interact with
                /// </summary>
        static product_identification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_identification"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_material_composition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_material_composition_relationship : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_material_composition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_material_composition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_material_composition_relationship")
        {}

                /// <summary>
                /// Create new instace of product_material_composition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static product_material_composition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_material_composition_relationship"); assert(inst); return inst; }

        label get_class_() { label val = NULL; if (sdaiGetAttrBN(m_instance, "class_", sdaiSTRING, &val)) return val; else return NULL; }
        void put_class_(label value) { sdaiPutAttrBN(m_instance, "class_", sdaiSTRING, value); }

        //TList may be set_of_characterized_product_composition_value or list of converible elements
        template <typename TList> void get_constituent_amount(TList& lst) { set_of_characterized_product_composition_valueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "constituent_amount"); }

        //TList may be set_of_characterized_product_composition_value or list of converible elements
        template <typename TList> void put_constituent_amount(TList& lst) { set_of_characterized_product_composition_valueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "constituent_amount"); }

        label get_composition_basis() { label val = NULL; if (sdaiGetAttrBN(m_instance, "composition_basis", sdaiSTRING, &val)) return val; else return NULL; }
        void put_composition_basis(label value) { sdaiPutAttrBN(m_instance, "composition_basis", sdaiSTRING, value); }

        text get_determination_method() { text val = NULL; if (sdaiGetAttrBN(m_instance, "determination_method", sdaiSTRING, &val)) return val; else return NULL; }
        void put_determination_method(text value) { sdaiPutAttrBN(m_instance, "determination_method", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_related_product_category
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_related_product_category : public virtual product_category
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_related_product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_related_product_category(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_related_product_category")
        {}

                /// <summary>
                /// Create new instace of product_related_product_category and returns object of this C++ class to interact with
                /// </summary>
        static product_related_product_category Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_related_product_category"); assert(inst); return inst; }

        //TList may be set_of_product or list of converible elements
        template <typename TList> void get_products(TList& lst) { set_of_productSerializer<TList> sr; sr.FromAttr(lst, m_instance, "products"); }

        //TList may be set_of_product or list of converible elements
        template <typename TList> void put_products(TList& lst) { set_of_productSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "products"); }

        //TArrayElem[] may be product[] or array of convertible elements
        template <typename TArrayElem> void put_products(TArrayElem arr[], size_t n) { set_of_product lst; ArrayToList(arr, n, lst); put_products(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of product_specification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class product_specification : public virtual product_identification, public virtual configurable_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of product_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        product_specification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "product_specification")
        {}

                /// <summary>
                /// Create new instace of product_specification and returns object of this C++ class to interact with
                /// </summary>
        static product_specification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "product_specification"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone_definition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone_definition")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone_definition"); assert(inst); return inst; }

        tolerance_zone get_zone();
        void put_zone(tolerance_zone inst);

        //TList may be set_of_shape_aspect or list of converible elements
        template <typename TList> void get_boundaries(TList& lst) { set_of_shape_aspectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "boundaries"); }

        //TList may be set_of_shape_aspect or list of converible elements
        template <typename TList> void put_boundaries(TList& lst) { set_of_shape_aspectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "boundaries"); }

        //TArrayElem[] may be shape_aspect[] or array of convertible elements
        template <typename TArrayElem> void put_boundaries(TArrayElem arr[], size_t n) { set_of_shape_aspect lst; ArrayToList(arr, n, lst); put_boundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projected_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projected_zone_definition : public virtual tolerance_zone_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projected_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projected_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projected_zone_definition")
        {}

                /// <summary>
                /// Create new instace of projected_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static projected_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projected_zone_definition"); assert(inst); return inst; }

        shape_aspect get_projection_end();
        void put_projection_end(shape_aspect inst);

        measure_with_unit get_projected_length();
        void put_projected_length(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of projection_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class projection_curve : public virtual annotation_curve_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of projection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        projection_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "projection_curve")
        {}

                /// <summary>
                /// Create new instace of projection_curve and returns object of this C++ class to interact with
                /// </summary>
        static projection_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "projection_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of promissory_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class promissory_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of promissory_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        promissory_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "promissory_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of promissory_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static promissory_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "promissory_usage_occurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of property_definition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class property_definition_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of property_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        property_definition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "property_definition_relationship")
        {}

                /// <summary>
                /// Create new instace of property_definition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static property_definition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "property_definition_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        property_definition get_relating_property_definition();
        void put_relating_property_definition(property_definition inst);

        property_definition get_related_property_definition();
        void put_related_property_definition(property_definition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of qualified_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class qualified_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of qualified_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        qualified_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "qualified_representation_item")
        {}

                /// <summary>
                /// Create new instace of qualified_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static qualified_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "qualified_representation_item"); assert(inst); return inst; }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void get_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr; sr.FromAttr(lst, m_instance, "qualifiers"); }

        //TList may be set_of_value_qualifier or list of converible elements
        template <typename TList> void put_qualifiers(TList& lst) { set_of_value_qualifierSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "qualifiers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of qualitative_uncertainty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class qualitative_uncertainty : public virtual uncertainty_qualifier
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of qualitative_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        qualitative_uncertainty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "qualitative_uncertainty")
        {}

                /// <summary>
                /// Create new instace of qualitative_uncertainty and returns object of this C++ class to interact with
                /// </summary>
        static qualitative_uncertainty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "qualitative_uncertainty"); assert(inst); return inst; }

        text get_uncertainty_value() { text val = NULL; if (sdaiGetAttrBN(m_instance, "uncertainty_value", sdaiSTRING, &val)) return val; else return NULL; }
        void put_uncertainty_value(text value) { sdaiPutAttrBN(m_instance, "uncertainty_value", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quantified_assembly_component_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quantified_assembly_component_usage : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quantified_assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quantified_assembly_component_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quantified_assembly_component_usage")
        {}

                /// <summary>
                /// Create new instace of quantified_assembly_component_usage and returns object of this C++ class to interact with
                /// </summary>
        static quantified_assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quantified_assembly_component_usage"); assert(inst); return inst; }

        measure_with_unit get_quantity();
        void put_quantity(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quasi_uniform_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quasi_uniform_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quasi_uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quasi_uniform_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quasi_uniform_curve")
        {}

                /// <summary>
                /// Create new instace of quasi_uniform_curve and returns object of this C++ class to interact with
                /// </summary>
        static quasi_uniform_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quasi_uniform_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of quasi_uniform_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class quasi_uniform_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of quasi_uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        quasi_uniform_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "quasi_uniform_surface")
        {}

                /// <summary>
                /// Create new instace of quasi_uniform_surface and returns object of this C++ class to interact with
                /// </summary>
        static quasi_uniform_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "quasi_uniform_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of radioactivity_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class radioactivity_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of radioactivity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        radioactivity_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "radioactivity_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of radioactivity_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static radioactivity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "radioactivity_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of radioactivity_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class radioactivity_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of radioactivity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        radioactivity_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "radioactivity_unit")
        {}

                /// <summary>
                /// Create new instace of radioactivity_unit and returns object of this C++ class to interact with
                /// </summary>
        static radioactivity_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "radioactivity_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of radius_dimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class radius_dimension : public virtual dimension_curve_directed_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of radius_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        radius_dimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "radius_dimension")
        {}

                /// <summary>
                /// Create new instace of radius_dimension and returns object of this C++ class to interact with
                /// </summary>
        static radius_dimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "radius_dimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of range_characteristic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class range_characteristic : public virtual representation, public virtual descriptive_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of range_characteristic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        range_characteristic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "range_characteristic")
        {}

                /// <summary>
                /// Create new instace of range_characteristic and returns object of this C++ class to interact with
                /// </summary>
        static range_characteristic Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "range_characteristic"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ratio_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ratio_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ratio_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ratio_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ratio_unit")
        {}

                /// <summary>
                /// Create new instace of ratio_unit and returns object of this C++ class to interact with
                /// </summary>
        static ratio_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ratio_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rational_b_spline_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rational_b_spline_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rational_b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rational_b_spline_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rational_b_spline_curve")
        {}

                /// <summary>
                /// Create new instace of rational_b_spline_curve and returns object of this C++ class to interact with
                /// </summary>
        static rational_b_spline_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rational_b_spline_curve"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_weights_data(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "weights_data"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_weights_data(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "weights_data"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_weights_data(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_weights_data(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rational_b_spline_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rational_b_spline_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rational_b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rational_b_spline_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rational_b_spline_surface")
        {}

                /// <summary>
                /// Create new instace of rational_b_spline_surface and returns object of this C++ class to interact with
                /// </summary>
        static rational_b_spline_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rational_b_spline_surface"); assert(inst); return inst; }

        //TList may be list_of_list_of_double or list of converible elements
        template <typename TList> void get_weights_data(TList& lst) { list_of_list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "weights_data"); }

        //TList may be list_of_list_of_double or list of converible elements
        template <typename TList> void put_weights_data(TList& lst) { list_of_list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "weights_data"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of slash_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class slash_expression : public virtual binary_numeric_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of slash_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        slash_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "slash_expression")
        {}

                /// <summary>
                /// Create new instace of slash_expression and returns object of this C++ class to interact with
                /// </summary>
        static slash_expression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "slash_expression"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rational_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rational_representation_item : public virtual representation_item, public virtual slash_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rational_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rational_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rational_representation_item")
        {}

                /// <summary>
                /// Create new instace of rational_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static rational_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rational_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of real_literal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class real_literal : public virtual literal_number
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of real_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        real_literal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "real_literal")
        {}

                /// <summary>
                /// Create new instace of real_literal and returns object of this C++ class to interact with
                /// </summary>
        static real_literal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "real_literal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of real_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class real_representation_item : public virtual representation_item, public virtual real_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of real_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        real_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "real_representation_item")
        {}

                /// <summary>
                /// Create new instace of real_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static real_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "real_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_composite_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_composite_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_composite_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_composite_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_composite_surface")
        {}

                /// <summary>
                /// Create new instace of rectangular_composite_surface and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_composite_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_composite_surface"); assert(inst); return inst; }

        //TList may be list_of_list_of_surface_patch or list of converible elements
        template <typename TList> void get_segments(TList& lst) { list_of_list_of_surface_patchSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segments"); }

        //TList may be list_of_list_of_surface_patch or list of converible elements
        template <typename TList> void put_segments(TList& lst) { list_of_list_of_surface_patchSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segments"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rectangular_trimmed_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rectangular_trimmed_surface : public virtual bounded_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rectangular_trimmed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rectangular_trimmed_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rectangular_trimmed_surface")
        {}

                /// <summary>
                /// Create new instace of rectangular_trimmed_surface and returns object of this C++ class to interact with
                /// </summary>
        static rectangular_trimmed_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rectangular_trimmed_surface"); assert(inst); return inst; }

        surface get_basis_surface();
        void put_basis_surface(surface inst);

        Nullable<parameter_value> get_u1() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "u1", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_u1(parameter_value value) { sdaiPutAttrBN(m_instance, "u1", sdaiREAL, &value); }

        Nullable<parameter_value> get_u2() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "u2", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_u2(parameter_value value) { sdaiPutAttrBN(m_instance, "u2", sdaiREAL, &value); }

        Nullable<parameter_value> get_v1() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "v1", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_v1(parameter_value value) { sdaiPutAttrBN(m_instance, "v1", sdaiREAL, &value); }

        Nullable<parameter_value> get_v2() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "v2", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_v2(parameter_value value) { sdaiPutAttrBN(m_instance, "v2", sdaiREAL, &value); }

        Nullable<bool> get_usense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "usense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_usense(bool value) { sdaiPutAttrBN(m_instance, "usense", sdaiBOOLEAN, &value); }

        Nullable<bool> get_vsense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "vsense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_vsense(bool value) { sdaiPutAttrBN(m_instance, "vsense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of referenced_modified_datum
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class referenced_modified_datum : public virtual datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of referenced_modified_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        referenced_modified_datum(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "referenced_modified_datum")
        {}

                /// <summary>
                /// Create new instace of referenced_modified_datum and returns object of this C++ class to interact with
                /// </summary>
        static referenced_modified_datum Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "referenced_modified_datum"); assert(inst); return inst; }

        Nullable<limit_condition> get_modifier() { int v = getENUM("modifier", limit_condition_); if (v >= 0) return (limit_condition) v; else return Nullable<limit_condition>(); }
        void put_modifier(limit_condition value) { TextValue val = limit_condition_[(int) value]; sdaiPutAttrBN(m_instance, "modifier", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of relative_event_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class relative_event_occurrence : public virtual event_occurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of relative_event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        relative_event_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "relative_event_occurrence")
        {}

                /// <summary>
                /// Create new instace of relative_event_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static relative_event_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "relative_event_occurrence"); assert(inst); return inst; }

        event_occurrence get_base_event();
        void put_base_event(event_occurrence inst);

        time_measure_with_unit get_offset();
        void put_offset(time_measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rep_item_group
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rep_item_group : public virtual group, public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rep_item_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rep_item_group(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rep_item_group")
        {}

                /// <summary>
                /// Create new instace of rep_item_group and returns object of this C++ class to interact with
                /// </summary>
        static rep_item_group Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rep_item_group"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of reparametrised_composite_curve_segment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class reparametrised_composite_curve_segment : public virtual composite_curve_segment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of reparametrised_composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        reparametrised_composite_curve_segment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "reparametrised_composite_curve_segment")
        {}

                /// <summary>
                /// Create new instace of reparametrised_composite_curve_segment and returns object of this C++ class to interact with
                /// </summary>
        static reparametrised_composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "reparametrised_composite_curve_segment"); assert(inst); return inst; }

        Nullable<parameter_value> get_param_length() { parameter_value val = (parameter_value) 0; if (sdaiGetAttrBN(m_instance, "param_length", sdaiREAL, &val)) return val; else return Nullable<parameter_value>(); }
        void put_param_length(parameter_value value) { sdaiPutAttrBN(m_instance, "param_length", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of representation_relationship_with_transformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class representation_relationship_with_transformation : public virtual representation_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of representation_relationship_with_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        representation_relationship_with_transformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "representation_relationship_with_transformation")
        {}

                /// <summary>
                /// Create new instace of representation_relationship_with_transformation and returns object of this C++ class to interact with
                /// </summary>
        static representation_relationship_with_transformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "representation_relationship_with_transformation"); assert(inst); return inst; }

        transformation_get get_transformation_operator() { return transformation_get(m_instance, "transformation_operator", NULL); }
        transformation_put put_transformation_operator() { return transformation_put(m_instance, "transformation_operator", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of requirement_assigned_object
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class requirement_assigned_object : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of requirement_assigned_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        requirement_assigned_object(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "requirement_assigned_object")
        {}

                /// <summary>
                /// Create new instace of requirement_assigned_object and returns object of this C++ class to interact with
                /// </summary>
        static requirement_assigned_object Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "requirement_assigned_object"); assert(inst); return inst; }

        //TList may be set_of_requirement_assigned_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_requirement_assigned_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_requirement_assigned_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_requirement_assigned_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of requirement_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class requirement_assignment : public virtual characterized_object, public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of requirement_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        requirement_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "requirement_assignment")
        {}

                /// <summary>
                /// Create new instace of requirement_assignment and returns object of this C++ class to interact with
                /// </summary>
        static requirement_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "requirement_assignment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of requirement_source
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class requirement_source : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of requirement_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        requirement_source(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "requirement_source")
        {}

                /// <summary>
                /// Create new instace of requirement_source and returns object of this C++ class to interact with
                /// </summary>
        static requirement_source Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "requirement_source"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of requirement_view_definition_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class requirement_view_definition_relationship : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of requirement_view_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        requirement_view_definition_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "requirement_view_definition_relationship")
        {}

                /// <summary>
                /// Create new instace of requirement_view_definition_relationship and returns object of this C++ class to interact with
                /// </summary>
        static requirement_view_definition_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "requirement_view_definition_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resistance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resistance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resistance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resistance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resistance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of resistance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static resistance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resistance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of resistance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class resistance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        resistance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "resistance_unit")
        {}

                /// <summary>
                /// Create new instace of resistance_unit and returns object of this C++ class to interact with
                /// </summary>
        static resistance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "resistance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolved_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolved_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolved_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolved_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolved_area_solid")
        {}

                /// <summary>
                /// Create new instace of revolved_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static revolved_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolved_area_solid"); assert(inst); return inst; }

        axis1_placement get_axis();
        void put_axis(axis1_placement inst);

        Nullable<plane_angle_measure> get_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolved_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolved_face_solid : public virtual swept_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolved_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolved_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolved_face_solid")
        {}

                /// <summary>
                /// Create new instace of revolved_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static revolved_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolved_face_solid"); assert(inst); return inst; }

        axis1_placement get_axis();
        void put_axis(axis1_placement inst);

        Nullable<plane_angle_measure> get_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of revolved_face_solid_with_trim_conditions
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class revolved_face_solid_with_trim_conditions : public virtual revolved_face_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of revolved_face_solid_with_trim_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        revolved_face_solid_with_trim_conditions(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "revolved_face_solid_with_trim_conditions")
        {}

                /// <summary>
                /// Create new instace of revolved_face_solid_with_trim_conditions and returns object of this C++ class to interact with
                /// </summary>
        static revolved_face_solid_with_trim_conditions Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "revolved_face_solid_with_trim_conditions"); assert(inst); return inst; }

        trim_condition_select_get get_first_trim_condition() { return trim_condition_select_get(m_instance, "first_trim_condition", NULL); }
        trim_condition_select_put put_first_trim_condition() { return trim_condition_select_put(m_instance, "first_trim_condition", NULL); }

        trim_condition_select_get get_second_trim_condition() { return trim_condition_select_get(m_instance, "second_trim_condition", NULL); }
        trim_condition_select_put put_second_trim_condition() { return trim_condition_select_put(m_instance, "second_trim_condition", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_angular_wedge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_angular_wedge : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_angular_wedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_angular_wedge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_angular_wedge")
        {}

                /// <summary>
                /// Create new instace of right_angular_wedge and returns object of this C++ class to interact with
                /// </summary>
        static right_angular_wedge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_angular_wedge"); assert(inst); return inst; }

        axis2_placement_3d get_position();
        void put_position(axis2_placement_3d inst);

        Nullable<positive_length_measure> get_x() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "x", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_x(positive_length_measure value) { sdaiPutAttrBN(m_instance, "x", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_y() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "y", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_y(positive_length_measure value) { sdaiPutAttrBN(m_instance, "y", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_z() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "z", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_z(positive_length_measure value) { sdaiPutAttrBN(m_instance, "z", sdaiREAL, &value); }

        Nullable<length_measure> get_ltx() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "ltx", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_ltx(length_measure value) { sdaiPutAttrBN(m_instance, "ltx", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_circular_cone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_circular_cone : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_circular_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_circular_cone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_circular_cone")
        {}

                /// <summary>
                /// Create new instace of right_circular_cone and returns object of this C++ class to interact with
                /// </summary>
        static right_circular_cone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_circular_cone"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_height() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "height", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_height(positive_length_measure value) { sdaiPutAttrBN(m_instance, "height", sdaiREAL, &value); }

        Nullable<length_measure> get_radius() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_radius(length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_semi_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_semi_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "semi_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_circular_cylinder
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_circular_cylinder : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_circular_cylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_circular_cylinder(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_circular_cylinder")
        {}

                /// <summary>
                /// Create new instace of right_circular_cylinder and returns object of this C++ class to interact with
                /// </summary>
        static right_circular_cylinder Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_circular_cylinder"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_height() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "height", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_height(positive_length_measure value) { sdaiPutAttrBN(m_instance, "height", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of right_to_usage_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class right_to_usage_association : public virtual action_method_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of right_to_usage_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        right_to_usage_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "right_to_usage_association")
        {}

                /// <summary>
                /// Create new instace of right_to_usage_association and returns object of this C++ class to interact with
                /// </summary>
        static right_to_usage_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "right_to_usage_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of role_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class role_association : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of role_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        role_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "role_association")
        {}

                /// <summary>
                /// Create new instace of role_association and returns object of this C++ class to interact with
                /// </summary>
        static role_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "role_association"); assert(inst); return inst; }

        object_role get_role();
        void put_role(object_role inst);

        role_select_get get_item_with_role() { return role_select_get(m_instance, "item_with_role", NULL); }
        role_select_put put_item_with_role() { return role_select_put(m_instance, "item_with_role", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of roundness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class roundness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of roundness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        roundness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "roundness_tolerance")
        {}

                /// <summary>
                /// Create new instace of roundness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static roundness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "roundness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of row_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class row_representation_item : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of row_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        row_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "row_representation_item")
        {}

                /// <summary>
                /// Create new instace of row_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static row_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "row_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of row_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class row_value : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of row_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        row_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "row_value")
        {}

                /// <summary>
                /// Create new instace of row_value and returns object of this C++ class to interact with
                /// </summary>
        static row_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "row_value"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of row_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class row_variable : public virtual abstract_variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of row_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        row_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "row_variable")
        {}

                /// <summary>
                /// Create new instace of row_variable and returns object of this C++ class to interact with
                /// </summary>
        static row_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "row_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_action
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_action : public virtual action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_action(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_action")
        {}

                /// <summary>
                /// Create new instace of rule_action and returns object of this C++ class to interact with
                /// </summary>
        static rule_action Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_action"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_condition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_condition : public virtual atomic_formula
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_condition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_condition")
        {}

                /// <summary>
                /// Create new instace of rule_condition and returns object of this C++ class to interact with
                /// </summary>
        static rule_condition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_condition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_set
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_set : public virtual rule_software_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_set(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_set")
        {}

                /// <summary>
                /// Create new instace of rule_set and returns object of this C++ class to interact with
                /// </summary>
        static rule_set Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_set"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_set_group
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_set_group : public virtual rule_software_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_set_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_set_group(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_set_group")
        {}

                /// <summary>
                /// Create new instace of rule_set_group and returns object of this C++ class to interact with
                /// </summary>
        static rule_set_group Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_set_group"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_superseded_assignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_superseded_assignment : public virtual action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_superseded_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_superseded_assignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_superseded_assignment")
        {}

                /// <summary>
                /// Create new instace of rule_superseded_assignment and returns object of this C++ class to interact with
                /// </summary>
        static rule_superseded_assignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_superseded_assignment"); assert(inst); return inst; }

        //TList may be set_of_rule_superseded_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_rule_superseded_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_rule_superseded_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_rule_superseded_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of rule_supersedence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class rule_supersedence : public virtual rule_action
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of rule_supersedence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        rule_supersedence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "rule_supersedence")
        {}

                /// <summary>
                /// Create new instace of rule_supersedence and returns object of this C++ class to interact with
                /// </summary>
        static rule_supersedence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "rule_supersedence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_curve_swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_curve_swept_area_solid : public virtual swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_curve_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_curve_swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_curve_swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of surface_curve_swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static surface_curve_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_curve_swept_area_solid"); assert(inst); return inst; }

        curve get_directrix();
        void put_directrix(curve inst);

        Nullable<double> get_start_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "start_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_start_param(double value) { sdaiPutAttrBN(m_instance, "start_param", sdaiREAL, &value); }

        Nullable<double> get_end_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "end_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_end_param(double value) { sdaiPutAttrBN(m_instance, "end_param", sdaiREAL, &value); }

        surface get_reference_surface();
        void put_reference_surface(surface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of ruled_surface_swept_area_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class ruled_surface_swept_area_solid : public virtual surface_curve_swept_area_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of ruled_surface_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        ruled_surface_swept_area_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "ruled_surface_swept_area_solid")
        {}

                /// <summary>
                /// Create new instace of ruled_surface_swept_area_solid and returns object of this C++ class to interact with
                /// </summary>
        static ruled_surface_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "ruled_surface_swept_area_solid"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_definition : public virtual tolerance_zone_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_definition")
        {}

                /// <summary>
                /// Create new instace of runout_zone_definition and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_definition"); assert(inst); return inst; }

        runout_zone_orientation get_orientation();
        void put_orientation(runout_zone_orientation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_orientation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_orientation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_orientation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_orientation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_orientation")
        {}

                /// <summary>
                /// Create new instace of runout_zone_orientation and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_orientation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_orientation"); assert(inst); return inst; }

        measure_with_unit get_angle();
        void put_angle(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of runout_zone_orientation_reference_direction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class runout_zone_orientation_reference_direction : public virtual runout_zone_orientation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of runout_zone_orientation_reference_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        runout_zone_orientation_reference_direction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "runout_zone_orientation_reference_direction")
        {}

                /// <summary>
                /// Create new instace of runout_zone_orientation_reference_direction and returns object of this C++ class to interact with
                /// </summary>
        static runout_zone_orientation_reference_direction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "runout_zone_orientation_reference_direction"); assert(inst); return inst; }

        shape_aspect_relationship get_orientation_defining_relationship();
        void put_orientation_defining_relationship(shape_aspect_relationship inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of satisfied_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class satisfied_requirement : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of satisfied_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        satisfied_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "satisfied_requirement")
        {}

                /// <summary>
                /// Create new instace of satisfied_requirement and returns object of this C++ class to interact with
                /// </summary>
        static satisfied_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "satisfied_requirement"); assert(inst); return inst; }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_product_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_product_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TArrayElem[] may be product_definition[] or array of convertible elements
        template <typename TArrayElem> void put_items(TArrayElem arr[], size_t n) { set_of_product_definition lst; ArrayToList(arr, n, lst); put_items(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of satisfies_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class satisfies_requirement : public virtual group
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of satisfies_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        satisfies_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "satisfies_requirement")
        {}

                /// <summary>
                /// Create new instace of satisfies_requirement and returns object of this C++ class to interact with
                /// </summary>
        static satisfies_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "satisfies_requirement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of satisfying_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class satisfying_item : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of satisfying_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        satisfying_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "satisfying_item")
        {}

                /// <summary>
                /// Create new instace of satisfying_item and returns object of this C++ class to interact with
                /// </summary>
        static satisfying_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "satisfying_item"); assert(inst); return inst; }

        //TList may be set_of_requirement_satisfaction_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_requirement_satisfaction_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_requirement_satisfaction_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_requirement_satisfaction_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of scalar_variable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class scalar_variable : public virtual abstract_variable
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of scalar_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        scalar_variable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "scalar_variable")
        {}

                /// <summary>
                /// Create new instace of scalar_variable and returns object of this C++ class to interact with
                /// </summary>
        static scalar_variable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "scalar_variable"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of scattering_parameter
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class scattering_parameter : public virtual polar_complex_number_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of scattering_parameter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        scattering_parameter(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "scattering_parameter")
        {}

                /// <summary>
                /// Create new instace of scattering_parameter and returns object of this C++ class to interact with
                /// </summary>
        static scattering_parameter Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "scattering_parameter"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sculptured_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sculptured_solid : public virtual modified_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sculptured_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sculptured_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sculptured_solid")
        {}

                /// <summary>
                /// Create new instace of sculptured_solid and returns object of this C++ class to interact with
                /// </summary>
        static sculptured_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sculptured_solid"); assert(inst); return inst; }

        generalized_surface_select_get get_sculpturing_element() { return generalized_surface_select_get(m_instance, "sculpturing_element", NULL); }
        generalized_surface_select_put put_sculpturing_element() { return generalized_surface_select_put(m_instance, "sculpturing_element", NULL); }

        Nullable<bool> get_positive_side() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "positive_side", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_positive_side(bool value) { sdaiPutAttrBN(m_instance, "positive_side", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of seam_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class seam_curve : public virtual surface_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of seam_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        seam_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "seam_curve")
        {}

                /// <summary>
                /// Create new instace of seam_curve and returns object of this C++ class to interact with
                /// </summary>
        static seam_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "seam_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification")
        {}

                /// <summary>
                /// Create new instace of security_classification and returns object of this C++ class to interact with
                /// </summary>
        static security_classification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "security_classification"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        security_classification_level get_security_level();
        void put_security_level(security_classification_level inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of security_classification_level
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class security_classification_level : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of security_classification_level
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        security_classification_level(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "security_classification_level")
        {}

                /// <summary>
                /// Create new instace of security_classification_level and returns object of this C++ class to interact with
                /// </summary>
        static security_classification_level Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "security_classification_level"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of serial_numbered_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class serial_numbered_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of serial_numbered_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        serial_numbered_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "serial_numbered_effectivity")
        {}

                /// <summary>
                /// Create new instace of serial_numbered_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static serial_numbered_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "serial_numbered_effectivity"); assert(inst); return inst; }

        identifier get_effectivity_start_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_start_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_start_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_start_id", sdaiSTRING, value); }

        identifier get_effectivity_end_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "effectivity_end_id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_effectivity_end_id(identifier value) { sdaiPutAttrBN(m_instance, "effectivity_end_id", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_associativity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_associativity : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_associativity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_associativity")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_associativity and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_associativity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_associativity"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_aspect_deriving_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_aspect_deriving_relationship : public virtual shape_aspect_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_aspect_deriving_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_aspect_deriving_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_aspect_deriving_relationship")
        {}

                /// <summary>
                /// Create new instace of shape_aspect_deriving_relationship and returns object of this C++ class to interact with
                /// </summary>
        static shape_aspect_deriving_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_aspect_deriving_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_definition_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_definition_representation : public virtual property_definition_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_definition_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_definition_representation")
        {}

                /// <summary>
                /// Create new instace of shape_definition_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_definition_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_definition_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_dimension_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_dimension_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_dimension_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_dimension_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_dimension_representation")
        {}

                /// <summary>
                /// Create new instace of shape_dimension_representation and returns object of this C++ class to interact with
                /// </summary>
        static shape_dimension_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_dimension_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shape_representation_with_parameters
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shape_representation_with_parameters : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shape_representation_with_parameters
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shape_representation_with_parameters(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shape_representation_with_parameters")
        {}

                /// <summary>
                /// Create new instace of shape_representation_with_parameters and returns object of this C++ class to interact with
                /// </summary>
        static shape_representation_with_parameters Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shape_representation_with_parameters"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shell_based_surface_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shell_based_surface_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shell_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shell_based_surface_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shell_based_surface_model")
        {}

                /// <summary>
                /// Create new instace of shell_based_surface_model and returns object of this C++ class to interact with
                /// </summary>
        static shell_based_surface_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shell_based_surface_model"); assert(inst); return inst; }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void get_sbsm_boundary(TList& lst) { set_of_shellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "sbsm_boundary"); }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void put_sbsm_boundary(TList& lst) { set_of_shellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shell_based_wireframe_model
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shell_based_wireframe_model : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shell_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shell_based_wireframe_model(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shell_based_wireframe_model")
        {}

                /// <summary>
                /// Create new instace of shell_based_wireframe_model and returns object of this C++ class to interact with
                /// </summary>
        static shell_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shell_based_wireframe_model"); assert(inst); return inst; }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void get_sbwm_boundary(TList& lst) { set_of_shellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "sbwm_boundary"); }

        //TList may be set_of_shell or list of converible elements
        template <typename TList> void put_sbwm_boundary(TList& lst) { set_of_shellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "sbwm_boundary"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of shell_based_wireframe_shape_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class shell_based_wireframe_shape_representation : public virtual shape_representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of shell_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        shell_based_wireframe_shape_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "shell_based_wireframe_shape_representation")
        {}

                /// <summary>
                /// Create new instace of shell_based_wireframe_shape_representation and returns object of this C++ class to interact with
                /// </summary>
        static shell_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "shell_based_wireframe_shape_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_unit")
        {}

                /// <summary>
                /// Create new instace of si_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_unit"); assert(inst); return inst; }

        Nullable<si_prefix> get_prefix() { int v = getENUM("prefix", si_prefix_); if (v >= 0) return (si_prefix) v; else return Nullable<si_prefix>(); }
        void put_prefix(si_prefix value) { TextValue val = si_prefix_[(int) value]; sdaiPutAttrBN(m_instance, "prefix", sdaiENUM, val); }

        Nullable<si_unit_name> get_name() { int v = getENUM("name", si_unit_name_); if (v >= 0) return (si_unit_name) v; else return Nullable<si_unit_name>(); }
        void put_name(si_unit_name value) { TextValue val = si_unit_name_[(int) value]; sdaiPutAttrBN(m_instance, "name", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_absorbed_dose_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_absorbed_dose_unit : public virtual absorbed_dose_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_absorbed_dose_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_absorbed_dose_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_absorbed_dose_unit")
        {}

                /// <summary>
                /// Create new instace of si_absorbed_dose_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_absorbed_dose_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_absorbed_dose_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_capacitance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_capacitance_unit : public virtual capacitance_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_capacitance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_capacitance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_capacitance_unit")
        {}

                /// <summary>
                /// Create new instace of si_capacitance_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_capacitance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_capacitance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_conductance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_conductance_unit : public virtual conductance_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_conductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_conductance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_conductance_unit")
        {}

                /// <summary>
                /// Create new instace of si_conductance_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_conductance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_conductance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_dose_equivalent_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_dose_equivalent_unit : public virtual dose_equivalent_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_dose_equivalent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_dose_equivalent_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_dose_equivalent_unit")
        {}

                /// <summary>
                /// Create new instace of si_dose_equivalent_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_dose_equivalent_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_dose_equivalent_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_electric_charge_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_electric_charge_unit : public virtual electric_charge_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_electric_charge_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_electric_charge_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_electric_charge_unit")
        {}

                /// <summary>
                /// Create new instace of si_electric_charge_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_electric_charge_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_electric_charge_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_electric_potential_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_electric_potential_unit : public virtual electric_potential_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_electric_potential_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_electric_potential_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_electric_potential_unit")
        {}

                /// <summary>
                /// Create new instace of si_electric_potential_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_electric_potential_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_electric_potential_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_energy_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_energy_unit : public virtual energy_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_energy_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_energy_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_energy_unit")
        {}

                /// <summary>
                /// Create new instace of si_energy_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_energy_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_energy_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_force_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_force_unit : public virtual force_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_force_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_force_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_force_unit")
        {}

                /// <summary>
                /// Create new instace of si_force_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_force_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_force_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_frequency_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_frequency_unit : public virtual frequency_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_frequency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_frequency_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_frequency_unit")
        {}

                /// <summary>
                /// Create new instace of si_frequency_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_frequency_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_frequency_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_illuminance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_illuminance_unit : public virtual illuminance_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_illuminance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_illuminance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_illuminance_unit")
        {}

                /// <summary>
                /// Create new instace of si_illuminance_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_illuminance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_illuminance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_inductance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_inductance_unit : public virtual inductance_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_inductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_inductance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_inductance_unit")
        {}

                /// <summary>
                /// Create new instace of si_inductance_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_inductance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_inductance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_magnetic_flux_density_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_magnetic_flux_density_unit : public virtual magnetic_flux_density_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_magnetic_flux_density_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_magnetic_flux_density_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_magnetic_flux_density_unit")
        {}

                /// <summary>
                /// Create new instace of si_magnetic_flux_density_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_magnetic_flux_density_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_magnetic_flux_density_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_magnetic_flux_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_magnetic_flux_unit : public virtual magnetic_flux_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_magnetic_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_magnetic_flux_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_magnetic_flux_unit")
        {}

                /// <summary>
                /// Create new instace of si_magnetic_flux_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_magnetic_flux_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_magnetic_flux_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_power_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_power_unit : public virtual power_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_power_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_power_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_power_unit")
        {}

                /// <summary>
                /// Create new instace of si_power_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_power_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_power_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_pressure_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_pressure_unit : public virtual pressure_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_pressure_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_pressure_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_pressure_unit")
        {}

                /// <summary>
                /// Create new instace of si_pressure_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_pressure_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_pressure_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_radioactivity_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_radioactivity_unit : public virtual radioactivity_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_radioactivity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_radioactivity_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_radioactivity_unit")
        {}

                /// <summary>
                /// Create new instace of si_radioactivity_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_radioactivity_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_radioactivity_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of si_resistance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class si_resistance_unit : public virtual resistance_unit, public virtual si_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of si_resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        si_resistance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "si_resistance_unit")
        {}

                /// <summary>
                /// Create new instace of si_resistance_unit and returns object of this C++ class to interact with
                /// </summary>
        static si_resistance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "si_resistance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of smeared_material_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class smeared_material_definition : public virtual zone_structural_makeup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of smeared_material_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        smeared_material_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "smeared_material_definition")
        {}

                /// <summary>
                /// Create new instace of smeared_material_definition and returns object of this C++ class to interact with
                /// </summary>
        static smeared_material_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "smeared_material_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_angle_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_angle_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_angle_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_angle_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of solid_angle_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static solid_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_angle_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_angle_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_angle_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_angle_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_angle_unit")
        {}

                /// <summary>
                /// Create new instace of solid_angle_unit and returns object of this C++ class to interact with
                /// </summary>
        static solid_angle_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_angle_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_curve_font : public virtual pre_defined_curve_font
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_curve_font")
        {}

                /// <summary>
                /// Create new instace of solid_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static solid_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_replica : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_replica")
        {}

                /// <summary>
                /// Create new instace of solid_replica and returns object of this C++ class to interact with
                /// </summary>
        static solid_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_replica"); assert(inst); return inst; }

        solid_model get_parent_solid();
        void put_parent_solid(solid_model inst);

        cartesian_transformation_operator_3d get_transformation();
        void put_transformation(cartesian_transformation_operator_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_chamfered_edges
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_chamfered_edges : public virtual edge_blended_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_chamfered_edges
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_chamfered_edges(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_chamfered_edges")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_angle_based_chamfer
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_angle_based_chamfer : public virtual solid_with_chamfered_edges
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_angle_based_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_angle_based_chamfer(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_angle_based_chamfer")
        {}

                /// <summary>
                /// Create new instace of solid_with_angle_based_chamfer and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_angle_based_chamfer Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_angle_based_chamfer"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_offset_distance() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "offset_distance", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_offset_distance(positive_length_measure value) { sdaiPutAttrBN(m_instance, "offset_distance", sdaiREAL, &value); }

        Nullable<bool> get_left_offset() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "left_offset", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_left_offset(bool value) { sdaiPutAttrBN(m_instance, "left_offset", sdaiBOOLEAN, &value); }

        Nullable<positive_plane_angle_measure> get_offset_angle() { positive_plane_angle_measure val = (positive_plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "offset_angle", sdaiREAL, &val)) return val; else return Nullable<positive_plane_angle_measure>(); }
        void put_offset_angle(positive_plane_angle_measure value) { sdaiPutAttrBN(m_instance, "offset_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_shape_element_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_shape_element_pattern : public virtual modified_solid_with_placed_configuration
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_shape_element_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_shape_element_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_shape_element_pattern")
        {}


        modified_solid_with_placed_configuration get_replicated_element();
        void put_replicated_element(modified_solid_with_placed_configuration inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_circular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_circular_pattern : public virtual solid_with_shape_element_pattern
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_circular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_circular_pattern")
        {}

                /// <summary>
                /// Create new instace of solid_with_circular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_circular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_circular_pattern"); assert(inst); return inst; }

        Nullable<positive_integer> get_replicate_count() { positive_integer val = (positive_integer) 0; if (sdaiGetAttrBN(m_instance, "replicate_count", sdaiINTEGER, &val)) return val; else return Nullable<positive_integer>(); }
        void put_replicate_count(positive_integer value) { sdaiPutAttrBN(m_instance, "replicate_count", sdaiINTEGER, &value); }

        Nullable<plane_angle_measure> get_angular_spacing() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "angular_spacing", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_angular_spacing(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "angular_spacing", sdaiREAL, &value); }

        Nullable<bool> get_radial_alignment() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "radial_alignment", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_radial_alignment(bool value) { sdaiPutAttrBN(m_instance, "radial_alignment", sdaiBOOLEAN, &value); }

        point get_reference_point();
        void put_reference_point(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_depression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_depression : public virtual modified_solid_with_placed_configuration
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_depression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_depression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_depression")
        {}


        Nullable<positive_length_measure> get_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_pocket
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_pocket : public virtual solid_with_depression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_pocket(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_pocket")
        {}


        Nullable<non_negative_length_measure> get_floor_blend_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "floor_blend_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_floor_blend_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "floor_blend_radius", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_draft_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "draft_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_draft_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "draft_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_circular_pocket
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_circular_pocket : public virtual solid_with_pocket
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_circular_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_circular_pocket(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_circular_pocket")
        {}

                /// <summary>
                /// Create new instace of solid_with_circular_pocket and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_circular_pocket Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_circular_pocket"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_pocket_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "pocket_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_pocket_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "pocket_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_protrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_protrusion : public virtual modified_solid_with_placed_configuration
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_protrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_protrusion")
        {}


        Nullable<positive_length_measure> get_protrusion_height() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_height", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_protrusion_height(positive_length_measure value) { sdaiPutAttrBN(m_instance, "protrusion_height", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_protrusion_draft_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_draft_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_protrusion_draft_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "protrusion_draft_angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_circular_protrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_circular_protrusion : public virtual solid_with_protrusion
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_circular_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_circular_protrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_circular_protrusion")
        {}

                /// <summary>
                /// Create new instace of solid_with_circular_protrusion and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_circular_protrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_circular_protrusion"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_protrusion_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_protrusion_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "protrusion_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_hole : public virtual solid_with_depression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_hole")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_stepped_round_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_stepped_round_hole : public virtual solid_with_hole
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_stepped_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_stepped_round_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_stepped_round_hole")
        {}

                /// <summary>
                /// Create new instace of solid_with_stepped_round_hole and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_stepped_round_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_stepped_round_hole"); assert(inst); return inst; }

        Nullable<positive_integer> get_segments() { positive_integer val = (positive_integer) 0; if (sdaiGetAttrBN(m_instance, "segments", sdaiINTEGER, &val)) return val; else return Nullable<positive_integer>(); }
        void put_segments(positive_integer value) { sdaiPutAttrBN(m_instance, "segments", sdaiINTEGER, &value); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void get_segment_radii(TList& lst) { list_of_positive_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segment_radii"); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void put_segment_radii(TList& lst) { list_of_positive_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segment_radii"); }

        //TArrayElem[] may be positive_length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_segment_radii(TArrayElem arr[], size_t n) { list_of_positive_length_measure lst; ArrayToList(arr, n, lst); put_segment_radii(lst); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void get_segment_depths(TList& lst) { list_of_positive_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "segment_depths"); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void put_segment_depths(TList& lst) { list_of_positive_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "segment_depths"); }

        //TArrayElem[] may be positive_length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_segment_depths(TArrayElem arr[], size_t n) { list_of_positive_length_measure lst; ArrayToList(arr, n, lst); put_segment_depths(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_conical_bottom_round_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_conical_bottom_round_hole : public virtual solid_with_stepped_round_hole
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_conical_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_conical_bottom_round_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_conical_bottom_round_hole")
        {}

                /// <summary>
                /// Create new instace of solid_with_conical_bottom_round_hole and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_conical_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_conical_bottom_round_hole"); assert(inst); return inst; }

        Nullable<positive_plane_angle_measure> get_semi_apex_angle() { positive_plane_angle_measure val = (positive_plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "semi_apex_angle", sdaiREAL, &val)) return val; else return Nullable<positive_plane_angle_measure>(); }
        void put_semi_apex_angle(positive_plane_angle_measure value) { sdaiPutAttrBN(m_instance, "semi_apex_angle", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_tip_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "tip_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_tip_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "tip_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_constant_radius_edge_blend
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_constant_radius_edge_blend : public virtual edge_blended_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_constant_radius_edge_blend
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_constant_radius_edge_blend(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_constant_radius_edge_blend")
        {}

                /// <summary>
                /// Create new instace of solid_with_constant_radius_edge_blend and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_constant_radius_edge_blend Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_constant_radius_edge_blend"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_slot : public virtual solid_with_depression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_slot")
        {}


        Nullable<positive_length_measure> get_slot_width() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "slot_width", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_slot_width(positive_length_measure value) { sdaiPutAttrBN(m_instance, "slot_width", sdaiREAL, &value); }

        //TList may be ListOfLOGICAL_VALUE or list of converible elements
        template <typename TList> void get_closed_ends(TList& lst) { ListOfLOGICAL_VALUESerializer<TList> sr; sr.FromAttr(lst, m_instance, "closed_ends"); }

        //TList may be ListOfLOGICAL_VALUE or list of converible elements
        template <typename TList> void put_closed_ends(TList& lst) { ListOfLOGICAL_VALUESerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "closed_ends"); }

        //TArrayElem[] may be LOGICAL_VALUE[] or array of convertible elements
        template <typename TArrayElem> void put_closed_ends(TArrayElem arr[], size_t n) { ListOfLOGICAL_VALUE lst; ArrayToList(arr, n, lst); put_closed_ends(lst); }

        //TList may be set_of_list_of_face_surface or list of converible elements
        template <typename TList> void get_end_exit_faces(TList& lst) { set_of_list_of_face_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "end_exit_faces"); }

        //TList may be set_of_list_of_face_surface or list of converible elements
        template <typename TList> void put_end_exit_faces(TList& lst) { set_of_list_of_face_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "end_exit_faces"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_curved_slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_curved_slot : public virtual solid_with_slot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_curved_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_curved_slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_curved_slot")
        {}

                /// <summary>
                /// Create new instace of solid_with_curved_slot and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_curved_slot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_curved_slot"); assert(inst); return inst; }

        bounded_curve get_slot_centreline();
        void put_slot_centreline(bounded_curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_double_offset_chamfer
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_double_offset_chamfer : public virtual solid_with_chamfered_edges
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_double_offset_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_double_offset_chamfer(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_double_offset_chamfer")
        {}

                /// <summary>
                /// Create new instace of solid_with_double_offset_chamfer and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_double_offset_chamfer Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_double_offset_chamfer"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_left_offset_distance() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "left_offset_distance", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_left_offset_distance(positive_length_measure value) { sdaiPutAttrBN(m_instance, "left_offset_distance", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_right_offset_distance() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "right_offset_distance", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_right_offset_distance(positive_length_measure value) { sdaiPutAttrBN(m_instance, "right_offset_distance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_flat_bottom_round_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_flat_bottom_round_hole : public virtual solid_with_stepped_round_hole
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_flat_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_flat_bottom_round_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_flat_bottom_round_hole")
        {}

                /// <summary>
                /// Create new instace of solid_with_flat_bottom_round_hole and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_flat_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_flat_bottom_round_hole"); assert(inst); return inst; }

        Nullable<non_negative_length_measure> get_fillet_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "fillet_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_fillet_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "fillet_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_general_pocket
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_general_pocket : public virtual solid_with_pocket
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_general_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_general_pocket(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_general_pocket")
        {}

                /// <summary>
                /// Create new instace of solid_with_general_pocket and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_general_pocket Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_general_pocket"); assert(inst); return inst; }

        positioned_sketch get_profile();
        void put_profile(positioned_sketch inst);

        point get_reference_point();
        void put_reference_point(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_general_protrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_general_protrusion : public virtual solid_with_protrusion
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_general_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_general_protrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_general_protrusion")
        {}

                /// <summary>
                /// Create new instace of solid_with_general_protrusion and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_general_protrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_general_protrusion"); assert(inst); return inst; }

        positioned_sketch get_profile();
        void put_profile(positioned_sketch inst);

        point get_reference_point();
        void put_reference_point(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_groove
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_groove : public virtual solid_with_depression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_groove
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_groove(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_groove")
        {}

                /// <summary>
                /// Create new instace of solid_with_groove and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_groove Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_groove"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_groove_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "groove_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_groove_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "groove_radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_groove_width() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "groove_width", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_groove_width(positive_length_measure value) { sdaiPutAttrBN(m_instance, "groove_width", sdaiREAL, &value); }

        Nullable<plane_angle_measure> get_draft_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "draft_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_draft_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "draft_angle", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_floor_fillet_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "floor_fillet_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_floor_fillet_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "floor_fillet_radius", sdaiREAL, &value); }

        Nullable<bool> get_external_groove() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "external_groove", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_external_groove(bool value) { sdaiPutAttrBN(m_instance, "external_groove", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_incomplete_circular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_incomplete_circular_pattern : public virtual solid_with_circular_pattern
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_incomplete_circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_incomplete_circular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_incomplete_circular_pattern")
        {}

                /// <summary>
                /// Create new instace of solid_with_incomplete_circular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_incomplete_circular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_incomplete_circular_pattern"); assert(inst); return inst; }

        //TList may be set_of_positive_integer or list of converible elements
        template <typename TList> void get_omitted_instances(TList& lst) { set_of_positive_integerSerializer<TList> sr; sr.FromAttr(lst, m_instance, "omitted_instances"); }

        //TList may be set_of_positive_integer or list of converible elements
        template <typename TList> void put_omitted_instances(TList& lst) { set_of_positive_integerSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "omitted_instances"); }

        //TArrayElem[] may be positive_integer[] or array of convertible elements
        template <typename TArrayElem> void put_omitted_instances(TArrayElem arr[], size_t n) { set_of_positive_integer lst; ArrayToList(arr, n, lst); put_omitted_instances(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_rectangular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_rectangular_pattern : public virtual solid_with_shape_element_pattern
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_rectangular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_rectangular_pattern")
        {}

                /// <summary>
                /// Create new instace of solid_with_rectangular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_rectangular_pattern"); assert(inst); return inst; }

        Nullable<positive_integer> get_row_count() { positive_integer val = (positive_integer) 0; if (sdaiGetAttrBN(m_instance, "row_count", sdaiINTEGER, &val)) return val; else return Nullable<positive_integer>(); }
        void put_row_count(positive_integer value) { sdaiPutAttrBN(m_instance, "row_count", sdaiINTEGER, &value); }

        Nullable<positive_integer> get_column_count() { positive_integer val = (positive_integer) 0; if (sdaiGetAttrBN(m_instance, "column_count", sdaiINTEGER, &val)) return val; else return Nullable<positive_integer>(); }
        void put_column_count(positive_integer value) { sdaiPutAttrBN(m_instance, "column_count", sdaiINTEGER, &value); }

        Nullable<length_measure> get_row_spacing() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "row_spacing", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_row_spacing(length_measure value) { sdaiPutAttrBN(m_instance, "row_spacing", sdaiREAL, &value); }

        Nullable<length_measure> get_column_spacing() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "column_spacing", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_column_spacing(length_measure value) { sdaiPutAttrBN(m_instance, "column_spacing", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_incomplete_rectangular_pattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_incomplete_rectangular_pattern : public virtual solid_with_rectangular_pattern
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_incomplete_rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_incomplete_rectangular_pattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_incomplete_rectangular_pattern")
        {}

                /// <summary>
                /// Create new instace of solid_with_incomplete_rectangular_pattern and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_incomplete_rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_incomplete_rectangular_pattern"); assert(inst); return inst; }

        //TList may be list_of_set_of_positive_integer or list of converible elements
        template <typename TList> void get_omitted_instances(TList& lst) { list_of_set_of_positive_integerSerializer<TList> sr; sr.FromAttr(lst, m_instance, "omitted_instances"); }

        //TList may be list_of_set_of_positive_integer or list of converible elements
        template <typename TList> void put_omitted_instances(TList& lst) { list_of_set_of_positive_integerSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "omitted_instances"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_rectangular_pocket
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_rectangular_pocket : public virtual solid_with_pocket
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_rectangular_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_rectangular_pocket(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_rectangular_pocket")
        {}

                /// <summary>
                /// Create new instace of solid_with_rectangular_pocket and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_rectangular_pocket Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_rectangular_pocket"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_pocket_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "pocket_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_pocket_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "pocket_length", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_pocket_width() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "pocket_width", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_pocket_width(positive_length_measure value) { sdaiPutAttrBN(m_instance, "pocket_width", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_corner_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "corner_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_corner_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "corner_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_rectangular_protrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_rectangular_protrusion : public virtual solid_with_protrusion
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_rectangular_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_rectangular_protrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_rectangular_protrusion")
        {}

                /// <summary>
                /// Create new instace of solid_with_rectangular_protrusion and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_rectangular_protrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_rectangular_protrusion"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_protrusion_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_protrusion_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "protrusion_length", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_protrusion_width() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_width", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_protrusion_width(positive_length_measure value) { sdaiPutAttrBN(m_instance, "protrusion_width", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_protrusion_corner_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "protrusion_corner_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_protrusion_corner_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "protrusion_corner_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_single_offset_chamfer
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_single_offset_chamfer : public virtual solid_with_chamfered_edges
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_single_offset_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_single_offset_chamfer(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_single_offset_chamfer")
        {}

                /// <summary>
                /// Create new instace of solid_with_single_offset_chamfer and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_single_offset_chamfer Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_single_offset_chamfer"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_offset_distance() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "offset_distance", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_offset_distance(positive_length_measure value) { sdaiPutAttrBN(m_instance, "offset_distance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_spherical_bottom_round_hole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_spherical_bottom_round_hole : public virtual solid_with_stepped_round_hole
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_spherical_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_spherical_bottom_round_hole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_spherical_bottom_round_hole")
        {}

                /// <summary>
                /// Create new instace of solid_with_spherical_bottom_round_hole and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_spherical_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_spherical_bottom_round_hole"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_sphere_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "sphere_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_sphere_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "sphere_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_stepped_round_hole_and_conical_transitions
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_stepped_round_hole_and_conical_transitions : public virtual solid_with_stepped_round_hole
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_stepped_round_hole_and_conical_transitions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_stepped_round_hole_and_conical_transitions(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_stepped_round_hole_and_conical_transitions")
        {}

                /// <summary>
                /// Create new instace of solid_with_stepped_round_hole_and_conical_transitions and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_stepped_round_hole_and_conical_transitions Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_stepped_round_hole_and_conical_transitions"); assert(inst); return inst; }

        //TList may be set_of_conical_stepped_hole_transition or list of converible elements
        template <typename TList> void get_conical_transitions(TList& lst) { set_of_conical_stepped_hole_transitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "conical_transitions"); }

        //TList may be set_of_conical_stepped_hole_transition or list of converible elements
        template <typename TList> void put_conical_transitions(TList& lst) { set_of_conical_stepped_hole_transitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "conical_transitions"); }

        //TArrayElem[] may be conical_stepped_hole_transition[] or array of convertible elements
        template <typename TArrayElem> void put_conical_transitions(TArrayElem arr[], size_t n) { set_of_conical_stepped_hole_transition lst; ArrayToList(arr, n, lst); put_conical_transitions(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_straight_slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_straight_slot : public virtual solid_with_slot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_straight_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_straight_slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_straight_slot")
        {}

                /// <summary>
                /// Create new instace of solid_with_straight_slot and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_straight_slot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_straight_slot"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_slot_length() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "slot_length", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_slot_length(positive_length_measure value) { sdaiPutAttrBN(m_instance, "slot_length", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_tee_section_slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_tee_section_slot : public virtual solid_with_slot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_tee_section_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_tee_section_slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_tee_section_slot")
        {}

                /// <summary>
                /// Create new instace of solid_with_tee_section_slot and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_tee_section_slot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_tee_section_slot"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_tee_section_width() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "tee_section_width", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_tee_section_width(positive_length_measure value) { sdaiPutAttrBN(m_instance, "tee_section_width", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_collar_depth() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "collar_depth", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_collar_depth(positive_length_measure value) { sdaiPutAttrBN(m_instance, "collar_depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_through_depression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_through_depression : public virtual solid_with_depression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_through_depression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_through_depression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_through_depression")
        {}

                /// <summary>
                /// Create new instace of solid_with_through_depression and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_through_depression Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_through_depression"); assert(inst); return inst; }

        //TList may be set_of_face_surface or list of converible elements
        template <typename TList> void get_exit_faces(TList& lst) { set_of_face_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "exit_faces"); }

        //TList may be set_of_face_surface or list of converible elements
        template <typename TList> void put_exit_faces(TList& lst) { set_of_face_surfaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "exit_faces"); }

        //TArrayElem[] may be face_surface[] or array of convertible elements
        template <typename TArrayElem> void put_exit_faces(TArrayElem arr[], size_t n) { set_of_face_surface lst; ArrayToList(arr, n, lst); put_exit_faces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_trapezoidal_section_slot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_trapezoidal_section_slot : public virtual solid_with_slot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_trapezoidal_section_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_trapezoidal_section_slot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_trapezoidal_section_slot")
        {}

                /// <summary>
                /// Create new instace of solid_with_trapezoidal_section_slot and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_trapezoidal_section_slot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_trapezoidal_section_slot"); assert(inst); return inst; }

        Nullable<plane_angle_measure> get_draft_angle() { plane_angle_measure val = (plane_angle_measure) 0; if (sdaiGetAttrBN(m_instance, "draft_angle", sdaiREAL, &val)) return val; else return Nullable<plane_angle_measure>(); }
        void put_draft_angle(plane_angle_measure value) { sdaiPutAttrBN(m_instance, "draft_angle", sdaiREAL, &value); }

        Nullable<non_negative_length_measure> get_floor_fillet_radius() { non_negative_length_measure val = (non_negative_length_measure) 0; if (sdaiGetAttrBN(m_instance, "floor_fillet_radius", sdaiREAL, &val)) return val; else return Nullable<non_negative_length_measure>(); }
        void put_floor_fillet_radius(non_negative_length_measure value) { sdaiPutAttrBN(m_instance, "floor_fillet_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of track_blended_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class track_blended_solid : public virtual edge_blended_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of track_blended_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        track_blended_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "track_blended_solid")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of solid_with_variable_radius_edge_blend
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class solid_with_variable_radius_edge_blend : public virtual edge_blended_solid, public virtual track_blended_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of solid_with_variable_radius_edge_blend
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        solid_with_variable_radius_edge_blend(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "solid_with_variable_radius_edge_blend")
        {}

                /// <summary>
                /// Create new instace of solid_with_variable_radius_edge_blend and returns object of this C++ class to interact with
                /// </summary>
        static solid_with_variable_radius_edge_blend Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "solid_with_variable_radius_edge_blend"); assert(inst); return inst; }

        //TList may be list_of_point or list of converible elements
        template <typename TList> void get_point_list(TList& lst) { list_of_pointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "point_list"); }

        //TList may be list_of_point or list of converible elements
        template <typename TList> void put_point_list(TList& lst) { list_of_pointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "point_list"); }

        //TArrayElem[] may be point[] or array of convertible elements
        template <typename TArrayElem> void put_point_list(TArrayElem arr[], size_t n) { list_of_point lst; ArrayToList(arr, n, lst); put_point_list(lst); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void get_radius_list(TList& lst) { list_of_positive_length_measureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "radius_list"); }

        //TList may be list_of_positive_length_measure or list of converible elements
        template <typename TList> void put_radius_list(TList& lst) { list_of_positive_length_measureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "radius_list"); }

        //TArrayElem[] may be positive_length_measure[] or array of convertible elements
        template <typename TArrayElem> void put_radius_list(TArrayElem arr[], size_t n) { list_of_positive_length_measure lst; ArrayToList(arr, n, lst); put_radius_list(lst); }

        //TList may be list_of_blend_radius_variation_type or list of converible elements
        template <typename TList> void get_edge_function_list(TList& lst) { list_of_blend_radius_variation_typeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "edge_function_list"); }

        //TList may be list_of_blend_radius_variation_type or list of converible elements
        template <typename TList> void put_edge_function_list(TList& lst) { list_of_blend_radius_variation_typeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "edge_function_list"); }

        //TArrayElem[] may be blend_radius_variation_type[] or array of convertible elements
        template <typename TArrayElem> void put_edge_function_list(TArrayElem arr[], size_t n) { list_of_blend_radius_variation_type lst; ArrayToList(arr, n, lst); put_edge_function_list(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of source_for_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class source_for_requirement : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of source_for_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        source_for_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "source_for_requirement")
        {}

                /// <summary>
                /// Create new instace of source_for_requirement and returns object of this C++ class to interact with
                /// </summary>
        static source_for_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "source_for_requirement"); assert(inst); return inst; }

        //TList may be set_of_requirement_source_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_requirement_source_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_requirement_source_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_requirement_source_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sourced_requirement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sourced_requirement : public virtual group_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sourced_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sourced_requirement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sourced_requirement")
        {}

                /// <summary>
                /// Create new instace of sourced_requirement and returns object of this C++ class to interact with
                /// </summary>
        static sourced_requirement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sourced_requirement"); assert(inst); return inst; }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_product_definitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_product_definition or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_product_definitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }

        //TArrayElem[] may be product_definition[] or array of convertible elements
        template <typename TArrayElem> void put_items(TArrayElem arr[], size_t n) { set_of_product_definition lst; ArrayToList(arr, n, lst); put_items(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of specification_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class specification_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of specification_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        specification_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "specification_definition")
        {}

                /// <summary>
                /// Create new instace of specification_definition and returns object of this C++ class to interact with
                /// </summary>
        static specification_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "specification_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of specified_higher_usage_occurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class specified_higher_usage_occurrence : public virtual assembly_component_usage
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of specified_higher_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        specified_higher_usage_occurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "specified_higher_usage_occurrence")
        {}

                /// <summary>
                /// Create new instace of specified_higher_usage_occurrence and returns object of this C++ class to interact with
                /// </summary>
        static specified_higher_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "specified_higher_usage_occurrence"); assert(inst); return inst; }

        assembly_component_usage get_upper_usage();
        void put_upper_usage(assembly_component_usage inst);

        next_assembly_usage_occurrence get_next_usage();
        void put_next_usage(next_assembly_usage_occurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of sphere
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class sphere : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of sphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        sphere(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "sphere")
        {}

                /// <summary>
                /// Create new instace of sphere and returns object of this C++ class to interact with
                /// </summary>
        static sphere Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "sphere"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        point get_centre();
        void put_centre(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of spherical_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class spherical_surface : public virtual elementary_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of spherical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        spherical_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "spherical_surface")
        {}

                /// <summary>
                /// Create new instace of spherical_surface and returns object of this C++ class to interact with
                /// </summary>
        static spherical_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "spherical_surface"); assert(inst); return inst; }

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of start_request
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class start_request : public virtual action_request_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of start_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        start_request(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "start_request")
        {}

                /// <summary>
                /// Create new instace of start_request and returns object of this C++ class to interact with
                /// </summary>
        static start_request Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "start_request"); assert(inst); return inst; }

        //TList may be set_of_start_request_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_start_request_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_start_request_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_start_request_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of start_work
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class start_work : public virtual action_assignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of start_work
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        start_work(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "start_work")
        {}

                /// <summary>
                /// Create new instace of start_work and returns object of this C++ class to interact with
                /// </summary>
        static start_work Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "start_work"); assert(inst); return inst; }

        //TList may be set_of_work_item or list of converible elements
        template <typename TList> void get_items(TList& lst) { set_of_work_itemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "items"); }

        //TList may be set_of_work_item or list of converible elements
        template <typename TList> void put_items(TList& lst) { set_of_work_itemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "items"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of straightness_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class straightness_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of straightness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        straightness_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "straightness_tolerance")
        {}

                /// <summary>
                /// Create new instace of straightness_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static straightness_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "straightness_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of structured_dimension_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class structured_dimension_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of structured_dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        structured_dimension_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "structured_dimension_callout")
        {}

                /// <summary>
                /// Create new instace of structured_dimension_callout and returns object of this C++ class to interact with
                /// </summary>
        static structured_dimension_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "structured_dimension_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of structured_text_composition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class structured_text_composition : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of structured_text_composition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        structured_text_composition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "structured_text_composition")
        {}

                /// <summary>
                /// Create new instace of structured_text_composition and returns object of this C++ class to interact with
                /// </summary>
        static structured_text_composition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "structured_text_composition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of structured_text_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class structured_text_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of structured_text_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        structured_text_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "structured_text_representation")
        {}

                /// <summary>
                /// Create new instace of structured_text_representation and returns object of this C++ class to interact with
                /// </summary>
        static structured_text_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "structured_text_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of subedge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class subedge : public virtual edge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of subedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        subedge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "subedge")
        {}

                /// <summary>
                /// Create new instace of subedge and returns object of this C++ class to interact with
                /// </summary>
        static subedge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "subedge"); assert(inst); return inst; }

        edge get_parent_edge();
        void put_parent_edge(edge inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of subface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class subface : public virtual face
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of subface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        subface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "subface")
        {}

                /// <summary>
                /// Create new instace of subface and returns object of this C++ class to interact with
                /// </summary>
        static subface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "subface"); assert(inst); return inst; }

        face get_parent_face();
        void put_parent_face(face inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of supplied_part_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class supplied_part_relationship : public virtual product_definition_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of supplied_part_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        supplied_part_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "supplied_part_relationship")
        {}

                /// <summary>
                /// Create new instace of supplied_part_relationship and returns object of this C++ class to interact with
                /// </summary>
        static supplied_part_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "supplied_part_relationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_condition_callout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_condition_callout : public virtual draughting_callout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_condition_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_condition_callout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_condition_callout")
        {}

                /// <summary>
                /// Create new instace of surface_condition_callout and returns object of this C++ class to interact with
                /// </summary>
        static surface_condition_callout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_condition_callout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_surface : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_surface")
        {}

                /// <summary>
                /// Create new instace of swept_surface and returns object of this C++ class to interact with
                /// </summary>
        static swept_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_surface"); assert(inst); return inst; }

        curve get_swept_curve();
        void put_swept_curve(curve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_of_linear_extrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_of_linear_extrusion : public virtual swept_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_of_linear_extrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_of_linear_extrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_of_linear_extrusion")
        {}

                /// <summary>
                /// Create new instace of surface_of_linear_extrusion and returns object of this C++ class to interact with
                /// </summary>
        static surface_of_linear_extrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_of_linear_extrusion"); assert(inst); return inst; }

        vector get_extrusion_axis();
        void put_extrusion_axis(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_of_revolution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_of_revolution : public virtual swept_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_of_revolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_of_revolution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_of_revolution")
        {}

                /// <summary>
                /// Create new instace of surface_of_revolution and returns object of this C++ class to interact with
                /// </summary>
        static surface_of_revolution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_of_revolution"); assert(inst); return inst; }

        axis1_placement get_axis_position();
        void put_axis_position(axis1_placement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_patch
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_patch : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_patch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_patch(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_patch")
        {}

                /// <summary>
                /// Create new instace of surface_patch and returns object of this C++ class to interact with
                /// </summary>
        static surface_patch Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_patch"); assert(inst); return inst; }

        bounded_surface get_parent_surface();
        void put_parent_surface(bounded_surface inst);

        Nullable<transition_code> get_u_transition() { int v = getENUM("u_transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_u_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "u_transition", sdaiENUM, val); }

        Nullable<transition_code> get_v_transition() { int v = getENUM("v_transition", transition_code_); if (v >= 0) return (transition_code) v; else return Nullable<transition_code>(); }
        void put_v_transition(transition_code value) { TextValue val = transition_code_[(int) value]; sdaiPutAttrBN(m_instance, "v_transition", sdaiENUM, val); }

        Nullable<bool> get_u_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "u_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_u_sense(bool value) { sdaiPutAttrBN(m_instance, "u_sense", sdaiBOOLEAN, &value); }

        Nullable<bool> get_v_sense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "v_sense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_v_sense(bool value) { sdaiPutAttrBN(m_instance, "v_sense", sdaiBOOLEAN, &value); }

        //TList may be bag_of_rectangular_composite_surface or list of converible elements
        template <typename TList> void get_using_surfaces(TList& lst) { bag_of_rectangular_composite_surfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "using_surfaces"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_profile_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_profile_tolerance : public virtual geometric_tolerance
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_profile_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_profile_tolerance")
        {}

                /// <summary>
                /// Create new instace of surface_profile_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static surface_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_profile_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_rendering_properties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_rendering_properties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_rendering_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_rendering_properties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_rendering_properties")
        {}

                /// <summary>
                /// Create new instace of surface_rendering_properties and returns object of this C++ class to interact with
                /// </summary>
        static surface_rendering_properties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_rendering_properties"); assert(inst); return inst; }

        colour get_rendered_colour();
        void put_rendered_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_replica
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_replica : public virtual surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_replica(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_replica")
        {}

                /// <summary>
                /// Create new instace of surface_replica and returns object of this C++ class to interact with
                /// </summary>
        static surface_replica Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_replica"); assert(inst); return inst; }

        surface get_parent_surface();
        void put_parent_surface(surface inst);

        cartesian_transformation_operator_3d get_transformation();
        void put_transformation(cartesian_transformation_operator_3d inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_side_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_side_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_side_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_side_style")
        {}

                /// <summary>
                /// Create new instace of surface_side_style and returns object of this C++ class to interact with
                /// </summary>
        static surface_side_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_side_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        //TList may be set_of_surface_style_element_select or list of converible elements
        template <typename TList> void get_styles(TList& lst) { set_of_surface_style_element_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "styles"); }

        //TList may be set_of_surface_style_element_select or list of converible elements
        template <typename TList> void put_styles(TList& lst) { set_of_surface_style_element_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_boundary
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_boundary : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_boundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_boundary(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_boundary")
        {}

                /// <summary>
                /// Create new instace of surface_style_boundary and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_boundary Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_boundary"); assert(inst); return inst; }

        curve_or_render_get get_style_of_boundary() { return curve_or_render_get(m_instance, "style_of_boundary", NULL); }
        curve_or_render_put put_style_of_boundary() { return curve_or_render_put(m_instance, "style_of_boundary", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_control_grid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_control_grid : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_control_grid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_control_grid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_control_grid")
        {}

                /// <summary>
                /// Create new instace of surface_style_control_grid and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_control_grid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_control_grid"); assert(inst); return inst; }

        curve_or_render_get get_style_of_control_grid() { return curve_or_render_get(m_instance, "style_of_control_grid", NULL); }
        curve_or_render_put put_style_of_control_grid() { return curve_or_render_put(m_instance, "style_of_control_grid", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_fill_area
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_fill_area : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_fill_area(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_fill_area")
        {}

                /// <summary>
                /// Create new instace of surface_style_fill_area and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_fill_area Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_fill_area"); assert(inst); return inst; }

        fill_area_style get_fill_area();
        void put_fill_area(fill_area_style inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_parameter_line
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_parameter_line : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_parameter_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_parameter_line(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_parameter_line")
        {}

                /// <summary>
                /// Create new instace of surface_style_parameter_line and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_parameter_line Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_parameter_line"); assert(inst); return inst; }

        curve_or_render_get get_style_of_parameter_lines() { return curve_or_render_get(m_instance, "style_of_parameter_lines", NULL); }
        curve_or_render_put put_style_of_parameter_lines() { return curve_or_render_put(m_instance, "style_of_parameter_lines", NULL); }

        //TList may be set_of_direction_count_select or list of converible elements
        template <typename TList> void get_direction_counts(TList& lst) { set_of_direction_count_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "direction_counts"); }

        //TList may be set_of_direction_count_select or list of converible elements
        template <typename TList> void put_direction_counts(TList& lst) { set_of_direction_count_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "direction_counts"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient"); assert(inst); return inst; }

        Nullable<double> get_ambient_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "ambient_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_ambient_reflectance(double value) { sdaiPutAttrBN(m_instance, "ambient_reflectance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient_diffuse : public virtual surface_style_reflectance_ambient
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient_diffuse(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient_diffuse")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient_diffuse and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient_diffuse Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse"); assert(inst); return inst; }

        Nullable<double> get_diffuse_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "diffuse_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_diffuse_reflectance(double value) { sdaiPutAttrBN(m_instance, "diffuse_reflectance", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse_specular
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_reflectance_ambient_diffuse_specular : public virtual surface_style_reflectance_ambient_diffuse
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse_specular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_reflectance_ambient_diffuse_specular")
        {}

                /// <summary>
                /// Create new instace of surface_style_reflectance_ambient_diffuse_specular and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_reflectance_ambient_diffuse_specular Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse_specular"); assert(inst); return inst; }

        Nullable<double> get_specular_reflectance() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "specular_reflectance", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_specular_reflectance(double value) { sdaiPutAttrBN(m_instance, "specular_reflectance", sdaiREAL, &value); }

        Nullable<double> get_specular_exponent() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "specular_exponent", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_specular_exponent(double value) { sdaiPutAttrBN(m_instance, "specular_exponent", sdaiREAL, &value); }

        colour get_specular_colour();
        void put_specular_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_rendering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_rendering : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_rendering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_rendering")
        {}

                /// <summary>
                /// Create new instace of surface_style_rendering and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_rendering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_rendering"); assert(inst); return inst; }

        Nullable<shading_surface_method> get_rendering_method() { int v = getENUM("rendering_method", shading_surface_method_); if (v >= 0) return (shading_surface_method) v; else return Nullable<shading_surface_method>(); }
        void put_rendering_method(shading_surface_method value) { TextValue val = shading_surface_method_[(int) value]; sdaiPutAttrBN(m_instance, "rendering_method", sdaiENUM, val); }

        colour get_surface_colour();
        void put_surface_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_rendering_with_properties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_rendering_with_properties : public virtual surface_style_rendering
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_rendering_with_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_rendering_with_properties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_rendering_with_properties")
        {}

                /// <summary>
                /// Create new instace of surface_style_rendering_with_properties and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_rendering_with_properties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_rendering_with_properties"); assert(inst); return inst; }

        //TList may be set_of_rendering_properties_select or list of converible elements
        template <typename TList> void get_properties(TList& lst) { set_of_rendering_properties_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "properties"); }

        //TList may be set_of_rendering_properties_select or list of converible elements
        template <typename TList> void put_properties(TList& lst) { set_of_rendering_properties_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "properties"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_segmentation_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_segmentation_curve : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_segmentation_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_segmentation_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_segmentation_curve")
        {}

                /// <summary>
                /// Create new instace of surface_style_segmentation_curve and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_segmentation_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_segmentation_curve"); assert(inst); return inst; }

        curve_or_render_get get_style_of_segmentation_curve() { return curve_or_render_get(m_instance, "style_of_segmentation_curve", NULL); }
        curve_or_render_put put_style_of_segmentation_curve() { return curve_or_render_put(m_instance, "style_of_segmentation_curve", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_silhouette
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_silhouette : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_silhouette
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_silhouette(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_silhouette")
        {}

                /// <summary>
                /// Create new instace of surface_style_silhouette and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_silhouette Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_silhouette"); assert(inst); return inst; }

        curve_or_render_get get_style_of_silhouette() { return curve_or_render_get(m_instance, "style_of_silhouette", NULL); }
        curve_or_render_put put_style_of_silhouette() { return curve_or_render_put(m_instance, "style_of_silhouette", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_transparent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_transparent : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_transparent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_transparent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_transparent")
        {}

                /// <summary>
                /// Create new instace of surface_style_transparent and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_transparent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_transparent"); assert(inst); return inst; }

        Nullable<double> get_transparency() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "transparency", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_transparency(double value) { sdaiPutAttrBN(m_instance, "transparency", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_style_usage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_style_usage : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_style_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_style_usage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_style_usage")
        {}

                /// <summary>
                /// Create new instace of surface_style_usage and returns object of this C++ class to interact with
                /// </summary>
        static surface_style_usage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_style_usage"); assert(inst); return inst; }

        Nullable<surface_side> get_side() { int v = getENUM("side", surface_side_); if (v >= 0) return (surface_side) v; else return Nullable<surface_side>(); }
        void put_side(surface_side value) { TextValue val = surface_side_[(int) value]; sdaiPutAttrBN(m_instance, "side", sdaiENUM, val); }

        surface_side_style_select_get get_style() { return surface_side_style_select_get(m_instance, "style", NULL); }
        surface_side_style_select_put put_style() { return surface_side_style_select_put(m_instance, "style", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surface_texture_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surface_texture_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surface_texture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surface_texture_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surface_texture_representation")
        {}

                /// <summary>
                /// Create new instace of surface_texture_representation and returns object of this C++ class to interact with
                /// </summary>
        static surface_texture_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surface_texture_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of surfaced_open_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class surfaced_open_shell : public virtual open_shell
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of surfaced_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        surfaced_open_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "surfaced_open_shell")
        {}

                /// <summary>
                /// Create new instace of surfaced_open_shell and returns object of this C++ class to interact with
                /// </summary>
        static surfaced_open_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "surfaced_open_shell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of swept_disk_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class swept_disk_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of swept_disk_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        swept_disk_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "swept_disk_solid")
        {}

                /// <summary>
                /// Create new instace of swept_disk_solid and returns object of this C++ class to interact with
                /// </summary>
        static swept_disk_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "swept_disk_solid"); assert(inst); return inst; }

        curve get_directrix();
        void put_directrix(curve inst);

        Nullable<positive_length_measure> get_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_inner_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "inner_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_inner_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "inner_radius", sdaiREAL, &value); }

        Nullable<double> get_start_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "start_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_start_param(double value) { sdaiPutAttrBN(m_instance, "start_param", sdaiREAL, &value); }

        Nullable<double> get_end_param() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "end_param", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_end_param(double value) { sdaiPutAttrBN(m_instance, "end_param", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol")
        {}

                /// <summary>
                /// Create new instace of symbol and returns object of this C++ class to interact with
                /// </summary>
        static symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_colour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_colour : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_colour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_colour")
        {}

                /// <summary>
                /// Create new instace of symbol_colour and returns object of this C++ class to interact with
                /// </summary>
        static symbol_colour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_colour"); assert(inst); return inst; }

        colour get_colour_of_symbol();
        void put_colour_of_symbol(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_representation_map
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_representation_map : public virtual representation_map
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_representation_map(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_representation_map")
        {}

                /// <summary>
                /// Create new instace of symbol_representation_map and returns object of this C++ class to interact with
                /// </summary>
        static symbol_representation_map Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_representation_map"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_style")
        {}

                /// <summary>
                /// Create new instace of symbol_style and returns object of this C++ class to interact with
                /// </summary>
        static symbol_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        symbol_style_select_get get_style_of_symbol() { return symbol_style_select_get(m_instance, "style_of_symbol", NULL); }
        symbol_style_select_put put_style_of_symbol() { return symbol_style_select_put(m_instance, "style_of_symbol", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symbol_target
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symbol_target : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symbol_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symbol_target(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symbol_target")
        {}

                /// <summary>
                /// Create new instace of symbol_target and returns object of this C++ class to interact with
                /// </summary>
        static symbol_target Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symbol_target"); assert(inst); return inst; }

        axis2_placement_get get_placement() { return axis2_placement_get(m_instance, "placement", NULL); }
        axis2_placement_put put_placement() { return axis2_placement_put(m_instance, "placement", NULL); }

        Nullable<positive_ratio_measure> get_x_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "x_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_x_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "x_scale", sdaiREAL, &value); }

        Nullable<positive_ratio_measure> get_y_scale() { positive_ratio_measure val = (positive_ratio_measure) 0; if (sdaiGetAttrBN(m_instance, "y_scale", sdaiREAL, &val)) return val; else return Nullable<positive_ratio_measure>(); }
        void put_y_scale(positive_ratio_measure value) { sdaiPutAttrBN(m_instance, "y_scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symmetric_shape_aspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symmetric_shape_aspect : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symmetric_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symmetric_shape_aspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symmetric_shape_aspect")
        {}

                /// <summary>
                /// Create new instace of symmetric_shape_aspect and returns object of this C++ class to interact with
                /// </summary>
        static symmetric_shape_aspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symmetric_shape_aspect"); assert(inst); return inst; }

        //TList may be set_of_shape_aspect_relationship or list of converible elements
        template <typename TList> void get_basis_relationships(TList& lst) { set_of_shape_aspect_relationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "basis_relationships"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of symmetry_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class symmetry_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of symmetry_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        symmetry_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "symmetry_tolerance")
        {}

                /// <summary>
                /// Create new instace of symmetry_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static symmetry_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "symmetry_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of table_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class table_representation_item : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of table_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        table_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "table_representation_item")
        {}

                /// <summary>
                /// Create new instace of table_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static table_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "table_representation_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tactile_appearance_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tactile_appearance_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tactile_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tactile_appearance_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tactile_appearance_representation")
        {}

                /// <summary>
                /// Create new instace of tactile_appearance_representation and returns object of this C++ class to interact with
                /// </summary>
        static tactile_appearance_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tactile_appearance_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tagged_text_format
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tagged_text_format : public virtual representation_context
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tagged_text_format
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tagged_text_format(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tagged_text_format")
        {}

                /// <summary>
                /// Create new instace of tagged_text_format and returns object of this C++ class to interact with
                /// </summary>
        static tagged_text_format Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tagged_text_format"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tagged_text_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tagged_text_item : public virtual descriptive_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tagged_text_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tagged_text_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tagged_text_item")
        {}

                /// <summary>
                /// Create new instace of tagged_text_item and returns object of this C++ class to interact with
                /// </summary>
        static tagged_text_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tagged_text_item"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tangent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tangent : public virtual derived_shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tangent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tangent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tangent")
        {}

                /// <summary>
                /// Create new instace of tangent and returns object of this C++ class to interact with
                /// </summary>
        static tangent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tangent"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_font : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_font")
        {}

                /// <summary>
                /// Create new instace of text_font and returns object of this C++ class to interact with
                /// </summary>
        static text_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_font"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_character_glyph_font_usage or list of converible elements
        template <typename TList> void get_glyphs(TList& lst) { set_of_character_glyph_font_usageSerializer<TList> sr; sr.FromAttr(lst, m_instance, "glyphs"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_font_family
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_font_family : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_font_family
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_font_family(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_font_family")
        {}

                /// <summary>
                /// Create new instace of text_font_family and returns object of this C++ class to interact with
                /// </summary>
        static text_font_family Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_font_family"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        //TList may be set_of_text_font_in_family or list of converible elements
        template <typename TList> void get_fonts(TList& lst) { set_of_text_font_in_familySerializer<TList> sr; sr.FromAttr(lst, m_instance, "fonts"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_font_in_family
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_font_in_family : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_font_in_family
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_font_in_family(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_font_in_family")
        {}

                /// <summary>
                /// Create new instace of text_font_in_family and returns object of this C++ class to interact with
                /// </summary>
        static text_font_in_family Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_font_in_family"); assert(inst); return inst; }

        text_font get_font();
        void put_font(text_font inst);

        text_font_family get_family();
        void put_family(text_font_family inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_associated_curves
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_associated_curves : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_associated_curves(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_associated_curves")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_associated_curves and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_associated_curves"); assert(inst); return inst; }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void get_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "associated_curves"); }

        //TList may be set_of_curve or list of converible elements
        template <typename TList> void put_associated_curves(TList& lst) { set_of_curveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "associated_curves"); }

        //TArrayElem[] may be curve[] or array of convertible elements
        template <typename TArrayElem> void put_associated_curves(TArrayElem arr[], size_t n) { set_of_curve lst; ArrayToList(arr, n, lst); put_associated_curves(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_blanking_box
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_blanking_box : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_blanking_box(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_blanking_box")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_blanking_box and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_blanking_box"); assert(inst); return inst; }

        planar_box get_blanking();
        void put_blanking(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_literal_with_extent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_literal_with_extent : public virtual text_literal
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_literal_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_literal_with_extent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_literal_with_extent")
        {}

                /// <summary>
                /// Create new instace of text_literal_with_extent and returns object of this C++ class to interact with
                /// </summary>
        static text_literal_with_extent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_literal_with_extent"); assert(inst); return inst; }

        planar_extent get_extent();
        void put_extent(planar_extent inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_string_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_string_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_string_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_string_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_string_representation")
        {}

                /// <summary>
                /// Create new instace of text_string_representation and returns object of this C++ class to interact with
                /// </summary>
        static text_string_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_string_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style")
        {}

                /// <summary>
                /// Create new instace of text_style and returns object of this C++ class to interact with
                /// </summary>
        static text_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        character_style_select_get get_character_appearance() { return character_style_select_get(m_instance, "character_appearance", NULL); }
        character_style_select_put put_character_appearance() { return character_style_select_put(m_instance, "character_appearance", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_for_defined_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_for_defined_font : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_for_defined_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_for_defined_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_for_defined_font")
        {}

                /// <summary>
                /// Create new instace of text_style_for_defined_font and returns object of this C++ class to interact with
                /// </summary>
        static text_style_for_defined_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_for_defined_font"); assert(inst); return inst; }

        colour get_text_colour();
        void put_text_colour(colour inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_box_characteristics
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_box_characteristics : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_box_characteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_box_characteristics(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_box_characteristics")
        {}

                /// <summary>
                /// Create new instace of text_style_with_box_characteristics and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_box_characteristics Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_box_characteristics"); assert(inst); return inst; }

        //TList may be set_of_box_characteristic_select or list of converible elements
        template <typename TList> void get_characteristics(TList& lst) { set_of_box_characteristic_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "characteristics"); }

        //TList may be set_of_box_characteristic_select or list of converible elements
        template <typename TList> void put_characteristics(TList& lst) { set_of_box_characteristic_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "characteristics"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_mirror
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_mirror : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_mirror
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_mirror(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_mirror")
        {}

                /// <summary>
                /// Create new instace of text_style_with_mirror and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_mirror Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_mirror"); assert(inst); return inst; }

        axis2_placement_get get_mirror_placement() { return axis2_placement_get(m_instance, "mirror_placement", NULL); }
        axis2_placement_put put_mirror_placement() { return axis2_placement_put(m_instance, "mirror_placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of text_style_with_spacing
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class text_style_with_spacing : public virtual text_style
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of text_style_with_spacing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        text_style_with_spacing(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "text_style_with_spacing")
        {}

                /// <summary>
                /// Create new instace of text_style_with_spacing and returns object of this C++ class to interact with
                /// </summary>
        static text_style_with_spacing Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "text_style_with_spacing"); assert(inst); return inst; }

        character_spacing_select_get get_character_spacing() { return character_spacing_select_get(m_instance, "character_spacing", NULL); }
        character_spacing_select_put put_character_spacing() { return character_spacing_select_put(m_instance, "character_spacing", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermal_resistance_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermal_resistance_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermal_resistance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermal_resistance_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermal_resistance_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of thermal_resistance_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermal_resistance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermal_resistance_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermal_resistance_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermal_resistance_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermal_resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermal_resistance_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermal_resistance_unit")
        {}

                /// <summary>
                /// Create new instace of thermal_resistance_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermal_resistance_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermal_resistance_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermodynamic_temperature_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermodynamic_temperature_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermodynamic_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermodynamic_temperature_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermodynamic_temperature_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of thermodynamic_temperature_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermodynamic_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermodynamic_temperature_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thermodynamic_temperature_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thermodynamic_temperature_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thermodynamic_temperature_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thermodynamic_temperature_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thermodynamic_temperature_unit")
        {}

                /// <summary>
                /// Create new instace of thermodynamic_temperature_unit and returns object of this C++ class to interact with
                /// </summary>
        static thermodynamic_temperature_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thermodynamic_temperature_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thickened_face_solid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thickened_face_solid : public virtual solid_model
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thickened_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thickened_face_solid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thickened_face_solid")
        {}

                /// <summary>
                /// Create new instace of thickened_face_solid and returns object of this C++ class to interact with
                /// </summary>
        static thickened_face_solid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thickened_face_solid"); assert(inst); return inst; }

        generalized_surface_select_get get_base_element() { return generalized_surface_select_get(m_instance, "base_element", NULL); }
        generalized_surface_select_put put_base_element() { return generalized_surface_select_put(m_instance, "base_element", NULL); }

        Nullable<length_measure> get_offset1() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "offset1", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_offset1(length_measure value) { sdaiPutAttrBN(m_instance, "offset1", sdaiREAL, &value); }

        Nullable<length_measure> get_offset2() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "offset2", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_offset2(length_measure value) { sdaiPutAttrBN(m_instance, "offset2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thickness_laminate_definition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thickness_laminate_definition : public virtual product_definition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thickness_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thickness_laminate_definition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thickness_laminate_definition")
        {}

                /// <summary>
                /// Create new instace of thickness_laminate_definition and returns object of this C++ class to interact with
                /// </summary>
        static thickness_laminate_definition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thickness_laminate_definition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of thickness_laminate_table
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class thickness_laminate_table : public virtual zone_structural_makeup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of thickness_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        thickness_laminate_table(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "thickness_laminate_table")
        {}

                /// <summary>
                /// Create new instace of thickness_laminate_table and returns object of this C++ class to interact with
                /// </summary>
        static thickness_laminate_table Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "thickness_laminate_table"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval")
        {}

                /// <summary>
                /// Create new instace of time_interval and returns object of this C++ class to interact with
                /// </summary>
        static time_interval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_based_effectivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_based_effectivity : public virtual effectivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_based_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_based_effectivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_based_effectivity")
        {}

                /// <summary>
                /// Create new instace of time_interval_based_effectivity and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_based_effectivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_based_effectivity"); assert(inst); return inst; }

        time_interval get_effectivity_period();
        void put_effectivity_period(time_interval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_relationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_relationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_relationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_relationship")
        {}

                /// <summary>
                /// Create new instace of time_interval_relationship and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_relationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_relationship"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }

        time_interval get_relating_time_interval();
        void put_relating_time_interval(time_interval inst);

        time_interval get_related_time_interval();
        void put_related_time_interval(time_interval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_role
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_role : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_role(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_role")
        {}

                /// <summary>
                /// Create new instace of time_interval_role and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_role Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_role"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_interval_with_bounds
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_interval_with_bounds : public virtual time_interval
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_interval_with_bounds
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_interval_with_bounds(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_interval_with_bounds")
        {}

                /// <summary>
                /// Create new instace of time_interval_with_bounds and returns object of this C++ class to interact with
                /// </summary>
        static time_interval_with_bounds Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_interval_with_bounds"); assert(inst); return inst; }

        date_time_or_event_occurrence_get get_primary_bound() { return date_time_or_event_occurrence_get(m_instance, "primary_bound", NULL); }
        date_time_or_event_occurrence_put put_primary_bound() { return date_time_or_event_occurrence_put(m_instance, "primary_bound", NULL); }

        date_time_or_event_occurrence_get get_secondary_bound() { return date_time_or_event_occurrence_get(m_instance, "secondary_bound", NULL); }
        date_time_or_event_occurrence_put put_secondary_bound() { return date_time_or_event_occurrence_put(m_instance, "secondary_bound", NULL); }

        time_measure_with_unit get_duration();
        void put_duration(time_measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of time_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static time_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of time_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class time_unit : public virtual named_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of time_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        time_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "time_unit")
        {}

                /// <summary>
                /// Create new instace of time_unit and returns object of this C++ class to interact with
                /// </summary>
        static time_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "time_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_value
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_value : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_value(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_value")
        {}

                /// <summary>
                /// Create new instace of tolerance_value and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_value Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_value"); assert(inst); return inst; }

        measure_with_unit get_lower_bound();
        void put_lower_bound(measure_with_unit inst);

        measure_with_unit get_upper_bound();
        void put_upper_bound(measure_with_unit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone : public virtual shape_aspect
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone"); assert(inst); return inst; }

        //TList may be set_of_geometric_tolerance or list of converible elements
        template <typename TList> void get_defining_tolerance(TList& lst) { set_of_geometric_toleranceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "defining_tolerance"); }

        //TList may be set_of_geometric_tolerance or list of converible elements
        template <typename TList> void put_defining_tolerance(TList& lst) { set_of_geometric_toleranceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "defining_tolerance"); }

        //TArrayElem[] may be geometric_tolerance[] or array of convertible elements
        template <typename TArrayElem> void put_defining_tolerance(TArrayElem arr[], size_t n) { set_of_geometric_tolerance lst; ArrayToList(arr, n, lst); put_defining_tolerance(lst); }

        tolerance_zone_form get_form();
        void put_form(tolerance_zone_form inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of tolerance_zone_form
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class tolerance_zone_form : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of tolerance_zone_form
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        tolerance_zone_form(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "tolerance_zone_form")
        {}

                /// <summary>
                /// Create new instace of tolerance_zone_form and returns object of this C++ class to interact with
                /// </summary>
        static tolerance_zone_form Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "tolerance_zone_form"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of torus
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class torus : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of torus
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        torus(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "torus")
        {}

                /// <summary>
                /// Create new instace of torus and returns object of this C++ class to interact with
                /// </summary>
        static torus Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "torus"); assert(inst); return inst; }

        axis1_placement get_position();
        void put_position(axis1_placement inst);

        Nullable<positive_length_measure> get_major_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "major_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_major_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "major_radius", sdaiREAL, &value); }

        Nullable<positive_length_measure> get_minor_radius() { positive_length_measure val = (positive_length_measure) 0; if (sdaiGetAttrBN(m_instance, "minor_radius", sdaiREAL, &val)) return val; else return Nullable<positive_length_measure>(); }
        void put_minor_radius(positive_length_measure value) { sdaiPutAttrBN(m_instance, "minor_radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of total_runout_tolerance
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class total_runout_tolerance : public virtual geometric_tolerance_with_datum_reference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of total_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        total_runout_tolerance(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "total_runout_tolerance")
        {}

                /// <summary>
                /// Create new instace of total_runout_tolerance and returns object of this C++ class to interact with
                /// </summary>
        static total_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "total_runout_tolerance"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of track_blended_solid_with_end_conditions
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class track_blended_solid_with_end_conditions : public virtual track_blended_solid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of track_blended_solid_with_end_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        track_blended_solid_with_end_conditions(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "track_blended_solid_with_end_conditions")
        {}

                /// <summary>
                /// Create new instace of track_blended_solid_with_end_conditions and returns object of this C++ class to interact with
                /// </summary>
        static track_blended_solid_with_end_conditions Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "track_blended_solid_with_end_conditions"); assert(inst); return inst; }

        //TList may be list_of_blend_end_condition_select or list of converible elements
        template <typename TList> void get_end_conditions(TList& lst) { list_of_blend_end_condition_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "end_conditions"); }

        //TList may be list_of_blend_end_condition_select or list of converible elements
        template <typename TList> void put_end_conditions(TList& lst) { list_of_blend_end_condition_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "end_conditions"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of trimmed_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class trimmed_curve : public virtual bounded_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of trimmed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        trimmed_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "trimmed_curve")
        {}

                /// <summary>
                /// Create new instace of trimmed_curve and returns object of this C++ class to interact with
                /// </summary>
        static trimmed_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "trimmed_curve"); assert(inst); return inst; }

        curve get_basis_curve();
        void put_basis_curve(curve inst);

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void get_trim_1(TList& lst) { set_of_trimming_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "trim_1"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void put_trim_1(TList& lst) { set_of_trimming_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "trim_1"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void get_trim_2(TList& lst) { set_of_trimming_selectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "trim_2"); }

        //TList may be set_of_trimming_select or list of converible elements
        template <typename TList> void put_trim_2(TList& lst) { set_of_trimming_selectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "trim_2"); }

        Nullable<bool> get_sense_agreement() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "sense_agreement", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_sense_agreement(bool value) { sdaiPutAttrBN(m_instance, "sense_agreement", sdaiBOOLEAN, &value); }

        Nullable<trimming_preference> get_master_representation() { int v = getENUM("master_representation", trimming_preference_); if (v >= 0) return (trimming_preference) v; else return Nullable<trimming_preference>(); }
        void put_master_representation(trimming_preference value) { TextValue val = trimming_preference_[(int) value]; sdaiPutAttrBN(m_instance, "master_representation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of two_direction_repeat_factor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class two_direction_repeat_factor : public virtual one_direction_repeat_factor
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of two_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        two_direction_repeat_factor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "two_direction_repeat_factor")
        {}

                /// <summary>
                /// Create new instace of two_direction_repeat_factor and returns object of this C++ class to interact with
                /// </summary>
        static two_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "two_direction_repeat_factor"); assert(inst); return inst; }

        vector get_second_repeat_factor();
        void put_second_repeat_factor(vector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of type_qualifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class type_qualifier : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of type_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        type_qualifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "type_qualifier")
        {}

                /// <summary>
                /// Create new instace of type_qualifier and returns object of this C++ class to interact with
                /// </summary>
        static type_qualifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "type_qualifier"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_generic_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_generic_expression : public virtual generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_generic_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_generic_expression")
        {}


        generic_expression get_operand();
        void put_operand(generic_expression inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of unary_numeric_expression
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class unary_numeric_expression : public virtual numeric_expression, public virtual unary_generic_expression
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of unary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        unary_numeric_expression(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "unary_numeric_expression")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_assigned_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_assigned_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_assigned_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_assigned_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_assigned_representation")
        {}

                /// <summary>
                /// Create new instace of uncertainty_assigned_representation and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_assigned_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_assigned_representation"); assert(inst); return inst; }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void get_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "uncertainty"); }

        //TList may be set_of_uncertainty_measure_with_unit or list of converible elements
        template <typename TList> void put_uncertainty(TList& lst) { set_of_uncertainty_measure_with_unitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "uncertainty"); }

        //TArrayElem[] may be uncertainty_measure_with_unit[] or array of convertible elements
        template <typename TArrayElem> void put_uncertainty(TArrayElem arr[], size_t n) { set_of_uncertainty_measure_with_unit lst; ArrayToList(arr, n, lst); put_uncertainty(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uncertainty_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uncertainty_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uncertainty_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uncertainty_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uncertainty_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of uncertainty_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static uncertainty_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uncertainty_measure_with_unit"); assert(inst); return inst; }

        label get_name() { label val = NULL; if (sdaiGetAttrBN(m_instance, "name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_name(label value) { sdaiPutAttrBN(m_instance, "name", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uniform_curve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uniform_curve : public virtual b_spline_curve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uniform_curve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uniform_curve")
        {}

                /// <summary>
                /// Create new instace of uniform_curve and returns object of this C++ class to interact with
                /// </summary>
        static uniform_curve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uniform_curve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uniform_resource_identifier
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uniform_resource_identifier : public virtual descriptive_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uniform_resource_identifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uniform_resource_identifier(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uniform_resource_identifier")
        {}

                /// <summary>
                /// Create new instace of uniform_resource_identifier and returns object of this C++ class to interact with
                /// </summary>
        static uniform_resource_identifier Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uniform_resource_identifier"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of uniform_surface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class uniform_surface : public virtual b_spline_surface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        uniform_surface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "uniform_surface")
        {}

                /// <summary>
                /// Create new instace of uniform_surface and returns object of this C++ class to interact with
                /// </summary>
        static uniform_surface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "uniform_surface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of usage_association
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class usage_association : public virtual action_method_relationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of usage_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        usage_association(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "usage_association")
        {}

                /// <summary>
                /// Create new instace of usage_association and returns object of this C++ class to interact with
                /// </summary>
        static usage_association Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "usage_association"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of user_defined_curve_font
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class user_defined_curve_font : public virtual curve_style_font, public virtual mapped_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of user_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        user_defined_curve_font(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "user_defined_curve_font")
        {}

                /// <summary>
                /// Create new instace of user_defined_curve_font and returns object of this C++ class to interact with
                /// </summary>
        static user_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "user_defined_curve_font"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of user_defined_marker
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class user_defined_marker : public virtual mapped_item, public virtual pre_defined_marker
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of user_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        user_defined_marker(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "user_defined_marker")
        {}

                /// <summary>
                /// Create new instace of user_defined_marker and returns object of this C++ class to interact with
                /// </summary>
        static user_defined_marker Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "user_defined_marker"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of user_defined_terminator_symbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class user_defined_terminator_symbol : public virtual mapped_item, public virtual pre_defined_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of user_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        user_defined_terminator_symbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "user_defined_terminator_symbol")
        {}

                /// <summary>
                /// Create new instace of user_defined_terminator_symbol and returns object of this C++ class to interact with
                /// </summary>
        static user_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "user_defined_terminator_symbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of value_range
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class value_range : public virtual compound_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of value_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        value_range(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "value_range")
        {}

                /// <summary>
                /// Create new instace of value_range and returns object of this C++ class to interact with
                /// </summary>
        static value_range Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "value_range"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of value_representation_item
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class value_representation_item : public virtual representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of value_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        value_representation_item(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "value_representation_item")
        {}

                /// <summary>
                /// Create new instace of value_representation_item and returns object of this C++ class to interact with
                /// </summary>
        static value_representation_item Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "value_representation_item"); assert(inst); return inst; }

        measure_value_get get_value_component() { return measure_value_get(m_instance, "value_component", NULL); }
        measure_value_put put_value_component() { return measure_value_put(m_instance, "value_component", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vector
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vector : public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vector(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vector")
        {}

                /// <summary>
                /// Create new instace of vector and returns object of this C++ class to interact with
                /// </summary>
        static vector Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vector"); assert(inst); return inst; }

        direction get_orientation();
        void put_orientation(direction inst);

        Nullable<length_measure> get_magnitude() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "magnitude", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_magnitude(length_measure value) { sdaiPutAttrBN(m_instance, "magnitude", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vector_style
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vector_style : public virtual curve_style, public virtual pre_defined_terminator_symbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vector_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vector_style(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vector_style")
        {}

                /// <summary>
                /// Create new instace of vector_style and returns object of this C++ class to interact with
                /// </summary>
        static vector_style Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vector_style"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of velocity_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class velocity_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of velocity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        velocity_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "velocity_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of velocity_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static velocity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "velocity_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of velocity_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class velocity_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of velocity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        velocity_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "velocity_unit")
        {}

                /// <summary>
                /// Create new instace of velocity_unit and returns object of this C++ class to interact with
                /// </summary>
        static velocity_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "velocity_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of versioned_action_request
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class versioned_action_request : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of versioned_action_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        versioned_action_request(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "versioned_action_request")
        {}

                /// <summary>
                /// Create new instace of versioned_action_request and returns object of this C++ class to interact with
                /// </summary>
        static versioned_action_request Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "versioned_action_request"); assert(inst); return inst; }

        identifier get_id() { identifier val = NULL; if (sdaiGetAttrBN(m_instance, "id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_id(identifier value) { sdaiPutAttrBN(m_instance, "id", sdaiSTRING, value); }

        label get_version() { label val = NULL; if (sdaiGetAttrBN(m_instance, "version", sdaiSTRING, &val)) return val; else return NULL; }
        void put_version(label value) { sdaiPutAttrBN(m_instance, "version", sdaiSTRING, value); }

        text get_purpose() { text val = NULL; if (sdaiGetAttrBN(m_instance, "purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_purpose(text value) { sdaiPutAttrBN(m_instance, "purpose", sdaiSTRING, value); }

        text get_description() { text val = NULL; if (sdaiGetAttrBN(m_instance, "description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_description(text value) { sdaiPutAttrBN(m_instance, "description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex")
        {}

                /// <summary>
                /// Create new instace of vertex and returns object of this C++ class to interact with
                /// </summary>
        static vertex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex_loop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex_loop : public virtual loop
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex_loop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex_loop")
        {}

                /// <summary>
                /// Create new instace of vertex_loop and returns object of this C++ class to interact with
                /// </summary>
        static vertex_loop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex_loop"); assert(inst); return inst; }

        vertex get_loop_vertex();
        void put_loop_vertex(vertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex_point
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex_point : public virtual vertex, public virtual geometric_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex_point(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex_point")
        {}

                /// <summary>
                /// Create new instace of vertex_point and returns object of this C++ class to interact with
                /// </summary>
        static vertex_point Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex_point"); assert(inst); return inst; }

        point get_vertex_geometry();
        void put_vertex_geometry(point inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of vertex_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class vertex_shell : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of vertex_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        vertex_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "vertex_shell")
        {}

                /// <summary>
                /// Create new instace of vertex_shell and returns object of this C++ class to interact with
                /// </summary>
        static vertex_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "vertex_shell"); assert(inst); return inst; }

        vertex_loop get_vertex_shell_extent();
        void put_vertex_shell_extent(vertex_loop inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of view_volume
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class view_volume : public virtual founded_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of view_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        view_volume(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "view_volume")
        {}

                /// <summary>
                /// Create new instace of view_volume and returns object of this C++ class to interact with
                /// </summary>
        static view_volume Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "view_volume"); assert(inst); return inst; }

        Nullable<central_or_parallel> get_projection_type() { int v = getENUM("projection_type", central_or_parallel_); if (v >= 0) return (central_or_parallel) v; else return Nullable<central_or_parallel>(); }
        void put_projection_type(central_or_parallel value) { TextValue val = central_or_parallel_[(int) value]; sdaiPutAttrBN(m_instance, "projection_type", sdaiENUM, val); }

        cartesian_point get_projection_point();
        void put_projection_point(cartesian_point inst);

        Nullable<length_measure> get_view_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "view_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_view_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "view_plane_distance", sdaiREAL, &value); }

        Nullable<length_measure> get_front_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "front_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_front_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "front_plane_distance", sdaiREAL, &value); }

        Nullable<bool> get_front_plane_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "front_plane_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_front_plane_clipping(bool value) { sdaiPutAttrBN(m_instance, "front_plane_clipping", sdaiBOOLEAN, &value); }

        Nullable<length_measure> get_back_plane_distance() { length_measure val = (length_measure) 0; if (sdaiGetAttrBN(m_instance, "back_plane_distance", sdaiREAL, &val)) return val; else return Nullable<length_measure>(); }
        void put_back_plane_distance(length_measure value) { sdaiPutAttrBN(m_instance, "back_plane_distance", sdaiREAL, &value); }

        Nullable<bool> get_back_plane_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "back_plane_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_back_plane_clipping(bool value) { sdaiPutAttrBN(m_instance, "back_plane_clipping", sdaiBOOLEAN, &value); }

        Nullable<bool> get_view_volume_sides_clipping() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "view_volume_sides_clipping", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_view_volume_sides_clipping(bool value) { sdaiPutAttrBN(m_instance, "view_volume_sides_clipping", sdaiBOOLEAN, &value); }

        planar_box get_view_window();
        void put_view_window(planar_box inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of visual_appearance_representation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class visual_appearance_representation : public virtual representation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of visual_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        visual_appearance_representation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "visual_appearance_representation")
        {}

                /// <summary>
                /// Create new instace of visual_appearance_representation and returns object of this C++ class to interact with
                /// </summary>
        static visual_appearance_representation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "visual_appearance_representation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of volume_measure_with_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class volume_measure_with_unit : public virtual measure_with_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of volume_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        volume_measure_with_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "volume_measure_with_unit")
        {}

                /// <summary>
                /// Create new instace of volume_measure_with_unit and returns object of this C++ class to interact with
                /// </summary>
        static volume_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "volume_measure_with_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of volume_unit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class volume_unit : public virtual derived_unit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of volume_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        volume_unit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "volume_unit")
        {}

                /// <summary>
                /// Create new instace of volume_unit and returns object of this C++ class to interact with
                /// </summary>
        static volume_unit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "volume_unit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of week_of_year_and_day_date
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class week_of_year_and_day_date : public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of week_of_year_and_day_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        week_of_year_and_day_date(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "week_of_year_and_day_date")
        {}

                /// <summary>
                /// Create new instace of week_of_year_and_day_date and returns object of this C++ class to interact with
                /// </summary>
        static week_of_year_and_day_date Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "week_of_year_and_day_date"); assert(inst); return inst; }

        Nullable<week_in_year_number> get_week_component() { week_in_year_number val = (week_in_year_number) 0; if (sdaiGetAttrBN(m_instance, "week_component", sdaiINTEGER, &val)) return val; else return Nullable<week_in_year_number>(); }
        void put_week_component(week_in_year_number value) { sdaiPutAttrBN(m_instance, "week_component", sdaiINTEGER, &value); }

        Nullable<day_in_week_number> get_day_component() { day_in_week_number val = (day_in_week_number) 0; if (sdaiGetAttrBN(m_instance, "day_component", sdaiINTEGER, &val)) return val; else return Nullable<day_in_week_number>(); }
        void put_day_component(day_in_week_number value) { sdaiPutAttrBN(m_instance, "day_component", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of wire_shell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class wire_shell : public virtual topological_representation_item
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of wire_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        wire_shell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "wire_shell")
        {}

                /// <summary>
                /// Create new instace of wire_shell and returns object of this C++ class to interact with
                /// </summary>
        static wire_shell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "wire_shell"); assert(inst); return inst; }

        //TList may be set_of_loop or list of converible elements
        template <typename TList> void get_wire_shell_extent(TList& lst) { set_of_loopSerializer<TList> sr; sr.FromAttr(lst, m_instance, "wire_shell_extent"); }

        //TList may be set_of_loop or list of converible elements
        template <typename TList> void put_wire_shell_extent(TList& lst) { set_of_loopSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "wire_shell_extent"); }

        //TArrayElem[] may be loop[] or array of convertible elements
        template <typename TArrayElem> void put_wire_shell_extent(TArrayElem arr[], size_t n) { set_of_loop lst; ArrayToList(arr, n, lst); put_wire_shell_extent(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of year_month
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class year_month : public virtual date
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of year_month
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        year_month(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "year_month")
        {}

                /// <summary>
                /// Create new instace of year_month and returns object of this C++ class to interact with
                /// </summary>
        static year_month Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "year_month"); assert(inst); return inst; }

        Nullable<month_in_year_number> get_month_component() { month_in_year_number val = (month_in_year_number) 0; if (sdaiGetAttrBN(m_instance, "month_component", sdaiINTEGER, &val)) return val; else return Nullable<month_in_year_number>(); }
        void put_month_component(month_in_year_number value) { sdaiPutAttrBN(m_instance, "month_component", sdaiINTEGER, &value); }
    };

    inline alternate_product_relationship certification_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void certification_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline make_from_usage_option certification_item::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline void certification_item::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline product_definition_formation certification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void certification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship certification_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void certification_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline alternate_product_relationship certification_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline make_from_usage_option certification_item_get::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline product_definition_formation certification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship certification_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void certification_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void certification_item_put::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline void certification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void certification_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product classified_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void classified_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition classified_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void classified_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation classified_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void classified_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product classified_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition classified_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation classified_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void classified_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void classified_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void classified_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline action classification_item::get_action() { return getEntityInstance("ACTION"); }
    inline void classification_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive classification_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void classification_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method classification_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void classification_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property classification_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void classification_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_relationship classification_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void classification_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution classification_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void classification_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline action_request_status classification_item::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline void classification_item::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline address classification_item::get_address() { return getEntityInstance("ADDRESS"); }
    inline void classification_item::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline alternate_product_relationship classification_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void classification_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment classification_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void classification_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_action_request_assignment classification_item::get_applied_action_request_assignment() { return getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT"); }
    inline void classification_item::put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
    inline applied_approval_assignment classification_item::get_applied_approval_assignment() { return getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT"); }
    inline void classification_item::put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
    inline applied_certification_assignment classification_item::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline applied_contract_assignment classification_item::get_applied_contract_assignment() { return getEntityInstance("APPLIED_CONTRACT_ASSIGNMENT"); }
    inline void classification_item::put_applied_contract_assignment(applied_contract_assignment inst) { putEntityInstance("APPLIED_CONTRACT_ASSIGNMENT", inst); }
    inline applied_date_and_time_assignment classification_item::get_applied_date_and_time_assignment() { return getEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT"); }
    inline void classification_item::put_applied_date_and_time_assignment(applied_date_and_time_assignment inst) { putEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT", inst); }
    inline applied_date_assignment classification_item::get_applied_date_assignment() { return getEntityInstance("APPLIED_DATE_ASSIGNMENT"); }
    inline void classification_item::put_applied_date_assignment(applied_date_assignment inst) { putEntityInstance("APPLIED_DATE_ASSIGNMENT", inst); }
    inline applied_document_reference classification_item::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline void classification_item::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline applied_document_usage_constraint_assignment classification_item::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline void classification_item::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline applied_effectivity_assignment classification_item::get_applied_effectivity_assignment() { return getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT"); }
    inline void classification_item::put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline applied_event_occurrence_assignment classification_item::get_applied_event_occurrence_assignment() { return getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT"); }
    inline void classification_item::put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
    inline applied_external_identification_assignment classification_item::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment classification_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment classification_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_organizational_project_assignment classification_item::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline void classification_item::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment classification_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment classification_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void classification_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval classification_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void classification_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_person_organization classification_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void classification_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline approval_relationship classification_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void classification_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline approval_status classification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void classification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute classification_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void classification_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline calendar_date classification_item::get_calendar_date() { return getEntityInstance("CALENDAR_DATE"); }
    inline void classification_item::put_calendar_date(calendar_date inst) { putEntityInstance("CALENDAR_DATE", inst); }
    inline certification classification_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void classification_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline characterized_class classification_item::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline void classification_item::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline characterized_object classification_item::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void classification_item::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline class_ classification_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void classification_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline configuration_item classification_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void classification_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline context_dependent_unit classification_item::get_context_dependent_unit() { return getEntityInstance("CONTEXT_DEPENDENT_UNIT"); }
    inline void classification_item::put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
    inline contract classification_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void classification_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline conversion_based_unit classification_item::get_conversion_based_unit() { return getEntityInstance("CONVERSION_BASED_UNIT"); }
    inline void classification_item::put_conversion_based_unit(conversion_based_unit inst) { putEntityInstance("CONVERSION_BASED_UNIT", inst); }
    inline date_and_time classification_item::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline void classification_item::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline date_and_time_assignment classification_item::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline void classification_item::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline date_assignment classification_item::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline void classification_item::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline derived_unit classification_item::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void classification_item::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline descriptive_representation_item classification_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void classification_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline directed_action classification_item::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline void classification_item::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline document_file classification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void classification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_relationship classification_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void classification_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline effectivity classification_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void classification_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline event_occurrence classification_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void classification_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action classification_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void classification_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property classification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void classification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship classification_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void classification_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline group classification_item::get_group() { return getEntityInstance("GROUP"); }
    inline void classification_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline identification_assignment classification_item::get_identification_assignment() { return getEntityInstance("IDENTIFICATION_ASSIGNMENT"); }
    inline void classification_item::put_identification_assignment(identification_assignment inst) { putEntityInstance("IDENTIFICATION_ASSIGNMENT", inst); }
    inline information_right classification_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void classification_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right classification_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void classification_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline language classification_item::get_language() { return getEntityInstance("LANGUAGE"); }
    inline void classification_item::put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
    inline measure_representation_item classification_item::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline void classification_item::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline measure_with_unit classification_item::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void classification_item::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline multi_language_attribute_assignment classification_item::get_multi_language_attribute_assignment() { return getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT"); }
    inline void classification_item::put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
    inline named_unit classification_item::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void classification_item::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline organization classification_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void classification_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline organization_relationship classification_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void classification_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_address classification_item::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline void classification_item::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline organizational_project classification_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void classification_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project_relationship classification_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void classification_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline person classification_item::get_person() { return getEntityInstance("PERSON"); }
    inline void classification_item::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline person_and_organization_address classification_item::get_person_and_organization_address() { return getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS"); }
    inline void classification_item::put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
    inline product classification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void classification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept classification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void classification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_definition classification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void classification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_context classification_item::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline void classification_item::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline product_definition_formation classification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void classification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship classification_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void classification_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship classification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void classification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition classification_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void classification_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_representation classification_item::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void classification_item::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline representation classification_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void classification_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_context classification_item::get_representation_context() { return getEntityInstance("REPRESENTATION_CONTEXT"); }
    inline void classification_item::put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
    inline representation_item classification_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void classification_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline security_classification classification_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void classification_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline uncertainty_measure_with_unit classification_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void classification_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline usage_association classification_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void classification_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline versioned_action_request classification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void classification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action classification_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive classification_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method classification_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property classification_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_relationship classification_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution classification_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline action_request_status classification_item_get::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline address classification_item_get::get_address() { return getEntityInstance("ADDRESS"); }
    inline alternate_product_relationship classification_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment classification_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_action_request_assignment classification_item_get::get_applied_action_request_assignment() { return getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT"); }
    inline applied_approval_assignment classification_item_get::get_applied_approval_assignment() { return getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT"); }
    inline applied_certification_assignment classification_item_get::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline applied_contract_assignment classification_item_get::get_applied_contract_assignment() { return getEntityInstance("APPLIED_CONTRACT_ASSIGNMENT"); }
    inline applied_date_and_time_assignment classification_item_get::get_applied_date_and_time_assignment() { return getEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT"); }
    inline applied_date_assignment classification_item_get::get_applied_date_assignment() { return getEntityInstance("APPLIED_DATE_ASSIGNMENT"); }
    inline applied_document_reference classification_item_get::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline applied_document_usage_constraint_assignment classification_item_get::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline applied_effectivity_assignment classification_item_get::get_applied_effectivity_assignment() { return getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT"); }
    inline applied_event_occurrence_assignment classification_item_get::get_applied_event_occurrence_assignment() { return getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT"); }
    inline applied_external_identification_assignment classification_item_get::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment classification_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment classification_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_organizational_project_assignment classification_item_get::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment classification_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline applied_security_classification_assignment classification_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval classification_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_person_organization classification_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline approval_relationship classification_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline approval_status classification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute classification_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline calendar_date classification_item_get::get_calendar_date() { return getEntityInstance("CALENDAR_DATE"); }
    inline certification classification_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline characterized_class classification_item_get::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline characterized_object classification_item_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline class_ classification_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline configuration_item classification_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline context_dependent_unit classification_item_get::get_context_dependent_unit() { return getEntityInstance("CONTEXT_DEPENDENT_UNIT"); }
    inline contract classification_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline conversion_based_unit classification_item_get::get_conversion_based_unit() { return getEntityInstance("CONVERSION_BASED_UNIT"); }
    inline date_and_time classification_item_get::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline date_and_time_assignment classification_item_get::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline date_assignment classification_item_get::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline derived_unit classification_item_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline descriptive_representation_item classification_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline directed_action classification_item_get::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline document_file classification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_relationship classification_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline effectivity classification_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline event_occurrence classification_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action classification_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property classification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship classification_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline group classification_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline identification_assignment classification_item_get::get_identification_assignment() { return getEntityInstance("IDENTIFICATION_ASSIGNMENT"); }
    inline information_right classification_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right classification_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline language classification_item_get::get_language() { return getEntityInstance("LANGUAGE"); }
    inline measure_representation_item classification_item_get::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline measure_with_unit classification_item_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline multi_language_attribute_assignment classification_item_get::get_multi_language_attribute_assignment() { return getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT"); }
    inline named_unit classification_item_get::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline organization classification_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline organization_relationship classification_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_address classification_item_get::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline organizational_project classification_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline organizational_project_relationship classification_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline person classification_item_get::get_person() { return getEntityInstance("PERSON"); }
    inline person_and_organization_address classification_item_get::get_person_and_organization_address() { return getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS"); }
    inline product classification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept classification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_definition classification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_context classification_item_get::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline product_definition_formation classification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship classification_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship classification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition classification_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_representation classification_item_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline representation classification_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_context classification_item_get::get_representation_context() { return getEntityInstance("REPRESENTATION_CONTEXT"); }
    inline representation_item classification_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline security_classification classification_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline uncertainty_measure_with_unit classification_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline usage_association classification_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline versioned_action_request classification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void classification_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void classification_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void classification_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void classification_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void classification_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void classification_item_put::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline void classification_item_put::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline void classification_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void classification_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_contract_assignment(applied_contract_assignment inst) { putEntityInstance("APPLIED_CONTRACT_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_date_and_time_assignment(applied_date_and_time_assignment inst) { putEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_date_assignment(applied_date_assignment inst) { putEntityInstance("APPLIED_DATE_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline void classification_item_put::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void classification_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void classification_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void classification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void classification_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void classification_item_put::put_calendar_date(calendar_date inst) { putEntityInstance("CALENDAR_DATE", inst); }
    inline void classification_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void classification_item_put::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline void classification_item_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline void classification_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void classification_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void classification_item_put::put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
    inline void classification_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void classification_item_put::put_conversion_based_unit(conversion_based_unit inst) { putEntityInstance("CONVERSION_BASED_UNIT", inst); }
    inline void classification_item_put::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline void classification_item_put::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline void classification_item_put::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline void classification_item_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void classification_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void classification_item_put::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline void classification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void classification_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void classification_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void classification_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void classification_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void classification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void classification_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void classification_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void classification_item_put::put_identification_assignment(identification_assignment inst) { putEntityInstance("IDENTIFICATION_ASSIGNMENT", inst); }
    inline void classification_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void classification_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void classification_item_put::put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
    inline void classification_item_put::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline void classification_item_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline void classification_item_put::put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
    inline void classification_item_put::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline void classification_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void classification_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline void classification_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void classification_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void classification_item_put::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline void classification_item_put::put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
    inline void classification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void classification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void classification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void classification_item_put::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline void classification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void classification_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void classification_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void classification_item_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline void classification_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void classification_item_put::put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
    inline void classification_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void classification_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void classification_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void classification_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline void classification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action_method document_reference_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void document_reference_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline applied_external_identification_assignment document_reference_item::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline void document_reference_item::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline assembly_component_usage document_reference_item::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void document_reference_item::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline characterized_class document_reference_item::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline void document_reference_item::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline characterized_object document_reference_item::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void document_reference_item::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline configuration_item document_reference_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void document_reference_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline descriptive_representation_item document_reference_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void document_reference_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline dimensional_size document_reference_item::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void document_reference_item::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline executed_action document_reference_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void document_reference_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline externally_defined_dimension_definition document_reference_item::get_externally_defined_dimension_definition() { return getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION"); }
    inline void document_reference_item::put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }
    inline externally_defined_item document_reference_item::get_externally_defined_item() { return getEntityInstance("EXTERNALLY_DEFINED_ITEM"); }
    inline void document_reference_item::put_externally_defined_item(externally_defined_item inst) { putEntityInstance("EXTERNALLY_DEFINED_ITEM", inst); }
    inline group document_reference_item::get_group() { return getEntityInstance("GROUP"); }
    inline void document_reference_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship document_reference_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void document_reference_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline information_right document_reference_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void document_reference_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right document_reference_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void document_reference_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline material_designation document_reference_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void document_reference_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline measure_representation_item document_reference_item::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline void document_reference_item::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline product document_reference_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void document_reference_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_category document_reference_item::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline void document_reference_item::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline product_definition document_reference_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void document_reference_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation document_reference_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void document_reference_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship document_reference_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void document_reference_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship document_reference_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void document_reference_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition document_reference_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void document_reference_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline representation document_reference_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void document_reference_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_item document_reference_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void document_reference_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline rule_set document_reference_item::get_rule_set() { return getEntityInstance("RULE_SET"); }
    inline void document_reference_item::put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
    inline shape_aspect document_reference_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void document_reference_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship document_reference_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void document_reference_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline usage_association document_reference_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void document_reference_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline versioned_action_request document_reference_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void document_reference_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action_method document_reference_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline applied_external_identification_assignment document_reference_item_get::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline assembly_component_usage document_reference_item_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline characterized_class document_reference_item_get::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline characterized_object document_reference_item_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline configuration_item document_reference_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline descriptive_representation_item document_reference_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline dimensional_size document_reference_item_get::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline executed_action document_reference_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline externally_defined_dimension_definition document_reference_item_get::get_externally_defined_dimension_definition() { return getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION"); }
    inline externally_defined_item document_reference_item_get::get_externally_defined_item() { return getEntityInstance("EXTERNALLY_DEFINED_ITEM"); }
    inline group document_reference_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship document_reference_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline information_right document_reference_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right document_reference_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline material_designation document_reference_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline measure_representation_item document_reference_item_get::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline product document_reference_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_category document_reference_item_get::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline product_definition document_reference_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation document_reference_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship document_reference_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship document_reference_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition document_reference_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline representation document_reference_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_item document_reference_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline rule_set document_reference_item_get::get_rule_set() { return getEntityInstance("RULE_SET"); }
    inline shape_aspect document_reference_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship document_reference_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline usage_association document_reference_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline versioned_action_request document_reference_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void document_reference_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void document_reference_item_put::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void document_reference_item_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void document_reference_item_put::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline void document_reference_item_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline void document_reference_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void document_reference_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void document_reference_item_put::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline void document_reference_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void document_reference_item_put::put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }
    inline void document_reference_item_put::put_externally_defined_item(externally_defined_item inst) { putEntityInstance("EXTERNALLY_DEFINED_ITEM", inst); }
    inline void document_reference_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void document_reference_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void document_reference_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void document_reference_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void document_reference_item_put::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline void document_reference_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void document_reference_item_put::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline void document_reference_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void document_reference_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void document_reference_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void document_reference_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void document_reference_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void document_reference_item_put::put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
    inline void document_reference_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void document_reference_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void document_reference_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline void document_reference_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline approval_status identification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void identification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline characterized_class identification_item::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline void identification_item::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline class_ identification_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void identification_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline configuration_item identification_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void identification_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract identification_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void identification_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline dimensional_size identification_item::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void identification_item::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline document_file identification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void identification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline general_property identification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void identification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline group identification_item::get_group() { return getEntityInstance("GROUP"); }
    inline void identification_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship identification_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void identification_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline information_right identification_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void identification_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right identification_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void identification_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline material_designation identification_item::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline void identification_item::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline organization identification_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void identification_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline person_and_organization identification_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void identification_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product identification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void identification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_category identification_item::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline void identification_item::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline product_class identification_item::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void identification_item::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline product_concept identification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void identification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature identification_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void identification_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_definition identification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void identification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation identification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void identification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_identification identification_item::get_product_identification() { return getEntityInstance("PRODUCT_IDENTIFICATION"); }
    inline void identification_item::put_product_identification(product_identification inst) { putEntityInstance("PRODUCT_IDENTIFICATION", inst); }
    inline representation identification_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void identification_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline rule_set identification_item::get_rule_set() { return getEntityInstance("RULE_SET"); }
    inline void identification_item::put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
    inline security_classification identification_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void identification_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_level identification_item::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline void identification_item::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline shape_aspect_relationship identification_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void identification_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_representation identification_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void identification_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline usage_association identification_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void identification_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline approval_status identification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline characterized_class identification_item_get::get_characterized_class() { return getEntityInstance("CHARACTERIZED_CLASS"); }
    inline class_ identification_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline configuration_item identification_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract identification_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline dimensional_size identification_item_get::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline document_file identification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline general_property identification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline group identification_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship identification_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline information_right identification_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right identification_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline material_designation identification_item_get::get_material_designation() { return getEntityInstance("MATERIAL_DESIGNATION"); }
    inline organization identification_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline person_and_organization identification_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product identification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_category identification_item_get::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline product_class identification_item_get::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline product_concept identification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature identification_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_definition identification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation identification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_identification identification_item_get::get_product_identification() { return getEntityInstance("PRODUCT_IDENTIFICATION"); }
    inline representation identification_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline rule_set identification_item_get::get_rule_set() { return getEntityInstance("RULE_SET"); }
    inline security_classification identification_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_level identification_item_get::get_security_classification_level() { return getEntityInstance("SECURITY_CLASSIFICATION_LEVEL"); }
    inline shape_aspect_relationship identification_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline shape_representation identification_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline usage_association identification_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void identification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void identification_item_put::put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
    inline void identification_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void identification_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void identification_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void identification_item_put::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline void identification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void identification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void identification_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void identification_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void identification_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void identification_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void identification_item_put::put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
    inline void identification_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void identification_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void identification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void identification_item_put::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline void identification_item_put::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline void identification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void identification_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void identification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void identification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void identification_item_put::put_product_identification(product_identification inst) { putEntityInstance("PRODUCT_IDENTIFICATION", inst); }
    inline void identification_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void identification_item_put::put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
    inline void identification_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void identification_item_put::put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
    inline void identification_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void identification_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void identification_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline configuration_item requirement_assigned_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void requirement_assigned_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline descriptive_representation_item requirement_assigned_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void requirement_assigned_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline product requirement_assigned_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void requirement_assigned_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_class requirement_assigned_item::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void requirement_assigned_item::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline product_definition requirement_assigned_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void requirement_assigned_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation requirement_assigned_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void requirement_assigned_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship requirement_assigned_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void requirement_assigned_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline representation requirement_assigned_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void requirement_assigned_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline shape_aspect requirement_assigned_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void requirement_assigned_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline configuration_item requirement_assigned_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline descriptive_representation_item requirement_assigned_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline product requirement_assigned_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_class requirement_assigned_item_get::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline product_definition requirement_assigned_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation requirement_assigned_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship requirement_assigned_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline representation requirement_assigned_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline shape_aspect requirement_assigned_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void requirement_assigned_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void requirement_assigned_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void requirement_assigned_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void requirement_assigned_item_put::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline void requirement_assigned_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void requirement_assigned_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void requirement_assigned_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void requirement_assigned_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void requirement_assigned_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline action_directive action_items::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void action_items::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline characterized_object action_items::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void action_items::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline configuration_effectivity action_items::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void action_items::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline organization action_items::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void action_items::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline person_and_organization action_items::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void action_items::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product_definition action_items::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void action_items::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation action_items::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_items::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship action_items::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void action_items::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship action_items::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void action_items::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline action_directive action_items_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline characterized_object action_items_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline configuration_effectivity action_items_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline organization action_items_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline person_and_organization action_items_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product_definition action_items_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation action_items_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship action_items_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship action_items_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void action_items_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void action_items_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline void action_items_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void action_items_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void action_items_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void action_items_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void action_items_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void action_items_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void action_items_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product action_method_items::get_product() { return getEntityInstance("PRODUCT"); }
    inline void action_method_items::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition_formation action_method_items::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_method_items::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product action_method_items_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition_formation action_method_items_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_method_items_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void action_method_items_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition action_request_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void action_request_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation action_request_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void action_request_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship action_request_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void action_request_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship action_request_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void action_request_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition action_request_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void action_request_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline versioned_action_request action_request_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void action_request_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline product_definition action_request_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation action_request_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship action_request_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship action_request_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition action_request_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline versioned_action_request action_request_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void action_request_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void action_request_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void action_request_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void action_request_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void action_request_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void action_request_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline direction angle_direction_reference_select::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void angle_direction_reference_select::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline curve angle_direction_reference_select::get_curve() { return getEntityInstance("CURVE"); }
    inline void angle_direction_reference_select::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline point_path angle_direction_reference_select::get_point_path() { return getEntityInstance("POINT_PATH"); }
    inline void angle_direction_reference_select::put_point_path(point_path inst) { putEntityInstance("POINT_PATH", inst); }
    inline direction angle_direction_reference_select_get::get_direction() { return getEntityInstance("DIRECTION"); }
    inline curve angle_direction_reference_select_get::get_curve() { return getEntityInstance("CURVE"); }
    inline point_path angle_direction_reference_select_get::get_point_path() { return getEntityInstance("POINT_PATH"); }
    inline void angle_direction_reference_select_put::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline void angle_direction_reference_select_put::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline void angle_direction_reference_select_put::put_point_path(point_path inst) { putEntityInstance("POINT_PATH", inst); }
    inline axis2_placement_3d angle_direction_reference_with_a2p3d_select::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void angle_direction_reference_with_a2p3d_select::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline axis2_placement_3d angle_direction_reference_with_a2p3d_select_get::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void angle_direction_reference_with_a2p3d_select_put::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline draughting_callout annotation_plane_element::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void annotation_plane_element::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline styled_item annotation_plane_element::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void annotation_plane_element::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline draughting_callout annotation_plane_element_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline styled_item annotation_plane_element_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void annotation_plane_element_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline void annotation_plane_element_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline presentation_area annotation_representation_select::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void annotation_representation_select::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline presentation_view annotation_representation_select::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void annotation_representation_select::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline symbol_representation annotation_representation_select::get_symbol_representation() { return getEntityInstance("SYMBOL_REPRESENTATION"); }
    inline void annotation_representation_select::put_symbol_representation(symbol_representation inst) { putEntityInstance("SYMBOL_REPRESENTATION", inst); }
    inline presentation_area annotation_representation_select_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline presentation_view annotation_representation_select_get::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline symbol_representation annotation_representation_select_get::get_symbol_representation() { return getEntityInstance("SYMBOL_REPRESENTATION"); }
    inline void annotation_representation_select_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void annotation_representation_select_put::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline void annotation_representation_select_put::put_symbol_representation(symbol_representation inst) { putEntityInstance("SYMBOL_REPRESENTATION", inst); }
    inline annotation_symbol annotation_symbol_occurrence_item::get_annotation_symbol() { return getEntityInstance("ANNOTATION_SYMBOL"); }
    inline void annotation_symbol_occurrence_item::put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }
    inline defined_symbol annotation_symbol_occurrence_item::get_defined_symbol() { return getEntityInstance("DEFINED_SYMBOL"); }
    inline void annotation_symbol_occurrence_item::put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
    inline annotation_symbol annotation_symbol_occurrence_item_get::get_annotation_symbol() { return getEntityInstance("ANNOTATION_SYMBOL"); }
    inline defined_symbol annotation_symbol_occurrence_item_get::get_defined_symbol() { return getEntityInstance("DEFINED_SYMBOL"); }
    inline void annotation_symbol_occurrence_item_put::put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }
    inline void annotation_symbol_occurrence_item_put::put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
    inline text_literal annotation_text_occurrence_item::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void annotation_text_occurrence_item::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text annotation_text_occurrence_item::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void annotation_text_occurrence_item::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character annotation_text_occurrence_item::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void annotation_text_occurrence_item::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline composite_text annotation_text_occurrence_item::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void annotation_text_occurrence_item::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal annotation_text_occurrence_item_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline annotation_text annotation_text_occurrence_item_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character annotation_text_occurrence_item_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline composite_text annotation_text_occurrence_item_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void annotation_text_occurrence_item_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline void annotation_text_occurrence_item_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void annotation_text_occurrence_item_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void annotation_text_occurrence_item_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline action approval_item::get_action() { return getEntityInstance("ACTION"); }
    inline void approval_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive approval_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void approval_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline alternate_product_relationship approval_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void approval_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment approval_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void approval_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_usage_right approval_item::get_applied_usage_right() { return getEntityInstance("APPLIED_USAGE_RIGHT"); }
    inline void approval_item::put_applied_usage_right(applied_usage_right inst) { putEntityInstance("APPLIED_USAGE_RIGHT", inst); }
    inline assembly_component_usage_substitute approval_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void approval_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification approval_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void approval_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline configuration_effectivity approval_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void approval_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item approval_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void approval_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract approval_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void approval_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline date approval_item::get_date() { return getEntityInstance("DATE"); }
    inline void approval_item::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline directed_action approval_item::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline void approval_item::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline document approval_item::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void approval_item::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline document_file approval_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void approval_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline effectivity approval_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void approval_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline executed_action approval_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void approval_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property_relationship approval_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void approval_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline group approval_item::get_group() { return getEntityInstance("GROUP"); }
    inline void approval_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship approval_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void approval_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline information_usage_right approval_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void approval_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline product approval_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void approval_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition approval_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void approval_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation approval_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void approval_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship approval_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void approval_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship approval_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void approval_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline representation approval_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void approval_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline requirement_assignment approval_item::get_requirement_assignment() { return getEntityInstance("REQUIREMENT_ASSIGNMENT"); }
    inline void approval_item::put_requirement_assignment(requirement_assignment inst) { putEntityInstance("REQUIREMENT_ASSIGNMENT", inst); }
    inline security_classification approval_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void approval_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_aspect_relationship approval_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void approval_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline versioned_action_request approval_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void approval_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action approval_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive approval_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline alternate_product_relationship approval_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment approval_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_usage_right approval_item_get::get_applied_usage_right() { return getEntityInstance("APPLIED_USAGE_RIGHT"); }
    inline assembly_component_usage_substitute approval_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification approval_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline configuration_effectivity approval_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item approval_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract approval_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline date approval_item_get::get_date() { return getEntityInstance("DATE"); }
    inline directed_action approval_item_get::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline document approval_item_get::get_document() { return getEntityInstance("DOCUMENT"); }
    inline document_file approval_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline effectivity approval_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline executed_action approval_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property_relationship approval_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline group approval_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship approval_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline information_usage_right approval_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline product approval_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition approval_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation approval_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship approval_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship approval_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline representation approval_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline requirement_assignment approval_item_get::get_requirement_assignment() { return getEntityInstance("REQUIREMENT_ASSIGNMENT"); }
    inline security_classification approval_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_aspect_relationship approval_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline versioned_action_request approval_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void approval_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void approval_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void approval_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void approval_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void approval_item_put::put_applied_usage_right(applied_usage_right inst) { putEntityInstance("APPLIED_USAGE_RIGHT", inst); }
    inline void approval_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void approval_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void approval_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void approval_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void approval_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void approval_item_put::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline void approval_item_put::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline void approval_item_put::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline void approval_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void approval_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void approval_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void approval_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void approval_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void approval_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void approval_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void approval_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void approval_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void approval_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void approval_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void approval_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void approval_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void approval_item_put::put_requirement_assignment(requirement_assignment inst) { putEntityInstance("REQUIREMENT_ASSIGNMENT", inst); }
    inline void approval_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void approval_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void approval_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline certification approved_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void approved_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline change approved_item::get_change() { return getEntityInstance("CHANGE"); }
    inline void approved_item::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline change_request approved_item::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline void approved_item::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline configuration_effectivity approved_item::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline void approved_item::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline configuration_item approved_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void approved_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract approved_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void approved_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline product approved_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void approved_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline security_classification approved_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void approved_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline start_request approved_item::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline void approved_item::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline start_work approved_item::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void approved_item::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline certification approved_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline change approved_item_get::get_change() { return getEntityInstance("CHANGE"); }
    inline change_request approved_item_get::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline configuration_effectivity approved_item_get::get_configuration_effectivity() { return getEntityInstance("CONFIGURATION_EFFECTIVITY"); }
    inline configuration_item approved_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract approved_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline product approved_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline security_classification approved_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline start_request approved_item_get::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline start_work approved_item_get::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void approved_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void approved_item_put::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline void approved_item_put::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline void approved_item_put::put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
    inline void approved_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void approved_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void approved_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void approved_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void approved_item_put::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline void approved_item_put::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline presentation_area area_or_view::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void area_or_view::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline presentation_view area_or_view::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void area_or_view::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline presentation_area area_or_view_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline presentation_view area_or_view_get::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void area_or_view_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void area_or_view_put::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline action_directive attribute_classification_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void attribute_classification_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline action_method attribute_classification_item::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void attribute_classification_item::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_property attribute_classification_item::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void attribute_classification_item::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_property_representation attribute_classification_item::get_action_property_representation() { return getEntityInstance("ACTION_PROPERTY_REPRESENTATION"); }
    inline void attribute_classification_item::put_action_property_representation(action_property_representation inst) { putEntityInstance("ACTION_PROPERTY_REPRESENTATION", inst); }
    inline action_relationship attribute_classification_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void attribute_classification_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_solution attribute_classification_item::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void attribute_classification_item::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline action_request_status attribute_classification_item::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline void attribute_classification_item::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline alternate_product_relationship attribute_classification_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void attribute_classification_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment attribute_classification_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_action_request_assignment attribute_classification_item::get_applied_action_request_assignment() { return getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
    inline applied_approval_assignment attribute_classification_item::get_applied_approval_assignment() { return getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
    inline applied_certification_assignment attribute_classification_item::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline applied_document_reference attribute_classification_item::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline void attribute_classification_item::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline applied_document_usage_constraint_assignment attribute_classification_item::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline applied_effectivity_assignment attribute_classification_item::get_applied_effectivity_assignment() { return getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline applied_event_occurrence_assignment attribute_classification_item::get_applied_event_occurrence_assignment() { return getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
    inline applied_external_identification_assignment attribute_classification_item::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment attribute_classification_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_organization_assignment attribute_classification_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_organizational_project_assignment attribute_classification_item::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment attribute_classification_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void attribute_classification_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval attribute_classification_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void attribute_classification_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_person_organization attribute_classification_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void attribute_classification_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline approval_relationship attribute_classification_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void attribute_classification_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline approval_status attribute_classification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void attribute_classification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline certification attribute_classification_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void attribute_classification_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline context_dependent_unit attribute_classification_item::get_context_dependent_unit() { return getEntityInstance("CONTEXT_DEPENDENT_UNIT"); }
    inline void attribute_classification_item::put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
    inline contract attribute_classification_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void attribute_classification_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline date_and_time_assignment attribute_classification_item::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline void attribute_classification_item::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline date_assignment attribute_classification_item::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline void attribute_classification_item::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline derived_unit attribute_classification_item::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void attribute_classification_item::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline descriptive_representation_item attribute_classification_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void attribute_classification_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_file attribute_classification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void attribute_classification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline document_relationship attribute_classification_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void attribute_classification_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline effectivity attribute_classification_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void attribute_classification_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline event_occurrence_relationship attribute_classification_item::get_event_occurrence_relationship() { return getEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP"); }
    inline void attribute_classification_item::put_event_occurrence_relationship(event_occurrence_relationship inst) { putEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP", inst); }
    inline executed_action attribute_classification_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void attribute_classification_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property attribute_classification_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void attribute_classification_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship attribute_classification_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void attribute_classification_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline group attribute_classification_item::get_group() { return getEntityInstance("GROUP"); }
    inline void attribute_classification_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship attribute_classification_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void attribute_classification_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline information_right attribute_classification_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void attribute_classification_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right attribute_classification_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void attribute_classification_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline language attribute_classification_item::get_language() { return getEntityInstance("LANGUAGE"); }
    inline void attribute_classification_item::put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
    inline measure_representation_item attribute_classification_item::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline void attribute_classification_item::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline measure_with_unit attribute_classification_item::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void attribute_classification_item::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline named_unit attribute_classification_item::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void attribute_classification_item::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline organization_relationship attribute_classification_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void attribute_classification_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organizational_address attribute_classification_item::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline void attribute_classification_item::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline organizational_project_relationship attribute_classification_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void attribute_classification_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline person_and_organization attribute_classification_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void attribute_classification_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline person_and_organization_address attribute_classification_item::get_person_and_organization_address() { return getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS"); }
    inline void attribute_classification_item::put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
    inline product attribute_classification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void attribute_classification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_category attribute_classification_item::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline void attribute_classification_item::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline product_concept attribute_classification_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void attribute_classification_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_context attribute_classification_item::get_product_concept_context() { return getEntityInstance("PRODUCT_CONCEPT_CONTEXT"); }
    inline void attribute_classification_item::put_product_concept_context(product_concept_context inst) { putEntityInstance("PRODUCT_CONCEPT_CONTEXT", inst); }
    inline product_definition attribute_classification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void attribute_classification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_context attribute_classification_item::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline void attribute_classification_item::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline product_definition_formation attribute_classification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void attribute_classification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship attribute_classification_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void attribute_classification_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship attribute_classification_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void attribute_classification_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition attribute_classification_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void attribute_classification_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship attribute_classification_item::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void attribute_classification_item::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline property_definition_representation attribute_classification_item::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void attribute_classification_item::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline representation attribute_classification_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void attribute_classification_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_context attribute_classification_item::get_representation_context() { return getEntityInstance("REPRESENTATION_CONTEXT"); }
    inline void attribute_classification_item::put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
    inline representation_item attribute_classification_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void attribute_classification_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline security_classification attribute_classification_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void attribute_classification_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline time_interval_relationship attribute_classification_item::get_time_interval_relationship() { return getEntityInstance("TIME_INTERVAL_RELATIONSHIP"); }
    inline void attribute_classification_item::put_time_interval_relationship(time_interval_relationship inst) { putEntityInstance("TIME_INTERVAL_RELATIONSHIP", inst); }
    inline uncertainty_measure_with_unit attribute_classification_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void attribute_classification_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline usage_association attribute_classification_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void attribute_classification_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline versioned_action_request attribute_classification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void attribute_classification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action_directive attribute_classification_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline action_method attribute_classification_item_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_property attribute_classification_item_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline action_property_representation attribute_classification_item_get::get_action_property_representation() { return getEntityInstance("ACTION_PROPERTY_REPRESENTATION"); }
    inline action_relationship attribute_classification_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_solution attribute_classification_item_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline action_request_status attribute_classification_item_get::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline alternate_product_relationship attribute_classification_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment attribute_classification_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_action_request_assignment attribute_classification_item_get::get_applied_action_request_assignment() { return getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT"); }
    inline applied_approval_assignment attribute_classification_item_get::get_applied_approval_assignment() { return getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT"); }
    inline applied_certification_assignment attribute_classification_item_get::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline applied_document_reference attribute_classification_item_get::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline applied_document_usage_constraint_assignment attribute_classification_item_get::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline applied_effectivity_assignment attribute_classification_item_get::get_applied_effectivity_assignment() { return getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT"); }
    inline applied_event_occurrence_assignment attribute_classification_item_get::get_applied_event_occurrence_assignment() { return getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT"); }
    inline applied_external_identification_assignment attribute_classification_item_get::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment attribute_classification_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_organization_assignment attribute_classification_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_organizational_project_assignment attribute_classification_item_get::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment attribute_classification_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval attribute_classification_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_person_organization attribute_classification_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline approval_relationship attribute_classification_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline approval_status attribute_classification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline certification attribute_classification_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline context_dependent_unit attribute_classification_item_get::get_context_dependent_unit() { return getEntityInstance("CONTEXT_DEPENDENT_UNIT"); }
    inline contract attribute_classification_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline date_and_time_assignment attribute_classification_item_get::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline date_assignment attribute_classification_item_get::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline derived_unit attribute_classification_item_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline descriptive_representation_item attribute_classification_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_file attribute_classification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline document_relationship attribute_classification_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline effectivity attribute_classification_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline event_occurrence_relationship attribute_classification_item_get::get_event_occurrence_relationship() { return getEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP"); }
    inline executed_action attribute_classification_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property attribute_classification_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship attribute_classification_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline group attribute_classification_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship attribute_classification_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline information_right attribute_classification_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right attribute_classification_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline language attribute_classification_item_get::get_language() { return getEntityInstance("LANGUAGE"); }
    inline measure_representation_item attribute_classification_item_get::get_measure_representation_item() { return getEntityInstance("MEASURE_REPRESENTATION_ITEM"); }
    inline measure_with_unit attribute_classification_item_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline named_unit attribute_classification_item_get::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline organization_relationship attribute_classification_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organizational_address attribute_classification_item_get::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline organizational_project_relationship attribute_classification_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline person_and_organization attribute_classification_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline person_and_organization_address attribute_classification_item_get::get_person_and_organization_address() { return getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS"); }
    inline product attribute_classification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_category attribute_classification_item_get::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline product_concept attribute_classification_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_context attribute_classification_item_get::get_product_concept_context() { return getEntityInstance("PRODUCT_CONCEPT_CONTEXT"); }
    inline product_definition attribute_classification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_context attribute_classification_item_get::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline product_definition_formation attribute_classification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship attribute_classification_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship attribute_classification_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline property_definition attribute_classification_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship attribute_classification_item_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline property_definition_representation attribute_classification_item_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline representation attribute_classification_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_context attribute_classification_item_get::get_representation_context() { return getEntityInstance("REPRESENTATION_CONTEXT"); }
    inline representation_item attribute_classification_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline security_classification attribute_classification_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline time_interval_relationship attribute_classification_item_get::get_time_interval_relationship() { return getEntityInstance("TIME_INTERVAL_RELATIONSHIP"); }
    inline uncertainty_measure_with_unit attribute_classification_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline usage_association attribute_classification_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline versioned_action_request attribute_classification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void attribute_classification_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void attribute_classification_item_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void attribute_classification_item_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline void attribute_classification_item_put::put_action_property_representation(action_property_representation inst) { putEntityInstance("ACTION_PROPERTY_REPRESENTATION", inst); }
    inline void attribute_classification_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void attribute_classification_item_put::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline void attribute_classification_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline void attribute_classification_item_put::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void attribute_classification_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void attribute_classification_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void attribute_classification_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void attribute_classification_item_put::put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
    inline void attribute_classification_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void attribute_classification_item_put::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline void attribute_classification_item_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void attribute_classification_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void attribute_classification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void attribute_classification_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void attribute_classification_item_put::put_event_occurrence_relationship(event_occurrence_relationship inst) { putEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void attribute_classification_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void attribute_classification_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void attribute_classification_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void attribute_classification_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void attribute_classification_item_put::put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
    inline void attribute_classification_item_put::put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
    inline void attribute_classification_item_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline void attribute_classification_item_put::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline void attribute_classification_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline void attribute_classification_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void attribute_classification_item_put::put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
    inline void attribute_classification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void attribute_classification_item_put::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline void attribute_classification_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void attribute_classification_item_put::put_product_concept_context(product_concept_context inst) { putEntityInstance("PRODUCT_CONCEPT_CONTEXT", inst); }
    inline void attribute_classification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void attribute_classification_item_put::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline void attribute_classification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void attribute_classification_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void attribute_classification_item_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline void attribute_classification_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void attribute_classification_item_put::put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
    inline void attribute_classification_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void attribute_classification_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void attribute_classification_item_put::put_time_interval_relationship(time_interval_relationship inst) { putEntityInstance("TIME_INTERVAL_RELATIONSHIP", inst); }
    inline void attribute_classification_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void attribute_classification_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline void attribute_classification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline alternate_product_relationship attribute_language_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void attribute_language_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline application_context attribute_language_item::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void attribute_language_item::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline applied_certification_assignment attribute_language_item::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline applied_document_reference attribute_language_item::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline void attribute_language_item::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline applied_document_usage_constraint_assignment attribute_language_item::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline applied_external_identification_assignment attribute_language_item::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment attribute_language_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_organizational_project_assignment attribute_language_item::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment attribute_language_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void attribute_language_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval attribute_language_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void attribute_language_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_relationship attribute_language_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void attribute_language_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline approval_status attribute_language_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void attribute_language_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute attribute_language_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void attribute_language_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline attribute_value_assignment attribute_language_item::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline void attribute_language_item::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline certification attribute_language_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void attribute_language_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline certification_type attribute_language_item::get_certification_type() { return getEntityInstance("CERTIFICATION_TYPE"); }
    inline void attribute_language_item::put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
    inline configuration_design attribute_language_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void attribute_language_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item attribute_language_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void attribute_language_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract attribute_language_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void attribute_language_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline date_role attribute_language_item::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void attribute_language_item::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role attribute_language_item::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void attribute_language_item::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline descriptive_representation_item attribute_language_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_relationship attribute_language_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void attribute_language_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline document_usage_role attribute_language_item::get_document_usage_role() { return getEntityInstance("DOCUMENT_USAGE_ROLE"); }
    inline void attribute_language_item::put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
    inline effectivity attribute_language_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void attribute_language_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline effectivity_relationship attribute_language_item::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline void attribute_language_item::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline event_occurrence attribute_language_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void attribute_language_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline external_source attribute_language_item::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void attribute_language_item::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline general_property attribute_language_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void attribute_language_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship attribute_language_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void attribute_language_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline geometric_representation_item attribute_language_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline geometric_tolerance attribute_language_item::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline void attribute_language_item::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline identification_role attribute_language_item::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline void attribute_language_item::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline information_right attribute_language_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void attribute_language_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right attribute_language_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void attribute_language_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline make_from_usage_option attribute_language_item::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline void attribute_language_item::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline mapped_item attribute_language_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void attribute_language_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline multi_language_attribute_assignment attribute_language_item::get_multi_language_attribute_assignment() { return getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT"); }
    inline void attribute_language_item::put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
    inline object_role attribute_language_item::get_object_role() { return getEntityInstance("OBJECT_ROLE"); }
    inline void attribute_language_item::put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
    inline organization_relationship attribute_language_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void attribute_language_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organization_role attribute_language_item::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void attribute_language_item::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline organizational_project attribute_language_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void attribute_language_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project_relationship attribute_language_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void attribute_language_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline organizational_project_role attribute_language_item::get_organizational_project_role() { return getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE"); }
    inline void attribute_language_item::put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
    inline person_and_organization attribute_language_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void attribute_language_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline person_and_organization_role attribute_language_item::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void attribute_language_item::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline product attribute_language_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void attribute_language_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept attribute_language_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void attribute_language_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_relationship attribute_language_item::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline product_definition attribute_language_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void attribute_language_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_context attribute_language_item::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline void attribute_language_item::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline product_definition_formation attribute_language_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void attribute_language_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship attribute_language_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship attribute_language_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void attribute_language_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_shape attribute_language_item::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline void attribute_language_item::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline product_related_product_category attribute_language_item::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline void attribute_language_item::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline property_definition attribute_language_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void attribute_language_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline representation attribute_language_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void attribute_language_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline security_classification attribute_language_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void attribute_language_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_assignment attribute_language_item::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void attribute_language_item::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline shape_aspect attribute_language_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void attribute_language_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship attribute_language_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void attribute_language_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_representation attribute_language_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void attribute_language_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline time_interval_role attribute_language_item::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline void attribute_language_item::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline topological_representation_item attribute_language_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void attribute_language_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline uncertainty_measure_with_unit attribute_language_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void attribute_language_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline uncertainty_qualifier attribute_language_item::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void attribute_language_item::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline usage_association attribute_language_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void attribute_language_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline alternate_product_relationship attribute_language_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline application_context attribute_language_item_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline applied_certification_assignment attribute_language_item_get::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline applied_document_reference attribute_language_item_get::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline applied_document_usage_constraint_assignment attribute_language_item_get::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline applied_external_identification_assignment attribute_language_item_get::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment attribute_language_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_organizational_project_assignment attribute_language_item_get::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline applied_security_classification_assignment attribute_language_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval attribute_language_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_relationship attribute_language_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline approval_status attribute_language_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute attribute_language_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline attribute_value_assignment attribute_language_item_get::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline certification attribute_language_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline certification_type attribute_language_item_get::get_certification_type() { return getEntityInstance("CERTIFICATION_TYPE"); }
    inline configuration_design attribute_language_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item attribute_language_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract attribute_language_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline date_role attribute_language_item_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role attribute_language_item_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline descriptive_representation_item attribute_language_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_relationship attribute_language_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline document_usage_role attribute_language_item_get::get_document_usage_role() { return getEntityInstance("DOCUMENT_USAGE_ROLE"); }
    inline effectivity attribute_language_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline effectivity_relationship attribute_language_item_get::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline event_occurrence attribute_language_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline external_source attribute_language_item_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline general_property attribute_language_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship attribute_language_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline geometric_representation_item attribute_language_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline geometric_tolerance attribute_language_item_get::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline identification_role attribute_language_item_get::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline information_right attribute_language_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right attribute_language_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline make_from_usage_option attribute_language_item_get::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline mapped_item attribute_language_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline multi_language_attribute_assignment attribute_language_item_get::get_multi_language_attribute_assignment() { return getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT"); }
    inline object_role attribute_language_item_get::get_object_role() { return getEntityInstance("OBJECT_ROLE"); }
    inline organization_relationship attribute_language_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organization_role attribute_language_item_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline organizational_project attribute_language_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline organizational_project_relationship attribute_language_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline organizational_project_role attribute_language_item_get::get_organizational_project_role() { return getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE"); }
    inline person_and_organization attribute_language_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline person_and_organization_role attribute_language_item_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline product attribute_language_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept attribute_language_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_relationship attribute_language_item_get::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline product_definition attribute_language_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_context attribute_language_item_get::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline product_definition_formation attribute_language_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship attribute_language_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship attribute_language_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_shape attribute_language_item_get::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline product_related_product_category attribute_language_item_get::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline property_definition attribute_language_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline representation attribute_language_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline security_classification attribute_language_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_assignment attribute_language_item_get::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline shape_aspect attribute_language_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship attribute_language_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline shape_representation attribute_language_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline time_interval_role attribute_language_item_get::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline topological_representation_item attribute_language_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline uncertainty_measure_with_unit attribute_language_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline uncertainty_qualifier attribute_language_item_get::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline usage_association attribute_language_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void attribute_language_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void attribute_language_item_put::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline void attribute_language_item_put::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void attribute_language_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void attribute_language_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void attribute_language_item_put::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void attribute_language_item_put::put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
    inline void attribute_language_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void attribute_language_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void attribute_language_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void attribute_language_item_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void attribute_language_item_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void attribute_language_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
    inline void attribute_language_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void attribute_language_item_put::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void attribute_language_item_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void attribute_language_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void attribute_language_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline void attribute_language_item_put::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline void attribute_language_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void attribute_language_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void attribute_language_item_put::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline void attribute_language_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void attribute_language_item_put::put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
    inline void attribute_language_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void attribute_language_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void attribute_language_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
    inline void attribute_language_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void attribute_language_item_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void attribute_language_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void attribute_language_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void attribute_language_item_put::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void attribute_language_item_put::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline void attribute_language_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void attribute_language_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline void attribute_language_item_put::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline void attribute_language_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void attribute_language_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void attribute_language_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void attribute_language_item_put::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void attribute_language_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void attribute_language_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void attribute_language_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void attribute_language_item_put::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline void attribute_language_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline void attribute_language_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void attribute_language_item_put::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline void attribute_language_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline axis2_placement_2d axis2_placement::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline void axis2_placement::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline axis2_placement_3d axis2_placement::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void axis2_placement::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline axis2_placement_2d axis2_placement_get::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline axis2_placement_3d axis2_placement_get::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void axis2_placement_put::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline void axis2_placement_put::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline sphere csg_primitive::get_sphere() { return getEntityInstance("SPHERE"); }
    inline void csg_primitive::put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }
    inline block csg_primitive::get_block() { return getEntityInstance("BLOCK"); }
    inline void csg_primitive::put_block(block inst) { putEntityInstance("BLOCK", inst); }
    inline right_angular_wedge csg_primitive::get_right_angular_wedge() { return getEntityInstance("RIGHT_ANGULAR_WEDGE"); }
    inline void csg_primitive::put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }
    inline torus csg_primitive::get_torus() { return getEntityInstance("TORUS"); }
    inline void csg_primitive::put_torus(torus inst) { putEntityInstance("TORUS", inst); }
    inline right_circular_cone csg_primitive::get_right_circular_cone() { return getEntityInstance("RIGHT_CIRCULAR_CONE"); }
    inline void csg_primitive::put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }
    inline right_circular_cylinder csg_primitive::get_right_circular_cylinder() { return getEntityInstance("RIGHT_CIRCULAR_CYLINDER"); }
    inline void csg_primitive::put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
    inline sphere csg_primitive_get::get_sphere() { return getEntityInstance("SPHERE"); }
    inline block csg_primitive_get::get_block() { return getEntityInstance("BLOCK"); }
    inline right_angular_wedge csg_primitive_get::get_right_angular_wedge() { return getEntityInstance("RIGHT_ANGULAR_WEDGE"); }
    inline torus csg_primitive_get::get_torus() { return getEntityInstance("TORUS"); }
    inline right_circular_cone csg_primitive_get::get_right_circular_cone() { return getEntityInstance("RIGHT_CIRCULAR_CONE"); }
    inline right_circular_cylinder csg_primitive_get::get_right_circular_cylinder() { return getEntityInstance("RIGHT_CIRCULAR_CYLINDER"); }
    inline void csg_primitive_put::put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }
    inline void csg_primitive_put::put_block(block inst) { putEntityInstance("BLOCK", inst); }
    inline void csg_primitive_put::put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }
    inline void csg_primitive_put::put_torus(torus inst) { putEntityInstance("TORUS", inst); }
    inline void csg_primitive_put::put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }
    inline void csg_primitive_put::put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
    inline solid_model base_solid_select::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline void base_solid_select::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline boolean_result base_solid_select::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void base_solid_select::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline solid_model base_solid_select_get::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline boolean_result base_solid_select_get::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void base_solid_select_put::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline void base_solid_select_put::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline point_on_curve blend_end_condition_select::get_point_on_curve() { return getEntityInstance("POINT_ON_CURVE"); }
    inline void blend_end_condition_select::put_point_on_curve(point_on_curve inst) { putEntityInstance("POINT_ON_CURVE", inst); }
    inline edge_curve blend_end_condition_select::get_edge_curve() { return getEntityInstance("EDGE_CURVE"); }
    inline void blend_end_condition_select::put_edge_curve(edge_curve inst) { putEntityInstance("EDGE_CURVE", inst); }
    inline vertex blend_end_condition_select::get_vertex() { return getEntityInstance("VERTEX"); }
    inline void blend_end_condition_select::put_vertex(vertex inst) { putEntityInstance("VERTEX", inst); }
    inline point_on_curve blend_end_condition_select_get::get_point_on_curve() { return getEntityInstance("POINT_ON_CURVE"); }
    inline edge_curve blend_end_condition_select_get::get_edge_curve() { return getEntityInstance("EDGE_CURVE"); }
    inline vertex blend_end_condition_select_get::get_vertex() { return getEntityInstance("VERTEX"); }
    inline void blend_end_condition_select_put::put_point_on_curve(point_on_curve inst) { putEntityInstance("POINT_ON_CURVE", inst); }
    inline void blend_end_condition_select_put::put_edge_curve(edge_curve inst) { putEntityInstance("EDGE_CURVE", inst); }
    inline void blend_end_condition_select_put::put_vertex(vertex inst) { putEntityInstance("VERTEX", inst); }
    inline solid_model boolean_operand::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline void boolean_operand::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline half_space_solid boolean_operand::get_half_space_solid() { return getEntityInstance("HALF_SPACE_SOLID"); }
    inline void boolean_operand::put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }
    inline boolean_result boolean_operand::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void boolean_operand::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline solid_model boolean_operand_get::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline half_space_solid boolean_operand_get::get_half_space_solid() { return getEntityInstance("HALF_SPACE_SOLID"); }
    inline boolean_result boolean_operand_get::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void boolean_operand_put::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline void boolean_operand_put::put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }
    inline void boolean_operand_put::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline camera_model_d3_multi_clipping_union camera_model_d3_multi_clipping_interection_select::get_camera_model_d3_multi_clipping_union() { return getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION"); }
    inline void camera_model_d3_multi_clipping_interection_select::put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION", inst); }
    inline plane camera_model_d3_multi_clipping_interection_select::get_plane() { return getEntityInstance("PLANE"); }
    inline void camera_model_d3_multi_clipping_interection_select::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline camera_model_d3_multi_clipping_union camera_model_d3_multi_clipping_interection_select_get::get_camera_model_d3_multi_clipping_union() { return getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION"); }
    inline plane camera_model_d3_multi_clipping_interection_select_get::get_plane() { return getEntityInstance("PLANE"); }
    inline void camera_model_d3_multi_clipping_interection_select_put::put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION", inst); }
    inline void camera_model_d3_multi_clipping_interection_select_put::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline camera_model_d3_multi_clipping_intersection camera_model_d3_multi_clipping_union_select::get_camera_model_d3_multi_clipping_intersection() { return getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION"); }
    inline void camera_model_d3_multi_clipping_union_select::put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION", inst); }
    inline plane camera_model_d3_multi_clipping_union_select::get_plane() { return getEntityInstance("PLANE"); }
    inline void camera_model_d3_multi_clipping_union_select::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline camera_model_d3_multi_clipping_intersection camera_model_d3_multi_clipping_union_select_get::get_camera_model_d3_multi_clipping_intersection() { return getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION"); }
    inline plane camera_model_d3_multi_clipping_union_select_get::get_plane() { return getEntityInstance("PLANE"); }
    inline void camera_model_d3_multi_clipping_union_select_put::put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION", inst); }
    inline void camera_model_d3_multi_clipping_union_select_put::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline product_class category_usage_item::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void category_usage_item::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline product_class category_usage_item_get::get_product_class() { return getEntityInstance("PRODUCT_CLASS"); }
    inline void category_usage_item_put::put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
    inline assembly_component_usage cc_classified_item::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void cc_classified_item::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline product_definition_formation cc_classified_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void cc_classified_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline assembly_component_usage cc_classified_item_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline product_definition_formation cc_classified_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void cc_classified_item_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void cc_classified_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline change cc_person_organization_item::get_change() { return getEntityInstance("CHANGE"); }
    inline void cc_person_organization_item::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline change_request cc_person_organization_item::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline void cc_person_organization_item::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline configuration_item cc_person_organization_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void cc_person_organization_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract cc_person_organization_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void cc_person_organization_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline product cc_person_organization_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void cc_person_organization_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition cc_person_organization_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void cc_person_organization_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation cc_person_organization_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void cc_person_organization_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline security_classification cc_person_organization_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void cc_person_organization_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline start_request cc_person_organization_item::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline void cc_person_organization_item::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline start_work cc_person_organization_item::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void cc_person_organization_item::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline change cc_person_organization_item_get::get_change() { return getEntityInstance("CHANGE"); }
    inline change_request cc_person_organization_item_get::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline configuration_item cc_person_organization_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract cc_person_organization_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline product cc_person_organization_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition cc_person_organization_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation cc_person_organization_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline security_classification cc_person_organization_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline start_request cc_person_organization_item_get::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline start_work cc_person_organization_item_get::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void cc_person_organization_item_put::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline void cc_person_organization_item_put::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline void cc_person_organization_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void cc_person_organization_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void cc_person_organization_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void cc_person_organization_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void cc_person_organization_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void cc_person_organization_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void cc_person_organization_item_put::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline void cc_person_organization_item_put::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline product_definition cc_specified_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void cc_specified_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline shape_aspect cc_specified_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void cc_specified_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline product_definition cc_specified_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline shape_aspect cc_specified_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void cc_specified_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void cc_specified_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline supplied_part_relationship certified_item::get_supplied_part_relationship() { return getEntityInstance("SUPPLIED_PART_RELATIONSHIP"); }
    inline void certified_item::put_supplied_part_relationship(supplied_part_relationship inst) { putEntityInstance("SUPPLIED_PART_RELATIONSHIP", inst); }
    inline supplied_part_relationship certified_item_get::get_supplied_part_relationship() { return getEntityInstance("SUPPLIED_PART_RELATIONSHIP"); }
    inline void certified_item_put::put_supplied_part_relationship(supplied_part_relationship inst) { putEntityInstance("SUPPLIED_PART_RELATIONSHIP", inst); }
    inline product_definition_formation change_request_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void change_request_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation change_request_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void change_request_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline measure_with_unit character_spacing_select::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void character_spacing_select::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit character_spacing_select_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void character_spacing_select_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline character_glyph_style_stroke character_style_select::get_character_glyph_style_stroke() { return getEntityInstance("CHARACTER_GLYPH_STYLE_STROKE"); }
    inline void character_style_select::put_character_glyph_style_stroke(character_glyph_style_stroke inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_STROKE", inst); }
    inline character_glyph_style_outline character_style_select::get_character_glyph_style_outline() { return getEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE"); }
    inline void character_style_select::put_character_glyph_style_outline(character_glyph_style_outline inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE", inst); }
    inline text_style_for_defined_font character_style_select::get_text_style_for_defined_font() { return getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT"); }
    inline void character_style_select::put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
    inline character_glyph_style_stroke character_style_select_get::get_character_glyph_style_stroke() { return getEntityInstance("CHARACTER_GLYPH_STYLE_STROKE"); }
    inline character_glyph_style_outline character_style_select_get::get_character_glyph_style_outline() { return getEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE"); }
    inline text_style_for_defined_font character_style_select_get::get_text_style_for_defined_font() { return getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT"); }
    inline void character_style_select_put::put_character_glyph_style_stroke(character_glyph_style_stroke inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_STROKE", inst); }
    inline void character_style_select_put::put_character_glyph_style_outline(character_glyph_style_outline inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE", inst); }
    inline void character_style_select_put::put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
    inline action characterized_action_definition::get_action() { return getEntityInstance("ACTION"); }
    inline void characterized_action_definition::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method characterized_action_definition::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void characterized_action_definition::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_method_relationship characterized_action_definition::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline void characterized_action_definition::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline action_relationship characterized_action_definition::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void characterized_action_definition::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action characterized_action_definition_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method characterized_action_definition_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_method_relationship characterized_action_definition_get::get_action_method_relationship() { return getEntityInstance("ACTION_METHOD_RELATIONSHIP"); }
    inline action_relationship characterized_action_definition_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void characterized_action_definition_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void characterized_action_definition_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void characterized_action_definition_put::put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
    inline void characterized_action_definition_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline product_definition characterized_product_definition::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void characterized_product_definition::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_relationship characterized_product_definition::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void characterized_product_definition::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition characterized_product_definition_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_relationship characterized_product_definition_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void characterized_product_definition_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void characterized_product_definition_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_shape shape_definition::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline void shape_definition::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline shape_aspect shape_definition::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void shape_definition::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship shape_definition::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void shape_definition::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline product_definition_shape shape_definition_get::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline shape_aspect shape_definition_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship shape_definition_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void shape_definition_put::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline void shape_definition_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void shape_definition_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline characterized_object characterized_definition::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void characterized_definition::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline characterized_object characterized_definition_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void characterized_definition_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline material_property_representation characterized_material_property::get_material_property_representation() { return getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION"); }
    inline void characterized_material_property::put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }
    inline product_material_composition_relationship characterized_material_property::get_product_material_composition_relationship() { return getEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP"); }
    inline void characterized_material_property::put_product_material_composition_relationship(product_material_composition_relationship inst) { putEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP", inst); }
    inline material_property_representation characterized_material_property_get::get_material_property_representation() { return getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION"); }
    inline product_material_composition_relationship characterized_material_property_get::get_product_material_composition_relationship() { return getEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP"); }
    inline void characterized_material_property_put::put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }
    inline void characterized_material_property_put::put_product_material_composition_relationship(product_material_composition_relationship inst) { putEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP", inst); }
    inline measure_with_unit characterized_product_composition_value::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void characterized_product_composition_value::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit characterized_product_composition_value_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void characterized_product_composition_value_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline product_definition class_usage_effectivity_context_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void class_usage_effectivity_context_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition class_usage_effectivity_context_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void class_usage_effectivity_context_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition configuration_design_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void configuration_design_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation configuration_design_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void configuration_design_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition configuration_design_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation configuration_design_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void configuration_design_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void configuration_design_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_concept_feature_association configured_effectivity_context_item::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void configured_effectivity_context_item::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_concept_feature_association configured_effectivity_context_item_get::get_product_concept_feature_association() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION"); }
    inline void configured_effectivity_context_item_put::put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
    inline product_definition configured_effectivity_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void configured_effectivity_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition configured_effectivity_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void configured_effectivity_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline constructive_geometry_representation constructive_geometry_representation_or_shape_represenation::get_constructive_geometry_representation() { return getEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION"); }
    inline void constructive_geometry_representation_or_shape_represenation::put_constructive_geometry_representation(constructive_geometry_representation inst) { putEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION", inst); }
    inline shape_representation constructive_geometry_representation_or_shape_represenation::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void constructive_geometry_representation_or_shape_represenation::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline constructive_geometry_representation constructive_geometry_representation_or_shape_represenation_get::get_constructive_geometry_representation() { return getEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION"); }
    inline shape_representation constructive_geometry_representation_or_shape_represenation_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void constructive_geometry_representation_or_shape_represenation_put::put_constructive_geometry_representation(constructive_geometry_representation inst) { putEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION", inst); }
    inline void constructive_geometry_representation_or_shape_represenation_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline action_directive contract_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void contract_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline alternate_product_relationship contract_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void contract_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline directed_action contract_item::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline void contract_item::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline executed_action contract_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void contract_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline information_usage_right contract_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void contract_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline organization contract_item::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void contract_item::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline person_and_organization contract_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void contract_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product contract_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void contract_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition_formation contract_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contract_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline action_directive contract_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline alternate_product_relationship contract_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline directed_action contract_item_get::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline executed_action contract_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline information_usage_right contract_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline organization contract_item_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline person_and_organization contract_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product contract_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition_formation contract_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contract_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void contract_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void contract_item_put::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline void contract_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void contract_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void contract_item_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void contract_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void contract_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void contract_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation contracted_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contracted_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation contracted_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void contracted_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline boolean_result csg_select::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void csg_select::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline boolean_result csg_select_get::get_boolean_result() { return getEntityInstance("BOOLEAN_RESULT"); }
    inline void csg_select_put::put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
    inline curve_style_font curve_style_font_select::get_curve_style_font() { return getEntityInstance("CURVE_STYLE_FONT"); }
    inline void curve_style_font_select::put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }
    inline pre_defined_curve_font curve_style_font_select::get_pre_defined_curve_font() { return getEntityInstance("PRE_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select::put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }
    inline externally_defined_curve_font curve_style_font_select::get_externally_defined_curve_font() { return getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select::put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
    inline curve_style_font curve_style_font_select_get::get_curve_style_font() { return getEntityInstance("CURVE_STYLE_FONT"); }
    inline pre_defined_curve_font curve_style_font_select_get::get_pre_defined_curve_font() { return getEntityInstance("PRE_DEFINED_CURVE_FONT"); }
    inline externally_defined_curve_font curve_style_font_select_get::get_externally_defined_curve_font() { return getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT"); }
    inline void curve_style_font_select_put::put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }
    inline void curve_style_font_select_put::put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }
    inline void curve_style_font_select_put::put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
    inline curve_style_font_and_scaling curve_font_or_scaled_curve_font_select::get_curve_style_font_and_scaling() { return getEntityInstance("CURVE_STYLE_FONT_AND_SCALING"); }
    inline void curve_font_or_scaled_curve_font_select::put_curve_style_font_and_scaling(curve_style_font_and_scaling inst) { putEntityInstance("CURVE_STYLE_FONT_AND_SCALING", inst); }
    inline curve_style_font_and_scaling curve_font_or_scaled_curve_font_select_get::get_curve_style_font_and_scaling() { return getEntityInstance("CURVE_STYLE_FONT_AND_SCALING"); }
    inline void curve_font_or_scaled_curve_font_select_put::put_curve_style_font_and_scaling(curve_style_font_and_scaling inst) { putEntityInstance("CURVE_STYLE_FONT_AND_SCALING", inst); }
    inline pcurve curve_on_surface::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline void curve_on_surface::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline surface_curve curve_on_surface::get_surface_curve() { return getEntityInstance("SURFACE_CURVE"); }
    inline void curve_on_surface::put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }
    inline composite_curve_on_surface curve_on_surface::get_composite_curve_on_surface() { return getEntityInstance("COMPOSITE_CURVE_ON_SURFACE"); }
    inline void curve_on_surface::put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
    inline pcurve curve_on_surface_get::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline surface_curve curve_on_surface_get::get_surface_curve() { return getEntityInstance("SURFACE_CURVE"); }
    inline composite_curve_on_surface curve_on_surface_get::get_composite_curve_on_surface() { return getEntityInstance("COMPOSITE_CURVE_ON_SURFACE"); }
    inline void curve_on_surface_put::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline void curve_on_surface_put::put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }
    inline void curve_on_surface_put::put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
    inline curve curve_or_annotation_curve_occurrence::get_curve() { return getEntityInstance("CURVE"); }
    inline void curve_or_annotation_curve_occurrence::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline annotation_curve_occurrence curve_or_annotation_curve_occurrence::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void curve_or_annotation_curve_occurrence::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline curve curve_or_annotation_curve_occurrence_get::get_curve() { return getEntityInstance("CURVE"); }
    inline annotation_curve_occurrence curve_or_annotation_curve_occurrence_get::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void curve_or_annotation_curve_occurrence_put::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline void curve_or_annotation_curve_occurrence_put::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline curve_style curve_or_render::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline void curve_or_render::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline curve_style_rendering curve_or_render::get_curve_style_rendering() { return getEntityInstance("CURVE_STYLE_RENDERING"); }
    inline void curve_or_render::put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
    inline curve_style curve_or_render_get::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline curve_style_rendering curve_or_render_get::get_curve_style_rendering() { return getEntityInstance("CURVE_STYLE_RENDERING"); }
    inline void curve_or_render_put::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline void curve_or_render_put::put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
    inline action date_and_time_item::get_action() { return getEntityInstance("ACTION"); }
    inline void date_and_time_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive date_and_time_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void date_and_time_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline applied_action_assignment date_and_time_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_organization_assignment date_and_time_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment date_and_time_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment date_and_time_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void date_and_time_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval_person_organization date_and_time_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void date_and_time_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline certification date_and_time_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void date_and_time_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline contract date_and_time_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void date_and_time_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline directed_action date_and_time_item::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline void date_and_time_item::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline document date_and_time_item::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void date_and_time_item::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline document_file date_and_time_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void date_and_time_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline event_occurrence date_and_time_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_and_time_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action date_and_time_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void date_and_time_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline information_usage_right date_and_time_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void date_and_time_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline organizational_project date_and_time_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void date_and_time_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline product_definition date_and_time_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void date_and_time_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation date_and_time_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void date_and_time_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship date_and_time_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void date_and_time_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline rule_action date_and_time_item::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline void date_and_time_item::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline security_classification date_and_time_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void date_and_time_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline versioned_action_request date_and_time_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_and_time_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_and_time_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive date_and_time_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline applied_action_assignment date_and_time_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_organization_assignment date_and_time_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment date_and_time_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline applied_security_classification_assignment date_and_time_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval_person_organization date_and_time_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline certification date_and_time_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline contract date_and_time_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline directed_action date_and_time_item_get::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline document date_and_time_item_get::get_document() { return getEntityInstance("DOCUMENT"); }
    inline document_file date_and_time_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline event_occurrence date_and_time_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action date_and_time_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline information_usage_right date_and_time_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline organizational_project date_and_time_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline product_definition date_and_time_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation date_and_time_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship date_and_time_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline rule_action date_and_time_item_get::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline security_classification date_and_time_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline versioned_action_request date_and_time_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_and_time_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void date_and_time_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void date_and_time_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void date_and_time_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void date_and_time_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void date_and_time_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void date_and_time_item_put::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline void date_and_time_item_put::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline void date_and_time_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void date_and_time_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void date_and_time_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void date_and_time_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void date_and_time_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void date_and_time_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void date_and_time_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void date_and_time_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void date_and_time_item_put::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline void date_and_time_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void date_and_time_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_item::get_action() { return getEntityInstance("ACTION"); }
    inline void date_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive date_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void date_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline applied_action_assignment date_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void date_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_organization_assignment date_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void date_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment date_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void date_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment date_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void date_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval_person_organization date_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void date_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline certification date_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void date_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline contract date_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void date_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline directed_action date_item::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline void date_item::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline document date_item::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void date_item::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline document_file date_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void date_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline event_occurrence date_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline executed_action date_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void date_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline information_usage_right date_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void date_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline organizational_project date_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void date_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline product_definition date_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void date_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation date_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void date_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship date_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void date_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline security_classification date_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void date_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline versioned_action_request date_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action date_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive date_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline applied_action_assignment date_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_organization_assignment date_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment date_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline applied_security_classification_assignment date_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval_person_organization date_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline certification date_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline contract date_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline directed_action date_item_get::get_directed_action() { return getEntityInstance("DIRECTED_ACTION"); }
    inline document date_item_get::get_document() { return getEntityInstance("DOCUMENT"); }
    inline document_file date_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline event_occurrence date_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline executed_action date_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline information_usage_right date_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline organizational_project date_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline product_definition date_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation date_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship date_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline security_classification date_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline versioned_action_request date_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void date_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void date_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void date_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void date_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void date_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void date_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void date_item_put::put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
    inline void date_item_put::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline void date_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void date_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void date_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void date_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void date_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void date_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void date_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void date_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void date_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void date_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline approval_person_organization date_time_item::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline void date_time_item::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline certification date_time_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void date_time_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline change date_time_item::get_change() { return getEntityInstance("CHANGE"); }
    inline void date_time_item::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline change_request date_time_item::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline void date_time_item::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline contract date_time_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void date_time_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline product_definition date_time_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void date_time_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline security_classification date_time_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void date_time_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline start_request date_time_item::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline void date_time_item::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline start_work date_time_item::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void date_time_item::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline approval_person_organization date_time_item_get::get_approval_person_organization() { return getEntityInstance("APPROVAL_PERSON_ORGANIZATION"); }
    inline certification date_time_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline change date_time_item_get::get_change() { return getEntityInstance("CHANGE"); }
    inline change_request date_time_item_get::get_change_request() { return getEntityInstance("CHANGE_REQUEST"); }
    inline contract date_time_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline product_definition date_time_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline security_classification date_time_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline start_request date_time_item_get::get_start_request() { return getEntityInstance("START_REQUEST"); }
    inline start_work date_time_item_get::get_start_work() { return getEntityInstance("START_WORK"); }
    inline void date_time_item_put::put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
    inline void date_time_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void date_time_item_put::put_change(change inst) { putEntityInstance("CHANGE", inst); }
    inline void date_time_item_put::put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
    inline void date_time_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void date_time_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void date_time_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void date_time_item_put::put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
    inline void date_time_item_put::put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
    inline date date_time_select::get_date() { return getEntityInstance("DATE"); }
    inline void date_time_select::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline date_and_time date_time_select::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline void date_time_select::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline local_time date_time_select::get_local_time() { return getEntityInstance("LOCAL_TIME"); }
    inline void date_time_select::put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
    inline date date_time_select_get::get_date() { return getEntityInstance("DATE"); }
    inline date_and_time date_time_select_get::get_date_and_time() { return getEntityInstance("DATE_AND_TIME"); }
    inline local_time date_time_select_get::get_local_time() { return getEntityInstance("LOCAL_TIME"); }
    inline void date_time_select_put::put_date(date inst) { putEntityInstance("DATE", inst); }
    inline void date_time_select_put::put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
    inline void date_time_select_put::put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
    inline event_occurrence date_time_or_event_occurrence::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_time_or_event_occurrence::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline event_occurrence date_time_or_event_occurrence_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void date_time_or_event_occurrence_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline pre_defined_symbol defined_symbol_select::get_pre_defined_symbol() { return getEntityInstance("PRE_DEFINED_SYMBOL"); }
    inline void defined_symbol_select::put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }
    inline externally_defined_symbol defined_symbol_select::get_externally_defined_symbol() { return getEntityInstance("EXTERNALLY_DEFINED_SYMBOL"); }
    inline void defined_symbol_select::put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
    inline pre_defined_symbol defined_symbol_select_get::get_pre_defined_symbol() { return getEntityInstance("PRE_DEFINED_SYMBOL"); }
    inline externally_defined_symbol defined_symbol_select_get::get_externally_defined_symbol() { return getEntityInstance("EXTERNALLY_DEFINED_SYMBOL"); }
    inline void defined_symbol_select_put::put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }
    inline void defined_symbol_select_put::put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
    inline property_definition derived_property_select::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void derived_property_select::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline action_property derived_property_select::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void derived_property_select::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline property_definition derived_property_select_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline action_property derived_property_select_get::get_action_property() { return getEntityInstance("ACTION_PROPERTY"); }
    inline void derived_property_select_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void derived_property_select_put::put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
    inline action_request_solution description_attribute_select::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void description_attribute_select::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline application_context description_attribute_select::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void description_attribute_select::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline approval_role description_attribute_select::get_approval_role() { return getEntityInstance("APPROVAL_ROLE"); }
    inline void description_attribute_select::put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }
    inline configuration_design description_attribute_select::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void description_attribute_select::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline date_role description_attribute_select::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void description_attribute_select::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role description_attribute_select::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void description_attribute_select::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline context_dependent_shape_representation description_attribute_select::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline void description_attribute_select::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline effectivity description_attribute_select::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void description_attribute_select::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline external_source description_attribute_select::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void description_attribute_select::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline organization_role description_attribute_select::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void description_attribute_select::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline person_and_organization_role description_attribute_select::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void description_attribute_select::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline person_and_organization description_attribute_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void description_attribute_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline property_definition_representation description_attribute_select::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void description_attribute_select::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline representation description_attribute_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void description_attribute_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline action_request_solution description_attribute_select_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline application_context description_attribute_select_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline approval_role description_attribute_select_get::get_approval_role() { return getEntityInstance("APPROVAL_ROLE"); }
    inline configuration_design description_attribute_select_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline date_role description_attribute_select_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role description_attribute_select_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline context_dependent_shape_representation description_attribute_select_get::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline effectivity description_attribute_select_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline external_source description_attribute_select_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline organization_role description_attribute_select_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline person_and_organization_role description_attribute_select_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline person_and_organization description_attribute_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline property_definition_representation description_attribute_select_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline representation description_attribute_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void description_attribute_select_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void description_attribute_select_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void description_attribute_select_put::put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }
    inline void description_attribute_select_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void description_attribute_select_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void description_attribute_select_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void description_attribute_select_put::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline void description_attribute_select_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void description_attribute_select_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void description_attribute_select_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void description_attribute_select_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void description_attribute_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void description_attribute_select_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline void description_attribute_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline dimensional_location dimensional_characteristic::get_dimensional_location() { return getEntityInstance("DIMENSIONAL_LOCATION"); }
    inline void dimensional_characteristic::put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }
    inline dimensional_size dimensional_characteristic::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void dimensional_characteristic::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline dimensional_location dimensional_characteristic_get::get_dimensional_location() { return getEntityInstance("DIMENSIONAL_LOCATION"); }
    inline dimensional_size dimensional_characteristic_get::get_dimensional_size() { return getEntityInstance("DIMENSIONAL_SIZE"); }
    inline void dimensional_characteristic_put::put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }
    inline void dimensional_characteristic_put::put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
    inline document document_identifier_assigned_item::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void document_identifier_assigned_item::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline document document_identifier_assigned_item_get::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void document_identifier_assigned_item_put::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline annotation_text_occurrence draughting_callout_element::get_annotation_text_occurrence() { return getEntityInstance("ANNOTATION_TEXT_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }
    inline annotation_symbol_occurrence draughting_callout_element::get_annotation_symbol_occurrence() { return getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }
    inline annotation_curve_occurrence draughting_callout_element::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void draughting_callout_element::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline annotation_text_occurrence draughting_callout_element_get::get_annotation_text_occurrence() { return getEntityInstance("ANNOTATION_TEXT_OCCURRENCE"); }
    inline annotation_symbol_occurrence draughting_callout_element_get::get_annotation_symbol_occurrence() { return getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE"); }
    inline annotation_curve_occurrence draughting_callout_element_get::get_annotation_curve_occurrence() { return getEntityInstance("ANNOTATION_CURVE_OCCURRENCE"); }
    inline void draughting_callout_element_put::put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }
    inline void draughting_callout_element_put::put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }
    inline void draughting_callout_element_put::put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
    inline annotation_occurrence draughting_model_item_association_select::get_annotation_occurrence() { return getEntityInstance("ANNOTATION_OCCURRENCE"); }
    inline void draughting_model_item_association_select::put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }
    inline draughting_callout draughting_model_item_association_select::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_association_select::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline annotation_occurrence draughting_model_item_association_select_get::get_annotation_occurrence() { return getEntityInstance("ANNOTATION_OCCURRENCE"); }
    inline draughting_callout draughting_model_item_association_select_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_association_select_put::put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }
    inline void draughting_model_item_association_select_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline mapped_item draughting_model_item_select::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void draughting_model_item_select::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline styled_item draughting_model_item_select::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void draughting_model_item_select::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline camera_model draughting_model_item_select::get_camera_model() { return getEntityInstance("CAMERA_MODEL"); }
    inline void draughting_model_item_select::put_camera_model(camera_model inst) { putEntityInstance("CAMERA_MODEL", inst); }
    inline draughting_callout draughting_model_item_select::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_select::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline mapped_item draughting_model_item_select_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline styled_item draughting_model_item_select_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline camera_model draughting_model_item_select_get::get_camera_model() { return getEntityInstance("CAMERA_MODEL"); }
    inline draughting_callout draughting_model_item_select_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void draughting_model_item_select_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void draughting_model_item_select_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void draughting_model_item_select_put::put_camera_model(camera_model inst) { putEntityInstance("CAMERA_MODEL", inst); }
    inline void draughting_model_item_select_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline drawing_revision draughting_titled_item::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline void draughting_titled_item::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline drawing_sheet_revision draughting_titled_item::get_drawing_sheet_revision() { return getEntityInstance("DRAWING_SHEET_REVISION"); }
    inline void draughting_titled_item::put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
    inline drawing_revision draughting_titled_item_get::get_drawing_revision() { return getEntityInstance("DRAWING_REVISION"); }
    inline drawing_sheet_revision draughting_titled_item_get::get_drawing_sheet_revision() { return getEntityInstance("DRAWING_SHEET_REVISION"); }
    inline void draughting_titled_item_put::put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
    inline void draughting_titled_item_put::put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
    inline assembly_component_usage_substitute effectivity_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void effectivity_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline product effectivity_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void effectivity_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition effectivity_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void effectivity_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation effectivity_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void effectivity_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship effectivity_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void effectivity_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_substitute effectivity_item::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void effectivity_item::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline assembly_component_usage_substitute effectivity_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline product effectivity_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition effectivity_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation effectivity_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship effectivity_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_substitute effectivity_item_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void effectivity_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void effectivity_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void effectivity_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void effectivity_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void effectivity_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void effectivity_item_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline organizational_project event_occurrence_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void event_occurrence_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project event_occurrence_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void event_occurrence_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline action_relationship external_identification_item::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void external_identification_item::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline action_request_status external_identification_item::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline void external_identification_item::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline applied_organization_assignment external_identification_item::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline void external_identification_item::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline applied_person_and_organization_assignment external_identification_item::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline void external_identification_item::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline approval external_identification_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void external_identification_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_status external_identification_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void external_identification_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline date_and_time_assignment external_identification_item::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline void external_identification_item::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline date_assignment external_identification_item::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline void external_identification_item::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline document_file external_identification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void external_identification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline external_source external_identification_item::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void external_identification_item::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline externally_defined_class external_identification_item::get_externally_defined_class() { return getEntityInstance("EXTERNALLY_DEFINED_CLASS"); }
    inline void external_identification_item::put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }
    inline externally_defined_context_dependent_unit external_identification_item::get_externally_defined_context_dependent_unit() { return getEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT"); }
    inline void external_identification_item::put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT", inst); }
    inline externally_defined_conversion_based_unit external_identification_item::get_externally_defined_conversion_based_unit() { return getEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT"); }
    inline void external_identification_item::put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT", inst); }
    inline externally_defined_general_property external_identification_item::get_externally_defined_general_property() { return getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY"); }
    inline void external_identification_item::put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }
    inline externally_defined_picture_representation_item external_identification_item::get_externally_defined_picture_representation_item() { return getEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM"); }
    inline void external_identification_item::put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM", inst); }
    inline externally_defined_representation_item external_identification_item::get_externally_defined_representation_item() { return getEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM"); }
    inline void external_identification_item::put_externally_defined_representation_item(externally_defined_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM", inst); }
    inline organizational_address external_identification_item::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline void external_identification_item::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline product_definition external_identification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void external_identification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline security_classification external_identification_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void external_identification_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline trimmed_curve external_identification_item::get_trimmed_curve() { return getEntityInstance("TRIMMED_CURVE"); }
    inline void external_identification_item::put_trimmed_curve(trimmed_curve inst) { putEntityInstance("TRIMMED_CURVE", inst); }
    inline versioned_action_request external_identification_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void external_identification_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action_relationship external_identification_item_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline action_request_status external_identification_item_get::get_action_request_status() { return getEntityInstance("ACTION_REQUEST_STATUS"); }
    inline applied_organization_assignment external_identification_item_get::get_applied_organization_assignment() { return getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT"); }
    inline applied_person_and_organization_assignment external_identification_item_get::get_applied_person_and_organization_assignment() { return getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT"); }
    inline approval external_identification_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_status external_identification_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline date_and_time_assignment external_identification_item_get::get_date_and_time_assignment() { return getEntityInstance("DATE_AND_TIME_ASSIGNMENT"); }
    inline date_assignment external_identification_item_get::get_date_assignment() { return getEntityInstance("DATE_ASSIGNMENT"); }
    inline document_file external_identification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline external_source external_identification_item_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline externally_defined_class external_identification_item_get::get_externally_defined_class() { return getEntityInstance("EXTERNALLY_DEFINED_CLASS"); }
    inline externally_defined_context_dependent_unit external_identification_item_get::get_externally_defined_context_dependent_unit() { return getEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT"); }
    inline externally_defined_conversion_based_unit external_identification_item_get::get_externally_defined_conversion_based_unit() { return getEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT"); }
    inline externally_defined_general_property external_identification_item_get::get_externally_defined_general_property() { return getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY"); }
    inline externally_defined_picture_representation_item external_identification_item_get::get_externally_defined_picture_representation_item() { return getEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM"); }
    inline externally_defined_representation_item external_identification_item_get::get_externally_defined_representation_item() { return getEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM"); }
    inline organizational_address external_identification_item_get::get_organizational_address() { return getEntityInstance("ORGANIZATIONAL_ADDRESS"); }
    inline product_definition external_identification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline security_classification external_identification_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline trimmed_curve external_identification_item_get::get_trimmed_curve() { return getEntityInstance("TRIMMED_CURVE"); }
    inline versioned_action_request external_identification_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void external_identification_item_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void external_identification_item_put::put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
    inline void external_identification_item_put::put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
    inline void external_identification_item_put::put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
    inline void external_identification_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void external_identification_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void external_identification_item_put::put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
    inline void external_identification_item_put::put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
    inline void external_identification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void external_identification_item_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void external_identification_item_put::put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }
    inline void external_identification_item_put::put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT", inst); }
    inline void external_identification_item_put::put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT", inst); }
    inline void external_identification_item_put::put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }
    inline void external_identification_item_put::put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM", inst); }
    inline void external_identification_item_put::put_externally_defined_representation_item(externally_defined_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM", inst); }
    inline void external_identification_item_put::put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
    inline void external_identification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void external_identification_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void external_identification_item_put::put_trimmed_curve(trimmed_curve inst) { putEntityInstance("TRIMMED_CURVE", inst); }
    inline void external_identification_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline fill_area_style_tile_curve_with_style fill_area_style_tile_shape_select::get_fill_area_style_tile_curve_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE"); }
    inline void fill_area_style_tile_shape_select::put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE", inst); }
    inline fill_area_style_tile_coloured_region fill_area_style_tile_shape_select::get_fill_area_style_tile_coloured_region() { return getEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION"); }
    inline void fill_area_style_tile_shape_select::put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst) { putEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION", inst); }
    inline fill_area_style_tile_symbol_with_style fill_area_style_tile_shape_select::get_fill_area_style_tile_symbol_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE"); }
    inline void fill_area_style_tile_shape_select::put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }
    inline pre_defined_tile fill_area_style_tile_shape_select::get_pre_defined_tile() { return getEntityInstance("PRE_DEFINED_TILE"); }
    inline void fill_area_style_tile_shape_select::put_pre_defined_tile(pre_defined_tile inst) { putEntityInstance("PRE_DEFINED_TILE", inst); }
    inline externally_defined_tile fill_area_style_tile_shape_select::get_externally_defined_tile() { return getEntityInstance("EXTERNALLY_DEFINED_TILE"); }
    inline void fill_area_style_tile_shape_select::put_externally_defined_tile(externally_defined_tile inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE", inst); }
    inline fill_area_style_tile_curve_with_style fill_area_style_tile_shape_select_get::get_fill_area_style_tile_curve_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE"); }
    inline fill_area_style_tile_coloured_region fill_area_style_tile_shape_select_get::get_fill_area_style_tile_coloured_region() { return getEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION"); }
    inline fill_area_style_tile_symbol_with_style fill_area_style_tile_shape_select_get::get_fill_area_style_tile_symbol_with_style() { return getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE"); }
    inline pre_defined_tile fill_area_style_tile_shape_select_get::get_pre_defined_tile() { return getEntityInstance("PRE_DEFINED_TILE"); }
    inline externally_defined_tile fill_area_style_tile_shape_select_get::get_externally_defined_tile() { return getEntityInstance("EXTERNALLY_DEFINED_TILE"); }
    inline void fill_area_style_tile_shape_select_put::put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE", inst); }
    inline void fill_area_style_tile_shape_select_put::put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst) { putEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION", inst); }
    inline void fill_area_style_tile_shape_select_put::put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }
    inline void fill_area_style_tile_shape_select_put::put_pre_defined_tile(pre_defined_tile inst) { putEntityInstance("PRE_DEFINED_TILE", inst); }
    inline void fill_area_style_tile_shape_select_put::put_externally_defined_tile(externally_defined_tile inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE", inst); }
    inline fill_area_style_colour fill_style_select::get_fill_area_style_colour() { return getEntityInstance("FILL_AREA_STYLE_COLOUR"); }
    inline void fill_style_select::put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }
    inline externally_defined_tile_style fill_style_select::get_externally_defined_tile_style() { return getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE"); }
    inline void fill_style_select::put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }
    inline fill_area_style_tiles fill_style_select::get_fill_area_style_tiles() { return getEntityInstance("FILL_AREA_STYLE_TILES"); }
    inline void fill_style_select::put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }
    inline externally_defined_hatch_style fill_style_select::get_externally_defined_hatch_style() { return getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE"); }
    inline void fill_style_select::put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }
    inline fill_area_style_hatching fill_style_select::get_fill_area_style_hatching() { return getEntityInstance("FILL_AREA_STYLE_HATCHING"); }
    inline void fill_style_select::put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
    inline fill_area_style_colour fill_style_select_get::get_fill_area_style_colour() { return getEntityInstance("FILL_AREA_STYLE_COLOUR"); }
    inline externally_defined_tile_style fill_style_select_get::get_externally_defined_tile_style() { return getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE"); }
    inline fill_area_style_tiles fill_style_select_get::get_fill_area_style_tiles() { return getEntityInstance("FILL_AREA_STYLE_TILES"); }
    inline externally_defined_hatch_style fill_style_select_get::get_externally_defined_hatch_style() { return getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE"); }
    inline fill_area_style_hatching fill_style_select_get::get_fill_area_style_hatching() { return getEntityInstance("FILL_AREA_STYLE_HATCHING"); }
    inline void fill_style_select_put::put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }
    inline void fill_style_select_put::put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }
    inline void fill_style_select_put::put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }
    inline void fill_style_select_put::put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }
    inline void fill_style_select_put::put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
    inline pre_defined_text_font font_select::get_pre_defined_text_font() { return getEntityInstance("PRE_DEFINED_TEXT_FONT"); }
    inline void font_select::put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }
    inline externally_defined_text_font font_select::get_externally_defined_text_font() { return getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT"); }
    inline void font_select::put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }
    inline text_font font_select::get_text_font() { return getEntityInstance("TEXT_FONT"); }
    inline void font_select::put_text_font(text_font inst) { putEntityInstance("TEXT_FONT", inst); }
    inline pre_defined_text_font font_select_get::get_pre_defined_text_font() { return getEntityInstance("PRE_DEFINED_TEXT_FONT"); }
    inline externally_defined_text_font font_select_get::get_externally_defined_text_font() { return getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT"); }
    inline text_font font_select_get::get_text_font() { return getEntityInstance("TEXT_FONT"); }
    inline void font_select_put::put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }
    inline void font_select_put::put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }
    inline void font_select_put::put_text_font(text_font inst) { putEntityInstance("TEXT_FONT", inst); }
    inline founded_item founded_item_select::get_founded_item() { return getEntityInstance("FOUNDED_ITEM"); }
    inline void founded_item_select::put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }
    inline representation_item founded_item_select::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void founded_item_select::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline founded_item founded_item_select_get::get_founded_item() { return getEntityInstance("FOUNDED_ITEM"); }
    inline representation_item founded_item_select_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void founded_item_select_put::put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }
    inline void founded_item_select_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline surface generalized_surface_select::get_surface() { return getEntityInstance("SURFACE"); }
    inline void generalized_surface_select::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline face_surface generalized_surface_select::get_face_surface() { return getEntityInstance("FACE_SURFACE"); }
    inline void generalized_surface_select::put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
    inline surfaced_open_shell generalized_surface_select::get_surfaced_open_shell() { return getEntityInstance("SURFACED_OPEN_SHELL"); }
    inline void generalized_surface_select::put_surfaced_open_shell(surfaced_open_shell inst) { putEntityInstance("SURFACED_OPEN_SHELL", inst); }
    inline surface generalized_surface_select_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline face_surface generalized_surface_select_get::get_face_surface() { return getEntityInstance("FACE_SURFACE"); }
    inline surfaced_open_shell generalized_surface_select_get::get_surfaced_open_shell() { return getEntityInstance("SURFACED_OPEN_SHELL"); }
    inline void generalized_surface_select_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline void generalized_surface_select_put::put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
    inline void generalized_surface_select_put::put_surfaced_open_shell(surfaced_open_shell inst) { putEntityInstance("SURFACED_OPEN_SHELL", inst); }
    inline shape_aspect geometric_item_specific_usage_select::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void geometric_item_specific_usage_select::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship geometric_item_specific_usage_select::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void geometric_item_specific_usage_select::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_aspect geometric_item_specific_usage_select_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship geometric_item_specific_usage_select_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void geometric_item_specific_usage_select_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void geometric_item_specific_usage_select_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline point geometric_set_select::get_point() { return getEntityInstance("POINT"); }
    inline void geometric_set_select::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline curve geometric_set_select::get_curve() { return getEntityInstance("CURVE"); }
    inline void geometric_set_select::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline surface geometric_set_select::get_surface() { return getEntityInstance("SURFACE"); }
    inline void geometric_set_select::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline point geometric_set_select_get::get_point() { return getEntityInstance("POINT"); }
    inline curve geometric_set_select_get::get_curve() { return getEntityInstance("CURVE"); }
    inline surface geometric_set_select_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline void geometric_set_select_put::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline void geometric_set_select_put::put_curve(curve inst) { putEntityInstance("CURVE", inst); }
    inline void geometric_set_select_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline geometric_representation_item groupable_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void groupable_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline group_relationship groupable_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void groupable_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline mapped_item groupable_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void groupable_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline package_product_concept_feature groupable_item::get_package_product_concept_feature() { return getEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE"); }
    inline void groupable_item::put_package_product_concept_feature(package_product_concept_feature inst) { putEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature groupable_item::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void groupable_item::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_definition groupable_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void groupable_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation groupable_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void groupable_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline property_definition_representation groupable_item::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void groupable_item::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline representation groupable_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void groupable_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_item groupable_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void groupable_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline representation_relationship_with_transformation groupable_item::get_representation_relationship_with_transformation() { return getEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION"); }
    inline void groupable_item::put_representation_relationship_with_transformation(representation_relationship_with_transformation inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION", inst); }
    inline shape_aspect groupable_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void groupable_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship groupable_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void groupable_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_representation_relationship groupable_item::get_shape_representation_relationship() { return getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP"); }
    inline void groupable_item::put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }
    inline styled_item groupable_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void groupable_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline topological_representation_item groupable_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void groupable_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline geometric_representation_item groupable_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline group_relationship groupable_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline mapped_item groupable_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline package_product_concept_feature groupable_item_get::get_package_product_concept_feature() { return getEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature groupable_item_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_definition groupable_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation groupable_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline property_definition_representation groupable_item_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline representation groupable_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_item groupable_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline representation_relationship_with_transformation groupable_item_get::get_representation_relationship_with_transformation() { return getEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION"); }
    inline shape_aspect groupable_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship groupable_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline shape_representation_relationship groupable_item_get::get_shape_representation_relationship() { return getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP"); }
    inline styled_item groupable_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline topological_representation_item groupable_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void groupable_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void groupable_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void groupable_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void groupable_item_put::put_package_product_concept_feature(package_product_concept_feature inst) { putEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE", inst); }
    inline void groupable_item_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void groupable_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void groupable_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void groupable_item_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline void groupable_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void groupable_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void groupable_item_put::put_representation_relationship_with_transformation(representation_relationship_with_transformation inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION", inst); }
    inline void groupable_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void groupable_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void groupable_item_put::put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }
    inline void groupable_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void groupable_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline action id_attribute_select::get_action() { return getEntityInstance("ACTION"); }
    inline void id_attribute_select::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline address id_attribute_select::get_address() { return getEntityInstance("ADDRESS"); }
    inline void id_attribute_select::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline product_category id_attribute_select::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline void id_attribute_select::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline property_definition id_attribute_select::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void id_attribute_select::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline shape_aspect id_attribute_select::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void id_attribute_select::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship id_attribute_select::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void id_attribute_select::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline application_context id_attribute_select::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void id_attribute_select::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline group id_attribute_select::get_group() { return getEntityInstance("GROUP"); }
    inline void id_attribute_select::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline organizational_project id_attribute_select::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void id_attribute_select::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline representation id_attribute_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void id_attribute_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline action id_attribute_select_get::get_action() { return getEntityInstance("ACTION"); }
    inline address id_attribute_select_get::get_address() { return getEntityInstance("ADDRESS"); }
    inline product_category id_attribute_select_get::get_product_category() { return getEntityInstance("PRODUCT_CATEGORY"); }
    inline property_definition id_attribute_select_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline shape_aspect id_attribute_select_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship id_attribute_select_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline application_context id_attribute_select_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline group id_attribute_select_get::get_group() { return getEntityInstance("GROUP"); }
    inline organizational_project id_attribute_select_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline representation id_attribute_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void id_attribute_select_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void id_attribute_select_put::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline void id_attribute_select_put::put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
    inline void id_attribute_select_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void id_attribute_select_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void id_attribute_select_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void id_attribute_select_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void id_attribute_select_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void id_attribute_select_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void id_attribute_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline product_definition_relationship instance_usage_context_select::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void instance_usage_context_select::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_usage instance_usage_context_select::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void instance_usage_context_select::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline product_definition_relationship instance_usage_context_select_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_usage instance_usage_context_select_get::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void instance_usage_context_select_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void instance_usage_context_select_put::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline draughting_model invisibility_context::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void invisibility_context::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline presentation_representation invisibility_context::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void invisibility_context::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline presentation_set invisibility_context::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void invisibility_context::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline draughting_model invisibility_context_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline presentation_representation invisibility_context_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline presentation_set invisibility_context_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void invisibility_context_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void invisibility_context_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void invisibility_context_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline draughting_callout invisible_item::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline void invisible_item::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline presentation_layer_assignment invisible_item::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void invisible_item::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline representation invisible_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void invisible_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline styled_item invisible_item::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void invisible_item::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline draughting_callout invisible_item_get::get_draughting_callout() { return getEntityInstance("DRAUGHTING_CALLOUT"); }
    inline presentation_layer_assignment invisible_item_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline representation invisible_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline styled_item invisible_item_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void invisible_item_put::put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
    inline void invisible_item_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void invisible_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void invisible_item_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline presentation_representation layered_item::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void layered_item::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline representation_item layered_item::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void layered_item::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline presentation_representation layered_item_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline representation_item layered_item_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void layered_item_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void layered_item_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline pre_defined_marker marker_select::get_pre_defined_marker() { return getEntityInstance("PRE_DEFINED_MARKER"); }
    inline void marker_select::put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
    inline pre_defined_marker marker_select_get::get_pre_defined_marker() { return getEntityInstance("PRE_DEFINED_MARKER"); }
    inline void marker_select_put::put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
    inline draughting_model mechanical_design_and_draughting_relationship_select::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline void mechanical_design_and_draughting_relationship_select::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline mechanical_design_geometric_presentation_representation mechanical_design_and_draughting_relationship_select::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline void mechanical_design_and_draughting_relationship_select::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline mechanical_design_presentation_representation_with_draughting mechanical_design_and_draughting_relationship_select::get_mechanical_design_presentation_representation_with_draughting() { return getEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING"); }
    inline void mechanical_design_and_draughting_relationship_select::put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst) { putEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING", inst); }
    inline mechanical_design_shaded_presentation_representation mechanical_design_and_draughting_relationship_select::get_mechanical_design_shaded_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION"); }
    inline void mechanical_design_and_draughting_relationship_select::put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION", inst); }
    inline shape_representation mechanical_design_and_draughting_relationship_select::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void mechanical_design_and_draughting_relationship_select::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline draughting_model mechanical_design_and_draughting_relationship_select_get::get_draughting_model() { return getEntityInstance("DRAUGHTING_MODEL"); }
    inline mechanical_design_geometric_presentation_representation mechanical_design_and_draughting_relationship_select_get::get_mechanical_design_geometric_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION"); }
    inline mechanical_design_presentation_representation_with_draughting mechanical_design_and_draughting_relationship_select_get::get_mechanical_design_presentation_representation_with_draughting() { return getEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING"); }
    inline mechanical_design_shaded_presentation_representation mechanical_design_and_draughting_relationship_select_get::get_mechanical_design_shaded_presentation_representation() { return getEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION"); }
    inline shape_representation mechanical_design_and_draughting_relationship_select_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void mechanical_design_and_draughting_relationship_select_put::put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
    inline void mechanical_design_and_draughting_relationship_select_put::put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
    inline void mechanical_design_and_draughting_relationship_select_put::put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst) { putEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING", inst); }
    inline void mechanical_design_and_draughting_relationship_select_put::put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION", inst); }
    inline void mechanical_design_and_draughting_relationship_select_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline mapped_item mechanical_design_geometric_presentation_area_items::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void mechanical_design_geometric_presentation_area_items::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline mapped_item mechanical_design_geometric_presentation_area_items_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void mechanical_design_geometric_presentation_area_items_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline camera_model_d3 mechanical_design_geometric_presentation_representation_items::get_camera_model_d3() { return getEntityInstance("CAMERA_MODEL_D3"); }
    inline void mechanical_design_geometric_presentation_representation_items::put_camera_model_d3(camera_model_d3 inst) { putEntityInstance("CAMERA_MODEL_D3", inst); }
    inline mapped_item mechanical_design_geometric_presentation_representation_items::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void mechanical_design_geometric_presentation_representation_items::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline styled_item mechanical_design_geometric_presentation_representation_items::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void mechanical_design_geometric_presentation_representation_items::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline camera_model_d3 mechanical_design_geometric_presentation_representation_items_get::get_camera_model_d3() { return getEntityInstance("CAMERA_MODEL_D3"); }
    inline mapped_item mechanical_design_geometric_presentation_representation_items_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline styled_item mechanical_design_geometric_presentation_representation_items_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void mechanical_design_geometric_presentation_representation_items_put::put_camera_model_d3(camera_model_d3 inst) { putEntityInstance("CAMERA_MODEL_D3", inst); }
    inline void mechanical_design_geometric_presentation_representation_items_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void mechanical_design_geometric_presentation_representation_items_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline alternate_product_relationship multi_language_attribute_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline application_context multi_language_attribute_item::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline void multi_language_attribute_item::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline applied_certification_assignment multi_language_attribute_item::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline applied_document_reference multi_language_attribute_item::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline void multi_language_attribute_item::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline applied_document_usage_constraint_assignment multi_language_attribute_item::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline applied_external_identification_assignment multi_language_attribute_item::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment multi_language_attribute_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_organizational_project_assignment multi_language_attribute_item::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline approval multi_language_attribute_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void multi_language_attribute_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline approval_relationship multi_language_attribute_item::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline approval_status multi_language_attribute_item::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline void multi_language_attribute_item::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline assembly_component_usage_substitute multi_language_attribute_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void multi_language_attribute_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline attribute_value_assignment multi_language_attribute_item::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline certification multi_language_attribute_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void multi_language_attribute_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline certification_type multi_language_attribute_item::get_certification_type() { return getEntityInstance("CERTIFICATION_TYPE"); }
    inline void multi_language_attribute_item::put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
    inline colour multi_language_attribute_item::get_colour() { return getEntityInstance("COLOUR"); }
    inline void multi_language_attribute_item::put_colour(colour inst) { putEntityInstance("COLOUR", inst); }
    inline configuration_design multi_language_attribute_item::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void multi_language_attribute_item::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline configuration_item multi_language_attribute_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void multi_language_attribute_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract multi_language_attribute_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void multi_language_attribute_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline date_role multi_language_attribute_item::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline void multi_language_attribute_item::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline date_time_role multi_language_attribute_item::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline void multi_language_attribute_item::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline descriptive_representation_item multi_language_attribute_item::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline document_relationship multi_language_attribute_item::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline document_usage_role multi_language_attribute_item::get_document_usage_role() { return getEntityInstance("DOCUMENT_USAGE_ROLE"); }
    inline void multi_language_attribute_item::put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
    inline effectivity multi_language_attribute_item::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void multi_language_attribute_item::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline effectivity_relationship multi_language_attribute_item::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline event_occurrence multi_language_attribute_item::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline void multi_language_attribute_item::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline external_source multi_language_attribute_item::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline void multi_language_attribute_item::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline general_property multi_language_attribute_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void multi_language_attribute_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline general_property_relationship multi_language_attribute_item::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline geometric_representation_item multi_language_attribute_item::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline geometric_tolerance multi_language_attribute_item::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline void multi_language_attribute_item::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline identification_role multi_language_attribute_item::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline void multi_language_attribute_item::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline information_right multi_language_attribute_item::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline void multi_language_attribute_item::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline information_usage_right multi_language_attribute_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void multi_language_attribute_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline make_from_usage_option multi_language_attribute_item::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline void multi_language_attribute_item::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline mapped_item multi_language_attribute_item::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline void multi_language_attribute_item::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline object_role multi_language_attribute_item::get_object_role() { return getEntityInstance("OBJECT_ROLE"); }
    inline void multi_language_attribute_item::put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
    inline organization_relationship multi_language_attribute_item::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline organization_role multi_language_attribute_item::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline void multi_language_attribute_item::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline organizational_project multi_language_attribute_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void multi_language_attribute_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline organizational_project_relationship multi_language_attribute_item::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline organizational_project_role multi_language_attribute_item::get_organizational_project_role() { return getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE"); }
    inline void multi_language_attribute_item::put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
    inline person_and_organization multi_language_attribute_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void multi_language_attribute_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline person_and_organization_role multi_language_attribute_item::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline void multi_language_attribute_item::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline product multi_language_attribute_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void multi_language_attribute_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_concept multi_language_attribute_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void multi_language_attribute_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_relationship multi_language_attribute_item::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline product_definition multi_language_attribute_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void multi_language_attribute_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_context multi_language_attribute_item::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline void multi_language_attribute_item::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline product_definition_formation multi_language_attribute_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void multi_language_attribute_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship multi_language_attribute_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline product_definition_relationship multi_language_attribute_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline product_definition_shape multi_language_attribute_item::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline void multi_language_attribute_item::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline product_related_product_category multi_language_attribute_item::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline void multi_language_attribute_item::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline property_definition multi_language_attribute_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void multi_language_attribute_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline representation multi_language_attribute_item::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void multi_language_attribute_item::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_relationship multi_language_attribute_item::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline security_classification multi_language_attribute_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void multi_language_attribute_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline security_classification_assignment multi_language_attribute_item::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void multi_language_attribute_item::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline shape_aspect multi_language_attribute_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void multi_language_attribute_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship multi_language_attribute_item::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void multi_language_attribute_item::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline shape_representation multi_language_attribute_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void multi_language_attribute_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline time_interval_role multi_language_attribute_item::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline void multi_language_attribute_item::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline topological_representation_item multi_language_attribute_item::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline void multi_language_attribute_item::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline uncertainty_measure_with_unit multi_language_attribute_item::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline void multi_language_attribute_item::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline usage_association multi_language_attribute_item::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void multi_language_attribute_item::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline alternate_product_relationship multi_language_attribute_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline application_context multi_language_attribute_item_get::get_application_context() { return getEntityInstance("APPLICATION_CONTEXT"); }
    inline applied_certification_assignment multi_language_attribute_item_get::get_applied_certification_assignment() { return getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT"); }
    inline applied_document_reference multi_language_attribute_item_get::get_applied_document_reference() { return getEntityInstance("APPLIED_DOCUMENT_REFERENCE"); }
    inline applied_document_usage_constraint_assignment multi_language_attribute_item_get::get_applied_document_usage_constraint_assignment() { return getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT"); }
    inline applied_external_identification_assignment multi_language_attribute_item_get::get_applied_external_identification_assignment() { return getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment multi_language_attribute_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_organizational_project_assignment multi_language_attribute_item_get::get_applied_organizational_project_assignment() { return getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT"); }
    inline approval multi_language_attribute_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline approval_relationship multi_language_attribute_item_get::get_approval_relationship() { return getEntityInstance("APPROVAL_RELATIONSHIP"); }
    inline approval_status multi_language_attribute_item_get::get_approval_status() { return getEntityInstance("APPROVAL_STATUS"); }
    inline assembly_component_usage_substitute multi_language_attribute_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline attribute_value_assignment multi_language_attribute_item_get::get_attribute_value_assignment() { return getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT"); }
    inline certification multi_language_attribute_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline certification_type multi_language_attribute_item_get::get_certification_type() { return getEntityInstance("CERTIFICATION_TYPE"); }
    inline colour multi_language_attribute_item_get::get_colour() { return getEntityInstance("COLOUR"); }
    inline configuration_design multi_language_attribute_item_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline configuration_item multi_language_attribute_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract multi_language_attribute_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline date_role multi_language_attribute_item_get::get_date_role() { return getEntityInstance("DATE_ROLE"); }
    inline date_time_role multi_language_attribute_item_get::get_date_time_role() { return getEntityInstance("DATE_TIME_ROLE"); }
    inline descriptive_representation_item multi_language_attribute_item_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline document_relationship multi_language_attribute_item_get::get_document_relationship() { return getEntityInstance("DOCUMENT_RELATIONSHIP"); }
    inline document_usage_role multi_language_attribute_item_get::get_document_usage_role() { return getEntityInstance("DOCUMENT_USAGE_ROLE"); }
    inline effectivity multi_language_attribute_item_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline effectivity_relationship multi_language_attribute_item_get::get_effectivity_relationship() { return getEntityInstance("EFFECTIVITY_RELATIONSHIP"); }
    inline event_occurrence multi_language_attribute_item_get::get_event_occurrence() { return getEntityInstance("EVENT_OCCURRENCE"); }
    inline external_source multi_language_attribute_item_get::get_external_source() { return getEntityInstance("EXTERNAL_SOURCE"); }
    inline general_property multi_language_attribute_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline general_property_relationship multi_language_attribute_item_get::get_general_property_relationship() { return getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP"); }
    inline geometric_representation_item multi_language_attribute_item_get::get_geometric_representation_item() { return getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM"); }
    inline geometric_tolerance multi_language_attribute_item_get::get_geometric_tolerance() { return getEntityInstance("GEOMETRIC_TOLERANCE"); }
    inline identification_role multi_language_attribute_item_get::get_identification_role() { return getEntityInstance("IDENTIFICATION_ROLE"); }
    inline information_right multi_language_attribute_item_get::get_information_right() { return getEntityInstance("INFORMATION_RIGHT"); }
    inline information_usage_right multi_language_attribute_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline make_from_usage_option multi_language_attribute_item_get::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline mapped_item multi_language_attribute_item_get::get_mapped_item() { return getEntityInstance("MAPPED_ITEM"); }
    inline object_role multi_language_attribute_item_get::get_object_role() { return getEntityInstance("OBJECT_ROLE"); }
    inline organization_relationship multi_language_attribute_item_get::get_organization_relationship() { return getEntityInstance("ORGANIZATION_RELATIONSHIP"); }
    inline organization_role multi_language_attribute_item_get::get_organization_role() { return getEntityInstance("ORGANIZATION_ROLE"); }
    inline organizational_project multi_language_attribute_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline organizational_project_relationship multi_language_attribute_item_get::get_organizational_project_relationship() { return getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP"); }
    inline organizational_project_role multi_language_attribute_item_get::get_organizational_project_role() { return getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE"); }
    inline person_and_organization multi_language_attribute_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline person_and_organization_role multi_language_attribute_item_get::get_person_and_organization_role() { return getEntityInstance("PERSON_AND_ORGANIZATION_ROLE"); }
    inline product multi_language_attribute_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_concept multi_language_attribute_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_relationship multi_language_attribute_item_get::get_product_concept_relationship() { return getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP"); }
    inline product_definition multi_language_attribute_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_context multi_language_attribute_item_get::get_product_definition_context() { return getEntityInstance("PRODUCT_DEFINITION_CONTEXT"); }
    inline product_definition_formation multi_language_attribute_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship multi_language_attribute_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline product_definition_relationship multi_language_attribute_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline product_definition_shape multi_language_attribute_item_get::get_product_definition_shape() { return getEntityInstance("PRODUCT_DEFINITION_SHAPE"); }
    inline product_related_product_category multi_language_attribute_item_get::get_product_related_product_category() { return getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY"); }
    inline property_definition multi_language_attribute_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline representation multi_language_attribute_item_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_relationship multi_language_attribute_item_get::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline security_classification multi_language_attribute_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline security_classification_assignment multi_language_attribute_item_get::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline shape_aspect multi_language_attribute_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship multi_language_attribute_item_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline shape_representation multi_language_attribute_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline time_interval_role multi_language_attribute_item_get::get_time_interval_role() { return getEntityInstance("TIME_INTERVAL_ROLE"); }
    inline topological_representation_item multi_language_attribute_item_get::get_topological_representation_item() { return getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM"); }
    inline uncertainty_measure_with_unit multi_language_attribute_item_get::get_uncertainty_measure_with_unit() { return getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT"); }
    inline usage_association multi_language_attribute_item_get::get_usage_association() { return getEntityInstance("USAGE_ASSOCIATION"); }
    inline void multi_language_attribute_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
    inline void multi_language_attribute_item_put::put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
    inline void multi_language_attribute_item_put::put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void multi_language_attribute_item_put::put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
    inline void multi_language_attribute_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void multi_language_attribute_item_put::put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void multi_language_attribute_item_put::put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
    inline void multi_language_attribute_item_put::put_colour(colour inst) { putEntityInstance("COLOUR", inst); }
    inline void multi_language_attribute_item_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void multi_language_attribute_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void multi_language_attribute_item_put::put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void multi_language_attribute_item_put::put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
    inline void multi_language_attribute_item_put::put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
    inline void multi_language_attribute_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void multi_language_attribute_item_put::put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
    inline void multi_language_attribute_item_put::put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
    inline void multi_language_attribute_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void multi_language_attribute_item_put::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline void multi_language_attribute_item_put::put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void multi_language_attribute_item_put::put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void multi_language_attribute_item_put::put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void multi_language_attribute_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void multi_language_attribute_item_put::put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
    inline void multi_language_attribute_item_put::put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
    inline void multi_language_attribute_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void multi_language_attribute_item_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void multi_language_attribute_item_put::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void multi_language_attribute_item_put::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void multi_language_attribute_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void multi_language_attribute_item_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline void multi_language_attribute_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void multi_language_attribute_item_put::put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
    inline void multi_language_attribute_item_put::put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
    inline void multi_language_attribute_item_put::put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
    inline void multi_language_attribute_item_put::put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
    inline action_request_solution name_attribute_select::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline void name_attribute_select::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline address name_attribute_select::get_address() { return getEntityInstance("ADDRESS"); }
    inline void name_attribute_select::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline configuration_design name_attribute_select::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline void name_attribute_select::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline context_dependent_shape_representation name_attribute_select::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline void name_attribute_select::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline derived_unit name_attribute_select::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void name_attribute_select::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline effectivity name_attribute_select::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline void name_attribute_select::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline person_and_organization name_attribute_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void name_attribute_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product_definition name_attribute_select::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void name_attribute_select::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_substitute name_attribute_select::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline void name_attribute_select::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline property_definition_representation name_attribute_select::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void name_attribute_select::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline action_request_solution name_attribute_select_get::get_action_request_solution() { return getEntityInstance("ACTION_REQUEST_SOLUTION"); }
    inline address name_attribute_select_get::get_address() { return getEntityInstance("ADDRESS"); }
    inline configuration_design name_attribute_select_get::get_configuration_design() { return getEntityInstance("CONFIGURATION_DESIGN"); }
    inline context_dependent_shape_representation name_attribute_select_get::get_context_dependent_shape_representation() { return getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"); }
    inline derived_unit name_attribute_select_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline effectivity name_attribute_select_get::get_effectivity() { return getEntityInstance("EFFECTIVITY"); }
    inline person_and_organization name_attribute_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product_definition name_attribute_select_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_substitute name_attribute_select_get::get_product_definition_substitute() { return getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE"); }
    inline property_definition_representation name_attribute_select_get::get_property_definition_representation() { return getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION"); }
    inline void name_attribute_select_put::put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
    inline void name_attribute_select_put::put_address(address inst) { putEntityInstance("ADDRESS", inst); }
    inline void name_attribute_select_put::put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
    inline void name_attribute_select_put::put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
    inline void name_attribute_select_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void name_attribute_select_put::put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
    inline void name_attribute_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void name_attribute_select_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void name_attribute_select_put::put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
    inline void name_attribute_select_put::put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
    inline assembly_component_usage name_item::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void name_item::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline external_class_library name_item::get_external_class_library() { return getEntityInstance("EXTERNAL_CLASS_LIBRARY"); }
    inline void name_item::put_external_class_library(external_class_library inst) { putEntityInstance("EXTERNAL_CLASS_LIBRARY", inst); }
    inline group name_item::get_group() { return getEntityInstance("GROUP"); }
    inline void name_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship name_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void name_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline product name_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void name_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition name_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void name_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline assembly_component_usage name_item_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline external_class_library name_item_get::get_external_class_library() { return getEntityInstance("EXTERNAL_CLASS_LIBRARY"); }
    inline group name_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship name_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline product name_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition name_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void name_item_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void name_item_put::put_external_class_library(external_class_library inst) { putEntityInstance("EXTERNAL_CLASS_LIBRARY", inst); }
    inline void name_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void name_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void name_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void name_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline action organization_item::get_action() { return getEntityInstance("ACTION"); }
    inline void organization_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive organization_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void organization_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline alternate_product_relationship organization_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void organization_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment organization_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void organization_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment organization_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment organization_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment organization_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void organization_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval organization_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void organization_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline assembly_component_usage_substitute organization_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void organization_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification organization_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void organization_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline class_ organization_item::get_class_() { return getEntityInstance("CLASS"); }
    inline void organization_item::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline configuration_item organization_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void organization_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract organization_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void organization_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file organization_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void organization_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline executed_action organization_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void organization_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property organization_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void organization_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline information_usage_right organization_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void organization_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline organizational_project organization_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void organization_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline product organization_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void organization_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition organization_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void organization_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation organization_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void organization_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship organization_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void organization_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline property_definition organization_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void organization_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline rule_action organization_item::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline void organization_item::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline security_classification organization_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void organization_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_representation organization_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void organization_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request organization_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void organization_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action organization_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive organization_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline alternate_product_relationship organization_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment organization_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment organization_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment organization_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_security_classification_assignment organization_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval organization_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline assembly_component_usage_substitute organization_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification organization_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline class_ organization_item_get::get_class_() { return getEntityInstance("CLASS"); }
    inline configuration_item organization_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract organization_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file organization_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline executed_action organization_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property organization_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline information_usage_right organization_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline organizational_project organization_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline product organization_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition organization_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation organization_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship organization_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline property_definition organization_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline rule_action organization_item_get::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline security_classification organization_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_representation organization_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request organization_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void organization_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void organization_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void organization_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void organization_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void organization_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void organization_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void organization_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void organization_item_put::put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
    inline void organization_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void organization_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void organization_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void organization_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void organization_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void organization_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void organization_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void organization_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void organization_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void organization_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void organization_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void organization_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void organization_item_put::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline void organization_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void organization_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void organization_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline axis2_placement_3d orientation_basis_select::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline void orientation_basis_select::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline min_and_major_ply_orientation_basis orientation_basis_select::get_min_and_major_ply_orientation_basis() { return getEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS"); }
    inline void orientation_basis_select::put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst) { putEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS", inst); }
    inline axis2_placement_3d orientation_basis_select_get::get_axis2_placement_3d() { return getEntityInstance("AXIS2_PLACEMENT_3D"); }
    inline min_and_major_ply_orientation_basis orientation_basis_select_get::get_min_and_major_ply_orientation_basis() { return getEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS"); }
    inline void orientation_basis_select_put::put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
    inline void orientation_basis_select_put::put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst) { putEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS", inst); }
    inline pcurve pcurve_or_surface::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline void pcurve_or_surface::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline surface pcurve_or_surface::get_surface() { return getEntityInstance("SURFACE"); }
    inline void pcurve_or_surface::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline pcurve pcurve_or_surface_get::get_pcurve() { return getEntityInstance("PCURVE"); }
    inline surface pcurve_or_surface_get::get_surface() { return getEntityInstance("SURFACE"); }
    inline void pcurve_or_surface_put::put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
    inline void pcurve_or_surface_put::put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
    inline action person_and_organization_item::get_action() { return getEntityInstance("ACTION"); }
    inline void person_and_organization_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_directive person_and_organization_item::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline void person_and_organization_item::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline alternate_product_relationship person_and_organization_item::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline void person_and_organization_item::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline applied_action_assignment person_and_organization_item::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline applied_classification_assignment person_and_organization_item::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline applied_identification_assignment person_and_organization_item::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline applied_security_classification_assignment person_and_organization_item::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void person_and_organization_item::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline approval person_and_organization_item::get_approval() { return getEntityInstance("APPROVAL"); }
    inline void person_and_organization_item::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline assembly_component_usage_substitute person_and_organization_item::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline void person_and_organization_item::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline certification person_and_organization_item::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline void person_and_organization_item::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline configuration_item person_and_organization_item::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline void person_and_organization_item::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline contract person_and_organization_item::get_contract() { return getEntityInstance("CONTRACT"); }
    inline void person_and_organization_item::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline document_file person_and_organization_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void person_and_organization_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline executed_action person_and_organization_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void person_and_organization_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline general_property person_and_organization_item::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void person_and_organization_item::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline information_usage_right person_and_organization_item::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline void person_and_organization_item::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline organizational_project person_and_organization_item::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline void person_and_organization_item::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline person_and_organization person_and_organization_item::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_and_organization_item::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline product person_and_organization_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void person_and_organization_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition person_and_organization_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void person_and_organization_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation person_and_organization_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void person_and_organization_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation_relationship person_and_organization_item::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline void person_and_organization_item::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline property_definition person_and_organization_item::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void person_and_organization_item::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline rule_action person_and_organization_item::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline void person_and_organization_item::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline security_classification person_and_organization_item::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline void person_and_organization_item::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline shape_representation person_and_organization_item::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline void person_and_organization_item::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline versioned_action_request person_and_organization_item::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void person_and_organization_item::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline action person_and_organization_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_directive person_and_organization_item_get::get_action_directive() { return getEntityInstance("ACTION_DIRECTIVE"); }
    inline alternate_product_relationship person_and_organization_item_get::get_alternate_product_relationship() { return getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP"); }
    inline applied_action_assignment person_and_organization_item_get::get_applied_action_assignment() { return getEntityInstance("APPLIED_ACTION_ASSIGNMENT"); }
    inline applied_classification_assignment person_and_organization_item_get::get_applied_classification_assignment() { return getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT"); }
    inline applied_identification_assignment person_and_organization_item_get::get_applied_identification_assignment() { return getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT"); }
    inline applied_security_classification_assignment person_and_organization_item_get::get_applied_security_classification_assignment() { return getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline approval person_and_organization_item_get::get_approval() { return getEntityInstance("APPROVAL"); }
    inline assembly_component_usage_substitute person_and_organization_item_get::get_assembly_component_usage_substitute() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE"); }
    inline certification person_and_organization_item_get::get_certification() { return getEntityInstance("CERTIFICATION"); }
    inline configuration_item person_and_organization_item_get::get_configuration_item() { return getEntityInstance("CONFIGURATION_ITEM"); }
    inline contract person_and_organization_item_get::get_contract() { return getEntityInstance("CONTRACT"); }
    inline document_file person_and_organization_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline executed_action person_and_organization_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline general_property person_and_organization_item_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline information_usage_right person_and_organization_item_get::get_information_usage_right() { return getEntityInstance("INFORMATION_USAGE_RIGHT"); }
    inline organizational_project person_and_organization_item_get::get_organizational_project() { return getEntityInstance("ORGANIZATIONAL_PROJECT"); }
    inline person_and_organization person_and_organization_item_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline product person_and_organization_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition person_and_organization_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation person_and_organization_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_formation_relationship person_and_organization_item_get::get_product_definition_formation_relationship() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP"); }
    inline property_definition person_and_organization_item_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline rule_action person_and_organization_item_get::get_rule_action() { return getEntityInstance("RULE_ACTION"); }
    inline security_classification person_and_organization_item_get::get_security_classification() { return getEntityInstance("SECURITY_CLASSIFICATION"); }
    inline shape_representation person_and_organization_item_get::get_shape_representation() { return getEntityInstance("SHAPE_REPRESENTATION"); }
    inline versioned_action_request person_and_organization_item_get::get_versioned_action_request() { return getEntityInstance("VERSIONED_ACTION_REQUEST"); }
    inline void person_and_organization_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void person_and_organization_item_put::put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
    inline void person_and_organization_item_put::put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline void person_and_organization_item_put::put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
    inline void person_and_organization_item_put::put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
    inline void person_and_organization_item_put::put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
    inline void person_and_organization_item_put::put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
    inline void person_and_organization_item_put::put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
    inline void person_and_organization_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void person_and_organization_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void person_and_organization_item_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void person_and_organization_item_put::put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
    inline void person_and_organization_item_put::put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
    inline void person_and_organization_item_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline void person_and_organization_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void person_and_organization_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void person_and_organization_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void person_and_organization_item_put::put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
    inline void person_and_organization_item_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void person_and_organization_item_put::put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
    inline void person_and_organization_item_put::put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
    inline void person_and_organization_item_put::put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
    inline void person_and_organization_item_put::put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
    inline person person_organization_select::get_person() { return getEntityInstance("PERSON"); }
    inline void person_organization_select::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline organization person_organization_select::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline void person_organization_select::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline person_and_organization person_organization_select::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_organization_select::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline person person_organization_select_get::get_person() { return getEntityInstance("PERSON"); }
    inline organization person_organization_select_get::get_organization() { return getEntityInstance("ORGANIZATION"); }
    inline person_and_organization person_organization_select_get::get_person_and_organization() { return getEntityInstance("PERSON_AND_ORGANIZATION"); }
    inline void person_organization_select_put::put_person(person inst) { putEntityInstance("PERSON", inst); }
    inline void person_organization_select_put::put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
    inline void person_organization_select_put::put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
    inline styled_item picture_representation_item_select::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline void picture_representation_item_select::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline planar_box picture_representation_item_select::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline void picture_representation_item_select::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline axis2_placement_2d picture_representation_item_select::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline void picture_representation_item_select::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline styled_item picture_representation_item_select_get::get_styled_item() { return getEntityInstance("STYLED_ITEM"); }
    inline planar_box picture_representation_item_select_get::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline axis2_placement_2d picture_representation_item_select_get::get_axis2_placement_2d() { return getEntityInstance("AXIS2_PLACEMENT_2D"); }
    inline void picture_representation_item_select_put::put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
    inline void picture_representation_item_select_put::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline void picture_representation_item_select_put::put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
    inline plane plane_or_planar_box::get_plane() { return getEntityInstance("PLANE"); }
    inline void plane_or_planar_box::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline planar_box plane_or_planar_box::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline void plane_or_planar_box::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline plane plane_or_planar_box_get::get_plane() { return getEntityInstance("PLANE"); }
    inline planar_box plane_or_planar_box_get::get_planar_box() { return getEntityInstance("PLANAR_BOX"); }
    inline void plane_or_planar_box_put::put_plane(plane inst) { putEntityInstance("PLANE", inst); }
    inline void plane_or_planar_box_put::put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
    inline point point_and_vector_member::get_point() { return getEntityInstance("POINT"); }
    inline void point_and_vector_member::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline direction point_and_vector_member::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void point_and_vector_member::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline point point_and_vector_member_get::get_point() { return getEntityInstance("POINT"); }
    inline direction point_and_vector_member_get::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void point_and_vector_member_put::put_point(point inst) { putEntityInstance("POINT", inst); }
    inline void point_and_vector_member_put::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline presentation_representation presentation_representation_select::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline void presentation_representation_select::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline presentation_set presentation_representation_select::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void presentation_representation_select::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline presentation_representation presentation_representation_select_get::get_presentation_representation() { return getEntityInstance("PRESENTATION_REPRESENTATION"); }
    inline presentation_set presentation_representation_select_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void presentation_representation_select_put::put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
    inline void presentation_representation_select_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline presentation_view presentation_size_assignment_select::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline void presentation_size_assignment_select::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline presentation_area presentation_size_assignment_select::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline void presentation_size_assignment_select::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline area_in_set presentation_size_assignment_select::get_area_in_set() { return getEntityInstance("AREA_IN_SET"); }
    inline void presentation_size_assignment_select::put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
    inline presentation_view presentation_size_assignment_select_get::get_presentation_view() { return getEntityInstance("PRESENTATION_VIEW"); }
    inline presentation_area presentation_size_assignment_select_get::get_presentation_area() { return getEntityInstance("PRESENTATION_AREA"); }
    inline area_in_set presentation_size_assignment_select_get::get_area_in_set() { return getEntityInstance("AREA_IN_SET"); }
    inline void presentation_size_assignment_select_put::put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
    inline void presentation_size_assignment_select_put::put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
    inline void presentation_size_assignment_select_put::put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
    inline point_style presentation_style_select::get_point_style() { return getEntityInstance("POINT_STYLE"); }
    inline void presentation_style_select::put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }
    inline curve_style presentation_style_select::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline void presentation_style_select::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline surface_style_usage presentation_style_select::get_surface_style_usage() { return getEntityInstance("SURFACE_STYLE_USAGE"); }
    inline void presentation_style_select::put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }
    inline symbol_style presentation_style_select::get_symbol_style() { return getEntityInstance("SYMBOL_STYLE"); }
    inline void presentation_style_select::put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }
    inline fill_area_style presentation_style_select::get_fill_area_style() { return getEntityInstance("FILL_AREA_STYLE"); }
    inline void presentation_style_select::put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }
    inline text_style presentation_style_select::get_text_style() { return getEntityInstance("TEXT_STYLE"); }
    inline void presentation_style_select::put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }
    inline point_style presentation_style_select_get::get_point_style() { return getEntityInstance("POINT_STYLE"); }
    inline curve_style presentation_style_select_get::get_curve_style() { return getEntityInstance("CURVE_STYLE"); }
    inline surface_style_usage presentation_style_select_get::get_surface_style_usage() { return getEntityInstance("SURFACE_STYLE_USAGE"); }
    inline symbol_style presentation_style_select_get::get_symbol_style() { return getEntityInstance("SYMBOL_STYLE"); }
    inline fill_area_style presentation_style_select_get::get_fill_area_style() { return getEntityInstance("FILL_AREA_STYLE"); }
    inline text_style presentation_style_select_get::get_text_style() { return getEntityInstance("TEXT_STYLE"); }
    inline void presentation_style_select_put::put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }
    inline void presentation_style_select_put::put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
    inline void presentation_style_select_put::put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }
    inline void presentation_style_select_put::put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }
    inline void presentation_style_select_put::put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }
    inline void presentation_style_select_put::put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }
    inline action presented_item_select::get_action() { return getEntityInstance("ACTION"); }
    inline void presented_item_select::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline action_method presented_item_select::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline void presented_item_select::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline action_relationship presented_item_select::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline void presented_item_select::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline product_concept presented_item_select::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void presented_item_select::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline product_concept_feature presented_item_select::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline void presented_item_select::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline product_concept_feature_category presented_item_select::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline void presented_item_select::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline product_definition presented_item_select::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void presented_item_select::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation presented_item_select::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void presented_item_select::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship presented_item_select::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void presented_item_select::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline action presented_item_select_get::get_action() { return getEntityInstance("ACTION"); }
    inline action_method presented_item_select_get::get_action_method() { return getEntityInstance("ACTION_METHOD"); }
    inline action_relationship presented_item_select_get::get_action_relationship() { return getEntityInstance("ACTION_RELATIONSHIP"); }
    inline product_concept presented_item_select_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline product_concept_feature presented_item_select_get::get_product_concept_feature() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE"); }
    inline product_concept_feature_category presented_item_select_get::get_product_concept_feature_category() { return getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY"); }
    inline product_definition presented_item_select_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation presented_item_select_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship presented_item_select_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void presented_item_select_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void presented_item_select_put::put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
    inline void presented_item_select_put::put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
    inline void presented_item_select_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline void presented_item_select_put::put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
    inline void presented_item_select_put::put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
    inline void presented_item_select_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void presented_item_select_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void presented_item_select_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline assembly_component_usage product_definition_or_assembly_relationship::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void product_definition_or_assembly_relationship::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline product_definition product_definition_or_assembly_relationship::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_definition_or_assembly_relationship::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline assembly_component_usage product_definition_or_assembly_relationship_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline product_definition product_definition_or_assembly_relationship_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_definition_or_assembly_relationship_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void product_definition_or_assembly_relationship_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition product_definition_or_breakdown_element_usage::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_definition_or_breakdown_element_usage::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_usage product_definition_or_breakdown_element_usage::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void product_definition_or_breakdown_element_usage::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline product_definition product_definition_or_breakdown_element_usage_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_usage product_definition_or_breakdown_element_usage_get::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void product_definition_or_breakdown_element_usage_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void product_definition_or_breakdown_element_usage_put::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline product_definition product_definition_or_product_definition_relationship::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_definition_or_product_definition_relationship::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_usage product_definition_or_product_definition_relationship::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void product_definition_or_product_definition_relationship::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline product_definition product_definition_or_product_definition_relationship_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_usage product_definition_or_product_definition_relationship_get::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void product_definition_or_product_definition_relationship_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void product_definition_or_product_definition_relationship_put::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline product product_or_formation_or_definition::get_product() { return getEntityInstance("PRODUCT"); }
    inline void product_or_formation_or_definition::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition_formation product_or_formation_or_definition::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void product_or_formation_or_definition::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition product_or_formation_or_definition::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_or_formation_or_definition::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product product_or_formation_or_definition_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition_formation product_or_formation_or_definition_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition product_or_formation_or_definition_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void product_or_formation_or_definition_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void product_or_formation_or_definition_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void product_or_formation_or_definition_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline executed_action project_item::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline void project_item::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline product_concept project_item::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void project_item::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline executed_action project_item_get::get_executed_action() { return getEntityInstance("EXECUTED_ACTION"); }
    inline product_concept project_item_get::get_product_concept() { return getEntityInstance("PRODUCT_CONCEPT"); }
    inline void project_item_put::put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
    inline void project_item_put::put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
    inline surface_style_reflectance_ambient rendering_properties_select::get_surface_style_reflectance_ambient() { return getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT"); }
    inline void rendering_properties_select::put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }
    inline surface_style_transparent rendering_properties_select::get_surface_style_transparent() { return getEntityInstance("SURFACE_STYLE_TRANSPARENT"); }
    inline void rendering_properties_select::put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
    inline surface_style_reflectance_ambient rendering_properties_select_get::get_surface_style_reflectance_ambient() { return getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT"); }
    inline surface_style_transparent rendering_properties_select_get::get_surface_style_transparent() { return getEntityInstance("SURFACE_STYLE_TRANSPARENT"); }
    inline void rendering_properties_select_put::put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }
    inline void rendering_properties_select_put::put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
    inline general_property represented_definition::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline void represented_definition::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline property_definition represented_definition::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline void represented_definition::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline property_definition_relationship represented_definition::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline void represented_definition::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline shape_aspect represented_definition::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void represented_definition::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline shape_aspect_relationship represented_definition::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void represented_definition::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline general_property represented_definition_get::get_general_property() { return getEntityInstance("GENERAL_PROPERTY"); }
    inline property_definition represented_definition_get::get_property_definition() { return getEntityInstance("PROPERTY_DEFINITION"); }
    inline property_definition_relationship represented_definition_get::get_property_definition_relationship() { return getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP"); }
    inline shape_aspect represented_definition_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline shape_aspect_relationship represented_definition_get::get_shape_aspect_relationship() { return getEntityInstance("SHAPE_ASPECT_RELATIONSHIP"); }
    inline void represented_definition_put::put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
    inline void represented_definition_put::put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
    inline void represented_definition_put::put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
    inline void represented_definition_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline void represented_definition_put::put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
    inline characterized_object requirement_source_item::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline void requirement_source_item::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline group requirement_source_item::get_group() { return getEntityInstance("GROUP"); }
    inline void requirement_source_item::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline group_relationship requirement_source_item::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline void requirement_source_item::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline product requirement_source_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void requirement_source_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition requirement_source_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void requirement_source_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation requirement_source_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void requirement_source_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_relationship requirement_source_item::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline void requirement_source_item::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline shape_aspect requirement_source_item::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void requirement_source_item::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline characterized_object requirement_source_item_get::get_characterized_object() { return getEntityInstance("CHARACTERIZED_OBJECT"); }
    inline group requirement_source_item_get::get_group() { return getEntityInstance("GROUP"); }
    inline group_relationship requirement_source_item_get::get_group_relationship() { return getEntityInstance("GROUP_RELATIONSHIP"); }
    inline product requirement_source_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition requirement_source_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation requirement_source_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_relationship requirement_source_item_get::get_product_definition_relationship() { return getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP"); }
    inline shape_aspect requirement_source_item_get::get_shape_aspect() { return getEntityInstance("SHAPE_ASPECT"); }
    inline void requirement_source_item_put::put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
    inline void requirement_source_item_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void requirement_source_item_put::put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
    inline void requirement_source_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void requirement_source_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void requirement_source_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void requirement_source_item_put::put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
    inline void requirement_source_item_put::put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
    inline edge reversible_topology_item::get_edge() { return getEntityInstance("EDGE"); }
    inline void reversible_topology_item::put_edge(edge inst) { putEntityInstance("EDGE", inst); }
    inline path reversible_topology_item::get_path() { return getEntityInstance("PATH"); }
    inline void reversible_topology_item::put_path(path inst) { putEntityInstance("PATH", inst); }
    inline face reversible_topology_item::get_face() { return getEntityInstance("FACE"); }
    inline void reversible_topology_item::put_face(face inst) { putEntityInstance("FACE", inst); }
    inline face_bound reversible_topology_item::get_face_bound() { return getEntityInstance("FACE_BOUND"); }
    inline void reversible_topology_item::put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }
    inline closed_shell reversible_topology_item::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void reversible_topology_item::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline open_shell reversible_topology_item::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void reversible_topology_item::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline edge reversible_topology_item_get::get_edge() { return getEntityInstance("EDGE"); }
    inline path reversible_topology_item_get::get_path() { return getEntityInstance("PATH"); }
    inline face reversible_topology_item_get::get_face() { return getEntityInstance("FACE"); }
    inline face_bound reversible_topology_item_get::get_face_bound() { return getEntityInstance("FACE_BOUND"); }
    inline closed_shell reversible_topology_item_get::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline open_shell reversible_topology_item_get::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void reversible_topology_item_put::put_edge(edge inst) { putEntityInstance("EDGE", inst); }
    inline void reversible_topology_item_put::put_path(path inst) { putEntityInstance("PATH", inst); }
    inline void reversible_topology_item_put::put_face(face inst) { putEntityInstance("FACE", inst); }
    inline void reversible_topology_item_put::put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }
    inline void reversible_topology_item_put::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline void reversible_topology_item_put::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline action_assignment role_select::get_action_assignment() { return getEntityInstance("ACTION_ASSIGNMENT"); }
    inline void role_select::put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }
    inline action_request_assignment role_select::get_action_request_assignment() { return getEntityInstance("ACTION_REQUEST_ASSIGNMENT"); }
    inline void role_select::put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }
    inline approval_assignment role_select::get_approval_assignment() { return getEntityInstance("APPROVAL_ASSIGNMENT"); }
    inline void role_select::put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }
    inline approval_date_time role_select::get_approval_date_time() { return getEntityInstance("APPROVAL_DATE_TIME"); }
    inline void role_select::put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }
    inline certification_assignment role_select::get_certification_assignment() { return getEntityInstance("CERTIFICATION_ASSIGNMENT"); }
    inline void role_select::put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }
    inline contract_assignment role_select::get_contract_assignment() { return getEntityInstance("CONTRACT_ASSIGNMENT"); }
    inline void role_select::put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }
    inline document_reference role_select::get_document_reference() { return getEntityInstance("DOCUMENT_REFERENCE"); }
    inline void role_select::put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }
    inline effectivity_assignment role_select::get_effectivity_assignment() { return getEntityInstance("EFFECTIVITY_ASSIGNMENT"); }
    inline void role_select::put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }
    inline group_assignment role_select::get_group_assignment() { return getEntityInstance("GROUP_ASSIGNMENT"); }
    inline void role_select::put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }
    inline name_assignment role_select::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline void role_select::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline security_classification_assignment role_select::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void role_select::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline action_assignment role_select_get::get_action_assignment() { return getEntityInstance("ACTION_ASSIGNMENT"); }
    inline action_request_assignment role_select_get::get_action_request_assignment() { return getEntityInstance("ACTION_REQUEST_ASSIGNMENT"); }
    inline approval_assignment role_select_get::get_approval_assignment() { return getEntityInstance("APPROVAL_ASSIGNMENT"); }
    inline approval_date_time role_select_get::get_approval_date_time() { return getEntityInstance("APPROVAL_DATE_TIME"); }
    inline certification_assignment role_select_get::get_certification_assignment() { return getEntityInstance("CERTIFICATION_ASSIGNMENT"); }
    inline contract_assignment role_select_get::get_contract_assignment() { return getEntityInstance("CONTRACT_ASSIGNMENT"); }
    inline document_reference role_select_get::get_document_reference() { return getEntityInstance("DOCUMENT_REFERENCE"); }
    inline effectivity_assignment role_select_get::get_effectivity_assignment() { return getEntityInstance("EFFECTIVITY_ASSIGNMENT"); }
    inline group_assignment role_select_get::get_group_assignment() { return getEntityInstance("GROUP_ASSIGNMENT"); }
    inline name_assignment role_select_get::get_name_assignment() { return getEntityInstance("NAME_ASSIGNMENT"); }
    inline security_classification_assignment role_select_get::get_security_classification_assignment() { return getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT"); }
    inline void role_select_put::put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }
    inline void role_select_put::put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }
    inline void role_select_put::put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }
    inline void role_select_put::put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }
    inline void role_select_put::put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }
    inline void role_select_put::put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }
    inline void role_select_put::put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }
    inline void role_select_put::put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }
    inline void role_select_put::put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }
    inline void role_select_put::put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
    inline void role_select_put::put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
    inline product_definition_formation rule_superseded_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void rule_superseded_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation rule_superseded_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void rule_superseded_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline assembly_component_usage security_classification_item::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline void security_classification_item::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline document security_classification_item::get_document() { return getEntityInstance("DOCUMENT"); }
    inline void security_classification_item::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline document_file security_classification_item::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline void security_classification_item::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline make_from_usage_option security_classification_item::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline void security_classification_item::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline product security_classification_item::get_product() { return getEntityInstance("PRODUCT"); }
    inline void security_classification_item::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline product_definition security_classification_item::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline void security_classification_item::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline product_definition_formation security_classification_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void security_classification_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_usage security_classification_item::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void security_classification_item::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline assembly_component_usage security_classification_item_get::get_assembly_component_usage() { return getEntityInstance("ASSEMBLY_COMPONENT_USAGE"); }
    inline document security_classification_item_get::get_document() { return getEntityInstance("DOCUMENT"); }
    inline document_file security_classification_item_get::get_document_file() { return getEntityInstance("DOCUMENT_FILE"); }
    inline make_from_usage_option security_classification_item_get::get_make_from_usage_option() { return getEntityInstance("MAKE_FROM_USAGE_OPTION"); }
    inline product security_classification_item_get::get_product() { return getEntityInstance("PRODUCT"); }
    inline product_definition security_classification_item_get::get_product_definition() { return getEntityInstance("PRODUCT_DEFINITION"); }
    inline product_definition_formation security_classification_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline product_definition_usage security_classification_item_get::get_product_definition_usage() { return getEntityInstance("PRODUCT_DEFINITION_USAGE"); }
    inline void security_classification_item_put::put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
    inline void security_classification_item_put::put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
    inline void security_classification_item_put::put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
    inline void security_classification_item_put::put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
    inline void security_classification_item_put::put_product(product inst) { putEntityInstance("PRODUCT", inst); }
    inline void security_classification_item_put::put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
    inline void security_classification_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline void security_classification_item_put::put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
    inline vertex_shell shell::get_vertex_shell() { return getEntityInstance("VERTEX_SHELL"); }
    inline void shell::put_vertex_shell(vertex_shell inst) { putEntityInstance("VERTEX_SHELL", inst); }
    inline wire_shell shell::get_wire_shell() { return getEntityInstance("WIRE_SHELL"); }
    inline void shell::put_wire_shell(wire_shell inst) { putEntityInstance("WIRE_SHELL", inst); }
    inline open_shell shell::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline void shell::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline closed_shell shell::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void shell::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline vertex_shell shell_get::get_vertex_shell() { return getEntityInstance("VERTEX_SHELL"); }
    inline wire_shell shell_get::get_wire_shell() { return getEntityInstance("WIRE_SHELL"); }
    inline open_shell shell_get::get_open_shell() { return getEntityInstance("OPEN_SHELL"); }
    inline closed_shell shell_get::get_closed_shell() { return getEntityInstance("CLOSED_SHELL"); }
    inline void shell_put::put_vertex_shell(vertex_shell inst) { putEntityInstance("VERTEX_SHELL", inst); }
    inline void shell_put::put_wire_shell(wire_shell inst) { putEntityInstance("WIRE_SHELL", inst); }
    inline void shell_put::put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
    inline void shell_put::put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
    inline measure_with_unit size_select::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void size_select::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline measure_with_unit size_select_get::get_measure_with_unit() { return getEntityInstance("MEASURE_WITH_UNIT"); }
    inline void size_select_put::put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
    inline curve_bounded_surface sketch_basis_select::get_curve_bounded_surface() { return getEntityInstance("CURVE_BOUNDED_SURFACE"); }
    inline void sketch_basis_select::put_curve_bounded_surface(curve_bounded_surface inst) { putEntityInstance("CURVE_BOUNDED_SURFACE", inst); }
    inline face_surface sketch_basis_select::get_face_surface() { return getEntityInstance("FACE_SURFACE"); }
    inline void sketch_basis_select::put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
    inline curve_bounded_surface sketch_basis_select_get::get_curve_bounded_surface() { return getEntityInstance("CURVE_BOUNDED_SURFACE"); }
    inline face_surface sketch_basis_select_get::get_face_surface() { return getEntityInstance("FACE_SURFACE"); }
    inline void sketch_basis_select_put::put_curve_bounded_surface(curve_bounded_surface inst) { putEntityInstance("CURVE_BOUNDED_SURFACE", inst); }
    inline void sketch_basis_select_put::put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
    inline product_definition_formation start_request_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void start_request_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation start_request_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void start_request_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline descriptive_representation_item string_representation_item_select::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline void string_representation_item_select::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline included_text_block string_representation_item_select::get_included_text_block() { return getEntityInstance("INCLUDED_TEXT_BLOCK"); }
    inline void string_representation_item_select::put_included_text_block(included_text_block inst) { putEntityInstance("INCLUDED_TEXT_BLOCK", inst); }
    inline structured_text_composition string_representation_item_select::get_structured_text_composition() { return getEntityInstance("STRUCTURED_TEXT_COMPOSITION"); }
    inline void string_representation_item_select::put_structured_text_composition(structured_text_composition inst) { putEntityInstance("STRUCTURED_TEXT_COMPOSITION", inst); }
    inline descriptive_representation_item string_representation_item_select_get::get_descriptive_representation_item() { return getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM"); }
    inline included_text_block string_representation_item_select_get::get_included_text_block() { return getEntityInstance("INCLUDED_TEXT_BLOCK"); }
    inline structured_text_composition string_representation_item_select_get::get_structured_text_composition() { return getEntityInstance("STRUCTURED_TEXT_COMPOSITION"); }
    inline void string_representation_item_select_put::put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
    inline void string_representation_item_select_put::put_included_text_block(included_text_block inst) { putEntityInstance("INCLUDED_TEXT_BLOCK", inst); }
    inline void string_representation_item_select_put::put_structured_text_composition(structured_text_composition inst) { putEntityInstance("STRUCTURED_TEXT_COMPOSITION", inst); }
    inline group style_context_select::get_group() { return getEntityInstance("GROUP"); }
    inline void style_context_select::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline presentation_layer_assignment style_context_select::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline void style_context_select::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline presentation_set style_context_select::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline void style_context_select::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline representation style_context_select::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline void style_context_select::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline representation_item style_context_select::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline void style_context_select::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline representation_relationship style_context_select::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline void style_context_select::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline group style_context_select_get::get_group() { return getEntityInstance("GROUP"); }
    inline presentation_layer_assignment style_context_select_get::get_presentation_layer_assignment() { return getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT"); }
    inline presentation_set style_context_select_get::get_presentation_set() { return getEntityInstance("PRESENTATION_SET"); }
    inline representation style_context_select_get::get_representation() { return getEntityInstance("REPRESENTATION"); }
    inline representation_item style_context_select_get::get_representation_item() { return getEntityInstance("REPRESENTATION_ITEM"); }
    inline representation_relationship style_context_select_get::get_representation_relationship() { return getEntityInstance("REPRESENTATION_RELATIONSHIP"); }
    inline void style_context_select_put::put_group(group inst) { putEntityInstance("GROUP", inst); }
    inline void style_context_select_put::put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
    inline void style_context_select_put::put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
    inline void style_context_select_put::put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
    inline void style_context_select_put::put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
    inline void style_context_select_put::put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
    inline surface_side_style surface_side_style_select::get_surface_side_style() { return getEntityInstance("SURFACE_SIDE_STYLE"); }
    inline void surface_side_style_select::put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }
    inline pre_defined_surface_side_style surface_side_style_select::get_pre_defined_surface_side_style() { return getEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE"); }
    inline void surface_side_style_select::put_pre_defined_surface_side_style(pre_defined_surface_side_style inst) { putEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE", inst); }
    inline surface_side_style surface_side_style_select_get::get_surface_side_style() { return getEntityInstance("SURFACE_SIDE_STYLE"); }
    inline pre_defined_surface_side_style surface_side_style_select_get::get_pre_defined_surface_side_style() { return getEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE"); }
    inline void surface_side_style_select_put::put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }
    inline void surface_side_style_select_put::put_pre_defined_surface_side_style(pre_defined_surface_side_style inst) { putEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE", inst); }
    inline surface_style_fill_area surface_style_element_select::get_surface_style_fill_area() { return getEntityInstance("SURFACE_STYLE_FILL_AREA"); }
    inline void surface_style_element_select::put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }
    inline surface_style_boundary surface_style_element_select::get_surface_style_boundary() { return getEntityInstance("SURFACE_STYLE_BOUNDARY"); }
    inline void surface_style_element_select::put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }
    inline surface_style_silhouette surface_style_element_select::get_surface_style_silhouette() { return getEntityInstance("SURFACE_STYLE_SILHOUETTE"); }
    inline void surface_style_element_select::put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }
    inline surface_style_segmentation_curve surface_style_element_select::get_surface_style_segmentation_curve() { return getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE"); }
    inline void surface_style_element_select::put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }
    inline surface_style_control_grid surface_style_element_select::get_surface_style_control_grid() { return getEntityInstance("SURFACE_STYLE_CONTROL_GRID"); }
    inline void surface_style_element_select::put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }
    inline surface_style_parameter_line surface_style_element_select::get_surface_style_parameter_line() { return getEntityInstance("SURFACE_STYLE_PARAMETER_LINE"); }
    inline void surface_style_element_select::put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }
    inline surface_style_rendering surface_style_element_select::get_surface_style_rendering() { return getEntityInstance("SURFACE_STYLE_RENDERING"); }
    inline void surface_style_element_select::put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
    inline surface_style_fill_area surface_style_element_select_get::get_surface_style_fill_area() { return getEntityInstance("SURFACE_STYLE_FILL_AREA"); }
    inline surface_style_boundary surface_style_element_select_get::get_surface_style_boundary() { return getEntityInstance("SURFACE_STYLE_BOUNDARY"); }
    inline surface_style_silhouette surface_style_element_select_get::get_surface_style_silhouette() { return getEntityInstance("SURFACE_STYLE_SILHOUETTE"); }
    inline surface_style_segmentation_curve surface_style_element_select_get::get_surface_style_segmentation_curve() { return getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE"); }
    inline surface_style_control_grid surface_style_element_select_get::get_surface_style_control_grid() { return getEntityInstance("SURFACE_STYLE_CONTROL_GRID"); }
    inline surface_style_parameter_line surface_style_element_select_get::get_surface_style_parameter_line() { return getEntityInstance("SURFACE_STYLE_PARAMETER_LINE"); }
    inline surface_style_rendering surface_style_element_select_get::get_surface_style_rendering() { return getEntityInstance("SURFACE_STYLE_RENDERING"); }
    inline void surface_style_element_select_put::put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }
    inline void surface_style_element_select_put::put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }
    inline void surface_style_element_select_put::put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }
    inline void surface_style_element_select_put::put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }
    inline void surface_style_element_select_put::put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }
    inline void surface_style_element_select_put::put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }
    inline void surface_style_element_select_put::put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
    inline symbol_colour symbol_style_select::get_symbol_colour() { return getEntityInstance("SYMBOL_COLOUR"); }
    inline void symbol_style_select::put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
    inline symbol_colour symbol_style_select_get::get_symbol_colour() { return getEntityInstance("SYMBOL_COLOUR"); }
    inline void symbol_style_select_put::put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
    inline annotation_text text_or_character::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void text_or_character::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character text_or_character::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void text_or_character::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline composite_text text_or_character::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_or_character::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal text_or_character::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_or_character::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text text_or_character_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character text_or_character_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline composite_text text_or_character_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline text_literal text_or_character_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_or_character_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void text_or_character_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void text_or_character_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline void text_or_character_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline text_literal text_string_representation_item::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline void text_string_representation_item::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline annotation_text text_string_representation_item::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline void text_string_representation_item::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline annotation_text_character text_string_representation_item::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline void text_string_representation_item::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline composite_text text_string_representation_item::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_string_representation_item::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline text_literal text_string_representation_item_get::get_text_literal() { return getEntityInstance("TEXT_LITERAL"); }
    inline annotation_text text_string_representation_item_get::get_annotation_text() { return getEntityInstance("ANNOTATION_TEXT"); }
    inline annotation_text_character text_string_representation_item_get::get_annotation_text_character() { return getEntityInstance("ANNOTATION_TEXT_CHARACTER"); }
    inline composite_text text_string_representation_item_get::get_composite_text() { return getEntityInstance("COMPOSITE_TEXT"); }
    inline void text_string_representation_item_put::put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
    inline void text_string_representation_item_put::put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
    inline void text_string_representation_item_put::put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
    inline void text_string_representation_item_put::put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
    inline action time_interval_item::get_action() { return getEntityInstance("ACTION"); }
    inline void time_interval_item::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline time_interval_based_effectivity time_interval_item::get_time_interval_based_effectivity() { return getEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY"); }
    inline void time_interval_item::put_time_interval_based_effectivity(time_interval_based_effectivity inst) { putEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY", inst); }
    inline action time_interval_item_get::get_action() { return getEntityInstance("ACTION"); }
    inline time_interval_based_effectivity time_interval_item_get::get_time_interval_based_effectivity() { return getEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY"); }
    inline void time_interval_item_put::put_action(action inst) { putEntityInstance("ACTION", inst); }
    inline void time_interval_item_put::put_time_interval_based_effectivity(time_interval_based_effectivity inst) { putEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY", inst); }
    inline tolerance_value tolerance_method_definition::get_tolerance_value() { return getEntityInstance("TOLERANCE_VALUE"); }
    inline void tolerance_method_definition::put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }
    inline limits_and_fits tolerance_method_definition::get_limits_and_fits() { return getEntityInstance("LIMITS_AND_FITS"); }
    inline void tolerance_method_definition::put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
    inline tolerance_value tolerance_method_definition_get::get_tolerance_value() { return getEntityInstance("TOLERANCE_VALUE"); }
    inline limits_and_fits tolerance_method_definition_get::get_limits_and_fits() { return getEntityInstance("LIMITS_AND_FITS"); }
    inline void tolerance_method_definition_put::put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }
    inline void tolerance_method_definition_put::put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
    inline item_defined_transformation transformation::get_item_defined_transformation() { return getEntityInstance("ITEM_DEFINED_TRANSFORMATION"); }
    inline void transformation::put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }
    inline functionally_defined_transformation transformation::get_functionally_defined_transformation() { return getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION"); }
    inline void transformation::put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
    inline item_defined_transformation transformation_get::get_item_defined_transformation() { return getEntityInstance("ITEM_DEFINED_TRANSFORMATION"); }
    inline functionally_defined_transformation transformation_get::get_functionally_defined_transformation() { return getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION"); }
    inline void transformation_put::put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }
    inline void transformation_put::put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
    inline solid_model trim_condition_select::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline void trim_condition_select::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline solid_model trim_condition_select_get::get_solid_model() { return getEntityInstance("SOLID_MODEL"); }
    inline void trim_condition_select_put::put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
    inline cartesian_point trimming_select::get_cartesian_point() { return getEntityInstance("CARTESIAN_POINT"); }
    inline void trimming_select::put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }
    inline cartesian_point trimming_select_get::get_cartesian_point() { return getEntityInstance("CARTESIAN_POINT"); }
    inline void trimming_select_put::put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }
    inline derived_unit unit::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline void unit::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline named_unit unit::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void unit::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline derived_unit unit_get::get_derived_unit() { return getEntityInstance("DERIVED_UNIT"); }
    inline named_unit unit_get::get_named_unit() { return getEntityInstance("NAMED_UNIT"); }
    inline void unit_put::put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
    inline void unit_put::put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
    inline precision_qualifier value_qualifier::get_precision_qualifier() { return getEntityInstance("PRECISION_QUALIFIER"); }
    inline void value_qualifier::put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }
    inline type_qualifier value_qualifier::get_type_qualifier() { return getEntityInstance("TYPE_QUALIFIER"); }
    inline void value_qualifier::put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }
    inline uncertainty_qualifier value_qualifier::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void value_qualifier::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline precision_qualifier value_qualifier_get::get_precision_qualifier() { return getEntityInstance("PRECISION_QUALIFIER"); }
    inline type_qualifier value_qualifier_get::get_type_qualifier() { return getEntityInstance("TYPE_QUALIFIER"); }
    inline uncertainty_qualifier value_qualifier_get::get_uncertainty_qualifier() { return getEntityInstance("UNCERTAINTY_QUALIFIER"); }
    inline void value_qualifier_put::put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }
    inline void value_qualifier_put::put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }
    inline void value_qualifier_put::put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
    inline vector vector_or_direction::get_vector() { return getEntityInstance("VECTOR"); }
    inline void vector_or_direction::put_vector(vector inst) { putEntityInstance("VECTOR", inst); }
    inline direction vector_or_direction::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void vector_or_direction::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline vector vector_or_direction_get::get_vector() { return getEntityInstance("VECTOR"); }
    inline direction vector_or_direction_get::get_direction() { return getEntityInstance("DIRECTION"); }
    inline void vector_or_direction_put::put_vector(vector inst) { putEntityInstance("VECTOR", inst); }
    inline void vector_or_direction_put::put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
    inline product_definition_formation work_item::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void work_item::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline product_definition_formation work_item_get::get_product_definition_formation() { return getEntityInstance("PRODUCT_DEFINITION_FORMATION"); }
    inline void work_item_put::put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
    inline representation property_definition_representation::get_used_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "used_representation", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_representation::put_used_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "used_representation", sdaiINSTANCE, (void*) i); }
    inline representation_context representation::get_context_of_items() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "context_of_items", sdaiINSTANCE, &inst); return inst; }
    inline void representation::put_context_of_items(representation_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "context_of_items", sdaiINSTANCE, (void*) i); }
    inline action_method action::get_chosen_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "chosen_method", sdaiINSTANCE, &inst); return inst; }
    inline void action::put_chosen_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "chosen_method", sdaiINSTANCE, (void*) i); }
    inline action action_assignment::get_assigned_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_assignment::put_assigned_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action", sdaiINSTANCE, (void*) i); }
    inline action_method action_method_assignment::get_assigned_action_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action_method", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_assignment::put_assigned_action_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action_method", sdaiINSTANCE, (void*) i); }
    inline action_method_role action_method_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_assignment::put_role(action_method_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline action_method action_method_relationship::get_relating_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_method", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_relationship::put_relating_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_method", sdaiINSTANCE, (void*) i); }
    inline action_method action_method_relationship::get_related_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_method", sdaiINSTANCE, &inst); return inst; }
    inline void action_method_relationship::put_related_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_method", sdaiINSTANCE, (void*) i); }
    inline action_property action_property_representation::get_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "property", sdaiINSTANCE, &inst); return inst; }
    inline void action_property_representation::put_property(action_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "property", sdaiINSTANCE, (void*) i); }
    inline representation action_property_representation::get_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation", sdaiINSTANCE, &inst); return inst; }
    inline void action_property_representation::put_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation", sdaiINSTANCE, (void*) i); }
    inline action action_relationship::get_relating_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_relationship::put_relating_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_action", sdaiINSTANCE, (void*) i); }
    inline action action_relationship::get_related_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_relationship::put_related_action(action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_action", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_assignment::get_assigned_action_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action_request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_assignment::put_assigned_action_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action_request", sdaiINSTANCE, (void*) i); }
    inline action_method action_request_solution::get_method() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "method", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_solution::put_method(action_method inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "method", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_solution::get_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_solution::put_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "request", sdaiINSTANCE, (void*) i); }
    inline versioned_action_request action_request_status::get_assigned_request() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_request", sdaiINSTANCE, &inst); return inst; }
    inline void action_request_status::put_assigned_request(versioned_action_request inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_request", sdaiINSTANCE, (void*) i); }
    inline executed_action action_status::get_assigned_action() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_action", sdaiINSTANCE, &inst); return inst; }
    inline void action_status::put_assigned_action(executed_action inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_action", sdaiINSTANCE, (void*) i); }
    inline surface face_surface::get_face_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "face_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void face_surface::put_face_geometry(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "face_geometry", sdaiINSTANCE, (void*) i); }
    inline product alternate_product_relationship::get_alternate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "alternate", sdaiINSTANCE, &inst); return inst; }
    inline void alternate_product_relationship::put_alternate(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "alternate", sdaiINSTANCE, (void*) i); }
    inline product alternate_product_relationship::get_base_() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_", sdaiINSTANCE, &inst); return inst; }
    inline void alternate_product_relationship::put_base_(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_", sdaiINSTANCE, (void*) i); }
    inline dimensional_exponents named_unit::get_dimensions() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dimensions", sdaiINSTANCE, &inst); return inst; }
    inline void named_unit::put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dimensions", sdaiINSTANCE, (void*) i); }
    inline representation_item representation_item_relationship::get_relating_representation_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_representation_item", sdaiINSTANCE, &inst); return inst; }
    inline void representation_item_relationship::put_relating_representation_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_representation_item", sdaiINSTANCE, (void*) i); }
    inline representation_item representation_item_relationship::get_related_representation_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_representation_item", sdaiINSTANCE, &inst); return inst; }
    inline void representation_item_relationship::put_related_representation_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_representation_item", sdaiINSTANCE, (void*) i); }
    inline shape_aspect shape_aspect_relationship::get_relating_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect_relationship::put_relating_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline shape_aspect shape_aspect_relationship::get_related_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect_relationship::put_related_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_size::get_applies_to() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "applies_to", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_size::put_applies_to(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "applies_to", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit geometric_tolerance::get_magnitude() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "magnitude", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance::put_magnitude(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "magnitude", sdaiINSTANCE, (void*) i); }
    inline shape_aspect geometric_tolerance::get_toleranced_shape_aspect() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "toleranced_shape_aspect", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance::put_toleranced_shape_aspect(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "toleranced_shape_aspect", sdaiINSTANCE, (void*) i); }
    inline representation_item styled_item::get_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item", sdaiINSTANCE, &inst); return inst; }
    inline void styled_item::put_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item", sdaiINSTANCE, (void*) i); }
    inline point annotation_fill_area_occurrence::get_fill_style_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_style_target", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_fill_area_occurrence::put_fill_style_target(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_style_target", sdaiINSTANCE, (void*) i); }
    inline annotation_occurrence annotation_occurrence_relationship::get_relating_annotation_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_annotation_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_occurrence_relationship::put_relating_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_annotation_occurrence", sdaiINSTANCE, (void*) i); }
    inline annotation_occurrence annotation_occurrence_relationship::get_related_annotation_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_annotation_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void annotation_occurrence_relationship::put_related_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_annotation_occurrence", sdaiINSTANCE, (void*) i); }
    inline representation_map mapped_item::get_mapping_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_source", sdaiINSTANCE, &inst); return inst; }
    inline void mapped_item::put_mapping_source(representation_map inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_source", sdaiINSTANCE, (void*) i); }
    inline representation_item mapped_item::get_mapping_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_target", sdaiINSTANCE, &inst); return inst; }
    inline void mapped_item::put_mapping_target(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_target", sdaiINSTANCE, (void*) i); }
    inline product_definition_shape shape_aspect::get_of_shape() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "of_shape", sdaiINSTANCE, &inst); return inst; }
    inline void shape_aspect::put_of_shape(product_definition_shape inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "of_shape", sdaiINSTANCE, (void*) i); }
    inline application_context application_context_element::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void application_context_element::put_frame_of_reference(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline application_context application_protocol_definition::get_application() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "application", sdaiINSTANCE, &inst); return inst; }
    inline void application_protocol_definition::put_application(application_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "application", sdaiINSTANCE, (void*) i); }
    inline approval approval_assignment::get_assigned_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_assignment::put_assigned_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_approval", sdaiINSTANCE, (void*) i); }
    inline group attribute_classification_assignment::get_assigned_class() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_class", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_classification_assignment::put_assigned_class(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_class", sdaiINSTANCE, (void*) i); }
    inline classification_role attribute_classification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_classification_assignment::put_role(classification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline certification certification_assignment::get_assigned_certification() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_certification", sdaiINSTANCE, &inst); return inst; }
    inline void certification_assignment::put_assigned_certification(certification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_certification", sdaiINSTANCE, (void*) i); }
    inline group classification_assignment::get_assigned_class() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_class", sdaiINSTANCE, &inst); return inst; }
    inline void classification_assignment::put_assigned_class(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_class", sdaiINSTANCE, (void*) i); }
    inline classification_role classification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void classification_assignment::put_role(classification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline contract contract_assignment::get_assigned_contract() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_contract", sdaiINSTANCE, &inst); return inst; }
    inline void contract_assignment::put_assigned_contract(contract inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_contract", sdaiINSTANCE, (void*) i); }
    inline date_and_time date_and_time_assignment::get_assigned_date_and_time() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_date_and_time", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time_assignment::put_assigned_date_and_time(date_and_time inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_date_and_time", sdaiINSTANCE, (void*) i); }
    inline date_time_role date_and_time_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time_assignment::put_role(date_time_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline date date_assignment::get_assigned_date() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_date", sdaiINSTANCE, &inst); return inst; }
    inline void date_assignment::put_assigned_date(date inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_date", sdaiINSTANCE, (void*) i); }
    inline date_role date_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void date_assignment::put_role(date_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline document document_reference::get_assigned_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_reference::put_assigned_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_document", sdaiINSTANCE, (void*) i); }
    inline document_usage_constraint document_usage_constraint_assignment::get_assigned_document_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_document_usage", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint_assignment::put_assigned_document_usage(document_usage_constraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_document_usage", sdaiINSTANCE, (void*) i); }
    inline document_usage_role document_usage_constraint_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint_assignment::put_role(document_usage_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_assignment::get_assigned_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_assignment::put_assigned_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_effectivity", sdaiINSTANCE, (void*) i); }
    inline event_occurrence event_occurrence_assignment::get_assigned_event_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_event_occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_assignment::put_assigned_event_occurrence(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_event_occurrence", sdaiINSTANCE, (void*) i); }
    inline event_occurrence_role event_occurrence_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_assignment::put_role(event_occurrence_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline identification_role identification_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void identification_assignment::put_role(identification_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline external_source external_identification_assignment::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void external_identification_assignment::put_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline group group_assignment::get_assigned_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_assignment::put_assigned_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_group", sdaiINSTANCE, (void*) i); }
    inline organization organization_assignment::get_assigned_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_assignment::put_assigned_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_organization", sdaiINSTANCE, (void*) i); }
    inline organization_role organization_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void organization_assignment::put_role(organization_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_assignment::get_assigned_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_assignment::put_assigned_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_organizational_project", sdaiINSTANCE, (void*) i); }
    inline organizational_project_role organizational_project_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_assignment::put_role(organizational_project_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline person_and_organization person_and_organization_assignment::get_assigned_person_and_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_person_and_organization", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization_assignment::put_assigned_person_and_organization(person_and_organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_person_and_organization", sdaiINSTANCE, (void*) i); }
    inline person_and_organization_role person_and_organization_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization_assignment::put_role(person_and_organization_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline security_classification security_classification_assignment::get_assigned_security_classification() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_security_classification", sdaiINSTANCE, &inst); return inst; }
    inline void security_classification_assignment::put_assigned_security_classification(security_classification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_security_classification", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_assignment::get_assigned_time_interval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_time_interval", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_assignment::put_assigned_time_interval(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_time_interval", sdaiINSTANCE, (void*) i); }
    inline time_interval_role time_interval_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_assignment::put_role(time_interval_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline approval_status approval::get_status() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "status", sdaiINSTANCE, &inst); return inst; }
    inline void approval::put_status(approval_status inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "status", sdaiINSTANCE, (void*) i); }
    inline approval approval_date_time::get_dated_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dated_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_date_time::put_dated_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dated_approval", sdaiINSTANCE, (void*) i); }
    inline approval approval_person_organization::get_authorized_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "authorized_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_person_organization::put_authorized_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "authorized_approval", sdaiINSTANCE, (void*) i); }
    inline approval_role approval_person_organization::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void approval_person_organization::put_role(approval_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline approval approval_relationship::get_relating_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_relationship::put_relating_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_approval", sdaiINSTANCE, (void*) i); }
    inline approval approval_relationship::get_related_approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_approval", sdaiINSTANCE, &inst); return inst; }
    inline void approval_relationship::put_related_approval(approval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_approval", sdaiINSTANCE, (void*) i); }
    inline presentation_area area_in_set::get_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "area", sdaiINSTANCE, &inst); return inst; }
    inline void area_in_set::put_area(presentation_area inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "area", sdaiINSTANCE, (void*) i); }
    inline presentation_set area_in_set::get_in_set() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "in_set", sdaiINSTANCE, &inst); return inst; }
    inline void area_in_set::put_in_set(presentation_set inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "in_set", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_relationship::get_relating_product_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_relationship::put_relating_product_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_definition", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_relationship::get_related_product_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_relationship::put_related_product_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_definition", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage assembly_component_usage_substitute::get_base_() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_", sdaiINSTANCE, &inst); return inst; }
    inline void assembly_component_usage_substitute::put_base_(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage assembly_component_usage_substitute::get_substitute() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "substitute", sdaiINSTANCE, &inst); return inst; }
    inline void assembly_component_usage_substitute::put_substitute(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "substitute", sdaiINSTANCE, (void*) i); }
    inline attribute_value_role attribute_value_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void attribute_value_assignment::put_role(attribute_value_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline cartesian_point placement::get_location() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "location", sdaiINSTANCE, &inst); return inst; }
    inline void placement::put_location(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "location", sdaiINSTANCE, (void*) i); }
    inline direction axis1_placement::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void axis1_placement::put_axis(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_2d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_2d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_3d::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_3d::put_axis(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline direction axis2_placement_3d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void axis2_placement_3d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition::get_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition::put_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "formation", sdaiINSTANCE, (void*) i); }
    inline product_definition_context product_definition::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition::put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d block::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void block::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline surface pcurve::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void pcurve::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline definitional_representation pcurve::get_reference_to_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, &inst); return inst; }
    inline void pcurve::put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, (void*) i); }
    inline curve surface_curve::get_curve_3d() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_3d", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve::put_curve_3d(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_3d", sdaiINSTANCE, (void*) i); }
    inline cartesian_point box_domain::get_corner() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "corner", sdaiINSTANCE, &inst); return inst; }
    inline void box_domain::put_corner(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "corner", sdaiINSTANCE, (void*) i); }
    inline surface half_space_solid::get_base_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_surface", sdaiINSTANCE, &inst); return inst; }
    inline void half_space_solid::put_base_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_surface", sdaiINSTANCE, (void*) i); }
    inline box_domain boxed_half_space::get_enclosure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "enclosure", sdaiINSTANCE, &inst); return inst; }
    inline void boxed_half_space::put_enclosure(box_domain inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "enclosure", sdaiINSTANCE, (void*) i); }
    inline closed_shell manifold_solid_brep::get_outer() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "outer", sdaiINSTANCE, &inst); return inst; }
    inline void manifold_solid_brep::put_outer(closed_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "outer", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d camera_model_d3::get_view_reference_system() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "view_reference_system", sdaiINSTANCE, &inst); return inst; }
    inline void camera_model_d3::put_view_reference_system(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "view_reference_system", sdaiINSTANCE, (void*) i); }
    inline view_volume camera_model_d3::get_perspective_of_volume() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "perspective_of_volume", sdaiINSTANCE, &inst); return inst; }
    inline void camera_model_d3::put_perspective_of_volume(view_volume inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "perspective_of_volume", sdaiINSTANCE, (void*) i); }
    inline representation_item representation_map::get_mapping_origin() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapping_origin", sdaiINSTANCE, &inst); return inst; }
    inline void representation_map::put_mapping_origin(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapping_origin", sdaiINSTANCE, (void*) i); }
    inline representation representation_map::get_mapped_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "mapped_representation", sdaiINSTANCE, &inst); return inst; }
    inline void representation_map::put_mapped_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "mapped_representation", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator::get_axis1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis1", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_axis1(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis1", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator::get_axis2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis2", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_axis2(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis2", sdaiINSTANCE, (void*) i); }
    inline cartesian_point cartesian_transformation_operator::get_local_origin() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "local_origin", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator::put_local_origin(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "local_origin", sdaiINSTANCE, (void*) i); }
    inline direction cartesian_transformation_operator_3d::get_axis3() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis3", sdaiINSTANCE, &inst); return inst; }
    inline void cartesian_transformation_operator_3d::put_axis3(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis3", sdaiINSTANCE, (void*) i); }
    inline certification_type certification::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void certification::put_kind(certification_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline generic_character_glyph_symbol character_glyph_font_usage::get_character() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "character", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_font_usage::put_character(generic_character_glyph_symbol inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "character", sdaiINSTANCE, (void*) i); }
    inline text_font character_glyph_font_usage::get_font() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "font", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_font_usage::put_font(text_font inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "font", sdaiINSTANCE, (void*) i); }
    inline curve_style character_glyph_style_outline::get_outline_style() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "outline_style", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_style_outline::put_outline_style(curve_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "outline_style", sdaiINSTANCE, (void*) i); }
    inline curve_style character_glyph_style_stroke::get_stroke_style() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "stroke_style", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_style_stroke::put_stroke_style(curve_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "stroke_style", sdaiINSTANCE, (void*) i); }
    inline planar_extent character_glyph_symbol::get_character_box() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "character_box", sdaiINSTANCE, &inst); return inst; }
    inline void character_glyph_symbol::put_character_box(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "character_box", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_relationship::get_relating_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_property", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_relationship::put_relating_property(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_property", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_relationship::get_related_property() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_property", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_relationship::put_related_property(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_property", sdaiINSTANCE, (void*) i); }
    inline effectivity_assignment effectivity_context_assignment::get_assigned_effectivity_assignment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "assigned_effectivity_assignment", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_context_assignment::put_assigned_effectivity_assignment(effectivity_assignment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "assigned_effectivity_assignment", sdaiINSTANCE, (void*) i); }
    inline effectivity_context_role effectivity_context_assignment::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_context_assignment::put_role(effectivity_context_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline curve composite_curve_segment::get_parent_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_curve", sdaiINSTANCE, &inst); return inst; }
    inline void composite_curve_segment::put_parent_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_curve", sdaiINSTANCE, (void*) i); }
    inline planar_box composite_text_with_blanking_box::get_blanking() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "blanking", sdaiINSTANCE, &inst); return inst; }
    inline void composite_text_with_blanking_box::put_blanking(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "blanking", sdaiINSTANCE, (void*) i); }
    inline planar_extent composite_text_with_extent::get_extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extent", sdaiINSTANCE, &inst); return inst; }
    inline void composite_text_with_extent::put_extent(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extent", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature concept_feature_relationship::get_relating_product_concept_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_concept_feature", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship::put_relating_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_concept_feature", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature concept_feature_relationship::get_related_product_concept_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_concept_feature", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship::put_related_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_concept_feature", sdaiINSTANCE, (void*) i); }
    inline concept_feature_operator concept_feature_relationship_with_condition::get_conditional_operator() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "conditional_operator", sdaiINSTANCE, &inst); return inst; }
    inline void concept_feature_relationship_with_condition::put_conditional_operator(concept_feature_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "conditional_operator", sdaiINSTANCE, (void*) i); }
    inline concept_feature_relationship_with_condition conditional_concept_feature::get_condition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "condition", sdaiINSTANCE, &inst); return inst; }
    inline void conditional_concept_feature::put_condition(concept_feature_relationship_with_condition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "condition", sdaiINSTANCE, (void*) i); }
    inline product_concept configuration_item::get_item_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item_concept", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_item::put_item_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item_concept", sdaiINSTANCE, (void*) i); }
    inline configuration_item configuration_design::get_configuration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "configuration", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_design::put_configuration(configuration_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "configuration", sdaiINSTANCE, (void*) i); }
    inline product_definition_relationship product_definition_effectivity::get_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "usage", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_effectivity::put_usage(product_definition_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "usage", sdaiINSTANCE, (void*) i); }
    inline configuration_design configuration_effectivity::get_configuration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "configuration", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_effectivity::put_configuration(configuration_design inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "configuration", sdaiINSTANCE, (void*) i); }
    inline configuration_item configuration_item_relationship::get_relating_configuration_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_configuration_item", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_item_relationship::put_relating_configuration_item(configuration_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_configuration_item", sdaiINSTANCE, (void*) i); }
    inline configuration_item configuration_item_relationship::get_related_configuration_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_configuration_item", sdaiINSTANCE, &inst); return inst; }
    inline void configuration_item_relationship::put_related_configuration_item(configuration_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_configuration_item", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d elementary_surface::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void elementary_surface::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline connected_face_set connected_face_sub_set::get_parent_face_set() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_face_set", sdaiINSTANCE, &inst); return inst; }
    inline void connected_face_sub_set::put_parent_face_set(connected_face_set inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_face_set", sdaiINSTANCE, (void*) i); }
    inline representation representation_relationship::get_rep_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rep_1", sdaiINSTANCE, &inst); return inst; }
    inline void representation_relationship::put_rep_1(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rep_1", sdaiINSTANCE, (void*) i); }
    inline representation representation_relationship::get_rep_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rep_2", sdaiINSTANCE, &inst); return inst; }
    inline void representation_relationship::put_rep_2(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rep_2", sdaiINSTANCE, (void*) i); }
    inline styled_item over_riding_styled_item::get_over_ridden_style() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "over_ridden_style", sdaiINSTANCE, &inst); return inst; }
    inline void over_riding_styled_item::put_over_ridden_style(styled_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "over_ridden_style", sdaiINSTANCE, (void*) i); }
    inline shape_representation_relationship context_dependent_shape_representation::get_representation_relation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation_relation", sdaiINSTANCE, &inst); return inst; }
    inline void context_dependent_shape_representation::put_representation_relation(shape_representation_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation_relation", sdaiINSTANCE, (void*) i); }
    inline product_definition_shape context_dependent_shape_representation::get_represented_product_relation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "represented_product_relation", sdaiINSTANCE, &inst); return inst; }
    inline void context_dependent_shape_representation::put_represented_product_relation(product_definition_shape inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "represented_product_relation", sdaiINSTANCE, (void*) i); }
    inline contract_type contract::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void contract::put_kind(contract_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline contract contract_relationship::get_relating_contract() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_contract", sdaiINSTANCE, &inst); return inst; }
    inline void contract_relationship::put_relating_contract(contract inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_contract", sdaiINSTANCE, (void*) i); }
    inline contract contract_relationship::get_related_contract() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_contract", sdaiINSTANCE, &inst); return inst; }
    inline void contract_relationship::put_related_contract(contract inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_contract", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit conversion_based_unit::get_conversion_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "conversion_factor", sdaiINSTANCE, &inst); return inst; }
    inline void conversion_based_unit::put_conversion_factor(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "conversion_factor", sdaiINSTANCE, (void*) i); }
    inline surface curve_bounded_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void curve_bounded_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline curve curve_replica::get_parent_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_curve", sdaiINSTANCE, &inst); return inst; }
    inline void curve_replica::put_parent_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_curve", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator curve_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void curve_replica::put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline colour curve_style::get_curve_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "curve_colour", sdaiINSTANCE, &inst); return inst; }
    inline void curve_style::put_curve_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "curve_colour", sdaiINSTANCE, (void*) i); }
    inline surface_rendering_properties curve_style_rendering::get_rendering_properties() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rendering_properties", sdaiINSTANCE, &inst); return inst; }
    inline void curve_style_rendering::put_rendering_properties(surface_rendering_properties inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rendering_properties", sdaiINSTANCE, (void*) i); }
    inline date date_and_time::get_date_component() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "date_component", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time::put_date_component(date inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "date_component", sdaiINSTANCE, (void*) i); }
    inline local_time date_and_time::get_time_component() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "time_component", sdaiINSTANCE, &inst); return inst; }
    inline void date_and_time::put_time_component(local_time inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "time_component", sdaiINSTANCE, (void*) i); }
    inline datum datum_reference::get_referenced_datum() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "referenced_datum", sdaiINSTANCE, &inst); return inst; }
    inline void datum_reference::put_referenced_datum(datum inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "referenced_datum", sdaiINSTANCE, (void*) i); }
    inline symbol_target defined_symbol::get_target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "target", sdaiINSTANCE, &inst); return inst; }
    inline void defined_symbol::put_target(symbol_target inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "target", sdaiINSTANCE, (void*) i); }
    inline surface degenerate_pcurve::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void degenerate_pcurve::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline definitional_representation degenerate_pcurve::get_reference_to_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, &inst); return inst; }
    inline void degenerate_pcurve::put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_to_curve", sdaiINSTANCE, (void*) i); }
    inline named_unit derived_unit_element::get_unit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "unit", sdaiINSTANCE, &inst); return inst; }
    inline void derived_unit_element::put_unit(named_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "unit", sdaiINSTANCE, (void*) i); }
    inline draughting_callout draughting_callout_relationship::get_relating_draughting_callout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_draughting_callout", sdaiINSTANCE, &inst); return inst; }
    inline void draughting_callout_relationship::put_relating_draughting_callout(draughting_callout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_draughting_callout", sdaiINSTANCE, (void*) i); }
    inline draughting_callout draughting_callout_relationship::get_related_draughting_callout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_draughting_callout", sdaiINSTANCE, &inst); return inst; }
    inline void draughting_callout_relationship::put_related_draughting_callout(draughting_callout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_draughting_callout", sdaiINSTANCE, (void*) i); }
    inline annotation_curve_occurrence terminator_symbol::get_annotated_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "annotated_curve", sdaiINSTANCE, &inst); return inst; }
    inline void terminator_symbol::put_annotated_curve(annotation_curve_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "annotated_curve", sdaiINSTANCE, (void*) i); }
    inline dimensional_location dimension_related_tolerance_zone_element::get_related_dimension() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_dimension", sdaiINSTANCE, &inst); return inst; }
    inline void dimension_related_tolerance_zone_element::put_related_dimension(dimensional_location inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_dimension", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone_definition dimension_related_tolerance_zone_element::get_related_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_element", sdaiINSTANCE, &inst); return inst; }
    inline void dimension_related_tolerance_zone_element::put_related_element(tolerance_zone_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_element", sdaiINSTANCE, (void*) i); }
    inline shape_dimension_representation dimensional_characteristic_representation::get_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "representation", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_characteristic_representation::put_representation(shape_dimension_representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "representation", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_location_with_path::get_path() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_location_with_path::put_path(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path", sdaiINSTANCE, (void*) i); }
    inline shape_aspect dimensional_size_with_path::get_path() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path", sdaiINSTANCE, &inst); return inst; }
    inline void dimensional_size_with_path::put_path(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path", sdaiINSTANCE, (void*) i); }
    inline action_directive directed_action::get_directive() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directive", sdaiINSTANCE, &inst); return inst; }
    inline void directed_action::put_directive(action_directive inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directive", sdaiINSTANCE, (void*) i); }
    inline document_type document::get_kind() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "kind", sdaiINSTANCE, &inst); return inst; }
    inline void document::put_kind(document_type inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "kind", sdaiINSTANCE, (void*) i); }
    inline document document_product_association::get_relating_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_product_association::put_relating_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_document", sdaiINSTANCE, (void*) i); }
    inline document document_relationship::get_relating_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_relationship::put_relating_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_document", sdaiINSTANCE, (void*) i); }
    inline document document_relationship::get_related_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_relationship::put_related_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_document", sdaiINSTANCE, (void*) i); }
    inline document document_representation_type::get_represented_document() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "represented_document", sdaiINSTANCE, &inst); return inst; }
    inline void document_representation_type::put_represented_document(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "represented_document", sdaiINSTANCE, (void*) i); }
    inline document document_usage_constraint::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void document_usage_constraint::put_source(document inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline representation_item item_defined_transformation::get_transform_item_1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transform_item_1", sdaiINSTANCE, &inst); return inst; }
    inline void item_defined_transformation::put_transform_item_1(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transform_item_1", sdaiINSTANCE, (void*) i); }
    inline representation_item item_defined_transformation::get_transform_item_2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transform_item_2", sdaiINSTANCE, &inst); return inst; }
    inline void item_defined_transformation::put_transform_item_2(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transform_item_2", sdaiINSTANCE, (void*) i); }
    inline representation item_identified_representation_usage::get_used_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "used_representation", sdaiINSTANCE, &inst); return inst; }
    inline void item_identified_representation_usage::put_used_representation(representation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "used_representation", sdaiINSTANCE, (void*) i); }
    inline representation_item item_identified_representation_usage::get_identified_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "identified_item", sdaiINSTANCE, &inst); return inst; }
    inline void item_identified_representation_usage::put_identified_item(representation_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "identified_item", sdaiINSTANCE, (void*) i); }
    inline drawing_definition drawing_revision::get_drawing_identifier() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "drawing_identifier", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision::put_drawing_identifier(drawing_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "drawing_identifier", sdaiINSTANCE, (void*) i); }
    inline drawing_revision drawing_revision_sequence::get_predecessor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "predecessor", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision_sequence::put_predecessor(drawing_revision inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "predecessor", sdaiINSTANCE, (void*) i); }
    inline drawing_revision drawing_revision_sequence::get_successor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "successor", sdaiINSTANCE, &inst); return inst; }
    inline void drawing_revision_sequence::put_successor(drawing_revision inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "successor", sdaiINSTANCE, (void*) i); }
    inline vertex edge::get_edge_start() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_start", sdaiINSTANCE, &inst); return inst; }
    inline void edge::put_edge_start(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_start", sdaiINSTANCE, (void*) i); }
    inline vertex edge::get_edge_end() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_end", sdaiINSTANCE, &inst); return inst; }
    inline void edge::put_edge_end(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_end", sdaiINSTANCE, (void*) i); }
    inline curve edge_curve::get_edge_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void edge_curve::put_edge_geometry(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_geometry", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_relationship::get_related_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_relationship::put_related_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_effectivity", sdaiINSTANCE, (void*) i); }
    inline effectivity effectivity_relationship::get_relating_effectivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_effectivity", sdaiINSTANCE, &inst); return inst; }
    inline void effectivity_relationship::put_relating_effectivity(effectivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_effectivity", sdaiINSTANCE, (void*) i); }
    inline generic_variable environment::get_syntactic_representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "syntactic_representation", sdaiINSTANCE, &inst); return inst; }
    inline void environment::put_syntactic_representation(generic_variable inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "syntactic_representation", sdaiINSTANCE, (void*) i); }
    inline variable_semantics environment::get_semantics() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "semantics", sdaiINSTANCE, &inst); return inst; }
    inline void environment::put_semantics(variable_semantics inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "semantics", sdaiINSTANCE, (void*) i); }
    inline cartesian_point evaluated_degenerate_pcurve::get_equivalent_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "equivalent_point", sdaiINSTANCE, &inst); return inst; }
    inline void evaluated_degenerate_pcurve::put_equivalent_point(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "equivalent_point", sdaiINSTANCE, (void*) i); }
    inline event_occurrence event_occurrence_relationship::get_relating_event() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_event", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_relationship::put_relating_event(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_event", sdaiINSTANCE, (void*) i); }
    inline event_occurrence event_occurrence_relationship::get_related_event() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_event", sdaiINSTANCE, &inst); return inst; }
    inline void event_occurrence_relationship::put_related_event(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_event", sdaiINSTANCE, (void*) i); }
    inline environment expression_conversion_based_unit::get_associated_variable_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "associated_variable_environment", sdaiINSTANCE, &inst); return inst; }
    inline external_source external_source_relationship::get_relating_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_source", sdaiINSTANCE, &inst); return inst; }
    inline void external_source_relationship::put_relating_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_source", sdaiINSTANCE, (void*) i); }
    inline external_source external_source_relationship::get_related_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_source", sdaiINSTANCE, &inst); return inst; }
    inline void external_source_relationship::put_related_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_source", sdaiINSTANCE, (void*) i); }
    inline external_source externally_defined_item::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item::put_source(external_source inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "source", sdaiINSTANCE, (void*) i); }
    inline externally_defined_item externally_defined_item_relationship::get_relating_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_item", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item_relationship::put_relating_item(externally_defined_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_item", sdaiINSTANCE, (void*) i); }
    inline externally_defined_item externally_defined_item_relationship::get_related_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_item", sdaiINSTANCE, &inst); return inst; }
    inline void externally_defined_item_relationship::put_related_item(externally_defined_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_item", sdaiINSTANCE, (void*) i); }
    inline applied_external_identification_assignment externally_defined_picture_representation_item::get_source() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "source", sdaiINSTANCE, &inst); return inst; }
    inline curve_bounded_surface swept_area_solid::get_swept_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_area", sdaiINSTANCE, &inst); return inst; }
    inline void swept_area_solid::put_swept_area(curve_bounded_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_area", sdaiINSTANCE, (void*) i); }
    inline direction extruded_area_solid::get_extruded_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, &inst); return inst; }
    inline void extruded_area_solid::put_extruded_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, (void*) i); }
    inline face_surface swept_face_solid::get_swept_face() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_face", sdaiINSTANCE, &inst); return inst; }
    inline void swept_face_solid::put_swept_face(face_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_face", sdaiINSTANCE, (void*) i); }
    inline direction extruded_face_solid::get_extruded_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, &inst); return inst; }
    inline void extruded_face_solid::put_extruded_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extruded_direction", sdaiINSTANCE, (void*) i); }
    inline loop face_bound::get_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "bound", sdaiINSTANCE, &inst); return inst; }
    inline void face_bound::put_bound(loop inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "bound", sdaiINSTANCE, (void*) i); }
    inline colour fill_area_style_colour::get_fill_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_colour", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_colour::put_fill_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_colour", sdaiINSTANCE, (void*) i); }
    inline curve_style fill_area_style_hatching::get_hatch_line_appearance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "hatch_line_appearance", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_hatch_line_appearance(curve_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "hatch_line_appearance", sdaiINSTANCE, (void*) i); }
    inline one_direction_repeat_factor fill_area_style_hatching::get_start_of_next_hatch_line() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "start_of_next_hatch_line", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_start_of_next_hatch_line(one_direction_repeat_factor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "start_of_next_hatch_line", sdaiINSTANCE, (void*) i); }
    inline cartesian_point fill_area_style_hatching::get_point_of_reference_hatch_line() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "point_of_reference_hatch_line", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_point_of_reference_hatch_line(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "point_of_reference_hatch_line", sdaiINSTANCE, (void*) i); }
    inline cartesian_point fill_area_style_hatching::get_pattern_start() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pattern_start", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_hatching::put_pattern_start(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pattern_start", sdaiINSTANCE, (void*) i); }
    inline colour fill_area_style_tile_coloured_region::get_region_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "region_colour", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tile_coloured_region::put_region_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "region_colour", sdaiINSTANCE, (void*) i); }
    inline annotation_curve_occurrence fill_area_style_tile_curve_with_style::get_styled_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "styled_curve", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tile_curve_with_style::put_styled_curve(annotation_curve_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "styled_curve", sdaiINSTANCE, (void*) i); }
    inline annotation_symbol_occurrence fill_area_style_tile_symbol_with_style::get_symbol() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "symbol", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tile_symbol_with_style::put_symbol(annotation_symbol_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "symbol", sdaiINSTANCE, (void*) i); }
    inline two_direction_repeat_factor fill_area_style_tiles::get_tiling_pattern() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "tiling_pattern", sdaiINSTANCE, &inst); return inst; }
    inline void fill_area_style_tiles::put_tiling_pattern(two_direction_repeat_factor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "tiling_pattern", sdaiINSTANCE, (void*) i); }
    inline general_property general_property_association::get_base_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_definition", sdaiINSTANCE, &inst); return inst; }
    inline void general_property_association::put_base_definition(general_property inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_definition", sdaiINSTANCE, (void*) i); }
    inline environment generic_variable::get_interpretation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "interpretation", sdaiINSTANCE, &inst); return inst; }
    inline geometric_tolerance geometric_tolerance_relationship::get_relating_geometric_tolerance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_geometric_tolerance", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_relationship::put_relating_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_geometric_tolerance", sdaiINSTANCE, (void*) i); }
    inline geometric_tolerance geometric_tolerance_relationship::get_related_geometric_tolerance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_geometric_tolerance", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_relationship::put_related_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_geometric_tolerance", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit geometric_tolerance_with_defined_unit::get_unit_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "unit_size", sdaiINSTANCE, &inst); return inst; }
    inline void geometric_tolerance_with_defined_unit::put_unit_size(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "unit_size", sdaiINSTANCE, (void*) i); }
    inline group group_relationship::get_relating_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_relationship::put_relating_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_group", sdaiINSTANCE, (void*) i); }
    inline group group_relationship::get_related_group() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_group", sdaiINSTANCE, &inst); return inst; }
    inline void group_relationship::put_related_group(group inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_group", sdaiINSTANCE, (void*) i); }
    inline colour light_source::get_light_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "light_colour", sdaiINSTANCE, &inst); return inst; }
    inline void light_source::put_light_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "light_colour", sdaiINSTANCE, (void*) i); }
    inline direction light_source_directional::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_directional::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline cartesian_point light_source_positional::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_positional::put_position(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline cartesian_point light_source_spot::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_spot::put_position(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline direction light_source_spot::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void light_source_spot::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline cartesian_point line::get_pnt() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "pnt", sdaiINSTANCE, &inst); return inst; }
    inline void line::put_pnt(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "pnt", sdaiINSTANCE, (void*) i); }
    inline vector line::get_dir() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dir", sdaiINSTANCE, &inst); return inst; }
    inline void line::put_dir(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dir", sdaiINSTANCE, (void*) i); }
    inline coordinated_universal_time_offset local_time::get_zone() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "zone", sdaiINSTANCE, &inst); return inst; }
    inline void local_time::put_zone(coordinated_universal_time_offset inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "zone", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit lot_effectivity::get_effectivity_lot_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "effectivity_lot_size", sdaiINSTANCE, &inst); return inst; }
    inline void lot_effectivity::put_effectivity_lot_size(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "effectivity_lot_size", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit make_from_usage_option::get_quantity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "quantity", sdaiINSTANCE, &inst); return inst; }
    inline void make_from_usage_option::put_quantity(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "quantity", sdaiINSTANCE, (void*) i); }
    inline material_designation material_designation_characterization::get_designation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "designation", sdaiINSTANCE, &inst); return inst; }
    inline void material_designation_characterization::put_designation(material_designation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "designation", sdaiINSTANCE, (void*) i); }
    inline data_environment material_property_representation::get_dependent_environment() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "dependent_environment", sdaiINSTANCE, &inst); return inst; }
    inline void material_property_representation::put_dependent_environment(data_environment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "dependent_environment", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit measure_qualification::get_qualified_measure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "qualified_measure", sdaiINSTANCE, &inst); return inst; }
    inline void measure_qualification::put_qualified_measure(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "qualified_measure", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d modified_solid_with_placed_configuration::get_placing() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "placing", sdaiINSTANCE, &inst); return inst; }
    inline void modified_solid_with_placed_configuration::put_placing(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "placing", sdaiINSTANCE, (void*) i); }
    inline curve offset_curve_2d::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_2d::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline curve offset_curve_3d::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_3d::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline direction offset_curve_3d::get_ref_direction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ref_direction", sdaiINSTANCE, &inst); return inst; }
    inline void offset_curve_3d::put_ref_direction(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ref_direction", sdaiINSTANCE, (void*) i); }
    inline surface offset_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void offset_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline vector one_direction_repeat_factor::get_repeat_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "repeat_factor", sdaiINSTANCE, &inst); return inst; }
    inline void one_direction_repeat_factor::put_repeat_factor(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "repeat_factor", sdaiINSTANCE, (void*) i); }
    inline organization organization_relationship::get_relating_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_relationship::put_relating_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_organization", sdaiINSTANCE, (void*) i); }
    inline organization organization_relationship::get_related_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_organization", sdaiINSTANCE, &inst); return inst; }
    inline void organization_relationship::put_related_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_organization", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_relationship::get_relating_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_relationship::put_relating_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_organizational_project", sdaiINSTANCE, (void*) i); }
    inline organizational_project organizational_project_relationship::get_related_organizational_project() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_organizational_project", sdaiINSTANCE, &inst); return inst; }
    inline void organizational_project_relationship::put_related_organizational_project(organizational_project inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_organizational_project", sdaiINSTANCE, (void*) i); }
    inline closed_shell oriented_closed_shell::get_closed_shell_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "closed_shell_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_closed_shell::put_closed_shell_element(closed_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "closed_shell_element", sdaiINSTANCE, (void*) i); }
    inline edge oriented_edge::get_edge_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "edge_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_edge::put_edge_element(edge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "edge_element", sdaiINSTANCE, (void*) i); }
    inline face oriented_face::get_face_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "face_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_face::put_face_element(face inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "face_element", sdaiINSTANCE, (void*) i); }
    inline open_shell oriented_open_shell::get_open_shell_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "open_shell_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_open_shell::put_open_shell_element(open_shell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "open_shell_element", sdaiINSTANCE, (void*) i); }
    inline path oriented_path::get_path_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "path_element", sdaiINSTANCE, &inst); return inst; }
    inline void oriented_path::put_path_element(path inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "path_element", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit parallel_offset::get_offset() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "offset", sdaiINSTANCE, &inst); return inst; }
    inline void parallel_offset::put_offset(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "offset", sdaiINSTANCE, (void*) i); }
    inline person person_and_organization::get_the_person() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "the_person", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization::put_the_person(person inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "the_person", sdaiINSTANCE, (void*) i); }
    inline organization person_and_organization::get_the_organization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "the_organization", sdaiINSTANCE, &inst); return inst; }
    inline void person_and_organization::put_the_organization(organization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "the_organization", sdaiINSTANCE, (void*) i); }
    inline presentation_size picture_representation::get_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "size", sdaiINSTANCE, &inst); return inst; }
    inline curve point_on_curve::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_curve::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline surface point_on_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void point_on_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline point point_replica::get_parent_pt() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_pt", sdaiINSTANCE, &inst); return inst; }
    inline void point_replica::put_parent_pt(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_pt", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator point_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void point_replica::put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline colour point_style::get_marker_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "marker_colour", sdaiINSTANCE, &inst); return inst; }
    inline void point_style::put_marker_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "marker_colour", sdaiINSTANCE, (void*) i); }
    inline planar_box presentation_size::get_size() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "size", sdaiINSTANCE, &inst); return inst; }
    inline void presentation_size::put_size(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "size", sdaiINSTANCE, (void*) i); }
    inline presented_item presented_item_representation::get_item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "item", sdaiINSTANCE, &inst); return inst; }
    inline void presented_item_representation::put_item(presented_item inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "item", sdaiINSTANCE, (void*) i); }
    inline product_concept_context product_concept::get_market_context() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "market_context", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept::put_market_context(product_concept_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "market_context", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_feature_association::get_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_feature_association::put_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "concept", sdaiINSTANCE, (void*) i); }
    inline product_concept_feature product_concept_feature_association::get_feature() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "feature", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_feature_association::put_feature(product_concept_feature inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "feature", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_relationship::get_relating_product_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_relationship::put_relating_product_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_concept", sdaiINSTANCE, (void*) i); }
    inline product_concept product_concept_relationship::get_related_product_concept() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_concept", sdaiINSTANCE, &inst); return inst; }
    inline void product_concept_relationship::put_related_product_concept(product_concept inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_concept", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_context_association::get_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "definition", sdaiINSTANCE, (void*) i); }
    inline product_definition_context product_definition_context_association::get_frame_of_reference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "frame_of_reference", sdaiINSTANCE, (void*) i); }
    inline product_definition_context_role product_definition_context_association::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_context_association::put_role(product_definition_context_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline product product_definition_formation::get_of_product() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "of_product", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation::put_of_product(product inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "of_product", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition_formation_relationship::get_relating_product_definition_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_product_definition_formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation_relationship::put_relating_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_product_definition_formation", sdaiINSTANCE, (void*) i); }
    inline product_definition_formation product_definition_formation_relationship::get_related_product_definition_formation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_product_definition_formation", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_formation_relationship::put_related_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_product_definition_formation", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_occurrence_relationship::get_occurrence() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "occurrence", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_occurrence_relationship::put_occurrence(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "occurrence", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage product_definition_occurrence_relationship::get_occurrence_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "occurrence_usage", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_occurrence_relationship::put_occurrence_usage(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "occurrence_usage", sdaiINSTANCE, (void*) i); }
    inline product_definition_relationship product_definition_substitute::get_context_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "context_relationship", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_substitute::put_context_relationship(product_definition_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "context_relationship", sdaiINSTANCE, (void*) i); }
    inline product_definition product_definition_substitute::get_substitute_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "substitute_definition", sdaiINSTANCE, &inst); return inst; }
    inline void product_definition_substitute::put_substitute_definition(product_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "substitute_definition", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone tolerance_zone_definition::get_zone() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "zone", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_zone_definition::put_zone(tolerance_zone inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "zone", sdaiINSTANCE, (void*) i); }
    inline shape_aspect projected_zone_definition::get_projection_end() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projection_end", sdaiINSTANCE, &inst); return inst; }
    inline void projected_zone_definition::put_projection_end(shape_aspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projection_end", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit projected_zone_definition::get_projected_length() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projected_length", sdaiINSTANCE, &inst); return inst; }
    inline void projected_zone_definition::put_projected_length(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projected_length", sdaiINSTANCE, (void*) i); }
    inline property_definition property_definition_relationship::get_relating_property_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_property_definition", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_relationship::put_relating_property_definition(property_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_property_definition", sdaiINSTANCE, (void*) i); }
    inline property_definition property_definition_relationship::get_related_property_definition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_property_definition", sdaiINSTANCE, &inst); return inst; }
    inline void property_definition_relationship::put_related_property_definition(property_definition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_property_definition", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit quantified_assembly_component_usage::get_quantity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "quantity", sdaiINSTANCE, &inst); return inst; }
    inline void quantified_assembly_component_usage::put_quantity(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "quantity", sdaiINSTANCE, (void*) i); }
    inline surface rectangular_trimmed_surface::get_basis_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_surface", sdaiINSTANCE, &inst); return inst; }
    inline void rectangular_trimmed_surface::put_basis_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_surface", sdaiINSTANCE, (void*) i); }
    inline event_occurrence relative_event_occurrence::get_base_event() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "base_event", sdaiINSTANCE, &inst); return inst; }
    inline void relative_event_occurrence::put_base_event(event_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "base_event", sdaiINSTANCE, (void*) i); }
    inline time_measure_with_unit relative_event_occurrence::get_offset() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "offset", sdaiINSTANCE, &inst); return inst; }
    inline void relative_event_occurrence::put_offset(time_measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "offset", sdaiINSTANCE, (void*) i); }
    inline axis1_placement revolved_area_solid::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void revolved_area_solid::put_axis(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline axis1_placement revolved_face_solid::get_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis", sdaiINSTANCE, &inst); return inst; }
    inline void revolved_face_solid::put_axis(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis", sdaiINSTANCE, (void*) i); }
    inline axis2_placement_3d right_angular_wedge::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_angular_wedge::put_position(axis2_placement_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline axis1_placement right_circular_cone::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_circular_cone::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline axis1_placement right_circular_cylinder::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void right_circular_cylinder::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline object_role role_association::get_role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "role", sdaiINSTANCE, &inst); return inst; }
    inline void role_association::put_role(object_role inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "role", sdaiINSTANCE, (void*) i); }
    inline curve surface_curve_swept_area_solid::get_directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directrix", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve_swept_area_solid::put_directrix(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directrix", sdaiINSTANCE, (void*) i); }
    inline surface surface_curve_swept_area_solid::get_reference_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_curve_swept_area_solid::put_reference_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_surface", sdaiINSTANCE, (void*) i); }
    inline runout_zone_orientation runout_zone_definition::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_definition::put_orientation(runout_zone_orientation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit runout_zone_orientation::get_angle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "angle", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_orientation::put_angle(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "angle", sdaiINSTANCE, (void*) i); }
    inline shape_aspect_relationship runout_zone_orientation_reference_direction::get_orientation_defining_relationship() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation_defining_relationship", sdaiINSTANCE, &inst); return inst; }
    inline void runout_zone_orientation_reference_direction::put_orientation_defining_relationship(shape_aspect_relationship inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation_defining_relationship", sdaiINSTANCE, (void*) i); }
    inline security_classification_level security_classification::get_security_level() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "security_level", sdaiINSTANCE, &inst); return inst; }
    inline void security_classification::put_security_level(security_classification_level inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "security_level", sdaiINSTANCE, (void*) i); }
    inline solid_model solid_replica::get_parent_solid() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_solid", sdaiINSTANCE, &inst); return inst; }
    inline void solid_replica::put_parent_solid(solid_model inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_solid", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator_3d solid_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void solid_replica::put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline modified_solid_with_placed_configuration solid_with_shape_element_pattern::get_replicated_element() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "replicated_element", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_shape_element_pattern::put_replicated_element(modified_solid_with_placed_configuration inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "replicated_element", sdaiINSTANCE, (void*) i); }
    inline point solid_with_circular_pattern::get_reference_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_point", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_circular_pattern::put_reference_point(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_point", sdaiINSTANCE, (void*) i); }
    inline bounded_curve solid_with_curved_slot::get_slot_centreline() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "slot_centreline", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_curved_slot::put_slot_centreline(bounded_curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "slot_centreline", sdaiINSTANCE, (void*) i); }
    inline positioned_sketch solid_with_general_pocket::get_profile() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "profile", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_general_pocket::put_profile(positioned_sketch inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "profile", sdaiINSTANCE, (void*) i); }
    inline point solid_with_general_pocket::get_reference_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_point", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_general_pocket::put_reference_point(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_point", sdaiINSTANCE, (void*) i); }
    inline positioned_sketch solid_with_general_protrusion::get_profile() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "profile", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_general_protrusion::put_profile(positioned_sketch inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "profile", sdaiINSTANCE, (void*) i); }
    inline point solid_with_general_protrusion::get_reference_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "reference_point", sdaiINSTANCE, &inst); return inst; }
    inline void solid_with_general_protrusion::put_reference_point(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "reference_point", sdaiINSTANCE, (void*) i); }
    inline assembly_component_usage specified_higher_usage_occurrence::get_upper_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "upper_usage", sdaiINSTANCE, &inst); return inst; }
    inline void specified_higher_usage_occurrence::put_upper_usage(assembly_component_usage inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "upper_usage", sdaiINSTANCE, (void*) i); }
    inline next_assembly_usage_occurrence specified_higher_usage_occurrence::get_next_usage() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "next_usage", sdaiINSTANCE, &inst); return inst; }
    inline void specified_higher_usage_occurrence::put_next_usage(next_assembly_usage_occurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "next_usage", sdaiINSTANCE, (void*) i); }
    inline point sphere::get_centre() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "centre", sdaiINSTANCE, &inst); return inst; }
    inline void sphere::put_centre(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "centre", sdaiINSTANCE, (void*) i); }
    inline edge subedge::get_parent_edge() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_edge", sdaiINSTANCE, &inst); return inst; }
    inline void subedge::put_parent_edge(edge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_edge", sdaiINSTANCE, (void*) i); }
    inline face subface::get_parent_face() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_face", sdaiINSTANCE, &inst); return inst; }
    inline void subface::put_parent_face(face inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_face", sdaiINSTANCE, (void*) i); }
    inline curve swept_surface::get_swept_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "swept_curve", sdaiINSTANCE, &inst); return inst; }
    inline void swept_surface::put_swept_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "swept_curve", sdaiINSTANCE, (void*) i); }
    inline vector surface_of_linear_extrusion::get_extrusion_axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extrusion_axis", sdaiINSTANCE, &inst); return inst; }
    inline void surface_of_linear_extrusion::put_extrusion_axis(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extrusion_axis", sdaiINSTANCE, (void*) i); }
    inline axis1_placement surface_of_revolution::get_axis_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "axis_position", sdaiINSTANCE, &inst); return inst; }
    inline void surface_of_revolution::put_axis_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "axis_position", sdaiINSTANCE, (void*) i); }
    inline bounded_surface surface_patch::get_parent_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_patch::put_parent_surface(bounded_surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_surface", sdaiINSTANCE, (void*) i); }
    inline colour surface_rendering_properties::get_rendered_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "rendered_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_rendering_properties::put_rendered_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "rendered_colour", sdaiINSTANCE, (void*) i); }
    inline surface surface_replica::get_parent_surface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "parent_surface", sdaiINSTANCE, &inst); return inst; }
    inline void surface_replica::put_parent_surface(surface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "parent_surface", sdaiINSTANCE, (void*) i); }
    inline cartesian_transformation_operator_3d surface_replica::get_transformation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "transformation", sdaiINSTANCE, &inst); return inst; }
    inline void surface_replica::put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "transformation", sdaiINSTANCE, (void*) i); }
    inline fill_area_style surface_style_fill_area::get_fill_area() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "fill_area", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_fill_area::put_fill_area(fill_area_style inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "fill_area", sdaiINSTANCE, (void*) i); }
    inline colour surface_style_reflectance_ambient_diffuse_specular::get_specular_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "specular_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_reflectance_ambient_diffuse_specular::put_specular_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "specular_colour", sdaiINSTANCE, (void*) i); }
    inline colour surface_style_rendering::get_surface_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "surface_colour", sdaiINSTANCE, &inst); return inst; }
    inline void surface_style_rendering::put_surface_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "surface_colour", sdaiINSTANCE, (void*) i); }
    inline curve swept_disk_solid::get_directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "directrix", sdaiINSTANCE, &inst); return inst; }
    inline void swept_disk_solid::put_directrix(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "directrix", sdaiINSTANCE, (void*) i); }
    inline colour symbol_colour::get_colour_of_symbol() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "colour_of_symbol", sdaiINSTANCE, &inst); return inst; }
    inline void symbol_colour::put_colour_of_symbol(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "colour_of_symbol", sdaiINSTANCE, (void*) i); }
    inline text_font text_font_in_family::get_font() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "font", sdaiINSTANCE, &inst); return inst; }
    inline void text_font_in_family::put_font(text_font inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "font", sdaiINSTANCE, (void*) i); }
    inline text_font_family text_font_in_family::get_family() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "family", sdaiINSTANCE, &inst); return inst; }
    inline void text_font_in_family::put_family(text_font_family inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "family", sdaiINSTANCE, (void*) i); }
    inline planar_box text_literal_with_blanking_box::get_blanking() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "blanking", sdaiINSTANCE, &inst); return inst; }
    inline void text_literal_with_blanking_box::put_blanking(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "blanking", sdaiINSTANCE, (void*) i); }
    inline planar_extent text_literal_with_extent::get_extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "extent", sdaiINSTANCE, &inst); return inst; }
    inline void text_literal_with_extent::put_extent(planar_extent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "extent", sdaiINSTANCE, (void*) i); }
    inline colour text_style_for_defined_font::get_text_colour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "text_colour", sdaiINSTANCE, &inst); return inst; }
    inline void text_style_for_defined_font::put_text_colour(colour inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "text_colour", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_based_effectivity::get_effectivity_period() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "effectivity_period", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_based_effectivity::put_effectivity_period(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "effectivity_period", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_relationship::get_relating_time_interval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "relating_time_interval", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_relationship::put_relating_time_interval(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "relating_time_interval", sdaiINSTANCE, (void*) i); }
    inline time_interval time_interval_relationship::get_related_time_interval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "related_time_interval", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_relationship::put_related_time_interval(time_interval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "related_time_interval", sdaiINSTANCE, (void*) i); }
    inline time_measure_with_unit time_interval_with_bounds::get_duration() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "duration", sdaiINSTANCE, &inst); return inst; }
    inline void time_interval_with_bounds::put_duration(time_measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "duration", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit tolerance_value::get_lower_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "lower_bound", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_value::put_lower_bound(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "lower_bound", sdaiINSTANCE, (void*) i); }
    inline measure_with_unit tolerance_value::get_upper_bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "upper_bound", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_value::put_upper_bound(measure_with_unit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "upper_bound", sdaiINSTANCE, (void*) i); }
    inline tolerance_zone_form tolerance_zone::get_form() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "form", sdaiINSTANCE, &inst); return inst; }
    inline void tolerance_zone::put_form(tolerance_zone_form inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "form", sdaiINSTANCE, (void*) i); }
    inline axis1_placement torus::get_position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "position", sdaiINSTANCE, &inst); return inst; }
    inline void torus::put_position(axis1_placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "position", sdaiINSTANCE, (void*) i); }
    inline curve trimmed_curve::get_basis_curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "basis_curve", sdaiINSTANCE, &inst); return inst; }
    inline void trimmed_curve::put_basis_curve(curve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "basis_curve", sdaiINSTANCE, (void*) i); }
    inline vector two_direction_repeat_factor::get_second_repeat_factor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "second_repeat_factor", sdaiINSTANCE, &inst); return inst; }
    inline void two_direction_repeat_factor::put_second_repeat_factor(vector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "second_repeat_factor", sdaiINSTANCE, (void*) i); }
    inline generic_expression unary_generic_expression::get_operand() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "operand", sdaiINSTANCE, &inst); return inst; }
    inline void unary_generic_expression::put_operand(generic_expression inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "operand", sdaiINSTANCE, (void*) i); }
    inline direction vector::get_orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "orientation", sdaiINSTANCE, &inst); return inst; }
    inline void vector::put_orientation(direction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "orientation", sdaiINSTANCE, (void*) i); }
    inline vertex vertex_loop::get_loop_vertex() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "loop_vertex", sdaiINSTANCE, &inst); return inst; }
    inline void vertex_loop::put_loop_vertex(vertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "loop_vertex", sdaiINSTANCE, (void*) i); }
    inline point vertex_point::get_vertex_geometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "vertex_geometry", sdaiINSTANCE, &inst); return inst; }
    inline void vertex_point::put_vertex_geometry(point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "vertex_geometry", sdaiINSTANCE, (void*) i); }
    inline vertex_loop vertex_shell::get_vertex_shell_extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "vertex_shell_extent", sdaiINSTANCE, &inst); return inst; }
    inline void vertex_shell::put_vertex_shell_extent(vertex_loop inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "vertex_shell_extent", sdaiINSTANCE, (void*) i); }
    inline cartesian_point view_volume::get_projection_point() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "projection_point", sdaiINSTANCE, &inst); return inst; }
    inline void view_volume::put_projection_point(cartesian_point inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "projection_point", sdaiINSTANCE, (void*) i); }
    inline planar_box view_volume::get_view_window() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "view_window", sdaiINSTANCE, &inst); return inst; }
    inline void view_volume::put_view_window(planar_box inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "view_window", sdaiINSTANCE, (void*) i); }

}

#endif //__RDF_LTD__AP203_H
