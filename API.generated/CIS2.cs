//
// Early-binding C# API for SDAI (CE wrappers)
//

#pragma warning disable CS1587
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using RDF;

#if _WIN64
        using int_t = System.Int64;
#else
		using int_t = System.Int32;
#endif

namespace CIS2
    {
    using SdaiModel = int_t;
    using SdaiInstance = int_t;
    using SdaiAggr = int_t;

    using IntValue = int_t;
    using TextValue = String;

    /// <summary>
    /// 
    /// </summary>
    class EnumValue<TEnum> where TEnum : struct, Enum
        {
        static public TEnum? FromIndex(int index)
            {
            var values = System.Enum.GetValues<TEnum>();
            if (index >= 0 && index < values.Length)
                {
                return values[index];
                }
            else
                {
                return null;
                }
            }
        }

    class EnumIndex
        {
        static public int FromString(TextValue value, TextValue[] allStrings)
            {
            for (int i = 0; i < allStrings.Length; i++)
                {
                if (value == allStrings[i])
                    return i;
                }
            return -1;
            }
        }

    class EnumString<TEnum> where TEnum : struct, Enum, IComparable
        {
        public static TextValue FromValue(TEnum value, TextValue[] allStrings)
            {
            var values = System.Enum.GetValues<TEnum>();

            for (int i = 0; i < values.Length; i++)
                {
                if (values[i].Equals(value))
                    {
                    if (i < allStrings.Length)
                        {
                        return allStrings[i];
                        }
                    else
                        {
                        Debug.Assert(false);
                        return null;
                        }
                    }
                }

            Debug.Assert(false);
            return null;
            }
        }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    public class Select
        {
        protected SdaiInstance m_instance;
        protected TextValue m_attrName;

        private IntValue m_adb;
        private Select m_outerSelect;

        public IntValue ADB()
            {
            if (m_outerSelect != null)
                {
                return m_outerSelect.ADB();
                }

            if (m_adb == 0 && m_instance != 0 && m_attrName != null)
                {
                if (0 == ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, out m_adb))
                    {
                    ifcengine.sdaiDeleteADB(m_adb);
                    m_adb = 0;
                    }
                }

            return m_adb;
            }

        protected Select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Init(instance, attrName, adb);
            }

        protected Select(Select outer)
            {
            m_instance = 0;
            m_attrName = null;
            m_adb = 0;
            m_outerSelect = outer;
            if (m_outerSelect != null)
                {
                m_instance = m_outerSelect.m_instance;
                }
            }

        public void Init(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Debug.Assert(instance != 0);
            m_instance = instance;
            m_attrName = attrName;
            m_adb = adb;
            m_outerSelect = null;
            }

        protected void SetADB(IntValue adb)
            {
            if (m_outerSelect != null)
                {
                m_outerSelect.SetADB(adb);
                }
            else
                {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance != 0 && m_attrName != null)
                    {
                    ifcengine.sdaiPutAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, m_adb);
                    }
                }
            }

        private bool CheckADBType(IntValue adb, TextValue typeName)
            {
            if (adb == 0)
                {
                return false;
                }

            if (typeName == null)
                {
                return true; //any suitable
                }

            var pPath = ifcengine.sdaiGetADBTypePath(adb, 0);
            var path = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(pPath);

            return path != null && path == typeName;
            }

        public TextValue TypePath
            { get
                {
                var adb = ADB();
                if (adb == 0)
                    {
                    return null;
                    }
                else
                    {
                    return ifcengine.sdaiGetADBTypePathx(adb, 0);
                    }
                }
            }

        //
        //
        protected IntValue? get_IntValue(TextValue typeName, IntValue sdaiType)
            {
            IntValue? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                IntValue val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        protected void put_IntValue(TextValue typeName, IntValue sdaiType, IntValue? value)
            {
            if (value.HasValue)
                {
                IntValue v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected double? get_double(TextValue typeName, IntValue sdaiType)
            {
            double? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                double val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }
        protected bool? get_bool(TextValue typeName, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            bool? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                bool val = false;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void put_double(TextValue typeName, IntValue sdaiType, double? value)
            {
            if (value.HasValue)
                {
                double v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }
        protected void put_bool(TextValue typeName, IntValue sdaiType, bool? value)
            {
            if (value.HasValue)
                {
                bool v = value.Value;
                Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected TextValue getTextValue(TextValue typeName, IntValue sdaiType)
            {
            TextValue ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string val;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(sdaiType, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected int getEnumerationIndex(TextValue typeName, TextValue[] rEnumValues)
            {
            int ret = -1;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string value;
                if (0 != ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiENUM, out value))
                    {
                    ret = EnumIndex.FromString(value, rEnumValues);
                    }
                }
            return ret;
            }

        //
        protected void putEnumerationValue(TextValue typeName, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiENUM, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected SdaiInstance getEntityInstance(TextValue typeName)
            {
            SdaiInstance ret = 0;
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (typeName == null || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        ret = inst;
                        }
                    }
                }
            return ret;
            }

        //
        protected void putEntityInstance(TextValue typeName, SdaiInstance inst)
            {
            if (inst == 0 || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                {
                var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiINSTANCE, inst);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected SdaiAggr getAggrValue(TextValue typeName)
            {
            SdaiAggr ret = 0;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiAGGR, out ret) == 0)
                    {
                    ret = 0;
                    }
                }
            return ret;
            }

        //
        protected void putAggrValue(TextValue typeName, SdaiAggr value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiAGGR, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected bool IsADBType(TextValue typeName)
            {
            var adb = ADB();
            return CheckADBType(adb, typeName);
            }

        protected bool IsADBEntity(TextValue typeName)
            {
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        return true;
                        }
                    }
                }
            return false;
            }
        };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 
    interface IAggrSerializerObj
        {
        public abstract IList FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr);
        public abstract SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName);

        }

    abstract class AggrSerializer<TElem, TList> : IAggrSerializerObj
        where TList : List<TElem>, new()
        {
        //
        public TList FromAttr(SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = 0;
            ifcengine.sdaiGetAttrBN(instance, attrName, ifcengine.sdaiAGGR, out aggr);
            return FromSdaiAggr(instance, aggr);
            }

        //
        public TList FromSdaiAggr(SdaiInstance inst, SdaiAggr aggr)
            {
            var ret = new TList();
            IntValue cnt = ifcengine.sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++)
                {
                TElem elem;
                if (GetAggrElement(inst, aggr, i, out elem))
                    {
                    ret.Add(elem);
                    }
                }
            return ret;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable<TElem> lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, v);
                }
            return aggr;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, (TElem)v);
                }
            return aggr;
            }

        protected abstract bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem);
        protected abstract void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem);

        IList IAggrSerializerObj.FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr)
            {
            return FromSdaiAggr(inst, aggr);
            }
        }

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_IntValue<TElem, TList> : AggrSerializer<IntValue, TList>
        where TList : List<IntValue>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out IntValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINTEGER, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINTEGER, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_double<TElem, TList> : AggrSerializer<double, TList>
        where TList : List<double>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out double elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiREAL, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, double elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiREAL, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_bool<TElem, TList> : AggrSerializer<bool, TList>
        where TList : List<bool>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out bool elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiBOOLEAN, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, bool elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiBOOLEAN, ref elem);
            }
        };

    class AggrSerializerText<TElem, TList> : AggrSerializer<TextValue, TList>
        where TList : List<TextValue>, new()
        {
        private IntValue m_sdaiType;

        public AggrSerializerText(IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiSTRING || sdaiType == ifcengine.sdaiBINARY);
            m_sdaiType = sdaiType;
            }
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TextValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out elem);
            return (elem != null);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TextValue elem)
            {
            ifcengine.sdaiAppend(aggr, m_sdaiType, elem);
            }
        };

    class AggrSerializerInstance<TElem, TList> : AggrSerializer<TElem, TList>
        where TElem : Entity, new()
        where TList : List<TElem>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem)
            {
            SdaiInstance val = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINSTANCE, out val);
            elem = new TElem();
            elem.Set(val);
            return (elem != 0);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem)
            {
            SdaiInstance v = elem;
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINSTANCE, v);
            }
        };

    class AggrSerializerEnum<TEnum, TList> : AggrSerializer<TEnum, TList>
        where TEnum : struct, Enum
        where TList : List<TEnum>, new()
        {
        private IntValue m_sdaiType;
        private TextValue[] m_EnumValues;

        public AggrSerializerEnum(TextValue[] enumValues, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiENUM || sdaiType == ifcengine.sdaiLOGICAL);
            m_EnumValues = enumValues;
            m_sdaiType = sdaiType;
            }

        //
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TEnum elem)
            {
            string value;
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out value);
            var ind = EnumIndex.FromString(value, m_EnumValues);
            var val = EnumValue<TEnum>.FromIndex(ind);
            if (val.HasValue)
                {
                elem = val.Value;
                return true;
                }
            else
                {
                elem = EnumValue<TEnum>.FromIndex(0).Value;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TEnum elem)
            {
            var value = EnumString<TEnum>.FromValue(elem, m_EnumValues);
            ifcengine.sdaiAppend(aggr, m_sdaiType, value);
            }
        }
    /// <summary>
    /// 
    /// </summary>
    class AggrSerializerAggr<TNestedAggr, TNestedSerializer, TList> : AggrSerializer<TNestedAggr, TList>
                    where TNestedAggr : IEnumerable
                    where TNestedSerializer : IAggrSerializerObj, new()
                    where TList : List<TNestedAggr>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TNestedAggr elem)
            {
            SdaiAggr nested = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiAGGR, out nested);
            if (nested != 0)
                {
                var nestedSerializer = new TNestedSerializer();
                elem = (TNestedAggr)nestedSerializer.FromSdaiAggrUntyped(inst, nested);
                return true;
                }
            else
                {
                elem = default(TNestedAggr);
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TNestedAggr elem)
            {
            var nestedSerializer = new TNestedSerializer();
            SdaiAggr nested = nestedSerializer.ToSdaiAggr(elem, inst, null);
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiAGGR, nested);
            }
        };

    class AggrSerializerSelect<TSelect, TList> : AggrSerializer<TSelect, TList>
        where TSelect : Select, new()
        where TList : List<TSelect>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TSelect elem)
            {
            IntValue adb = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiADB, out adb);
            if (adb != 0)
                {
                elem = new TSelect();
                elem.Init(inst, null, adb);
                return true;
                }
            else
                {
                elem = null;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TSelect elem)
            {
            var adb = elem.ADB();
            if (adb != 0)
                {
                ifcengine.sdaiAppend((IntValue)aggr, ifcengine.sdaiADB, adb);
                }
            }
        };

    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    public abstract class Entity : IEquatable<Entity>, IComparable, IComparable<Entity>
        {
        public static Entity Create(SdaiModel model) { System.Diagnostics.Debug.Assert(false); return null; }

        //
        public Int64 StepID { get { return m_instance != 0 ? ifcengine.internalGetP21Line(m_instance) : 0; } }

        public bool IsNull { get { return m_instance == 0; } }

        public string EntityName { get
                {
                if (m_instance != 0)
                    {
                    var type = ifcengine.sdaiGetInstanceType(m_instance);
                    if (type != 0)
                        return ifcengine.engiGetEntityName(type);
                    }
                return null;
                } }

        //
        protected SdaiInstance m_instance = 0;

        public Entity(SdaiInstance instance)
            {
            Set(instance);
            }

        public void Set(SdaiInstance instance)
            {
            m_instance = instance;

            if (m_instance != 0)
                {
                if (ifcengine.sdaiIsKindOfBN(m_instance, WrapperEntityName()) == 0)
                    {
                    m_instance = 0;
                    }
                }
            }

        protected abstract TextValue WrapperEntityName();

        /// <summary>
        /// Conversion to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        public static implicit operator SdaiInstance(Entity instance) => instance.m_instance;

        protected TextValue get_string(TextValue attrName, IntValue sdaiType)
            {
            string value;
            if (0 != ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out value))
                {
                return value;
                }
            else
                {
                return null;
                }
            }
        public double? get_double(TextValue attrName, IntValue sdaiType)
            {
            double val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public IntValue? get_IntValue(TextValue attrName, IntValue sdaiType)
            {
            IntValue val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public bool? get_bool(TextValue attrName, IntValue sdaiType)
            {
            bool val = false;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }

        /// <summary>
        /// 
        /// </summary>
        public static bool operator ==(Entity i1, Entity i2) => (Equals(i1, i2));
        public static bool operator !=(Entity i1, Entity i2) => (!(i1 == i2));
        public override bool Equals(Object obj)
            {
            return Equals(obj as Entity);
            }
        public bool Equals(Entity other)
            {
            return (other == null) ? false : (other.m_instance == m_instance);
            }
        public int CompareTo(object obj)
            {
            return CompareTo(obj as Entity);
            }
        public int CompareTo(Entity other)
            {
            return (other == null) ? 1 : m_instance.CompareTo(other.m_instance);
            }
        public override int GetHashCode()
            {
            return m_instance.GetHashCode();
            }
        }


    //
    // Enumerations
    //
    public enum LOGICAL_VALUE { False = 0, True = 1, Unknown = 2 };

    public enum action_source_accidential
        {
        fire = 0,
        impulse = 1,
        impact = 2,
        undefined = 3,
        };

    public enum action_source_permanent
        {
        dead = 0,
        self_weight = 1,
        prestress = 2,
        lack_of_fit = 3,
        undefined = 4,
        };

    public enum action_source_variable_long_term
        {
        live = 0,
        system_imperfection = 1,
        settlement = 2,
        temperature_effect = 3,
        undefined = 4,
        };

    public enum action_source_variable_short_term
        {
        buoyancy = 0,
        wind = 1,
        snow = 2,
        ice = 3,
        current = 4,
        wave = 5,
        rain = 6,
        undefined = 7,
        };

    public enum action_source_variable_transient
        {
        transport = 0,
        erection = 1,
        propping = 2,
        undefined = 3,
        };

    public enum ahead_or_behind
        {
        ahead = 0,
        exact = 1,
        behind = 2,
        };

    public enum b_spline_curve_form
        {
        polyline_form = 0,
        circular_arc = 1,
        elliptic_arc = 2,
        parabolic_arc = 3,
        hyperbolic_arc = 4,
        unspecified = 5,
        };

    public enum b_spline_surface_form
        {
        plane_surf = 0,
        cylindrical_surf = 1,
        conical_surf = 2,
        spherical_surf = 3,
        toroidal_surf = 4,
        surf_of_revolution = 5,
        ruled_surf = 6,
        generalised_cone = 7,
        quadric_surf = 8,
        surf_of_linear_extrusion = 9,
        unspecified = 10,
        };

    public enum bending_method
        {
        hot_bend = 0,
        cold_bend = 1,
        undefined = 2,
        };

    public enum boolean_operator
        {
        union_ = 0,
        intersection = 1,
        difference = 2,
        };

    public enum brazing_type
        {
        diffusion_brazing = 0,
        dip_brazing = 1,
        furnace_brazing = 2,
        induction_brazing = 3,
        infrared_brazing = 4,
        resistance_brazing = 5,
        torch_brazing = 6,
        };

    public enum buckling_direction
        {
        x_dir = 0,
        y_dir = 1,
        z_dir = 2,
        };

    public enum castellation_type
        {
        circular = 0,
        hexagonal = 1,
        octagonal = 2,
        undefined = 3,
        };

    public enum chemical_mechanism_type
        {
        adhesive = 0,
        grout = 1,
        filler = 2,
        sealant = 3,
        undefined = 4,
        };

    public enum cleaning_method
        {
        chemical_wash = 0,
        blast_clean = 1,
        undefined = 2,
        };

    public enum coating_method
        {
        sprayed = 0,
        brushed = 1,
        dipped = 2,
        electroplated = 3,
        undefined = 4,
        };

    public enum coating_purpose
        {
        corrosion_protection = 0,
        fire_protection = 1,
        aesthetic = 2,
        undefined = 3,
        };

    public enum complexity_level
        {
        low = 0,
        medium = 1,
        high = 2,
        };

    public enum connection_type
        {
        pinned = 0,
        semi_rigid_full_str = 1,
        semi_rigid_partial_str = 2,
        rigid_full_str = 3,
        rigid_partial_str = 4,
        };

    public enum cutting_type
        {
        sawn = 0,
        flame_cut = 1,
        sheared = 2,
        punched = 3,
        drilled = 4,
        laser = 5,
        abrasion = 6,
        undefined = 7,
        };

    public enum data_status_type
        {
        deleted = 0,
        superseded = 1,
        archived = 2,
        erroneous = 3,
        undefined = 4,
        };

    public enum direct_or_indirect_action
        {
        direct_action = 0,
        indirect_action = 1,
        };

    public enum drawing_class
        {
        assembly_drawing = 0,
        part_drawing = 1,
        placement_drawing = 2,
        undefined = 3,
        };

    public enum dynamic_analysis_type
        {
        free_vibration = 0,
        stressed_free_vibration = 1,
        damped_vibration = 2,
        linear_dynamic = 3,
        response_spectrum = 4,
        undefined = 5,
        };

    public enum elastic_or_plastic_resistance
        {
        elastic_resistance = 0,
        plastic_resistance = 1,
        };

    public enum element_surface_shape
        {
        quadrilateral = 0,
        triangle = 1,
        };

    public enum element_volume_shape
        {
        hexahedron_element = 0,
        wedge_element = 1,
        tetrahedron_element = 2,
        pyramid_element = 3,
        };

    public enum fabrication_type
        {
        rolled = 0,
        welded = 1,
        cold_formed = 2,
        cast = 3,
        forged = 4,
        extruded = 5,
        undefined = 6,
        };

    public enum frame_continuity
        {
        simple = 0,
        continuous = 1,
        semi_continuous = 2,
        };

    public enum frame_type
        {
        space_frame = 0,
        space_truss = 1,
        plane_frame = 2,
        plane_truss = 3,
        grillage = 4,
        undefined = 5,
        };

    public enum global_or_local_load
        {
        global_load = 0,
        local_load = 1,
        };

    public enum global_or_local_resistance
        {
        global_resistance = 0,
        local_resistance = 1,
        };

    public enum knot_type
        {
        UNIFORM_KNOTS = 0,
        UNSPECIFIED = 1,
        QUASI_UNIFORM_KNOTS = 2,
        PIECEWISE_BEZIER_KNOTS = 3,
        };

    public enum left_or_right
        {
        left_hand = 0,
        right_hand = 1,
        };

    public enum loading_status
        {
        load_increasing = 0,
        load_decreasing = 1,
        load_constant = 2,
        unloaded = 3,
        };

    public enum maximum_or_minimum
        {
        maximum = 0,
        minimum = 1,
        };

    public enum member_beam_role
        {
        edge_beam = 0,
        eaves_beam = 1,
        gantry_girder = 2,
        joist = 3,
        lintel = 4,
        portal_rafter = 5,
        purlin = 6,
        rafter = 7,
        ring_beam = 8,
        side_rail = 9,
        waling_beam = 10,
        };

    public enum member_beam_type
        {
        box_girder = 0,
        fish_bellied_beam = 1,
        haunched_beam = 2,
        plate_girder = 3,
        stub_girder = 4,
        tapered_beam = 5,
        };

    public enum member_brace_type
        {
        cross_brace = 0,
        diagonal_brace = 1,
        horizontal_brace = 2,
        knee_brace = 3,
        lateral_brace = 4,
        longitudinal_brace = 5,
        plan_brace = 6,
        raker = 7,
        sway_brace = 8,
        vertical_brace = 9,
        };

    public enum member_cable_type
        {
        stay = 0,
        suspension_cable = 1,
        suspension_chain = 2,
        };

    public enum member_class
        {
        primary_member = 0,
        secondary_member = 1,
        tertiary_member = 2,
        undefined_class = 3,
        };

    public enum member_column_type
        {
        battened_column = 0,
        box_column = 1,
        compound_strut = 2,
        portal_column = 3,
        };

    public enum member_cubic_type
        {
        floor = 0,
        stair = 1,
        ramp = 2,
        structural_core = 3,
        structural_shell = 4,
        undefined = 5,
        };

    public enum member_linear_type
        {
        beam = 0,
        column = 1,
        truss_element = 2,
        brace = 3,
        spring_element = 4,
        cable = 5,
        pipe = 6,
        wire = 7,
        tie = 8,
        undefined = 9,
        arch = 10,
        beam_column = 11,
        };

    public enum member_planar_type
        {
        wall = 0,
        slab = 1,
        stair_element = 2,
        ramp_element = 3,
        undefined = 4,
        plate = 5,
        };

    public enum member_plate_type
        {
        bearing_plate = 0,
        diaphragm = 1,
        flange = 2,
        web = 3,
        };

    public enum member_role
        {
        compression_member = 0,
        tension_member = 1,
        bending_member = 2,
        combined_member = 3,
        undefined_role = 4,
        };

    public enum member_slab_type
        {
        flat_slab = 0,
        ribbed_slab = 1,
        solid_slab = 2,
        trough_slab = 3,
        voided_slab = 4,
        waffle_slab = 5,
        };

    public enum member_wall_type
        {
        load_bearing_wall = 0,
        retaining_wall = 1,
        shear_wall = 2,
        };

    public enum plane_stress_or_strain
        {
        plane_stress = 0,
        plane_strain = 1,
        undefined = 2,
        };

    public enum preferred_surface_curve_representation
        {
        curve_3d = 0,
        pcurve_s1 = 1,
        pcurve_s2 = 2,
        };

    public enum projected_or_true_length
        {
        projected_length = 0,
        true_length = 1,
        };

    public enum shop_or_site
        {
        shop_process = 0,
        site_process = 1,
        undefined = 2,
        };

    public enum si_prefix
        {
        EXA = 0,
        PETA = 1,
        TERA = 2,
        GIGA = 3,
        MEGA = 4,
        KILO = 5,
        HECTO = 6,
        DECA = 7,
        DECI = 8,
        CENTI = 9,
        MILLI = 10,
        MICRO = 11,
        NANO = 12,
        PICO = 13,
        FEMTO = 14,
        ATTO = 15,
        };

    public enum si_unit_name
        {
        METRE = 0,
        GRAM = 1,
        SECOND = 2,
        AMPERE = 3,
        KELVIN = 4,
        MOLE = 5,
        CANDELA = 6,
        RADIAN = 7,
        STERADIAN = 8,
        HERTZ = 9,
        NEWTON = 10,
        PASCAL = 11,
        JOULE = 12,
        WATT = 13,
        COULOMB = 14,
        VOLT = 15,
        FARAD = 16,
        OHM = 17,
        SIEMENS = 18,
        WEBER = 19,
        TESLA = 20,
        HENRY = 21,
        DEGREE_CELSIUS = 22,
        LUMEN = 23,
        LUX = 24,
        BECQUEREL = 25,
        GRAY = 26,
        SIEVERT = 27,
        };

    public enum soldering_type
        {
        dip_soldering = 0,
        furnace_soldering = 1,
        induction_soldering = 2,
        infrared_soldering = 3,
        iron_soldering = 4,
        resistance_soldering = 5,
        torch_soldering = 6,
        wave_soldering = 7,
        };

    public enum spatial_variation
        {
        free_action = 0,
        fixed_action = 1,
        };

    public enum start_or_end_face
        {
        start_face = 0,
        end_face = 1,
        };

    public enum static_analysis_type
        {
        elastic_1st_order = 0,
        elastic_2nd_order = 1,
        rigid_plastic = 2,
        elasto_plastic = 3,
        elastic_perfectly_plastic = 4,
        undefined = 5,
        };

    public enum static_or_dynamic
        {
        static_ = 0,
        dynamic = 1,
        quasi_dynamic = 2,
        };

    public enum top_or_bottom
        {
        top_edge = 0,
        bottom_edge = 1,
        };

    public enum transition_code
        {
        discontinuous = 0,
        continuous = 1,
        cont_same_gradient = 2,
        cont_same_gradient_same_curvature = 3,
        };

    public enum trimming_preference
        {
        cartesian = 0,
        parameter = 1,
        unspecified = 2,
        };

    public enum weld_alignment
        {
        staggered = 0,
        chained = 1,
        };

    public enum weld_backing_type
        {
        none = 0,
        permanent = 1,
        copper_backing_bar = 2,
        ceramic_tape = 3,
        flare_backing_ring = 4,
        permanent_backing_ring = 5,
        removable_backing_ring = 6,
        user_defined = 7,
        };

    public enum weld_configuration
        {
        butt_joint = 0,
        tee_joint = 1,
        corner_joint = 2,
        lap_joint = 3,
        edge_joint = 4,
        cruciform_joint = 5,
        undefined = 6,
        };

    public enum weld_intermittent_rule
        {
        none = 0,
        fixed_rule = 1,
        member_depth = 2,
        percent_length = 3,
        };

    public enum weld_penetration
        {
        full_penetration = 0,
        deep_penetration = 1,
        partial_penetration = 2,
        undefined = 3,
        };

    public enum weld_shape_bevel
        {
        flare_single_V = 0,
        flare_double_V = 1,
        flare_single_bevel = 2,
        flare_double_bevel = 3,
        single_bevel = 4,
        double_bevel = 5,
        single_V = 6,
        double_V = 7,
        single_J = 8,
        double_J = 9,
        single_U = 10,
        double_U = 11,
        user_defined = 12,
        };

    public enum weld_shape_butt
        {
        square = 0,
        scarf = 1,
        user_defined = 2,
        };

    public enum weld_sidedness
        {
        one_side = 0,
        both_sides = 1,
        };

    public enum weld_surface_shape
        {
        flush = 0,
        convex = 1,
        concave = 2,
        undefined = 3,
        };

    public enum weld_taper_type
        {
        non_taper = 0,
        one_side_taper = 1,
        both_sides_taper = 2,
        };

    public enum weld_type
        {
        butt_weld = 0,
        fillet_weld = 1,
        spot_weld = 2,
        plug_weld = 3,
        seam_weld = 4,
        slot_weld = 5,
        stud_weld = 6,
        surfacing_weld = 7,
        undefined = 8,
        };

    public enum welding_type
        {
        fusion_weld = 0,
        friction_weld = 1,
        flash_weld = 2,
        laser_weld = 3,
        forge_weld = 4,
        undefined = 5,
        };

    public enum welding_type_arc
        {
        generic_arc_welding = 0,
        metal_arc_welding = 1,
        manual_metal_arc_welding = 2,
        gravity_arc_welding = 3,
        self_shielded_arc_welding = 4,
        submerged_arc_welding = 5,
        gas_shielded_metal_arc_welding = 6,
        metal_inert_gas_welding = 7,
        metal_active_gas_welding = 8,
        tubular_inert_gas_welding = 9,
        tubular_active_gas_welding = 10,
        tungsten_inert_gas_welding = 11,
        atomic_hydrogen_welding = 12,
        plasma_arc_welding = 13,
        carbon_arc_welding = 14,
        magnetically_impelled_arc_butt_welding = 15,
        };

    public enum welding_type_beam
        {
        electron_beam_welding = 0,
        laser_beam_welding = 1,
        gas_laser_welding = 2,
        };

    public enum welding_type_gas
        {
        generic_gas_welding = 0,
        oxyacetylene_welding = 1,
        oxyhydrogen_welding = 2,
        oxypropane_welding = 3,
        };

    public enum welding_type_other
        {
        aluminothermic_welding = 0,
        electroslag_welding = 1,
        electrogas_welding = 2,
        induction_welding = 3,
        induction_butt_welding = 4,
        induction_seam_welding = 5,
        infrared_welding = 6,
        percussion_welding = 7,
        };

    public enum welding_type_pressure
        {
        generic_pressure_welding = 0,
        ultrasonic_welding = 1,
        friction_welding = 2,
        forge_welding = 3,
        explosive_welding = 4,
        diffusion_welding = 5,
        oxyfuel_gas_pressure_welding = 6,
        cold_pressure_welding = 7,
        hot_pressure_welding = 8,
        roll_welding = 9,
        high_frequency_pressure_welding = 10,
        };

    public enum welding_type_resistance
        {
        generic_resistance_welding = 0,
        spot_welding = 1,
        seam_welding = 2,
        projection_welding = 3,
        flash_welding = 4,
        resistance_butt_welding = 5,
        high_frequency_resistance_welding = 6,
        };

    public enum welding_type_stud
        {
        generic_stud_welding = 0,
        resistance_stud_welding = 1,
        drawn_arc_stud_welding = 2,
        friction_stud_welding = 3,
        };
    //
    class EnumNames
        {
        public static TextValue[] LOGICAL_VALUE_ = { "F", "T", "U" };
        public static TextValue[] action_source_accidential_ = { "fire", "impulse", "impact", "undefined" };
        public static TextValue[] action_source_permanent_ = { "dead", "self_weight", "prestress", "lack_of_fit", "undefined" };
        public static TextValue[] action_source_variable_long_term_ = { "live", "system_imperfection", "settlement", "temperature_effect", "undefined" };
        public static TextValue[] action_source_variable_short_term_ = { "buoyancy", "wind", "snow", "ice", "current", "wave", "rain", "undefined" };
        public static TextValue[] action_source_variable_transient_ = { "transport", "erection", "propping", "undefined" };
        public static TextValue[] ahead_or_behind_ = { "ahead", "exact", "behind" };
        public static TextValue[] b_spline_curve_form_ = { "polyline_form", "circular_arc", "elliptic_arc", "parabolic_arc", "hyperbolic_arc", "unspecified" };
        public static TextValue[] b_spline_surface_form_ = { "plane_surf", "cylindrical_surf", "conical_surf", "spherical_surf", "toroidal_surf", "surf_of_revolution", "ruled_surf", "generalised_cone", "quadric_surf", "surf_of_linear_extrusion", "unspecified" };
        public static TextValue[] bending_method_ = { "hot_bend", "cold_bend", "undefined" };
        public static TextValue[] boolean_operator_ = { "union", "intersection", "difference" };
        public static TextValue[] brazing_type_ = { "diffusion_brazing", "dip_brazing", "furnace_brazing", "induction_brazing", "infrared_brazing", "resistance_brazing", "torch_brazing" };
        public static TextValue[] buckling_direction_ = { "x_dir", "y_dir", "z_dir" };
        public static TextValue[] castellation_type_ = { "circular", "hexagonal", "octagonal", "undefined" };
        public static TextValue[] chemical_mechanism_type_ = { "adhesive", "grout", "filler", "sealant", "undefined" };
        public static TextValue[] cleaning_method_ = { "chemical_wash", "blast_clean", "undefined" };
        public static TextValue[] coating_method_ = { "sprayed", "brushed", "dipped", "electroplated", "undefined" };
        public static TextValue[] coating_purpose_ = { "corrosion_protection", "fire_protection", "aesthetic", "undefined" };
        public static TextValue[] complexity_level_ = { "low", "medium", "high" };
        public static TextValue[] connection_type_ = { "pinned", "semi_rigid_full_str", "semi_rigid_partial_str", "rigid_full_str", "rigid_partial_str" };
        public static TextValue[] cutting_type_ = { "sawn", "flame_cut", "sheared", "punched", "drilled", "laser", "abrasion", "undefined" };
        public static TextValue[] data_status_type_ = { "deleted", "superseded", "archived", "erroneous", "undefined" };
        public static TextValue[] direct_or_indirect_action_ = { "direct_action", "indirect_action" };
        public static TextValue[] drawing_class_ = { "assembly_drawing", "part_drawing", "placement_drawing", "undefined" };
        public static TextValue[] dynamic_analysis_type_ = { "free_vibration", "stressed_free_vibration", "damped_vibration", "linear_dynamic", "response_spectrum", "undefined" };
        public static TextValue[] elastic_or_plastic_resistance_ = { "elastic_resistance", "plastic_resistance" };
        public static TextValue[] element_surface_shape_ = { "quadrilateral", "triangle" };
        public static TextValue[] element_volume_shape_ = { "hexahedron_element", "wedge_element", "tetrahedron_element", "pyramid_element" };
        public static TextValue[] fabrication_type_ = { "rolled", "welded", "cold_formed", "cast", "forged", "extruded", "undefined" };
        public static TextValue[] frame_continuity_ = { "simple", "continuous", "semi_continuous" };
        public static TextValue[] frame_type_ = { "space_frame", "space_truss", "plane_frame", "plane_truss", "grillage", "undefined" };
        public static TextValue[] global_or_local_load_ = { "global_load", "local_load" };
        public static TextValue[] global_or_local_resistance_ = { "global_resistance", "local_resistance" };
        public static TextValue[] knot_type_ = { "UNIFORM_KNOTS", "UNSPECIFIED", "QUASI_UNIFORM_KNOTS", "PIECEWISE_BEZIER_KNOTS" };
        public static TextValue[] left_or_right_ = { "left_hand", "right_hand" };
        public static TextValue[] loading_status_ = { "load_increasing", "load_decreasing", "load_constant", "unloaded" };
        public static TextValue[] maximum_or_minimum_ = { "maximum", "minimum" };
        public static TextValue[] member_beam_role_ = { "edge_beam", "eaves_beam", "gantry_girder", "joist", "lintel", "portal_rafter", "purlin", "rafter", "ring_beam", "side_rail", "waling_beam" };
        public static TextValue[] member_beam_type_ = { "box_girder", "fish_bellied_beam", "haunched_beam", "plate_girder", "stub_girder", "tapered_beam" };
        public static TextValue[] member_brace_type_ = { "cross_brace", "diagonal_brace", "horizontal_brace", "knee_brace", "lateral_brace", "longitudinal_brace", "plan_brace", "raker", "sway_brace", "vertical_brace" };
        public static TextValue[] member_cable_type_ = { "stay", "suspension_cable", "suspension_chain" };
        public static TextValue[] member_class_ = { "primary_member", "secondary_member", "tertiary_member", "undefined_class" };
        public static TextValue[] member_column_type_ = { "battened_column", "box_column", "compound_strut", "portal_column" };
        public static TextValue[] member_cubic_type_ = { "floor", "stair", "ramp", "structural_core", "structural_shell", "undefined" };
        public static TextValue[] member_linear_type_ = { "beam", "column", "truss_element", "brace", "spring_element", "cable", "pipe", "wire", "tie", "undefined", "arch", "beam_column" };
        public static TextValue[] member_planar_type_ = { "wall", "slab", "stair_element", "ramp_element", "undefined", "plate" };
        public static TextValue[] member_plate_type_ = { "bearing_plate", "diaphragm", "flange", "web" };
        public static TextValue[] member_role_ = { "compression_member", "tension_member", "bending_member", "combined_member", "undefined_role" };
        public static TextValue[] member_slab_type_ = { "flat_slab", "ribbed_slab", "solid_slab", "trough_slab", "voided_slab", "waffle_slab" };
        public static TextValue[] member_wall_type_ = { "load_bearing_wall", "retaining_wall", "shear_wall" };
        public static TextValue[] plane_stress_or_strain_ = { "plane_stress", "plane_strain", "undefined" };
        public static TextValue[] preferred_surface_curve_representation_ = { "curve_3d", "pcurve_s1", "pcurve_s2" };
        public static TextValue[] projected_or_true_length_ = { "projected_length", "true_length" };
        public static TextValue[] shop_or_site_ = { "shop_process", "site_process", "undefined" };
        public static TextValue[] si_prefix_ = { "EXA", "PETA", "TERA", "GIGA", "MEGA", "KILO", "HECTO", "DECA", "DECI", "CENTI", "MILLI", "MICRO", "NANO", "PICO", "FEMTO", "ATTO" };
        public static TextValue[] si_unit_name_ = { "METRE", "GRAM", "SECOND", "AMPERE", "KELVIN", "MOLE", "CANDELA", "RADIAN", "STERADIAN", "HERTZ", "NEWTON", "PASCAL", "JOULE", "WATT", "COULOMB", "VOLT", "FARAD", "OHM", "SIEMENS", "WEBER", "TESLA", "HENRY", "DEGREE_CELSIUS", "LUMEN", "LUX", "BECQUEREL", "GRAY", "SIEVERT" };
        public static TextValue[] soldering_type_ = { "dip_soldering", "furnace_soldering", "induction_soldering", "infrared_soldering", "iron_soldering", "resistance_soldering", "torch_soldering", "wave_soldering" };
        public static TextValue[] spatial_variation_ = { "free_action", "fixed_action" };
        public static TextValue[] start_or_end_face_ = { "start_face", "end_face" };
        public static TextValue[] static_analysis_type_ = { "elastic_1st_order", "elastic_2nd_order", "rigid_plastic", "elasto_plastic", "elastic_perfectly_plastic", "undefined" };
        public static TextValue[] static_or_dynamic_ = { "static", "dynamic", "quasi_dynamic" };
        public static TextValue[] top_or_bottom_ = { "top_edge", "bottom_edge" };
        public static TextValue[] transition_code_ = { "discontinuous", "continuous", "cont_same_gradient", "cont_same_gradient_same_curvature" };
        public static TextValue[] trimming_preference_ = { "cartesian", "parameter", "unspecified" };
        public static TextValue[] weld_alignment_ = { "staggered", "chained" };
        public static TextValue[] weld_backing_type_ = { "none", "permanent", "copper_backing_bar", "ceramic_tape", "flare_backing_ring", "permanent_backing_ring", "removable_backing_ring", "user_defined" };
        public static TextValue[] weld_configuration_ = { "butt_joint", "tee_joint", "corner_joint", "lap_joint", "edge_joint", "cruciform_joint", "undefined" };
        public static TextValue[] weld_intermittent_rule_ = { "none", "fixed_rule", "member_depth", "percent_length" };
        public static TextValue[] weld_penetration_ = { "full_penetration", "deep_penetration", "partial_penetration", "undefined" };
        public static TextValue[] weld_shape_bevel_ = { "flare_single_V", "flare_double_V", "flare_single_bevel", "flare_double_bevel", "single_bevel", "double_bevel", "single_V", "double_V", "single_J", "double_J", "single_U", "double_U", "user_defined" };
        public static TextValue[] weld_shape_butt_ = { "square", "scarf", "user_defined" };
        public static TextValue[] weld_sidedness_ = { "one_side", "both_sides" };
        public static TextValue[] weld_surface_shape_ = { "flush", "convex", "concave", "undefined" };
        public static TextValue[] weld_taper_type_ = { "non_taper", "one_side_taper", "both_sides_taper" };
        public static TextValue[] weld_type_ = { "butt_weld", "fillet_weld", "spot_weld", "plug_weld", "seam_weld", "slot_weld", "stud_weld", "surfacing_weld", "undefined" };
        public static TextValue[] welding_type_ = { "fusion_weld", "friction_weld", "flash_weld", "laser_weld", "forge_weld", "undefined" };
        public static TextValue[] welding_type_arc_ = { "generic_arc_welding", "metal_arc_welding", "manual_metal_arc_welding", "gravity_arc_welding", "self_shielded_arc_welding", "submerged_arc_welding", "gas_shielded_metal_arc_welding", "metal_inert_gas_welding", "metal_active_gas_welding", "tubular_inert_gas_welding", "tubular_active_gas_welding", "tungsten_inert_gas_welding", "atomic_hydrogen_welding", "plasma_arc_welding", "carbon_arc_welding", "magnetically_impelled_arc_butt_welding" };
        public static TextValue[] welding_type_beam_ = { "electron_beam_welding", "laser_beam_welding", "gas_laser_welding" };
        public static TextValue[] welding_type_gas_ = { "generic_gas_welding", "oxyacetylene_welding", "oxyhydrogen_welding", "oxypropane_welding" };
        public static TextValue[] welding_type_other_ = { "aluminothermic_welding", "electroslag_welding", "electrogas_welding", "induction_welding", "induction_butt_welding", "induction_seam_welding", "infrared_welding", "percussion_welding" };
        public static TextValue[] welding_type_pressure_ = { "generic_pressure_welding", "ultrasonic_welding", "friction_welding", "forge_welding", "explosive_welding", "diffusion_welding", "oxyfuel_gas_pressure_welding", "cold_pressure_welding", "hot_pressure_welding", "roll_welding", "high_frequency_pressure_welding" };
        public static TextValue[] welding_type_resistance_ = { "generic_resistance_welding", "spot_welding", "seam_welding", "projection_welding", "flash_welding", "resistance_butt_welding", "high_frequency_resistance_welding" };
        public static TextValue[] welding_type_stud_ = { "generic_stud_welding", "resistance_stud_welding", "drawn_arc_stud_welding", "friction_stud_welding" };
        }


    //
    // Defined types
    // 
    public class list_of_reversible_topology_item : List<reversible_topology_item> { }
    class list_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, list_of_reversible_topology_item> { }
    public class set_of_reversible_topology_item : List<reversible_topology_item> { }
    class set_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, set_of_reversible_topology_item> { }

    public class assembly_component_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public assembly_component_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public assembly_component_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public assembly_component_select() : base(null) { }

        public bool is_located_assembly { get { return IsADBEntity("located_assembly"); } }
        public located_assembly located_assembly
            {
            set { putEntityInstance("LOCATED_ASSEMBLY", value); }
            get { return new located_assembly(getEntityInstance("LOCATED_ASSEMBLY")); } 
            }
        public bool is_located_part { get { return IsADBEntity("located_part"); } }
        public located_part located_part
            {
            set { putEntityInstance("LOCATED_PART", value); }
            get { return new located_part(getEntityInstance("LOCATED_PART")); } 
            }
        public bool is_located_feature { get { return IsADBEntity("located_feature"); } }
        public located_feature located_feature
            {
            set { putEntityInstance("LOCATED_FEATURE", value); }
            get { return new located_feature(getEntityInstance("LOCATED_FEATURE")); } 
            }
        public bool is_located_joint_system { get { return IsADBEntity("located_joint_system"); } }
        public located_joint_system located_joint_system
            {
            set { putEntityInstance("LOCATED_JOINT_SYSTEM", value); }
            get { return new located_joint_system(getEntityInstance("LOCATED_JOINT_SYSTEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class assembly_component_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public assembly_component_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public assembly_component_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public assembly_component_select_get() : base(null) { }

        public bool is_located_assembly { get { return IsADBEntity("located_assembly"); } }
        public located_assembly located_assembly
            {
            get { return new located_assembly(getEntityInstance("LOCATED_ASSEMBLY")); }
            }
        public bool is_located_part { get { return IsADBEntity("located_part"); } }
        public located_part located_part
            {
            get { return new located_part(getEntityInstance("LOCATED_PART")); }
            }
        public bool is_located_feature { get { return IsADBEntity("located_feature"); } }
        public located_feature located_feature
            {
            get { return new located_feature(getEntityInstance("LOCATED_FEATURE")); }
            }
        public bool is_located_joint_system { get { return IsADBEntity("located_joint_system"); } }
        public located_joint_system located_joint_system
            {
            get { return new located_joint_system(getEntityInstance("LOCATED_JOINT_SYSTEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class axis2_placement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement() : base(null) { }

        public bool is_axis2_placement_2d { get { return IsADBEntity("axis2_placement_2d"); } }
        public axis2_placement_2d axis2_placement_2d
            {
            set { putEntityInstance("AXIS2_PLACEMENT_2D", value); }
            get { return new axis2_placement_2d(getEntityInstance("AXIS2_PLACEMENT_2D")); } 
            }
        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            set { putEntityInstance("AXIS2_PLACEMENT_3D", value); }
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class axis2_placement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement_get() : base(null) { }

        public bool is_axis2_placement_2d { get { return IsADBEntity("axis2_placement_2d"); } }
        public axis2_placement_2d axis2_placement_2d
            {
            get { return new axis2_placement_2d(getEntityInstance("AXIS2_PLACEMENT_2D")); }
            }
        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_primitive : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive() : base(null) { }

        public bool is_sphere { get { return IsADBEntity("sphere"); } }
        public sphere sphere
            {
            set { putEntityInstance("SPHERE", value); }
            get { return new sphere(getEntityInstance("SPHERE")); } 
            }
        public bool is_ellipsoid { get { return IsADBEntity("ellipsoid"); } }
        public ellipsoid ellipsoid
            {
            set { putEntityInstance("ELLIPSOID", value); }
            get { return new ellipsoid(getEntityInstance("ELLIPSOID")); } 
            }
        public bool is_block { get { return IsADBEntity("block"); } }
        public block block
            {
            set { putEntityInstance("BLOCK", value); }
            get { return new block(getEntityInstance("BLOCK")); } 
            }
        public bool is_right_angular_wedge { get { return IsADBEntity("right_angular_wedge"); } }
        public right_angular_wedge right_angular_wedge
            {
            set { putEntityInstance("RIGHT_ANGULAR_WEDGE", value); }
            get { return new right_angular_wedge(getEntityInstance("RIGHT_ANGULAR_WEDGE")); } 
            }
        public bool is_faceted_primitive { get { return IsADBEntity("faceted_primitive"); } }
        public faceted_primitive faceted_primitive
            {
            set { putEntityInstance("FACETED_PRIMITIVE", value); }
            get { return new faceted_primitive(getEntityInstance("FACETED_PRIMITIVE")); } 
            }
        public bool is_rectangular_pyramid { get { return IsADBEntity("rectangular_pyramid"); } }
        public rectangular_pyramid rectangular_pyramid
            {
            set { putEntityInstance("RECTANGULAR_PYRAMID", value); }
            get { return new rectangular_pyramid(getEntityInstance("RECTANGULAR_PYRAMID")); } 
            }
        public bool is_torus { get { return IsADBEntity("torus"); } }
        public torus torus
            {
            set { putEntityInstance("TORUS", value); }
            get { return new torus(getEntityInstance("TORUS")); } 
            }
        public bool is_right_circular_cone { get { return IsADBEntity("right_circular_cone"); } }
        public right_circular_cone right_circular_cone
            {
            set { putEntityInstance("RIGHT_CIRCULAR_CONE", value); }
            get { return new right_circular_cone(getEntityInstance("RIGHT_CIRCULAR_CONE")); } 
            }
        public bool is_eccentric_cone { get { return IsADBEntity("eccentric_cone"); } }
        public eccentric_cone eccentric_cone
            {
            set { putEntityInstance("ECCENTRIC_CONE", value); }
            get { return new eccentric_cone(getEntityInstance("ECCENTRIC_CONE")); } 
            }
        public bool is_right_circular_cylinder { get { return IsADBEntity("right_circular_cylinder"); } }
        public right_circular_cylinder right_circular_cylinder
            {
            set { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", value); }
            get { return new right_circular_cylinder(getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); } 
            }
        public bool is_cyclide_segment_solid { get { return IsADBEntity("cyclide_segment_solid"); } }
        public cyclide_segment_solid cyclide_segment_solid
            {
            set { putEntityInstance("CYCLIDE_SEGMENT_SOLID", value); }
            get { return new cyclide_segment_solid(getEntityInstance("CYCLIDE_SEGMENT_SOLID")); } 
            }
        public bool is_primitive_2d { get { return IsADBEntity("primitive_2d"); } }
        public primitive_2d primitive_2d
            {
            set { putEntityInstance("PRIMITIVE_2D", value); }
            get { return new primitive_2d(getEntityInstance("PRIMITIVE_2D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_primitive_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive_get() : base(null) { }

        public bool is_sphere { get { return IsADBEntity("sphere"); } }
        public sphere sphere
            {
            get { return new sphere(getEntityInstance("SPHERE")); }
            }
        public bool is_ellipsoid { get { return IsADBEntity("ellipsoid"); } }
        public ellipsoid ellipsoid
            {
            get { return new ellipsoid(getEntityInstance("ELLIPSOID")); }
            }
        public bool is_block { get { return IsADBEntity("block"); } }
        public block block
            {
            get { return new block(getEntityInstance("BLOCK")); }
            }
        public bool is_right_angular_wedge { get { return IsADBEntity("right_angular_wedge"); } }
        public right_angular_wedge right_angular_wedge
            {
            get { return new right_angular_wedge(getEntityInstance("RIGHT_ANGULAR_WEDGE")); }
            }
        public bool is_faceted_primitive { get { return IsADBEntity("faceted_primitive"); } }
        public faceted_primitive faceted_primitive
            {
            get { return new faceted_primitive(getEntityInstance("FACETED_PRIMITIVE")); }
            }
        public bool is_rectangular_pyramid { get { return IsADBEntity("rectangular_pyramid"); } }
        public rectangular_pyramid rectangular_pyramid
            {
            get { return new rectangular_pyramid(getEntityInstance("RECTANGULAR_PYRAMID")); }
            }
        public bool is_torus { get { return IsADBEntity("torus"); } }
        public torus torus
            {
            get { return new torus(getEntityInstance("TORUS")); }
            }
        public bool is_right_circular_cone { get { return IsADBEntity("right_circular_cone"); } }
        public right_circular_cone right_circular_cone
            {
            get { return new right_circular_cone(getEntityInstance("RIGHT_CIRCULAR_CONE")); }
            }
        public bool is_eccentric_cone { get { return IsADBEntity("eccentric_cone"); } }
        public eccentric_cone eccentric_cone
            {
            get { return new eccentric_cone(getEntityInstance("ECCENTRIC_CONE")); }
            }
        public bool is_right_circular_cylinder { get { return IsADBEntity("right_circular_cylinder"); } }
        public right_circular_cylinder right_circular_cylinder
            {
            get { return new right_circular_cylinder(getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); }
            }
        public bool is_cyclide_segment_solid { get { return IsADBEntity("cyclide_segment_solid"); } }
        public cyclide_segment_solid cyclide_segment_solid
            {
            get { return new cyclide_segment_solid(getEntityInstance("CYCLIDE_SEGMENT_SOLID")); }
            }
        public bool is_primitive_2d { get { return IsADBEntity("primitive_2d"); } }
        public primitive_2d primitive_2d
            {
            get { return new primitive_2d(getEntityInstance("PRIMITIVE_2D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class boolean_operand : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand() : base(null) { }

        public bool is_solid_model { get { return IsADBEntity("solid_model"); } }
        public solid_model solid_model
            {
            set { putEntityInstance("SOLID_MODEL", value); }
            get { return new solid_model(getEntityInstance("SOLID_MODEL")); } 
            }
        public bool is_half_space_solid { get { return IsADBEntity("half_space_solid"); } }
        public half_space_solid half_space_solid
            {
            set { putEntityInstance("HALF_SPACE_SOLID", value); }
            get { return new half_space_solid(getEntityInstance("HALF_SPACE_SOLID")); } 
            }
        public csg_primitive csg_primitive { get { return new csg_primitive(this); } }
        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            set { putEntityInstance("BOOLEAN_RESULT", value); }
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); } 
            }
        public bool is_half_space_2d { get { return IsADBEntity("half_space_2d"); } }
        public half_space_2d half_space_2d
            {
            set { putEntityInstance("HALF_SPACE_2D", value); }
            get { return new half_space_2d(getEntityInstance("HALF_SPACE_2D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class boolean_operand_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand_get() : base(null) { }

        public bool is_solid_model { get { return IsADBEntity("solid_model"); } }
        public solid_model solid_model
            {
            get { return new solid_model(getEntityInstance("SOLID_MODEL")); }
            }
        public bool is_half_space_solid { get { return IsADBEntity("half_space_solid"); } }
        public half_space_solid half_space_solid
            {
            get { return new half_space_solid(getEntityInstance("HALF_SPACE_SOLID")); }
            }
        public csg_primitive_get csg_primitive { get { return new csg_primitive_get(this); } }
        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); }
            }
        public bool is_half_space_2d { get { return IsADBEntity("half_space_2d"); } }
        public half_space_2d half_space_2d
            {
            get { return new half_space_2d(getEntityInstance("HALF_SPACE_2D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select() : base(null) { }

        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            set { putEntityInstance("BOOLEAN_RESULT", value); }
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); } 
            }
        public csg_primitive csg_primitive { get { return new csg_primitive(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select_get() : base(null) { }

        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); }
            }
        public csg_primitive_get csg_primitive { get { return new csg_primitive_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_on_surface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            set { putEntityInstance("PCURVE", value); }
            get { return new pcurve(getEntityInstance("PCURVE")); } 
            }
        public bool is_surface_curve { get { return IsADBEntity("surface_curve"); } }
        public surface_curve surface_curve
            {
            set { putEntityInstance("SURFACE_CURVE", value); }
            get { return new surface_curve(getEntityInstance("SURFACE_CURVE")); } 
            }
        public bool is_composite_curve_on_surface { get { return IsADBEntity("composite_curve_on_surface"); } }
        public composite_curve_on_surface composite_curve_on_surface
            {
            set { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", value); }
            get { return new composite_curve_on_surface(getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_on_surface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface_get() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            get { return new pcurve(getEntityInstance("PCURVE")); }
            }
        public bool is_surface_curve { get { return IsADBEntity("surface_curve"); } }
        public surface_curve surface_curve
            {
            get { return new surface_curve(getEntityInstance("SURFACE_CURVE")); }
            }
        public bool is_composite_curve_on_surface { get { return IsADBEntity("composite_curve_on_surface"); } }
        public composite_curve_on_surface composite_curve_on_surface
            {
            get { return new composite_curve_on_surface(getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class derived_measure : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_measure(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_measure(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_measure() : base(null) { }

        public bool is_force_per_length_measure { get { return IsADBType("FORCE_PER_LENGTH_MEASURE"); } }
        public double? force_per_length_measure
            {
            set { put_double("FORCE_PER_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("FORCE_PER_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_inertia_measure { get { return IsADBType("INERTIA_MEASURE"); } }
        public double? inertia_measure
            {
            set { put_double("INERTIA_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("INERTIA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_acceleration_measure { get { return IsADBType("LINEAR_ACCELERATION_MEASURE"); } }
        public double? linear_acceleration_measure
            {
            set { put_double("LINEAR_ACCELERATION_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LINEAR_ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_stiffness_measure { get { return IsADBType("LINEAR_STIFFNESS_MEASURE"); } }
        public double? linear_stiffness_measure
            {
            set { put_double("LINEAR_STIFFNESS_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LINEAR_STIFFNESS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_velocity_measure { get { return IsADBType("LINEAR_VELOCITY_MEASURE"); } }
        public double? linear_velocity_measure
            {
            set { put_double("LINEAR_VELOCITY_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LINEAR_VELOCITY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_per_length_measure { get { return IsADBType("MASS_PER_LENGTH_MEASURE"); } }
        public double? mass_per_length_measure
            {
            set { put_double("MASS_PER_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("MASS_PER_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_modulus_measure { get { return IsADBType("MODULUS_MEASURE"); } }
        public double? modulus_measure
            {
            set { put_double("MODULUS_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("MODULUS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_moment_measure { get { return IsADBType("MOMENT_MEASURE"); } }
        public double? moment_measure
            {
            set { put_double("MOMENT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("MOMENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_acceleration_measure { get { return IsADBType("ROTATIONAL_ACCELERATION_MEASURE"); } }
        public double? rotational_acceleration_measure
            {
            set { put_double("ROTATIONAL_ACCELERATION_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("ROTATIONAL_ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_stiffness_measure { get { return IsADBType("ROTATIONAL_STIFFNESS_MEASURE"); } }
        public double? rotational_stiffness_measure
            {
            set { put_double("ROTATIONAL_STIFFNESS_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("ROTATIONAL_STIFFNESS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_velocity_measure { get { return IsADBType("ROTATIONAL_VELOCITY_MEASURE"); } }
        public double? rotational_velocity_measure
            {
            set { put_double("ROTATIONAL_VELOCITY_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("ROTATIONAL_VELOCITY_MEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class derived_measure_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_measure_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_measure_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_measure_get() : base(null) { }

        public bool is_force_per_length_measure { get { return IsADBType("FORCE_PER_LENGTH_MEASURE"); } }
        public double? force_per_length_measure
            {
            get { return get_double("FORCE_PER_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_inertia_measure { get { return IsADBType("INERTIA_MEASURE"); } }
        public double? inertia_measure
            {
            get { return get_double("INERTIA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_acceleration_measure { get { return IsADBType("LINEAR_ACCELERATION_MEASURE"); } }
        public double? linear_acceleration_measure
            {
            get { return get_double("LINEAR_ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_stiffness_measure { get { return IsADBType("LINEAR_STIFFNESS_MEASURE"); } }
        public double? linear_stiffness_measure
            {
            get { return get_double("LINEAR_STIFFNESS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_linear_velocity_measure { get { return IsADBType("LINEAR_VELOCITY_MEASURE"); } }
        public double? linear_velocity_measure
            {
            get { return get_double("LINEAR_VELOCITY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_per_length_measure { get { return IsADBType("MASS_PER_LENGTH_MEASURE"); } }
        public double? mass_per_length_measure
            {
            get { return get_double("MASS_PER_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_modulus_measure { get { return IsADBType("MODULUS_MEASURE"); } }
        public double? modulus_measure
            {
            get { return get_double("MODULUS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_moment_measure { get { return IsADBType("MOMENT_MEASURE"); } }
        public double? moment_measure
            {
            get { return get_double("MOMENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_acceleration_measure { get { return IsADBType("ROTATIONAL_ACCELERATION_MEASURE"); } }
        public double? rotational_acceleration_measure
            {
            get { return get_double("ROTATIONAL_ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_stiffness_measure { get { return IsADBType("ROTATIONAL_STIFFNESS_MEASURE"); } }
        public double? rotational_stiffness_measure
            {
            get { return get_double("ROTATIONAL_STIFFNESS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_rotational_velocity_measure { get { return IsADBType("ROTATIONAL_VELOCITY_MEASURE"); } }
        public double? rotational_velocity_measure
            {
            get { return get_double("ROTATIONAL_VELOCITY_MEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class description_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select() : base(null) { }

        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", value); }
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class description_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select_get() : base(null) { }

        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class founded_item_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select() : base(null) { }

        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            set { putEntityInstance("FOUNDED_ITEM", value); }
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); } 
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            set { putEntityInstance("REPRESENTATION_ITEM", value); }
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class founded_item_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select_get() : base(null) { }

        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); }
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class geometric_set_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            set { putEntityInstance("POINT", value); }
            get { return new point(getEntityInstance("POINT")); } 
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            set { putEntityInstance("CURVE", value); }
            get { return new curve(getEntityInstance("CURVE")); } 
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            set { putEntityInstance("SURFACE", value); }
            get { return new surface(getEntityInstance("SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class geometric_set_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select_get() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            get { return new point(getEntityInstance("POINT")); }
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            get { return new curve(getEntityInstance("CURVE")); }
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            get { return new surface(getEntityInstance("SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class id_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            set { putEntityInstance("ADDRESS", value); }
            get { return new address(getEntityInstance("ADDRESS")); } 
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class id_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            get { return new address(getEntityInstance("ADDRESS")); }
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class measure_value : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            set { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_measure { get { return IsADBType("MASS_MEASURE"); } }
        public double? mass_measure
            {
            set { put_double("MASS_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_time_measure { get { return IsADBType("TIME_MEASURE"); } }
        public double? time_measure
            {
            set { put_double("TIME_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_thermodynamic_temperature_measure { get { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); } }
        public double? thermodynamic_temperature_measure
            {
            set { put_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            set { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_solid_angle_measure { get { return IsADBType("SOLID_ANGLE_MEASURE"); } }
        public double? solid_angle_measure
            {
            set { put_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_area_measure { get { return IsADBType("AREA_MEASURE"); } }
        public double? area_measure
            {
            set { put_double("AREA_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_volume_measure { get { return IsADBType("VOLUME_MEASURE"); } }
        public double? volume_measure
            {
            set { put_double("VOLUME_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            set { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            set { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_numeric_measure { get { return IsADBType("NUMERIC_MEASURE"); } }
        public double? numeric_measure
            {
            set { put_double("NUMERIC_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_force_measure { get { return IsADBType("FORCE_MEASURE"); } }
        public double? force_measure
            {
            set { put_double("FORCE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("FORCE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_frequency_measure { get { return IsADBType("FREQUENCY_MEASURE"); } }
        public double? frequency_measure
            {
            set { put_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_pressure_measure { get { return IsADBType("PRESSURE_MEASURE"); } }
        public double? pressure_measure
            {
            set { put_double("PRESSURE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("PRESSURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_context_dependent_measure { get { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); } }
        public double? context_dependent_measure
            {
            set { put_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure { 
            set { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            set { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_plane_angle_measure { get { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); } }
        public double? positive_plane_angle_measure
            {
            set { put_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_ratio_measure { get { return IsADBType("POSITIVE_RATIO_MEASURE"); } }
        public double? positive_ratio_measure
            {
            set { put_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_count_measure { get { return IsADBType("COUNT_MEASURE"); } }
        public double? count_measure
            {
            set { put_double("COUNT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
            }
        public derived_measure derived_measure { get { return new derived_measure(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class measure_value_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value_get() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_measure { get { return IsADBType("MASS_MEASURE"); } }
        public double? mass_measure
            {
            get { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_time_measure { get { return IsADBType("TIME_MEASURE"); } }
        public double? time_measure
            {
            get { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_thermodynamic_temperature_measure { get { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); } }
        public double? thermodynamic_temperature_measure
            {
            get { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_solid_angle_measure { get { return IsADBType("SOLID_ANGLE_MEASURE"); } }
        public double? solid_angle_measure
            {
            get { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_area_measure { get { return IsADBType("AREA_MEASURE"); } }
        public double? area_measure
            {
            get { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_volume_measure { get { return IsADBType("VOLUME_MEASURE"); } }
        public double? volume_measure
            {
            get { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_numeric_measure { get { return IsADBType("NUMERIC_MEASURE"); } }
        public double? numeric_measure
            {
            get { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_force_measure { get { return IsADBType("FORCE_MEASURE"); } }
        public double? force_measure
            {
            get { return get_double("FORCE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_frequency_measure { get { return IsADBType("FREQUENCY_MEASURE"); } }
        public double? frequency_measure
            {
            get { return get_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_pressure_measure { get { return IsADBType("PRESSURE_MEASURE"); } }
        public double? pressure_measure
            {
            get { return get_double("PRESSURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_context_dependent_measure { get { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); } }
        public double? context_dependent_measure
            {
            get { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure
            {
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_plane_angle_measure { get { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); } }
        public double? positive_plane_angle_measure
            {
            get { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_ratio_measure { get { return IsADBType("POSITIVE_RATIO_MEASURE"); } }
        public double? positive_ratio_measure
            {
            get { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_count_measure { get { return IsADBType("COUNT_MEASURE"); } }
        public double? count_measure
            {
            get { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
            }
        public derived_measure_get derived_measure { get { return new derived_measure_get(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class measure_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_select() : base(null) { }

        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            set { putEntityInstance("MEASURE_WITH_UNIT", value); }
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); } 
            }
        public measure_value measure_value { get { return new measure_value(this); } }
        public bool is_boolean_value { get { return IsADBType("BOOLEAN_VALUE"); } }
        public bool? boolean_value
            {
            set { put_bool("BOOLEAN_VALUE", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("BOOLEAN_VALUE", ifcengine.sdaiBOOLEAN); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class measure_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_select_get() : base(null) { }

        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); }
            }
        public measure_value_get measure_value { get { return new measure_value_get(this); } }
        public bool is_boolean_value { get { return IsADBType("BOOLEAN_VALUE"); } }
        public bool? boolean_value
            {
            get { return get_bool("BOOLEAN_VALUE", ifcengine.sdaiBOOLEAN); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class name_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select() : base(null) { }

        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            set { putEntityInstance("ADDRESS", value); }
            get { return new address(getEntityInstance("ADDRESS")); } 
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            set { putEntityInstance("DERIVED_UNIT", value); }
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class name_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select_get() : base(null) { }

        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            get { return new address(getEntityInstance("ADDRESS")); }
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class orientation_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public orientation_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public orientation_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public orientation_select() : base(null) { }

        public bool is_plane_angle_measure_with_unit { get { return IsADBEntity("plane_angle_measure_with_unit"); } }
        public plane_angle_measure_with_unit plane_angle_measure_with_unit
            {
            set { putEntityInstance("PLANE_ANGLE_MEASURE_WITH_UNIT", value); }
            get { return new plane_angle_measure_with_unit(getEntityInstance("PLANE_ANGLE_MEASURE_WITH_UNIT")); } 
            }
        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            set { putEntityInstance("DIRECTION", value); }
            get { return new direction(getEntityInstance("DIRECTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class orientation_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public orientation_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public orientation_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public orientation_select_get() : base(null) { }

        public bool is_plane_angle_measure_with_unit { get { return IsADBEntity("plane_angle_measure_with_unit"); } }
        public plane_angle_measure_with_unit plane_angle_measure_with_unit
            {
            get { return new plane_angle_measure_with_unit(getEntityInstance("PLANE_ANGLE_MEASURE_WITH_UNIT")); }
            }
        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            get { return new direction(getEntityInstance("DIRECTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class part_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public part_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public part_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public part_select() : base(null) { }

        public bool is_part { get { return IsADBEntity("part"); } }
        public part part
            {
            set { putEntityInstance("PART", value); }
            get { return new part(getEntityInstance("PART")); } 
            }
        public bool is_design_part { get { return IsADBEntity("design_part"); } }
        public design_part design_part
            {
            set { putEntityInstance("DESIGN_PART", value); }
            get { return new design_part(getEntityInstance("DESIGN_PART")); } 
            }
        public bool is_located_part { get { return IsADBEntity("located_part"); } }
        public located_part located_part
            {
            set { putEntityInstance("LOCATED_PART", value); }
            get { return new located_part(getEntityInstance("LOCATED_PART")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class part_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public part_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public part_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public part_select_get() : base(null) { }

        public bool is_part { get { return IsADBEntity("part"); } }
        public part part
            {
            get { return new part(getEntityInstance("PART")); }
            }
        public bool is_design_part { get { return IsADBEntity("design_part"); } }
        public design_part design_part
            {
            get { return new design_part(getEntityInstance("DESIGN_PART")); }
            }
        public bool is_located_part { get { return IsADBEntity("located_part"); } }
        public located_part located_part
            {
            get { return new located_part(getEntityInstance("LOCATED_PART")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class pcurve_or_surface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            set { putEntityInstance("PCURVE", value); }
            get { return new pcurve(getEntityInstance("PCURVE")); } 
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            set { putEntityInstance("SURFACE", value); }
            get { return new surface(getEntityInstance("SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class pcurve_or_surface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface_get() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            get { return new pcurve(getEntityInstance("PCURVE")); }
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            get { return new surface(getEntityInstance("SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class product_item_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_item_select() : base(null) { }

        public bool is_structural_frame_product { get { return IsADBEntity("structural_frame_product"); } }
        public structural_frame_product structural_frame_product
            {
            set { putEntityInstance("STRUCTURAL_FRAME_PRODUCT", value); }
            get { return new structural_frame_product(getEntityInstance("STRUCTURAL_FRAME_PRODUCT")); } 
            }
        public assembly_component_select assembly_component_select { get { return new assembly_component_select(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class product_item_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_item_select_get() : base(null) { }

        public bool is_structural_frame_product { get { return IsADBEntity("structural_frame_product"); } }
        public structural_frame_product structural_frame_product
            {
            get { return new structural_frame_product(getEntityInstance("STRUCTURAL_FRAME_PRODUCT")); }
            }
        public assembly_component_select_get assembly_component_select { get { return new assembly_component_select_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class project_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public project_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public project_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public project_select() : base(null) { }

        public bool is_project { get { return IsADBEntity("project"); } }
        public project project
            {
            set { putEntityInstance("PROJECT", value); }
            get { return new project(getEntityInstance("PROJECT")); } 
            }
        public bool is_zone_of_project { get { return IsADBEntity("zone_of_project"); } }
        public zone_of_project zone_of_project
            {
            set { putEntityInstance("ZONE_OF_PROJECT", value); }
            get { return new zone_of_project(getEntityInstance("ZONE_OF_PROJECT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class project_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public project_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public project_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public project_select_get() : base(null) { }

        public bool is_project { get { return IsADBEntity("project"); } }
        public project project
            {
            get { return new project(getEntityInstance("PROJECT")); }
            }
        public bool is_zone_of_project { get { return IsADBEntity("zone_of_project"); } }
        public zone_of_project zone_of_project
            {
            get { return new zone_of_project(getEntityInstance("ZONE_OF_PROJECT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item() : base(null) { }

        public bool is_edge { get { return IsADBEntity("edge"); } }
        public edge edge
            {
            set { putEntityInstance("EDGE", value); }
            get { return new edge(getEntityInstance("EDGE")); } 
            }
        public bool is_path { get { return IsADBEntity("path"); } }
        public path path
            {
            set { putEntityInstance("PATH", value); }
            get { return new path(getEntityInstance("PATH")); } 
            }
        public bool is_face { get { return IsADBEntity("face"); } }
        public face face
            {
            set { putEntityInstance("FACE", value); }
            get { return new face(getEntityInstance("FACE")); } 
            }
        public bool is_face_bound { get { return IsADBEntity("face_bound"); } }
        public face_bound face_bound
            {
            set { putEntityInstance("FACE_BOUND", value); }
            get { return new face_bound(getEntityInstance("FACE_BOUND")); } 
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            set { putEntityInstance("CLOSED_SHELL", value); }
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); } 
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            set { putEntityInstance("OPEN_SHELL", value); }
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item_get() : base(null) { }

        public bool is_edge { get { return IsADBEntity("edge"); } }
        public edge edge
            {
            get { return new edge(getEntityInstance("EDGE")); }
            }
        public bool is_path { get { return IsADBEntity("path"); } }
        public path path
            {
            get { return new path(getEntityInstance("PATH")); }
            }
        public bool is_face { get { return IsADBEntity("face"); } }
        public face face
            {
            get { return new face(getEntityInstance("FACE")); }
            }
        public bool is_face_bound { get { return IsADBEntity("face_bound"); } }
        public face_bound face_bound
            {
            get { return new face_bound(getEntityInstance("FACE_BOUND")); }
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); }
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology() : base(null) { }

        public reversible_topology_item reversible_topology_item { get { return new reversible_topology_item(this); } }
        public bool is_list_of_reversible_topology_item { get { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public list_of_reversible_topology_item list_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_list_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public void put_list_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public bool is_set_of_reversible_topology_item { get { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public set_of_reversible_topology_item set_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_set_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public void put_set_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_get() : base(null) { }

        public reversible_topology_item_get reversible_topology_item { get { return new reversible_topology_item_get(this); } }
        public bool is_list_of_reversible_topology_item { get { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public list_of_reversible_topology_item list_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_set_of_reversible_topology_item { get { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public set_of_reversible_topology_item set_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class role_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select() : base(null) { }

        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            set { putEntityInstance("GROUP_ASSIGNMENT", value); }
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class role_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select_get() : base(null) { }

        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_analysis_model_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_analysis_model_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_analysis_model_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_analysis_model_item() : base(null) { }

        public bool is_analysis_method { get { return IsADBEntity("analysis_method"); } }
        public analysis_method analysis_method
            {
            set { putEntityInstance("ANALYSIS_METHOD", value); }
            get { return new analysis_method(getEntityInstance("ANALYSIS_METHOD")); } 
            }
        public bool is_boundary_condition { get { return IsADBEntity("boundary_condition"); } }
        public boundary_condition boundary_condition
            {
            set { putEntityInstance("BOUNDARY_CONDITION", value); }
            get { return new boundary_condition(getEntityInstance("BOUNDARY_CONDITION")); } 
            }
        public bool is_element_eccentricity { get { return IsADBEntity("element_eccentricity"); } }
        public element_eccentricity element_eccentricity
            {
            set { putEntityInstance("ELEMENT_ECCENTRICITY", value); }
            get { return new element_eccentricity(getEntityInstance("ELEMENT_ECCENTRICITY")); } 
            }
        public bool is_element_node_connectivity { get { return IsADBEntity("element_node_connectivity"); } }
        public element_node_connectivity element_node_connectivity
            {
            set { putEntityInstance("ELEMENT_NODE_CONNECTIVITY", value); }
            get { return new element_node_connectivity(getEntityInstance("ELEMENT_NODE_CONNECTIVITY")); } 
            }
        public bool is_analysis_model { get { return IsADBEntity("analysis_model"); } }
        public analysis_model analysis_model
            {
            set { putEntityInstance("ANALYSIS_MODEL", value); }
            get { return new analysis_model(getEntityInstance("ANALYSIS_MODEL")); } 
            }
        public bool is_analysis_model_mapping { get { return IsADBEntity("analysis_model_mapping"); } }
        public analysis_model_mapping analysis_model_mapping
            {
            set { putEntityInstance("ANALYSIS_MODEL_MAPPING", value); }
            get { return new analysis_model_mapping(getEntityInstance("ANALYSIS_MODEL_MAPPING")); } 
            }
        public bool is_analysis_model_relationship { get { return IsADBEntity("analysis_model_relationship"); } }
        public analysis_model_relationship analysis_model_relationship
            {
            set { putEntityInstance("ANALYSIS_MODEL_RELATIONSHIP", value); }
            get { return new analysis_model_relationship(getEntityInstance("ANALYSIS_MODEL_RELATIONSHIP")); } 
            }
        public bool is_element { get { return IsADBEntity("element"); } }
        public element element
            {
            set { putEntityInstance("ELEMENT", value); }
            get { return new element(getEntityInstance("ELEMENT")); } 
            }
        public bool is_element_mapping { get { return IsADBEntity("element_mapping"); } }
        public element_mapping element_mapping
            {
            set { putEntityInstance("ELEMENT_MAPPING", value); }
            get { return new element_mapping(getEntityInstance("ELEMENT_MAPPING")); } 
            }
        public bool is_node { get { return IsADBEntity("node"); } }
        public node node
            {
            set { putEntityInstance("NODE", value); }
            get { return new node(getEntityInstance("NODE")); } 
            }
        public bool is_node_dependency { get { return IsADBEntity("node_dependency"); } }
        public node_dependency node_dependency
            {
            set { putEntityInstance("NODE_DEPENDENCY", value); }
            get { return new node_dependency(getEntityInstance("NODE_DEPENDENCY")); } 
            }
        public bool is_release { get { return IsADBEntity("release"); } }
        public release release
            {
            set { putEntityInstance("RELEASE", value); }
            get { return new release(getEntityInstance("RELEASE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_analysis_model_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_analysis_model_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_analysis_model_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_analysis_model_item_get() : base(null) { }

        public bool is_analysis_method { get { return IsADBEntity("analysis_method"); } }
        public analysis_method analysis_method
            {
            get { return new analysis_method(getEntityInstance("ANALYSIS_METHOD")); }
            }
        public bool is_boundary_condition { get { return IsADBEntity("boundary_condition"); } }
        public boundary_condition boundary_condition
            {
            get { return new boundary_condition(getEntityInstance("BOUNDARY_CONDITION")); }
            }
        public bool is_element_eccentricity { get { return IsADBEntity("element_eccentricity"); } }
        public element_eccentricity element_eccentricity
            {
            get { return new element_eccentricity(getEntityInstance("ELEMENT_ECCENTRICITY")); }
            }
        public bool is_element_node_connectivity { get { return IsADBEntity("element_node_connectivity"); } }
        public element_node_connectivity element_node_connectivity
            {
            get { return new element_node_connectivity(getEntityInstance("ELEMENT_NODE_CONNECTIVITY")); }
            }
        public bool is_analysis_model { get { return IsADBEntity("analysis_model"); } }
        public analysis_model analysis_model
            {
            get { return new analysis_model(getEntityInstance("ANALYSIS_MODEL")); }
            }
        public bool is_analysis_model_mapping { get { return IsADBEntity("analysis_model_mapping"); } }
        public analysis_model_mapping analysis_model_mapping
            {
            get { return new analysis_model_mapping(getEntityInstance("ANALYSIS_MODEL_MAPPING")); }
            }
        public bool is_analysis_model_relationship { get { return IsADBEntity("analysis_model_relationship"); } }
        public analysis_model_relationship analysis_model_relationship
            {
            get { return new analysis_model_relationship(getEntityInstance("ANALYSIS_MODEL_RELATIONSHIP")); }
            }
        public bool is_element { get { return IsADBEntity("element"); } }
        public element element
            {
            get { return new element(getEntityInstance("ELEMENT")); }
            }
        public bool is_element_mapping { get { return IsADBEntity("element_mapping"); } }
        public element_mapping element_mapping
            {
            get { return new element_mapping(getEntityInstance("ELEMENT_MAPPING")); }
            }
        public bool is_node { get { return IsADBEntity("node"); } }
        public node node
            {
            get { return new node(getEntityInstance("NODE")); }
            }
        public bool is_node_dependency { get { return IsADBEntity("node_dependency"); } }
        public node_dependency node_dependency
            {
            get { return new node_dependency(getEntityInstance("NODE_DEPENDENCY")); }
            }
        public bool is_release { get { return IsADBEntity("release"); } }
        public release release
            {
            get { return new release(getEntityInstance("RELEASE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_loading_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_loading_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_loading_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_loading_item() : base(null) { }

        public bool is_applied_load { get { return IsADBEntity("applied_load"); } }
        public applied_load applied_load
            {
            set { putEntityInstance("APPLIED_LOAD", value); }
            get { return new applied_load(getEntityInstance("APPLIED_LOAD")); } 
            }
        public bool is_load_case { get { return IsADBEntity("load_case"); } }
        public load_case load_case
            {
            set { putEntityInstance("LOAD_CASE", value); }
            get { return new load_case(getEntityInstance("LOAD_CASE")); } 
            }
        public bool is_load { get { return IsADBEntity("load"); } }
        public load load
            {
            set { putEntityInstance("LOAD", value); }
            get { return new load(getEntityInstance("LOAD")); } 
            }
        public bool is_loaded_product { get { return IsADBEntity("loaded_product"); } }
        public loaded_product loaded_product
            {
            set { putEntityInstance("LOADED_PRODUCT", value); }
            get { return new loaded_product(getEntityInstance("LOADED_PRODUCT")); } 
            }
        public bool is_loading_combination { get { return IsADBEntity("loading_combination"); } }
        public loading_combination loading_combination
            {
            set { putEntityInstance("LOADING_COMBINATION", value); }
            get { return new loading_combination(getEntityInstance("LOADING_COMBINATION")); } 
            }
        public bool is_load_combination_occurrence { get { return IsADBEntity("load_combination_occurrence"); } }
        public load_combination_occurrence load_combination_occurrence
            {
            set { putEntityInstance("LOAD_COMBINATION_OCCURRENCE", value); }
            get { return new load_combination_occurrence(getEntityInstance("LOAD_COMBINATION_OCCURRENCE")); } 
            }
        public bool is_physical_action { get { return IsADBEntity("physical_action"); } }
        public physical_action physical_action
            {
            set { putEntityInstance("PHYSICAL_ACTION", value); }
            get { return new physical_action(getEntityInstance("PHYSICAL_ACTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_loading_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_loading_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_loading_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_loading_item_get() : base(null) { }

        public bool is_applied_load { get { return IsADBEntity("applied_load"); } }
        public applied_load applied_load
            {
            get { return new applied_load(getEntityInstance("APPLIED_LOAD")); }
            }
        public bool is_load_case { get { return IsADBEntity("load_case"); } }
        public load_case load_case
            {
            get { return new load_case(getEntityInstance("LOAD_CASE")); }
            }
        public bool is_load { get { return IsADBEntity("load"); } }
        public load load
            {
            get { return new load(getEntityInstance("LOAD")); }
            }
        public bool is_loaded_product { get { return IsADBEntity("loaded_product"); } }
        public loaded_product loaded_product
            {
            get { return new loaded_product(getEntityInstance("LOADED_PRODUCT")); }
            }
        public bool is_loading_combination { get { return IsADBEntity("loading_combination"); } }
        public loading_combination loading_combination
            {
            get { return new loading_combination(getEntityInstance("LOADING_COMBINATION")); }
            }
        public bool is_load_combination_occurrence { get { return IsADBEntity("load_combination_occurrence"); } }
        public load_combination_occurrence load_combination_occurrence
            {
            get { return new load_combination_occurrence(getEntityInstance("LOAD_COMBINATION_OCCURRENCE")); }
            }
        public bool is_physical_action { get { return IsADBEntity("physical_action"); } }
        public physical_action physical_action
            {
            get { return new physical_action(getEntityInstance("PHYSICAL_ACTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_response_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_response_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_response_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_response_item() : base(null) { }

        public bool is_analysis_result { get { return IsADBEntity("analysis_result"); } }
        public analysis_result analysis_result
            {
            set { putEntityInstance("ANALYSIS_RESULT", value); }
            get { return new analysis_result(getEntityInstance("ANALYSIS_RESULT")); } 
            }
        public bool is_analysis_results_set { get { return IsADBEntity("analysis_results_set"); } }
        public analysis_results_set analysis_results_set
            {
            set { putEntityInstance("ANALYSIS_RESULTS_SET", value); }
            get { return new analysis_results_set(getEntityInstance("ANALYSIS_RESULTS_SET")); } 
            }
        public bool is_design_result { get { return IsADBEntity("design_result"); } }
        public design_result design_result
            {
            set { putEntityInstance("DESIGN_RESULT", value); }
            get { return new design_result(getEntityInstance("DESIGN_RESULT")); } 
            }
        public bool is_reaction { get { return IsADBEntity("reaction"); } }
        public reaction reaction
            {
            set { putEntityInstance("REACTION", value); }
            get { return new reaction(getEntityInstance("REACTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_response_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_response_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_response_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_response_item_get() : base(null) { }

        public bool is_analysis_result { get { return IsADBEntity("analysis_result"); } }
        public analysis_result analysis_result
            {
            get { return new analysis_result(getEntityInstance("ANALYSIS_RESULT")); }
            }
        public bool is_analysis_results_set { get { return IsADBEntity("analysis_results_set"); } }
        public analysis_results_set analysis_results_set
            {
            get { return new analysis_results_set(getEntityInstance("ANALYSIS_RESULTS_SET")); }
            }
        public bool is_design_result { get { return IsADBEntity("design_result"); } }
        public design_result design_result
            {
            get { return new design_result(getEntityInstance("DESIGN_RESULT")); }
            }
        public bool is_reaction { get { return IsADBEntity("reaction"); } }
        public reaction reaction
            {
            get { return new reaction(getEntityInstance("REACTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_analysis_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_analysis_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_analysis_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_analysis_item() : base(null) { }

        public select_analysis_model_item select_analysis_model_item { get { return new select_analysis_model_item(this); } }
        public select_loading_item select_loading_item { get { return new select_loading_item(this); } }
        public select_response_item select_response_item { get { return new select_response_item(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_analysis_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_analysis_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_analysis_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_analysis_item_get() : base(null) { }

        public select_analysis_model_item_get select_analysis_model_item { get { return new select_analysis_model_item_get(this); } }
        public select_loading_item_get select_loading_item { get { return new select_loading_item_get(this); } }
        public select_response_item_get select_response_item { get { return new select_response_item_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class value_qualifier : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier() : base(null) { }

        public bool is_precision_qualifier { get { return IsADBEntity("precision_qualifier"); } }
        public precision_qualifier precision_qualifier
            {
            set { putEntityInstance("PRECISION_QUALIFIER", value); }
            get { return new precision_qualifier(getEntityInstance("PRECISION_QUALIFIER")); } 
            }
        public bool is_type_qualifier { get { return IsADBEntity("type_qualifier"); } }
        public type_qualifier type_qualifier
            {
            set { putEntityInstance("TYPE_QUALIFIER", value); }
            get { return new type_qualifier(getEntityInstance("TYPE_QUALIFIER")); } 
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            set { putEntityInstance("UNCERTAINTY_QUALIFIER", value); }
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class value_qualifier_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier_get() : base(null) { }

        public bool is_precision_qualifier { get { return IsADBEntity("precision_qualifier"); } }
        public precision_qualifier precision_qualifier
            {
            get { return new precision_qualifier(getEntityInstance("PRECISION_QUALIFIER")); }
            }
        public bool is_type_qualifier { get { return IsADBEntity("type_qualifier"); } }
        public type_qualifier type_qualifier
            {
            get { return new type_qualifier(getEntityInstance("TYPE_QUALIFIER")); }
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_generic_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_generic_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_generic_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_generic_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            set { putEntityInstance("ADDRESS", value); }
            get { return new address(getEntityInstance("ADDRESS")); } 
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            set { putEntityInstance("APPROVAL", value); }
            get { return new approval(getEntityInstance("APPROVAL")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_box_domain { get { return IsADBEntity("box_domain"); } }
        public box_domain box_domain
            {
            set { putEntityInstance("BOX_DOMAIN", value); }
            get { return new box_domain(getEntityInstance("BOX_DOMAIN")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_certification_type { get { return IsADBEntity("certification_type"); } }
        public certification_type certification_type
            {
            set { putEntityInstance("CERTIFICATION_TYPE", value); }
            get { return new certification_type(getEntityInstance("CERTIFICATION_TYPE")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_contract_type { get { return IsADBEntity("contract_type"); } }
        public contract_type contract_type
            {
            set { putEntityInstance("CONTRACT_TYPE", value); }
            get { return new contract_type(getEntityInstance("CONTRACT_TYPE")); } 
            }
        public bool is_coordinated_universal_time_offset { get { return IsADBEntity("coordinated_universal_time_offset"); } }
        public coordinated_universal_time_offset coordinated_universal_time_offset
            {
            set { putEntityInstance("COORDINATED_UNIVERSAL_TIME_OFFSET", value); }
            get { return new coordinated_universal_time_offset(getEntityInstance("COORDINATED_UNIVERSAL_TIME_OFFSET")); } 
            }
        public bool is_date { get { return IsADBEntity("date"); } }
        public date date
            {
            set { putEntityInstance("DATE", value); }
            get { return new date(getEntityInstance("DATE")); } 
            }
        public bool is_date_and_time { get { return IsADBEntity("date_and_time"); } }
        public date_and_time date_and_time
            {
            set { putEntityInstance("DATE_AND_TIME", value); }
            get { return new date_and_time(getEntityInstance("DATE_AND_TIME")); } 
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            set { putEntityInstance("DERIVED_UNIT", value); }
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); } 
            }
        public bool is_derived_unit_element { get { return IsADBEntity("derived_unit_element"); } }
        public derived_unit_element derived_unit_element
            {
            set { putEntityInstance("DERIVED_UNIT_ELEMENT", value); }
            get { return new derived_unit_element(getEntityInstance("DERIVED_UNIT_ELEMENT")); } 
            }
        public bool is_description_attribute { get { return IsADBEntity("description_attribute"); } }
        public description_attribute description_attribute
            {
            set { putEntityInstance("DESCRIPTION_ATTRIBUTE", value); }
            get { return new description_attribute(getEntityInstance("DESCRIPTION_ATTRIBUTE")); } 
            }
        public bool is_dimensional_exponents { get { return IsADBEntity("dimensional_exponents"); } }
        public dimensional_exponents dimensional_exponents
            {
            set { putEntityInstance("DIMENSIONAL_EXPONENTS", value); }
            get { return new dimensional_exponents(getEntityInstance("DIMENSIONAL_EXPONENTS")); } 
            }
        public bool is_document { get { return IsADBEntity("document"); } }
        public document document
            {
            set { putEntityInstance("DOCUMENT", value); }
            get { return new document(getEntityInstance("DOCUMENT")); } 
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            set { putEntityInstance("DOCUMENT_TYPE", value); }
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); } 
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            set { putEntityInstance("DOCUMENT_RELATIONSHIP", value); }
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); } 
            }
        public bool is_document_representation_type { get { return IsADBEntity("document_representation_type"); } }
        public document_representation_type document_representation_type
            {
            set { putEntityInstance("DOCUMENT_REPRESENTATION_TYPE", value); }
            get { return new document_representation_type(getEntityInstance("DOCUMENT_REPRESENTATION_TYPE")); } 
            }
        public bool is_document_usage_constraint { get { return IsADBEntity("document_usage_constraint"); } }
        public document_usage_constraint document_usage_constraint
            {
            set { putEntityInstance("DOCUMENT_USAGE_CONSTRAINT", value); }
            get { return new document_usage_constraint(getEntityInstance("DOCUMENT_USAGE_CONSTRAINT")); } 
            }
        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            set { putEntityInstance("FOUNDED_ITEM", value); }
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); } 
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            set { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", value); }
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); } 
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            set { putEntityInstance("GROUP_ASSIGNMENT", value); }
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); } 
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            set { putEntityInstance("GROUP_RELATIONSHIP", value); }
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); } 
            }
        public bool is_id_attribute { get { return IsADBEntity("id_attribute"); } }
        public id_attribute id_attribute
            {
            set { putEntityInstance("ID_ATTRIBUTE", value); }
            get { return new id_attribute(getEntityInstance("ID_ATTRIBUTE")); } 
            }
        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            set { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", value); }
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); } 
            }
        public bool is_local_time { get { return IsADBEntity("local_time"); } }
        public local_time local_time
            {
            set { putEntityInstance("LOCAL_TIME", value); }
            get { return new local_time(getEntityInstance("LOCAL_TIME")); } 
            }
        public bool is_measure_qualification { get { return IsADBEntity("measure_qualification"); } }
        public measure_qualification measure_qualification
            {
            set { putEntityInstance("MEASURE_QUALIFICATION", value); }
            get { return new measure_qualification(getEntityInstance("MEASURE_QUALIFICATION")); } 
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            set { putEntityInstance("MEASURE_WITH_UNIT", value); }
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); } 
            }
        public bool is_name_attribute { get { return IsADBEntity("name_attribute"); } }
        public name_attribute name_attribute
            {
            set { putEntityInstance("NAME_ATTRIBUTE", value); }
            get { return new name_attribute(getEntityInstance("NAME_ATTRIBUTE")); } 
            }
        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            set { putEntityInstance("NAMED_UNIT", value); }
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); } 
            }
        public bool is_object_role { get { return IsADBEntity("object_role"); } }
        public object_role object_role
            {
            set { putEntityInstance("OBJECT_ROLE", value); }
            get { return new object_role(getEntityInstance("OBJECT_ROLE")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            set { putEntityInstance("PERSON", value); }
            get { return new person(getEntityInstance("PERSON")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", value); }
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_representation_context { get { return IsADBEntity("representation_context"); } }
        public representation_context representation_context
            {
            set { putEntityInstance("REPRESENTATION_CONTEXT", value); }
            get { return new representation_context(getEntityInstance("REPRESENTATION_CONTEXT")); } 
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            set { putEntityInstance("REPRESENTATION_ITEM", value); }
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); } 
            }
        public bool is_representation_map { get { return IsADBEntity("representation_map"); } }
        public representation_map representation_map
            {
            set { putEntityInstance("REPRESENTATION_MAP", value); }
            get { return new representation_map(getEntityInstance("REPRESENTATION_MAP")); } 
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            set { putEntityInstance("REPRESENTATION_RELATIONSHIP", value); }
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); } 
            }
        public bool is_role_association { get { return IsADBEntity("role_association"); } }
        public role_association role_association
            {
            set { putEntityInstance("ROLE_ASSOCIATION", value); }
            get { return new role_association(getEntityInstance("ROLE_ASSOCIATION")); } 
            }
        public bool is_surface_patch { get { return IsADBEntity("surface_patch"); } }
        public surface_patch surface_patch
            {
            set { putEntityInstance("SURFACE_PATCH", value); }
            get { return new surface_patch(getEntityInstance("SURFACE_PATCH")); } 
            }
        public value_qualifier value_qualifier { get { return new value_qualifier(this); } }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_generic_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_generic_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_generic_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_generic_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            get { return new address(getEntityInstance("ADDRESS")); }
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            get { return new approval(getEntityInstance("APPROVAL")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_box_domain { get { return IsADBEntity("box_domain"); } }
        public box_domain box_domain
            {
            get { return new box_domain(getEntityInstance("BOX_DOMAIN")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_certification_type { get { return IsADBEntity("certification_type"); } }
        public certification_type certification_type
            {
            get { return new certification_type(getEntityInstance("CERTIFICATION_TYPE")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_contract_type { get { return IsADBEntity("contract_type"); } }
        public contract_type contract_type
            {
            get { return new contract_type(getEntityInstance("CONTRACT_TYPE")); }
            }
        public bool is_coordinated_universal_time_offset { get { return IsADBEntity("coordinated_universal_time_offset"); } }
        public coordinated_universal_time_offset coordinated_universal_time_offset
            {
            get { return new coordinated_universal_time_offset(getEntityInstance("COORDINATED_UNIVERSAL_TIME_OFFSET")); }
            }
        public bool is_date { get { return IsADBEntity("date"); } }
        public date date
            {
            get { return new date(getEntityInstance("DATE")); }
            }
        public bool is_date_and_time { get { return IsADBEntity("date_and_time"); } }
        public date_and_time date_and_time
            {
            get { return new date_and_time(getEntityInstance("DATE_AND_TIME")); }
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); }
            }
        public bool is_derived_unit_element { get { return IsADBEntity("derived_unit_element"); } }
        public derived_unit_element derived_unit_element
            {
            get { return new derived_unit_element(getEntityInstance("DERIVED_UNIT_ELEMENT")); }
            }
        public bool is_description_attribute { get { return IsADBEntity("description_attribute"); } }
        public description_attribute description_attribute
            {
            get { return new description_attribute(getEntityInstance("DESCRIPTION_ATTRIBUTE")); }
            }
        public bool is_dimensional_exponents { get { return IsADBEntity("dimensional_exponents"); } }
        public dimensional_exponents dimensional_exponents
            {
            get { return new dimensional_exponents(getEntityInstance("DIMENSIONAL_EXPONENTS")); }
            }
        public bool is_document { get { return IsADBEntity("document"); } }
        public document document
            {
            get { return new document(getEntityInstance("DOCUMENT")); }
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); }
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); }
            }
        public bool is_document_representation_type { get { return IsADBEntity("document_representation_type"); } }
        public document_representation_type document_representation_type
            {
            get { return new document_representation_type(getEntityInstance("DOCUMENT_REPRESENTATION_TYPE")); }
            }
        public bool is_document_usage_constraint { get { return IsADBEntity("document_usage_constraint"); } }
        public document_usage_constraint document_usage_constraint
            {
            get { return new document_usage_constraint(getEntityInstance("DOCUMENT_USAGE_CONSTRAINT")); }
            }
        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); }
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); }
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); }
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); }
            }
        public bool is_id_attribute { get { return IsADBEntity("id_attribute"); } }
        public id_attribute id_attribute
            {
            get { return new id_attribute(getEntityInstance("ID_ATTRIBUTE")); }
            }
        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); }
            }
        public bool is_local_time { get { return IsADBEntity("local_time"); } }
        public local_time local_time
            {
            get { return new local_time(getEntityInstance("LOCAL_TIME")); }
            }
        public bool is_measure_qualification { get { return IsADBEntity("measure_qualification"); } }
        public measure_qualification measure_qualification
            {
            get { return new measure_qualification(getEntityInstance("MEASURE_QUALIFICATION")); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); }
            }
        public bool is_name_attribute { get { return IsADBEntity("name_attribute"); } }
        public name_attribute name_attribute
            {
            get { return new name_attribute(getEntityInstance("NAME_ATTRIBUTE")); }
            }
        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); }
            }
        public bool is_object_role { get { return IsADBEntity("object_role"); } }
        public object_role object_role
            {
            get { return new object_role(getEntityInstance("OBJECT_ROLE")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            get { return new person(getEntityInstance("PERSON")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_representation_context { get { return IsADBEntity("representation_context"); } }
        public representation_context representation_context
            {
            get { return new representation_context(getEntityInstance("REPRESENTATION_CONTEXT")); }
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); }
            }
        public bool is_representation_map { get { return IsADBEntity("representation_map"); } }
        public representation_map representation_map
            {
            get { return new representation_map(getEntityInstance("REPRESENTATION_MAP")); }
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
            }
        public bool is_role_association { get { return IsADBEntity("role_association"); } }
        public role_association role_association
            {
            get { return new role_association(getEntityInstance("ROLE_ASSOCIATION")); }
            }
        public bool is_surface_patch { get { return IsADBEntity("surface_patch"); } }
        public surface_patch surface_patch
            {
            get { return new surface_patch(getEntityInstance("SURFACE_PATCH")); }
            }
        public value_qualifier_get value_qualifier { get { return new value_qualifier_get(this); } }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_design_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_design_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_design_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_design_item() : base(null) { }

        public bool is_assembly_design { get { return IsADBEntity("assembly_design"); } }
        public assembly_design assembly_design
            {
            set { putEntityInstance("ASSEMBLY_DESIGN", value); }
            get { return new assembly_design(getEntityInstance("ASSEMBLY_DESIGN")); } 
            }
        public bool is_assembly_map { get { return IsADBEntity("assembly_map"); } }
        public assembly_map assembly_map
            {
            set { putEntityInstance("ASSEMBLY_MAP", value); }
            get { return new assembly_map(getEntityInstance("ASSEMBLY_MAP")); } 
            }
        public bool is_assembly_relationship { get { return IsADBEntity("assembly_relationship"); } }
        public assembly_relationship assembly_relationship
            {
            set { putEntityInstance("ASSEMBLY_RELATIONSHIP", value); }
            get { return new assembly_relationship(getEntityInstance("ASSEMBLY_RELATIONSHIP")); } 
            }
        public bool is_design_criterion { get { return IsADBEntity("design_criterion"); } }
        public design_criterion design_criterion
            {
            set { putEntityInstance("DESIGN_CRITERION", value); }
            get { return new design_criterion(getEntityInstance("DESIGN_CRITERION")); } 
            }
        public bool is_design_joint_system { get { return IsADBEntity("design_joint_system"); } }
        public design_joint_system design_joint_system
            {
            set { putEntityInstance("DESIGN_JOINT_SYSTEM", value); }
            get { return new design_joint_system(getEntityInstance("DESIGN_JOINT_SYSTEM")); } 
            }
        public bool is_design_part { get { return IsADBEntity("design_part"); } }
        public design_part design_part
            {
            set { putEntityInstance("DESIGN_PART", value); }
            get { return new design_part(getEntityInstance("DESIGN_PART")); } 
            }
        public bool is_design_result { get { return IsADBEntity("design_result"); } }
        public design_result design_result
            {
            set { putEntityInstance("DESIGN_RESULT", value); }
            get { return new design_result(getEntityInstance("DESIGN_RESULT")); } 
            }
        public bool is_effective_buckling_length { get { return IsADBEntity("effective_buckling_length"); } }
        public effective_buckling_length effective_buckling_length
            {
            set { putEntityInstance("EFFECTIVE_BUCKLING_LENGTH", value); }
            get { return new effective_buckling_length(getEntityInstance("EFFECTIVE_BUCKLING_LENGTH")); } 
            }
        public bool is_functional_role { get { return IsADBEntity("functional_role"); } }
        public functional_role functional_role
            {
            set { putEntityInstance("FUNCTIONAL_ROLE", value); }
            get { return new functional_role(getEntityInstance("FUNCTIONAL_ROLE")); } 
            }
        public bool is_resistance { get { return IsADBEntity("resistance"); } }
        public resistance resistance
            {
            set { putEntityInstance("RESISTANCE", value); }
            get { return new resistance(getEntityInstance("RESISTANCE")); } 
            }
        public bool is_restraint { get { return IsADBEntity("restraint"); } }
        public restraint restraint
            {
            set { putEntityInstance("RESTRAINT", value); }
            get { return new restraint(getEntityInstance("RESTRAINT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_design_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_design_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_design_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_design_item_get() : base(null) { }

        public bool is_assembly_design { get { return IsADBEntity("assembly_design"); } }
        public assembly_design assembly_design
            {
            get { return new assembly_design(getEntityInstance("ASSEMBLY_DESIGN")); }
            }
        public bool is_assembly_map { get { return IsADBEntity("assembly_map"); } }
        public assembly_map assembly_map
            {
            get { return new assembly_map(getEntityInstance("ASSEMBLY_MAP")); }
            }
        public bool is_assembly_relationship { get { return IsADBEntity("assembly_relationship"); } }
        public assembly_relationship assembly_relationship
            {
            get { return new assembly_relationship(getEntityInstance("ASSEMBLY_RELATIONSHIP")); }
            }
        public bool is_design_criterion { get { return IsADBEntity("design_criterion"); } }
        public design_criterion design_criterion
            {
            get { return new design_criterion(getEntityInstance("DESIGN_CRITERION")); }
            }
        public bool is_design_joint_system { get { return IsADBEntity("design_joint_system"); } }
        public design_joint_system design_joint_system
            {
            get { return new design_joint_system(getEntityInstance("DESIGN_JOINT_SYSTEM")); }
            }
        public bool is_design_part { get { return IsADBEntity("design_part"); } }
        public design_part design_part
            {
            get { return new design_part(getEntityInstance("DESIGN_PART")); }
            }
        public bool is_design_result { get { return IsADBEntity("design_result"); } }
        public design_result design_result
            {
            get { return new design_result(getEntityInstance("DESIGN_RESULT")); }
            }
        public bool is_effective_buckling_length { get { return IsADBEntity("effective_buckling_length"); } }
        public effective_buckling_length effective_buckling_length
            {
            get { return new effective_buckling_length(getEntityInstance("EFFECTIVE_BUCKLING_LENGTH")); }
            }
        public bool is_functional_role { get { return IsADBEntity("functional_role"); } }
        public functional_role functional_role
            {
            get { return new functional_role(getEntityInstance("FUNCTIONAL_ROLE")); }
            }
        public bool is_resistance { get { return IsADBEntity("resistance"); } }
        public resistance resistance
            {
            get { return new resistance(getEntityInstance("RESISTANCE")); }
            }
        public bool is_restraint { get { return IsADBEntity("restraint"); } }
        public restraint restraint
            {
            get { return new restraint(getEntityInstance("RESTRAINT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_physical_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_physical_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_physical_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_physical_item() : base(null) { }

        public bool is_located_item { get { return IsADBEntity("located_item"); } }
        public located_item located_item
            {
            set { putEntityInstance("LOCATED_ITEM", value); }
            get { return new located_item(getEntityInstance("LOCATED_ITEM")); } 
            }
        public bool is_located_part_joint { get { return IsADBEntity("located_part_joint"); } }
        public located_part_joint located_part_joint
            {
            set { putEntityInstance("LOCATED_PART_JOINT", value); }
            get { return new located_part_joint(getEntityInstance("LOCATED_PART_JOINT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_physical_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_physical_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_physical_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_physical_item_get() : base(null) { }

        public bool is_located_item { get { return IsADBEntity("located_item"); } }
        public located_item located_item
            {
            get { return new located_item(getEntityInstance("LOCATED_ITEM")); }
            }
        public bool is_located_part_joint { get { return IsADBEntity("located_part_joint"); } }
        public located_part_joint located_part_joint
            {
            get { return new located_part_joint(getEntityInstance("LOCATED_PART_JOINT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_project_definition_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_project_definition_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_project_definition_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_project_definition_item() : base(null) { }

        public bool is_assembly { get { return IsADBEntity("assembly"); } }
        public assembly assembly
            {
            set { putEntityInstance("ASSEMBLY", value); }
            get { return new assembly(getEntityInstance("ASSEMBLY")); } 
            }
        public bool is_building { get { return IsADBEntity("building"); } }
        public building building
            {
            set { putEntityInstance("BUILDING", value); }
            get { return new building(getEntityInstance("BUILDING")); } 
            }
        public bool is_building_complex { get { return IsADBEntity("building_complex"); } }
        public building_complex building_complex
            {
            set { putEntityInstance("BUILDING_COMPLEX", value); }
            get { return new building_complex(getEntityInstance("BUILDING_COMPLEX")); } 
            }
        public bool is_currency_measure_with_unit { get { return IsADBEntity("currency_measure_with_unit"); } }
        public currency_measure_with_unit currency_measure_with_unit
            {
            set { putEntityInstance("CURRENCY_MEASURE_WITH_UNIT", value); }
            get { return new currency_measure_with_unit(getEntityInstance("CURRENCY_MEASURE_WITH_UNIT")); } 
            }
        public bool is_project { get { return IsADBEntity("project"); } }
        public project project
            {
            set { putEntityInstance("PROJECT", value); }
            get { return new project(getEntityInstance("PROJECT")); } 
            }
        public bool is_project_plan { get { return IsADBEntity("project_plan"); } }
        public project_plan project_plan
            {
            set { putEntityInstance("PROJECT_PLAN", value); }
            get { return new project_plan(getEntityInstance("PROJECT_PLAN")); } 
            }
        public bool is_project_plan_item { get { return IsADBEntity("project_plan_item"); } }
        public project_plan_item project_plan_item
            {
            set { putEntityInstance("PROJECT_PLAN_ITEM", value); }
            get { return new project_plan_item(getEntityInstance("PROJECT_PLAN_ITEM")); } 
            }
        public bool is_project_plan_item_relationship { get { return IsADBEntity("project_plan_item_relationship"); } }
        public project_plan_item_relationship project_plan_item_relationship
            {
            set { putEntityInstance("PROJECT_PLAN_ITEM_RELATIONSHIP", value); }
            get { return new project_plan_item_relationship(getEntityInstance("PROJECT_PLAN_ITEM_RELATIONSHIP")); } 
            }
        public bool is_project_organization { get { return IsADBEntity("project_organization"); } }
        public project_organization project_organization
            {
            set { putEntityInstance("PROJECT_ORGANIZATION", value); }
            get { return new project_organization(getEntityInstance("PROJECT_ORGANIZATION")); } 
            }
        public bool is_site { get { return IsADBEntity("site"); } }
        public site site
            {
            set { putEntityInstance("SITE", value); }
            get { return new site(getEntityInstance("SITE")); } 
            }
        public bool is_structure { get { return IsADBEntity("structure"); } }
        public structure structure
            {
            set { putEntityInstance("STRUCTURE", value); }
            get { return new structure(getEntityInstance("STRUCTURE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_project_definition_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_project_definition_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_project_definition_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_project_definition_item_get() : base(null) { }

        public bool is_assembly { get { return IsADBEntity("assembly"); } }
        public assembly assembly
            {
            get { return new assembly(getEntityInstance("ASSEMBLY")); }
            }
        public bool is_building { get { return IsADBEntity("building"); } }
        public building building
            {
            get { return new building(getEntityInstance("BUILDING")); }
            }
        public bool is_building_complex { get { return IsADBEntity("building_complex"); } }
        public building_complex building_complex
            {
            get { return new building_complex(getEntityInstance("BUILDING_COMPLEX")); }
            }
        public bool is_currency_measure_with_unit { get { return IsADBEntity("currency_measure_with_unit"); } }
        public currency_measure_with_unit currency_measure_with_unit
            {
            get { return new currency_measure_with_unit(getEntityInstance("CURRENCY_MEASURE_WITH_UNIT")); }
            }
        public bool is_project { get { return IsADBEntity("project"); } }
        public project project
            {
            get { return new project(getEntityInstance("PROJECT")); }
            }
        public bool is_project_plan { get { return IsADBEntity("project_plan"); } }
        public project_plan project_plan
            {
            get { return new project_plan(getEntityInstance("PROJECT_PLAN")); }
            }
        public bool is_project_plan_item { get { return IsADBEntity("project_plan_item"); } }
        public project_plan_item project_plan_item
            {
            get { return new project_plan_item(getEntityInstance("PROJECT_PLAN_ITEM")); }
            }
        public bool is_project_plan_item_relationship { get { return IsADBEntity("project_plan_item_relationship"); } }
        public project_plan_item_relationship project_plan_item_relationship
            {
            get { return new project_plan_item_relationship(getEntityInstance("PROJECT_PLAN_ITEM_RELATIONSHIP")); }
            }
        public bool is_project_organization { get { return IsADBEntity("project_organization"); } }
        public project_organization project_organization
            {
            get { return new project_organization(getEntityInstance("PROJECT_ORGANIZATION")); }
            }
        public bool is_site { get { return IsADBEntity("site"); } }
        public site site
            {
            get { return new site(getEntityInstance("SITE")); }
            }
        public bool is_structure { get { return IsADBEntity("structure"); } }
        public structure structure
            {
            get { return new structure(getEntityInstance("STRUCTURE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_structural_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_structural_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_structural_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_structural_item() : base(null) { }

        public bool is_coord_system { get { return IsADBEntity("coord_system"); } }
        public coord_system coord_system
            {
            set { putEntityInstance("COORD_SYSTEM", value); }
            get { return new coord_system(getEntityInstance("COORD_SYSTEM")); } 
            }
        public bool is_grid { get { return IsADBEntity("grid"); } }
        public grid grid
            {
            set { putEntityInstance("GRID", value); }
            get { return new grid(getEntityInstance("GRID")); } 
            }
        public bool is_grid_intersection { get { return IsADBEntity("grid_intersection"); } }
        public grid_intersection grid_intersection
            {
            set { putEntityInstance("GRID_INTERSECTION", value); }
            get { return new grid_intersection(getEntityInstance("GRID_INTERSECTION")); } 
            }
        public bool is_grid_offset { get { return IsADBEntity("grid_offset"); } }
        public grid_offset grid_offset
            {
            set { putEntityInstance("GRID_OFFSET", value); }
            get { return new grid_offset(getEntityInstance("GRID_OFFSET")); } 
            }
        public bool is_geographical_location { get { return IsADBEntity("geographical_location"); } }
        public geographical_location geographical_location
            {
            set { putEntityInstance("GEOGRAPHICAL_LOCATION", value); }
            get { return new geographical_location(getEntityInstance("GEOGRAPHICAL_LOCATION")); } 
            }
        public bool is_item_cost_code { get { return IsADBEntity("item_cost_code"); } }
        public item_cost_code item_cost_code
            {
            set { putEntityInstance("ITEM_COST_CODE", value); }
            get { return new item_cost_code(getEntityInstance("ITEM_COST_CODE")); } 
            }
        public bool is_item_cost_code_assigned { get { return IsADBEntity("item_cost_code_assigned"); } }
        public item_cost_code_assigned item_cost_code_assigned
            {
            set { putEntityInstance("ITEM_COST_CODE_ASSIGNED", value); }
            get { return new item_cost_code_assigned(getEntityInstance("ITEM_COST_CODE_ASSIGNED")); } 
            }
        public bool is_item_property { get { return IsADBEntity("item_property"); } }
        public item_property item_property
            {
            set { putEntityInstance("ITEM_PROPERTY", value); }
            get { return new item_property(getEntityInstance("ITEM_PROPERTY")); } 
            }
        public bool is_item_property_assigned { get { return IsADBEntity("item_property_assigned"); } }
        public item_property_assigned item_property_assigned
            {
            set { putEntityInstance("ITEM_PROPERTY_ASSIGNED", value); }
            get { return new item_property_assigned(getEntityInstance("ITEM_PROPERTY_ASSIGNED")); } 
            }
        public bool is_item_reference { get { return IsADBEntity("item_reference"); } }
        public item_reference item_reference
            {
            set { putEntityInstance("ITEM_REFERENCE", value); }
            get { return new item_reference(getEntityInstance("ITEM_REFERENCE")); } 
            }
        public bool is_item_reference_assigned { get { return IsADBEntity("item_reference_assigned"); } }
        public item_reference_assigned item_reference_assigned
            {
            set { putEntityInstance("ITEM_REFERENCE_ASSIGNED", value); }
            get { return new item_reference_assigned(getEntityInstance("ITEM_REFERENCE_ASSIGNED")); } 
            }
        public bool is_item_ref_source { get { return IsADBEntity("item_ref_source"); } }
        public item_ref_source item_ref_source
            {
            set { putEntityInstance("ITEM_REF_SOURCE", value); }
            get { return new item_ref_source(getEntityInstance("ITEM_REF_SOURCE")); } 
            }
        public bool is_item_ref_source_documented { get { return IsADBEntity("item_ref_source_documented"); } }
        public item_ref_source_documented item_ref_source_documented
            {
            set { putEntityInstance("ITEM_REF_SOURCE_DOCUMENTED", value); }
            get { return new item_ref_source_documented(getEntityInstance("ITEM_REF_SOURCE_DOCUMENTED")); } 
            }
        public bool is_section_properties { get { return IsADBEntity("section_properties"); } }
        public section_properties section_properties
            {
            set { putEntityInstance("SECTION_PROPERTIES", value); }
            get { return new section_properties(getEntityInstance("SECTION_PROPERTIES")); } 
            }
        public bool is_setting_out_point { get { return IsADBEntity("setting_out_point"); } }
        public setting_out_point setting_out_point
            {
            set { putEntityInstance("SETTING_OUT_POINT", value); }
            get { return new setting_out_point(getEntityInstance("SETTING_OUT_POINT")); } 
            }
        public bool is_structural_frame_item { get { return IsADBEntity("structural_frame_item"); } }
        public structural_frame_item structural_frame_item
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM", value); }
            get { return new structural_frame_item(getEntityInstance("STRUCTURAL_FRAME_ITEM")); } 
            }
        public bool is_structural_frame_item_approved { get { return IsADBEntity("structural_frame_item_approved"); } }
        public structural_frame_item_approved structural_frame_item_approved
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM_APPROVED", value); }
            get { return new structural_frame_item_approved(getEntityInstance("STRUCTURAL_FRAME_ITEM_APPROVED")); } 
            }
        public bool is_structural_frame_item_certified { get { return IsADBEntity("structural_frame_item_certified"); } }
        public structural_frame_item_certified structural_frame_item_certified
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM_CERTIFIED", value); }
            get { return new structural_frame_item_certified(getEntityInstance("STRUCTURAL_FRAME_ITEM_CERTIFIED")); } 
            }
        public bool is_structural_frame_item_documented { get { return IsADBEntity("structural_frame_item_documented"); } }
        public structural_frame_item_documented structural_frame_item_documented
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM_DOCUMENTED", value); }
            get { return new structural_frame_item_documented(getEntityInstance("STRUCTURAL_FRAME_ITEM_DOCUMENTED")); } 
            }
        public bool is_structural_frame_item_priced { get { return IsADBEntity("structural_frame_item_priced"); } }
        public structural_frame_item_priced structural_frame_item_priced
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM_PRICED", value); }
            get { return new structural_frame_item_priced(getEntityInstance("STRUCTURAL_FRAME_ITEM_PRICED")); } 
            }
        public bool is_structural_frame_item_relationship { get { return IsADBEntity("structural_frame_item_relationship"); } }
        public structural_frame_item_relationship structural_frame_item_relationship
            {
            set { putEntityInstance("STRUCTURAL_FRAME_ITEM_RELATIONSHIP", value); }
            get { return new structural_frame_item_relationship(getEntityInstance("STRUCTURAL_FRAME_ITEM_RELATIONSHIP")); } 
            }
        public bool is_zone { get { return IsADBEntity("zone"); } }
        public zone zone
            {
            set { putEntityInstance("ZONE", value); }
            get { return new zone(getEntityInstance("ZONE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_structural_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_structural_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_structural_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_structural_item_get() : base(null) { }

        public bool is_coord_system { get { return IsADBEntity("coord_system"); } }
        public coord_system coord_system
            {
            get { return new coord_system(getEntityInstance("COORD_SYSTEM")); }
            }
        public bool is_grid { get { return IsADBEntity("grid"); } }
        public grid grid
            {
            get { return new grid(getEntityInstance("GRID")); }
            }
        public bool is_grid_intersection { get { return IsADBEntity("grid_intersection"); } }
        public grid_intersection grid_intersection
            {
            get { return new grid_intersection(getEntityInstance("GRID_INTERSECTION")); }
            }
        public bool is_grid_offset { get { return IsADBEntity("grid_offset"); } }
        public grid_offset grid_offset
            {
            get { return new grid_offset(getEntityInstance("GRID_OFFSET")); }
            }
        public bool is_geographical_location { get { return IsADBEntity("geographical_location"); } }
        public geographical_location geographical_location
            {
            get { return new geographical_location(getEntityInstance("GEOGRAPHICAL_LOCATION")); }
            }
        public bool is_item_cost_code { get { return IsADBEntity("item_cost_code"); } }
        public item_cost_code item_cost_code
            {
            get { return new item_cost_code(getEntityInstance("ITEM_COST_CODE")); }
            }
        public bool is_item_cost_code_assigned { get { return IsADBEntity("item_cost_code_assigned"); } }
        public item_cost_code_assigned item_cost_code_assigned
            {
            get { return new item_cost_code_assigned(getEntityInstance("ITEM_COST_CODE_ASSIGNED")); }
            }
        public bool is_item_property { get { return IsADBEntity("item_property"); } }
        public item_property item_property
            {
            get { return new item_property(getEntityInstance("ITEM_PROPERTY")); }
            }
        public bool is_item_property_assigned { get { return IsADBEntity("item_property_assigned"); } }
        public item_property_assigned item_property_assigned
            {
            get { return new item_property_assigned(getEntityInstance("ITEM_PROPERTY_ASSIGNED")); }
            }
        public bool is_item_reference { get { return IsADBEntity("item_reference"); } }
        public item_reference item_reference
            {
            get { return new item_reference(getEntityInstance("ITEM_REFERENCE")); }
            }
        public bool is_item_reference_assigned { get { return IsADBEntity("item_reference_assigned"); } }
        public item_reference_assigned item_reference_assigned
            {
            get { return new item_reference_assigned(getEntityInstance("ITEM_REFERENCE_ASSIGNED")); }
            }
        public bool is_item_ref_source { get { return IsADBEntity("item_ref_source"); } }
        public item_ref_source item_ref_source
            {
            get { return new item_ref_source(getEntityInstance("ITEM_REF_SOURCE")); }
            }
        public bool is_item_ref_source_documented { get { return IsADBEntity("item_ref_source_documented"); } }
        public item_ref_source_documented item_ref_source_documented
            {
            get { return new item_ref_source_documented(getEntityInstance("ITEM_REF_SOURCE_DOCUMENTED")); }
            }
        public bool is_section_properties { get { return IsADBEntity("section_properties"); } }
        public section_properties section_properties
            {
            get { return new section_properties(getEntityInstance("SECTION_PROPERTIES")); }
            }
        public bool is_setting_out_point { get { return IsADBEntity("setting_out_point"); } }
        public setting_out_point setting_out_point
            {
            get { return new setting_out_point(getEntityInstance("SETTING_OUT_POINT")); }
            }
        public bool is_structural_frame_item { get { return IsADBEntity("structural_frame_item"); } }
        public structural_frame_item structural_frame_item
            {
            get { return new structural_frame_item(getEntityInstance("STRUCTURAL_FRAME_ITEM")); }
            }
        public bool is_structural_frame_item_approved { get { return IsADBEntity("structural_frame_item_approved"); } }
        public structural_frame_item_approved structural_frame_item_approved
            {
            get { return new structural_frame_item_approved(getEntityInstance("STRUCTURAL_FRAME_ITEM_APPROVED")); }
            }
        public bool is_structural_frame_item_certified { get { return IsADBEntity("structural_frame_item_certified"); } }
        public structural_frame_item_certified structural_frame_item_certified
            {
            get { return new structural_frame_item_certified(getEntityInstance("STRUCTURAL_FRAME_ITEM_CERTIFIED")); }
            }
        public bool is_structural_frame_item_documented { get { return IsADBEntity("structural_frame_item_documented"); } }
        public structural_frame_item_documented structural_frame_item_documented
            {
            get { return new structural_frame_item_documented(getEntityInstance("STRUCTURAL_FRAME_ITEM_DOCUMENTED")); }
            }
        public bool is_structural_frame_item_priced { get { return IsADBEntity("structural_frame_item_priced"); } }
        public structural_frame_item_priced structural_frame_item_priced
            {
            get { return new structural_frame_item_priced(getEntityInstance("STRUCTURAL_FRAME_ITEM_PRICED")); }
            }
        public bool is_structural_frame_item_relationship { get { return IsADBEntity("structural_frame_item_relationship"); } }
        public structural_frame_item_relationship structural_frame_item_relationship
            {
            get { return new structural_frame_item_relationship(getEntityInstance("STRUCTURAL_FRAME_ITEM_RELATIONSHIP")); }
            }
        public bool is_zone { get { return IsADBEntity("zone"); } }
        public zone zone
            {
            get { return new zone(getEntityInstance("ZONE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_data_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_data_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_data_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_data_item() : base(null) { }

        public bool is_managed_data_deleted { get { return IsADBEntity("managed_data_deleted"); } }
        public managed_data_deleted managed_data_deleted
            {
            set { putEntityInstance("MANAGED_DATA_DELETED", value); }
            get { return new managed_data_deleted(getEntityInstance("MANAGED_DATA_DELETED")); } 
            }
        public select_generic_item select_generic_item { get { return new select_generic_item(this); } }
        public select_analysis_item select_analysis_item { get { return new select_analysis_item(this); } }
        public select_design_item select_design_item { get { return new select_design_item(this); } }
        public select_physical_item select_physical_item { get { return new select_physical_item(this); } }
        public select_project_definition_item select_project_definition_item { get { return new select_project_definition_item(this); } }
        public select_structural_item select_structural_item { get { return new select_structural_item(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_data_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_data_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_data_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_data_item_get() : base(null) { }

        public bool is_managed_data_deleted { get { return IsADBEntity("managed_data_deleted"); } }
        public managed_data_deleted managed_data_deleted
            {
            get { return new managed_data_deleted(getEntityInstance("MANAGED_DATA_DELETED")); }
            }
        public select_generic_item_get select_generic_item { get { return new select_generic_item_get(this); } }
        public select_analysis_item_get select_analysis_item { get { return new select_analysis_item_get(this); } }
        public select_design_item_get select_design_item { get { return new select_design_item_get(this); } }
        public select_physical_item_get select_physical_item { get { return new select_physical_item_get(this); } }
        public select_project_definition_item_get select_project_definition_item { get { return new select_project_definition_item_get(this); } }
        public select_structural_item_get select_structural_item { get { return new select_structural_item_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_data_source : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_data_source(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_data_source(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_data_source() : base(null) { }

        public bool is_managed_application_installation { get { return IsADBEntity("managed_application_installation"); } }
        public managed_application_installation managed_application_installation
            {
            set { putEntityInstance("MANAGED_APPLICATION_INSTALLATION", value); }
            get { return new managed_application_installation(getEntityInstance("MANAGED_APPLICATION_INSTALLATION")); } 
            }
        public bool is_step_file { get { return IsADBEntity("step_file"); } }
        public step_file step_file
            {
            set { putEntityInstance("STEP_FILE", value); }
            get { return new step_file(getEntityInstance("STEP_FILE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class select_data_source_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public select_data_source_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public select_data_source_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public select_data_source_get() : base(null) { }

        public bool is_managed_application_installation { get { return IsADBEntity("managed_application_installation"); } }
        public managed_application_installation managed_application_installation
            {
            get { return new managed_application_installation(getEntityInstance("MANAGED_APPLICATION_INSTALLATION")); }
            }
        public bool is_step_file { get { return IsADBEntity("step_file"); } }
        public step_file step_file
            {
            get { return new step_file(getEntityInstance("STEP_FILE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shell : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell() : base(null) { }

        public bool is_vertex_shell { get { return IsADBEntity("vertex_shell"); } }
        public vertex_shell vertex_shell
            {
            set { putEntityInstance("VERTEX_SHELL", value); }
            get { return new vertex_shell(getEntityInstance("VERTEX_SHELL")); } 
            }
        public bool is_wire_shell { get { return IsADBEntity("wire_shell"); } }
        public wire_shell wire_shell
            {
            set { putEntityInstance("WIRE_SHELL", value); }
            get { return new wire_shell(getEntityInstance("WIRE_SHELL")); } 
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            set { putEntityInstance("OPEN_SHELL", value); }
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); } 
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            set { putEntityInstance("CLOSED_SHELL", value); }
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shell_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell_get() : base(null) { }

        public bool is_vertex_shell { get { return IsADBEntity("vertex_shell"); } }
        public vertex_shell vertex_shell
            {
            get { return new vertex_shell(getEntityInstance("VERTEX_SHELL")); }
            }
        public bool is_wire_shell { get { return IsADBEntity("wire_shell"); } }
        public wire_shell wire_shell
            {
            get { return new wire_shell(getEntityInstance("WIRE_SHELL")); }
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); }
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class site_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public site_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public site_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public site_select() : base(null) { }

        public bool is_site { get { return IsADBEntity("site"); } }
        public site site
            {
            set { putEntityInstance("SITE", value); }
            get { return new site(getEntityInstance("SITE")); } 
            }
        public bool is_located_site { get { return IsADBEntity("located_site"); } }
        public located_site located_site
            {
            set { putEntityInstance("LOCATED_SITE", value); }
            get { return new located_site(getEntityInstance("LOCATED_SITE")); } 
            }
        public bool is_zone_of_site { get { return IsADBEntity("zone_of_site"); } }
        public zone_of_site zone_of_site
            {
            set { putEntityInstance("ZONE_OF_SITE", value); }
            get { return new zone_of_site(getEntityInstance("ZONE_OF_SITE")); } 
            }
        public bool is_zone_of_building { get { return IsADBEntity("zone_of_building"); } }
        public zone_of_building zone_of_building
            {
            set { putEntityInstance("ZONE_OF_BUILDING", value); }
            get { return new zone_of_building(getEntityInstance("ZONE_OF_BUILDING")); } 
            }
        public bool is_building_complex { get { return IsADBEntity("building_complex"); } }
        public building_complex building_complex
            {
            set { putEntityInstance("BUILDING_COMPLEX", value); }
            get { return new building_complex(getEntityInstance("BUILDING_COMPLEX")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class site_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public site_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public site_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public site_select_get() : base(null) { }

        public bool is_site { get { return IsADBEntity("site"); } }
        public site site
            {
            get { return new site(getEntityInstance("SITE")); }
            }
        public bool is_located_site { get { return IsADBEntity("located_site"); } }
        public located_site located_site
            {
            get { return new located_site(getEntityInstance("LOCATED_SITE")); }
            }
        public bool is_zone_of_site { get { return IsADBEntity("zone_of_site"); } }
        public zone_of_site zone_of_site
            {
            get { return new zone_of_site(getEntityInstance("ZONE_OF_SITE")); }
            }
        public bool is_zone_of_building { get { return IsADBEntity("zone_of_building"); } }
        public zone_of_building zone_of_building
            {
            get { return new zone_of_building(getEntityInstance("ZONE_OF_BUILDING")); }
            }
        public bool is_building_complex { get { return IsADBEntity("building_complex"); } }
        public building_complex building_complex
            {
            get { return new building_complex(getEntityInstance("BUILDING_COMPLEX")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class structure_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public structure_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public structure_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public structure_select() : base(null) { }

        public bool is_structure { get { return IsADBEntity("structure"); } }
        public structure structure
            {
            set { putEntityInstance("STRUCTURE", value); }
            get { return new structure(getEntityInstance("STRUCTURE")); } 
            }
        public bool is_located_structure { get { return IsADBEntity("located_structure"); } }
        public located_structure located_structure
            {
            set { putEntityInstance("LOCATED_STRUCTURE", value); }
            get { return new located_structure(getEntityInstance("LOCATED_STRUCTURE")); } 
            }
        public bool is_zone_of_structure { get { return IsADBEntity("zone_of_structure"); } }
        public zone_of_structure zone_of_structure
            {
            set { putEntityInstance("ZONE_OF_STRUCTURE", value); }
            get { return new zone_of_structure(getEntityInstance("ZONE_OF_STRUCTURE")); } 
            }
        public bool is_zone_of_building { get { return IsADBEntity("zone_of_building"); } }
        public zone_of_building zone_of_building
            {
            set { putEntityInstance("ZONE_OF_BUILDING", value); }
            get { return new zone_of_building(getEntityInstance("ZONE_OF_BUILDING")); } 
            }
        public bool is_located_assembly { get { return IsADBEntity("located_assembly"); } }
        public located_assembly located_assembly
            {
            set { putEntityInstance("LOCATED_ASSEMBLY", value); }
            get { return new located_assembly(getEntityInstance("LOCATED_ASSEMBLY")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class structure_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public structure_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public structure_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public structure_select_get() : base(null) { }

        public bool is_structure { get { return IsADBEntity("structure"); } }
        public structure structure
            {
            get { return new structure(getEntityInstance("STRUCTURE")); }
            }
        public bool is_located_structure { get { return IsADBEntity("located_structure"); } }
        public located_structure located_structure
            {
            get { return new located_structure(getEntityInstance("LOCATED_STRUCTURE")); }
            }
        public bool is_zone_of_structure { get { return IsADBEntity("zone_of_structure"); } }
        public zone_of_structure zone_of_structure
            {
            get { return new zone_of_structure(getEntityInstance("ZONE_OF_STRUCTURE")); }
            }
        public bool is_zone_of_building { get { return IsADBEntity("zone_of_building"); } }
        public zone_of_building zone_of_building
            {
            get { return new zone_of_building(getEntityInstance("ZONE_OF_BUILDING")); }
            }
        public bool is_located_assembly { get { return IsADBEntity("located_assembly"); } }
        public located_assembly located_assembly
            {
            get { return new located_assembly(getEntityInstance("LOCATED_ASSEMBLY")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_model : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_model(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_model(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_model() : base(null) { }

        public bool is_shell_based_surface_model { get { return IsADBEntity("shell_based_surface_model"); } }
        public shell_based_surface_model shell_based_surface_model
            {
            set { putEntityInstance("SHELL_BASED_SURFACE_MODEL", value); }
            get { return new shell_based_surface_model(getEntityInstance("SHELL_BASED_SURFACE_MODEL")); } 
            }
        public bool is_face_based_surface_model { get { return IsADBEntity("face_based_surface_model"); } }
        public face_based_surface_model face_based_surface_model
            {
            set { putEntityInstance("FACE_BASED_SURFACE_MODEL", value); }
            get { return new face_based_surface_model(getEntityInstance("FACE_BASED_SURFACE_MODEL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_model_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_model_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_model_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_model_get() : base(null) { }

        public bool is_shell_based_surface_model { get { return IsADBEntity("shell_based_surface_model"); } }
        public shell_based_surface_model shell_based_surface_model
            {
            get { return new shell_based_surface_model(getEntityInstance("SHELL_BASED_SURFACE_MODEL")); }
            }
        public bool is_face_based_surface_model { get { return IsADBEntity("face_based_surface_model"); } }
        public face_based_surface_model face_based_surface_model
            {
            get { return new face_based_surface_model(getEntityInstance("FACE_BASED_SURFACE_MODEL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class transformation : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation() : base(null) { }

        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            set { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", value); }
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); } 
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            set { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", value); }
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class transformation_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation_get() : base(null) { }

        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); }
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class trimming_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select() : base(null) { }

        public bool is_cartesian_point { get { return IsADBEntity("cartesian_point"); } }
        public cartesian_point cartesian_point
            {
            set { putEntityInstance("CARTESIAN_POINT", value); }
            get { return new cartesian_point(getEntityInstance("CARTESIAN_POINT")); } 
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            set { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class trimming_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select_get() : base(null) { }

        public bool is_cartesian_point { get { return IsADBEntity("cartesian_point"); } }
        public cartesian_point cartesian_point
            {
            get { return new cartesian_point(getEntityInstance("CARTESIAN_POINT")); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class unit : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit() : base(null) { }

        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            set { putEntityInstance("NAMED_UNIT", value); }
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); } 
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            set { putEntityInstance("DERIVED_UNIT", value); }
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class unit_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit_get() : base(null) { }

        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); }
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class vector_or_direction : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction() : base(null) { }

        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            set { putEntityInstance("DIRECTION", value); }
            get { return new direction(getEntityInstance("DIRECTION")); } 
            }
        public bool is_vector { get { return IsADBEntity("vector"); } }
        public vector vector
            {
            set { putEntityInstance("VECTOR", value); }
            get { return new vector(getEntityInstance("VECTOR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class vector_or_direction_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction_get() : base(null) { }

        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            get { return new direction(getEntityInstance("DIRECTION")); }
            }
        public bool is_vector { get { return IsADBEntity("vector"); } }
        public vector vector
            {
            get { return new vector(getEntityInstance("VECTOR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class wireframe_model : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public wireframe_model(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public wireframe_model(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public wireframe_model() : base(null) { }

        public bool is_shell_based_wireframe_model { get { return IsADBEntity("shell_based_wireframe_model"); } }
        public shell_based_wireframe_model shell_based_wireframe_model
            {
            set { putEntityInstance("SHELL_BASED_WIREFRAME_MODEL", value); }
            get { return new shell_based_wireframe_model(getEntityInstance("SHELL_BASED_WIREFRAME_MODEL")); } 
            }
        public bool is_edge_based_wireframe_model { get { return IsADBEntity("edge_based_wireframe_model"); } }
        public edge_based_wireframe_model edge_based_wireframe_model
            {
            set { putEntityInstance("EDGE_BASED_WIREFRAME_MODEL", value); }
            get { return new edge_based_wireframe_model(getEntityInstance("EDGE_BASED_WIREFRAME_MODEL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class wireframe_model_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public wireframe_model_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public wireframe_model_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public wireframe_model_get() : base(null) { }

        public bool is_shell_based_wireframe_model { get { return IsADBEntity("shell_based_wireframe_model"); } }
        public shell_based_wireframe_model shell_based_wireframe_model
            {
            get { return new shell_based_wireframe_model(getEntityInstance("SHELL_BASED_WIREFRAME_MODEL")); }
            }
        public bool is_edge_based_wireframe_model { get { return IsADBEntity("edge_based_wireframe_model"); } }
        public edge_based_wireframe_model edge_based_wireframe_model
            {
            get { return new edge_based_wireframe_model(getEntityInstance("EDGE_BASED_WIREFRAME_MODEL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };

    //
    // Unnamed aggregations
    //
    public class set_of_versioned_action_request : List<versioned_action_request> { }
    class set_of_versioned_action_requestSerializer : AggrSerializerInstance<versioned_action_request, set_of_versioned_action_request> { }
    public class set_of_document_usage_constraint : List<document_usage_constraint> { }
    class set_of_document_usage_constraintSerializer : AggrSerializerInstance<document_usage_constraint, set_of_document_usage_constraint> { }
    public class set_of_element : List<element> { }
    class set_of_elementSerializer : AggrSerializerInstance<element, set_of_element> { }
    public class set_of_node : List<node> { }
    class set_of_nodeSerializer : AggrSerializerInstance<node, set_of_node> { }
    public class set_of_assembly : List<assembly> { }
    class set_of_assemblySerializer : AggrSerializerInstance<assembly, set_of_assembly> { }
    public class set_of_analysis_result : List<analysis_result> { }
    class set_of_analysis_resultSerializer : AggrSerializerInstance<analysis_result, set_of_analysis_result> { }
    public class set_of_analysis_results_set_combined : List<analysis_results_set_combined> { }
    class set_of_analysis_results_set_combinedSerializer : AggrSerializerInstance<analysis_results_set_combined, set_of_analysis_results_set_combined> { }
    public class list_of_ratio_measure_with_unit : List<ratio_measure_with_unit> { }
    class list_of_ratio_measure_with_unitSerializer : AggrSerializerInstance<ratio_measure_with_unit, list_of_ratio_measure_with_unit> { }
    public class set_of_assembly_component_select : List<assembly_component_select> { }
    class set_of_assembly_component_selectSerializer : AggrSerializerSelect<assembly_component_select, set_of_assembly_component_select> { }
    public class set_of_structural_frame_process : List<structural_frame_process> { }
    class set_of_structural_frame_processSerializer : AggrSerializerInstance<structural_frame_process, set_of_structural_frame_process> { }
    public class bag_of_identifier : List<TextValue> { }
    class bag_of_identifierSerializer : AggrSerializerText<TextValue, bag_of_identifier> { public bag_of_identifierSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class bag_of_label : List<TextValue> { }
    class bag_of_labelSerializer : AggrSerializerText<TextValue, bag_of_label> { public bag_of_labelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class set_of_located_assembly : List<located_assembly> { }
    class set_of_located_assemblySerializer : AggrSerializerInstance<located_assembly, set_of_located_assembly> { }
    public class set_of_functional_role : List<functional_role> { }
    class set_of_functional_roleSerializer : AggrSerializerInstance<functional_role, set_of_functional_role> { }
    public class set_of_design_criterion : List<design_criterion> { }
    class set_of_design_criterionSerializer : AggrSerializerInstance<design_criterion, set_of_design_criterion> { }
    public class set_of_assembly_design : List<assembly_design> { }
    class set_of_assembly_designSerializer : AggrSerializerInstance<assembly_design, set_of_assembly_design> { }
    public class set_of_assembly_design_structural_member : List<assembly_design_structural_member> { }
    class set_of_assembly_design_structural_memberSerializer : AggrSerializerInstance<assembly_design_structural_member, set_of_assembly_design_structural_member> { }
    public class set_of_assembly_design_structural_connection : List<assembly_design_structural_connection> { }
    class set_of_assembly_design_structural_connectionSerializer : AggrSerializerInstance<assembly_design_structural_connection, set_of_assembly_design_structural_connection> { }
    public class set_of_restraint : List<restraint> { }
    class set_of_restraintSerializer : AggrSerializerInstance<restraint, set_of_restraint> { }
    public class set_of_effective_buckling_length : List<effective_buckling_length> { }
    class set_of_effective_buckling_lengthSerializer : AggrSerializerInstance<effective_buckling_length, set_of_effective_buckling_length> { }
    public class set_of_member_beam_type : List<member_beam_type> { }
    class set_of_member_beam_typeSerializer : AggrSerializerEnum<member_beam_type, set_of_member_beam_type> { public set_of_member_beam_typeSerializer() : base(EnumNames.member_beam_type_, ifcengine.sdaiENUM) { } };
    //class set_of_member_beam_typeSerializer : AggrSerializerEnum<member_beam_type, set_of_member_beam_type> { public set_of_member_beam_typeSerializer() : base(EnumNames.member_beam_type_, ifcengine.sdaiENUM) { } };
    public class set_of_member_beam_role : List<member_beam_role> { }
    class set_of_member_beam_roleSerializer : AggrSerializerEnum<member_beam_role, set_of_member_beam_role> { public set_of_member_beam_roleSerializer() : base(EnumNames.member_beam_role_, ifcengine.sdaiENUM) { } };
    //class set_of_member_beam_roleSerializer : AggrSerializerEnum<member_beam_role, set_of_member_beam_role> { public set_of_member_beam_roleSerializer() : base(EnumNames.member_beam_role_, ifcengine.sdaiENUM) { } };
    public class set_of_member_column_type : List<member_column_type> { }
    class set_of_member_column_typeSerializer : AggrSerializerEnum<member_column_type, set_of_member_column_type> { public set_of_member_column_typeSerializer() : base(EnumNames.member_column_type_, ifcengine.sdaiENUM) { } };
    //class set_of_member_column_typeSerializer : AggrSerializerEnum<member_column_type, set_of_member_column_type> { public set_of_member_column_typeSerializer() : base(EnumNames.member_column_type_, ifcengine.sdaiENUM) { } };
    public class set_of_assembly_design_structural_member_linear : List<assembly_design_structural_member_linear> { }
    class set_of_assembly_design_structural_member_linearSerializer : AggrSerializerInstance<assembly_design_structural_member_linear, set_of_assembly_design_structural_member_linear> { }
    public class set_of_representation_item : List<representation_item> { }
    class set_of_representation_itemSerializer : AggrSerializerInstance<representation_item, set_of_representation_item> { }
    public class list_of_direction : List<direction> { }
    class list_of_directionSerializer : AggrSerializerInstance<direction, list_of_direction> { }
    public class list_of_cartesian_point : List<cartesian_point> { }
    class list_of_cartesian_pointSerializer : AggrSerializerInstance<cartesian_point, list_of_cartesian_point> { }
    public class array_of_cartesian_point : List<cartesian_point> { }
    class array_of_cartesian_pointSerializer : AggrSerializerInstance<cartesian_point, array_of_cartesian_point> { }
    public class ListOfIntValue : List<IntValue> { }
    class ListOfIntValueSerializer : AggrSerializer_IntValue<IntValue, ListOfIntValue> { }
    public class list_of_parameter_value : List<double> { }
    class list_of_parameter_valueSerializer : AggrSerializer_double<double, list_of_parameter_value> { }
    public class list_of_list_of_cartesian_point : List<list_of_cartesian_point> { }
    class list_of_list_of_cartesian_pointSerializer : AggrSerializerAggr<list_of_cartesian_point, list_of_cartesian_pointSerializer, list_of_list_of_cartesian_point> { }
    public class array_of_array_of_cartesian_point : List<array_of_cartesian_point> { }
    class array_of_array_of_cartesian_pointSerializer : AggrSerializerAggr<array_of_cartesian_point, array_of_cartesian_pointSerializer, array_of_array_of_cartesian_point> { }
    public class list_of_list_of_list_of_cartesian_point : List<list_of_list_of_cartesian_point> { }
    class list_of_list_of_list_of_cartesian_pointSerializer : AggrSerializerAggr<list_of_list_of_cartesian_point, list_of_list_of_cartesian_pointSerializer, list_of_list_of_list_of_cartesian_point> { }
    public class array_of_array_of_array_of_cartesian_point : List<array_of_array_of_cartesian_point> { }
    class array_of_array_of_array_of_cartesian_pointSerializer : AggrSerializerAggr<array_of_array_of_cartesian_point, array_of_array_of_cartesian_pointSerializer, array_of_array_of_array_of_cartesian_point> { }
    public class list_of_measure_with_unit : List<measure_with_unit> { }
    class list_of_measure_with_unitSerializer : AggrSerializerInstance<measure_with_unit, list_of_measure_with_unit> { }
    public class list_of_boundary_condition_spring_linear : List<boundary_condition_spring_linear> { }
    class list_of_boundary_condition_spring_linearSerializer : AggrSerializerInstance<boundary_condition_spring_linear, list_of_boundary_condition_spring_linear> { }
    public class list_of_composite_curve_segment : List<composite_curve_segment> { }
    class list_of_composite_curve_segmentSerializer : AggrSerializerInstance<composite_curve_segment, list_of_composite_curve_segment> { }
    public class set_of_surface : List<surface> { }
    class set_of_surfaceSerializer : AggrSerializerInstance<surface, set_of_surface> { }
    public class list_of_pcurve_or_surface : List<pcurve_or_surface> { }
    class list_of_pcurve_or_surfaceSerializer : AggrSerializerSelect<pcurve_or_surface, list_of_pcurve_or_surface> { }
    public class set_of_oriented_closed_shell : List<oriented_closed_shell> { }
    class set_of_oriented_closed_shellSerializer : AggrSerializerInstance<oriented_closed_shell, set_of_oriented_closed_shell> { }
    public class list_of_structure : List<structure> { }
    class list_of_structureSerializer : AggrSerializerInstance<structure, list_of_structure> { }
    public class list_of_building : List<building> { }
    class list_of_buildingSerializer : AggrSerializerInstance<building, list_of_building> { }
    public class list_of_length_measure : List<double> { }
    class list_of_length_measureSerializer : AggrSerializer_double<double, list_of_length_measure> { }
    public class set_of_face : List<face> { }
    class set_of_faceSerializer : AggrSerializerInstance<face, set_of_face> { }
    public class bag_of_composite_curve : List<composite_curve> { }
    class bag_of_composite_curveSerializer : AggrSerializerInstance<composite_curve, bag_of_composite_curve> { }
    public class set_of_edge : List<edge> { }
    class set_of_edgeSerializer : AggrSerializerInstance<edge, set_of_edge> { }
    public class set_of_boundary_curve : List<boundary_curve> { }
    class set_of_boundary_curveSerializer : AggrSerializerInstance<boundary_curve, set_of_boundary_curve> { }
    public class set_of_derived_unit_element : List<derived_unit_element> { }
    class set_of_derived_unit_elementSerializer : AggrSerializerInstance<derived_unit_element, set_of_derived_unit_element> { }
    public class list_of_assembly_design : List<assembly_design> { }
    class list_of_assembly_designSerializer : AggrSerializerInstance<assembly_design, list_of_assembly_design> { }
    public class list_of_coord_system : List<coord_system> { }
    class list_of_coord_systemSerializer : AggrSerializerInstance<coord_system, list_of_coord_system> { }
    public class set_of_design_part : List<design_part> { }
    class set_of_design_partSerializer : AggrSerializerInstance<design_part, set_of_design_part> { }
    public class list_of_double : List<double> { }
    class list_of_doubleSerializer : AggrSerializer_double<double, list_of_double> { }
    public class list_of_product_item_select : List<product_item_select> { }
    class list_of_product_item_selectSerializer : AggrSerializerSelect<product_item_select, list_of_product_item_select> { }
    public class set_of_document_representation_type : List<document_representation_type> { }
    class set_of_document_representation_typeSerializer : AggrSerializerInstance<document_representation_type, set_of_document_representation_type> { }
    public class set_of_connected_edge_set : List<connected_edge_set> { }
    class set_of_connected_edge_setSerializer : AggrSerializerInstance<connected_edge_set, set_of_connected_edge_set> { }
    public class list_of_oriented_edge : List<oriented_edge> { }
    class list_of_oriented_edgeSerializer : AggrSerializerInstance<oriented_edge, list_of_oriented_edge> { }
    public class set_of_element_node_connectivity : List<element_node_connectivity> { }
    class set_of_element_node_connectivitySerializer : AggrSerializerInstance<element_node_connectivity, set_of_element_node_connectivity> { }
    public class list_of_section_profile : List<section_profile> { }
    class list_of_section_profileSerializer : AggrSerializerInstance<section_profile, list_of_section_profile> { }
    public class list_of_point_on_curve : List<point_on_curve> { }
    class list_of_point_on_curveSerializer : AggrSerializerInstance<point_on_curve, list_of_point_on_curve> { }
    public class list_of_orientation_select : List<orientation_select> { }
    class list_of_orientation_selectSerializer : AggrSerializerSelect<orientation_select, list_of_orientation_select> { }
    public class bag_of_element_node_connectivity : List<element_node_connectivity> { }
    class bag_of_element_node_connectivitySerializer : AggrSerializerInstance<element_node_connectivity, bag_of_element_node_connectivity> { }
    public class array_of_double : List<double> { }
    class array_of_doubleSerializer : AggrSerializer_double<double, array_of_double> { }
    public class array_of_array_of_double : List<array_of_double> { }
    class array_of_array_of_doubleSerializer : AggrSerializerAggr<array_of_double, array_of_doubleSerializer, array_of_array_of_double> { }
    public class set_of_face_bound : List<face_bound> { }
    class set_of_face_boundSerializer : AggrSerializerInstance<face_bound, set_of_face_bound> { }
    public class set_of_connected_face_set : List<connected_face_set> { }
    class set_of_connected_face_setSerializer : AggrSerializerInstance<connected_face_set, set_of_connected_face_set> { }
    public class list_of_fastener : List<fastener> { }
    class list_of_fastenerSerializer : AggrSerializerInstance<fastener, list_of_fastener> { }
    public class list_of_length_measure_with_unit : List<length_measure_with_unit> { }
    class list_of_length_measure_with_unitSerializer : AggrSerializerInstance<length_measure_with_unit, list_of_length_measure_with_unit> { }
    public class set_of_located_feature : List<located_feature> { }
    class set_of_located_featureSerializer : AggrSerializerInstance<located_feature, set_of_located_feature> { }
    public class list_of_text : List<TextValue> { }
    class list_of_textSerializer : AggrSerializerText<TextValue, list_of_text> { public list_of_textSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class list_of_point : List<point> { }
    class list_of_pointSerializer : AggrSerializerInstance<point, list_of_point> { }
    public class set_of_point : List<point> { }
    class set_of_pointSerializer : AggrSerializerInstance<point, set_of_point> { }
    public class set_of_item_reference : List<item_reference> { }
    class set_of_item_referenceSerializer : AggrSerializerInstance<item_reference, set_of_item_reference> { }
    public class set_of_geometric_set_select : List<geometric_set_select> { }
    class set_of_geometric_set_selectSerializer : AggrSerializerSelect<geometric_set_select, set_of_geometric_set_select> { }
    public class set_of_representation : List<representation> { }
    class set_of_representationSerializer : AggrSerializerInstance<representation, set_of_representation> { }
    public class set_of_uncertainty_measure_with_unit : List<uncertainty_measure_with_unit> { }
    class set_of_uncertainty_measure_with_unitSerializer : AggrSerializerInstance<uncertainty_measure_with_unit, set_of_uncertainty_measure_with_unit> { }
    public class set_of_unit : List<unit> { }
    class set_of_unitSerializer : AggrSerializerSelect<unit, set_of_unit> { }
    public class set_of_gridline : List<gridline> { }
    class set_of_gridlineSerializer : AggrSerializerInstance<gridline, set_of_gridline> { }
    public class set_of_grid_level : List<grid_level> { }
    class set_of_grid_levelSerializer : AggrSerializerInstance<grid_level, set_of_grid_level> { }
    public class list_of_positive_length_measure_with_unit : List<positive_length_measure_with_unit> { }
    class list_of_positive_length_measure_with_unitSerializer : AggrSerializerInstance<positive_length_measure_with_unit, list_of_positive_length_measure_with_unit> { }
    public class list_of_plane_angle_measure_with_unit : List<plane_angle_measure_with_unit> { }
    class list_of_plane_angle_measure_with_unitSerializer : AggrSerializerInstance<plane_angle_measure_with_unit, list_of_plane_angle_measure_with_unit> { }
    public class set_of_select_analysis_item : List<select_analysis_item> { }
    class set_of_select_analysis_itemSerializer : AggrSerializerSelect<select_analysis_item, set_of_select_analysis_item> { }
    public class set_of_select_design_item : List<select_design_item> { }
    class set_of_select_design_itemSerializer : AggrSerializerSelect<select_design_item, set_of_select_design_item> { }
    public class set_of_select_generic_item : List<select_generic_item> { }
    class set_of_select_generic_itemSerializer : AggrSerializerSelect<select_generic_item, set_of_select_generic_item> { }
    public class set_of_select_physical_item : List<select_physical_item> { }
    class set_of_select_physical_itemSerializer : AggrSerializerSelect<select_physical_item, set_of_select_physical_item> { }
    public class set_of_select_project_definition_item : List<select_project_definition_item> { }
    class set_of_select_project_definition_itemSerializer : AggrSerializerSelect<select_project_definition_item, set_of_select_project_definition_item> { }
    public class set_of_select_structural_item : List<select_structural_item> { }
    class set_of_select_structural_itemSerializer : AggrSerializerSelect<select_structural_item, set_of_select_structural_item> { }
    public class set_of_item_reference_library : List<item_reference_library> { }
    class set_of_item_reference_librarySerializer : AggrSerializerInstance<item_reference_library, set_of_item_reference_library> { }
    public class set_of_item_reference_proprietary : List<item_reference_proprietary> { }
    class set_of_item_reference_proprietarySerializer : AggrSerializerInstance<item_reference_proprietary, set_of_item_reference_proprietary> { }
    public class set_of_item_reference_standard : List<item_reference_standard> { }
    class set_of_item_reference_standardSerializer : AggrSerializerInstance<item_reference_standard, set_of_item_reference_standard> { }
    public class set_of_design_joint_system : List<design_joint_system> { }
    class set_of_design_joint_systemSerializer : AggrSerializerInstance<design_joint_system, set_of_design_joint_system> { }
    public class set_of_located_joint_system : List<located_joint_system> { }
    class set_of_located_joint_systemSerializer : AggrSerializerInstance<located_joint_system, set_of_located_joint_system> { }
    public class list_of_chemical_mechanism : List<chemical_mechanism> { }
    class list_of_chemical_mechanismSerializer : AggrSerializerInstance<chemical_mechanism, list_of_chemical_mechanism> { }
    public class list_of_joint_system : List<joint_system> { }
    class list_of_joint_systemSerializer : AggrSerializerInstance<joint_system, list_of_joint_system> { }
    public class set_of_analysis_method : List<analysis_method> { }
    class set_of_analysis_methodSerializer : AggrSerializerInstance<analysis_method, set_of_analysis_method> { }
    public class set_of_load : List<load> { }
    class set_of_loadSerializer : AggrSerializerInstance<load, set_of_load> { }
    public class set_of_applied_load_static_pressure : List<applied_load_static_pressure> { }
    class set_of_applied_load_static_pressureSerializer : AggrSerializerInstance<applied_load_static_pressure, set_of_applied_load_static_pressure> { }
    public class set_of_load_combination_occurrence : List<load_combination_occurrence> { }
    class set_of_load_combination_occurrenceSerializer : AggrSerializerInstance<load_combination_occurrence, set_of_load_combination_occurrence> { }
    public class set_of_grid_offset : List<grid_offset> { }
    class set_of_grid_offsetSerializer : AggrSerializerInstance<grid_offset, set_of_grid_offset> { }
    public class set_of_located_part : List<located_part> { }
    class set_of_located_partSerializer : AggrSerializerInstance<located_part, set_of_located_part> { }
    public class set_of_located_feature_joint_dependent : List<located_feature_joint_dependent> { }
    class set_of_located_feature_joint_dependentSerializer : AggrSerializerInstance<located_feature_joint_dependent, set_of_located_feature_joint_dependent> { }
    public class set_of_located_feature_for_located_part : List<located_feature_for_located_part> { }
    class set_of_located_feature_for_located_partSerializer : AggrSerializerInstance<located_feature_for_located_part, set_of_located_feature_for_located_part> { }
    public class set_of_managed_data_item : List<managed_data_item> { }
    class set_of_managed_data_itemSerializer : AggrSerializerInstance<managed_data_item, set_of_managed_data_item> { }
    public class set_of_managed_data_group : List<managed_data_group> { }
    class set_of_managed_data_groupSerializer : AggrSerializerInstance<managed_data_group, set_of_managed_data_group> { }
    public class set_of_managed_data_transaction : List<managed_data_transaction> { }
    class set_of_managed_data_transactionSerializer : AggrSerializerInstance<managed_data_transaction, set_of_managed_data_transaction> { }
    public class list_of_managed_data_transaction : List<managed_data_transaction> { }
    class list_of_managed_data_transactionSerializer : AggrSerializerInstance<managed_data_transaction, list_of_managed_data_transaction> { }
    public class list_of_material_representation : List<material_representation> { }
    class list_of_material_representationSerializer : AggrSerializerInstance<material_representation, list_of_material_representation> { }
    public class list_of_placement : List<placement> { }
    class list_of_placementSerializer : AggrSerializerInstance<placement, list_of_placement> { }
    public class set_of_value_qualifier : List<value_qualifier> { }
    class set_of_value_qualifierSerializer : AggrSerializerSelect<value_qualifier, set_of_value_qualifier> { }
    public class list_of_person_and_organization : List<person_and_organization> { }
    class list_of_person_and_organizationSerializer : AggrSerializerInstance<person_and_organization, list_of_person_and_organization> { }
    public class set_of_organization : List<organization> { }
    class set_of_organizationSerializer : AggrSerializerInstance<organization, set_of_organization> { }
    public class list_of_label : List<TextValue> { }
    class list_of_labelSerializer : AggrSerializerText<TextValue, list_of_label> { public list_of_labelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class set_of_person : List<person> { }
    class set_of_personSerializer : AggrSerializerInstance<person, set_of_person> { }
    public class list_of_calendar_date : List<calendar_date> { }
    class list_of_calendar_dateSerializer : AggrSerializerInstance<calendar_date, list_of_calendar_date> { }
    public class set_of_structural_frame_item_priced : List<structural_frame_item_priced> { }
    class set_of_structural_frame_item_pricedSerializer : AggrSerializerInstance<structural_frame_item_priced, set_of_structural_frame_item_priced> { }
    public class set_of_project_plan_item : List<project_plan_item> { }
    class set_of_project_plan_itemSerializer : AggrSerializerInstance<project_plan_item, set_of_project_plan_item> { }
    public class set_of_project_organization : List<project_organization> { }
    class set_of_project_organizationSerializer : AggrSerializerInstance<project_organization, set_of_project_organization> { }
    public class set_of_product_item_select : List<product_item_select> { }
    class set_of_product_item_selectSerializer : AggrSerializerSelect<product_item_select, set_of_product_item_select> { }
    public class list_of_list_of_double : List<list_of_double> { }
    class list_of_list_of_doubleSerializer : AggrSerializerAggr<list_of_double, list_of_doubleSerializer, list_of_list_of_double> { }
    public class list_of_list_of_list_of_double : List<list_of_list_of_double> { }
    class list_of_list_of_list_of_doubleSerializer : AggrSerializerAggr<list_of_list_of_double, list_of_list_of_doubleSerializer, list_of_list_of_list_of_double> { }
    public class array_of_array_of_array_of_double : List<array_of_array_of_double> { }
    class array_of_array_of_array_of_doubleSerializer : AggrSerializerAggr<array_of_array_of_double, array_of_array_of_doubleSerializer, array_of_array_of_array_of_double> { }
    public class list_of_surface_patch : List<surface_patch> { }
    class list_of_surface_patchSerializer : AggrSerializerInstance<surface_patch, list_of_surface_patch> { }
    public class list_of_list_of_surface_patch : List<list_of_surface_patch> { }
    class list_of_list_of_surface_patchSerializer : AggrSerializerAggr<list_of_surface_patch, list_of_surface_patchSerializer, list_of_list_of_surface_patch> { }
    public class list_of_release_spring_linear : List<release_spring_linear> { }
    class list_of_release_spring_linearSerializer : AggrSerializerInstance<release_spring_linear, list_of_release_spring_linear> { }
    public class set_of_mapped_item : List<mapped_item> { }
    class set_of_mapped_itemSerializer : AggrSerializerInstance<mapped_item, set_of_mapped_item> { }
    public class set_of_design_result : List<design_result> { }
    class set_of_design_resultSerializer : AggrSerializerInstance<design_result, set_of_design_result> { }
    public class list_of_bounded_curve : List<bounded_curve> { }
    class list_of_bounded_curveSerializer : AggrSerializerInstance<bounded_curve, list_of_bounded_curve> { }
    public class array_of_length_measure_with_unit : List<length_measure_with_unit> { }
    class array_of_length_measure_with_unitSerializer : AggrSerializerInstance<length_measure_with_unit, array_of_length_measure_with_unit> { }
    public class array_of_modulus_measure_with_unit : List<modulus_measure_with_unit> { }
    class array_of_modulus_measure_with_unitSerializer : AggrSerializerInstance<modulus_measure_with_unit, array_of_modulus_measure_with_unit> { }
    public class set_of_shell : List<shell> { }
    class set_of_shellSerializer : AggrSerializerSelect<shell, set_of_shell> { }
    public class set_of_group_assignment : List<group_assignment> { }
    class set_of_group_assignmentSerializer : AggrSerializerInstance<group_assignment, set_of_group_assignment> { }
    public class bag_of_rectangular_composite_surface : List<rectangular_composite_surface> { }
    class bag_of_rectangular_composite_surfaceSerializer : AggrSerializerInstance<rectangular_composite_surface, bag_of_rectangular_composite_surface> { }
    public class list_of_coating_method : List<coating_method> { }
    class list_of_coating_methodSerializer : AggrSerializerEnum<coating_method, list_of_coating_method> { public list_of_coating_methodSerializer() : base(EnumNames.coating_method_, ifcengine.sdaiENUM) { } };
    //class list_of_coating_methodSerializer : AggrSerializerEnum<coating_method, list_of_coating_method> { public list_of_coating_methodSerializer() : base(EnumNames.coating_method_, ifcengine.sdaiENUM) { } };
    public class list_of_coating : List<coating> { }
    class list_of_coatingSerializer : AggrSerializerInstance<coating, list_of_coating> { }
    public class set_of_trimming_select : List<trimming_select> { }
    class set_of_trimming_selectSerializer : AggrSerializerSelect<trimming_select, set_of_trimming_select> { }
    public class set_of_joint_system_welded : List<joint_system_welded> { }
    class set_of_joint_system_weldedSerializer : AggrSerializerInstance<joint_system_welded, set_of_joint_system_welded> { }
    public class set_of_loop : List<loop> { }
    class set_of_loopSerializer : AggrSerializerInstance<loop, set_of_loop> { }
    public class set_of_zone_of_structure_sequence_lot : List<zone_of_structure_sequence_lot> { }
    class set_of_zone_of_structure_sequence_lotSerializer : AggrSerializerInstance<zone_of_structure_sequence_lot, set_of_zone_of_structure_sequence_lot> { }

    //
    // Entities
    // 


    /// <summary>
    /// Provides utility methods to interact with an instnace of action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action(SdaiInstance instance) : base(instance) { }
        public action() : base(0) { }

        public static implicit operator action(SdaiInstance instance) => new action(instance);

        /// <summary>
        /// Create new instace of action and returns object of this class to interact with
        /// </summary>
        public static new action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public action_method chosen_method 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, out inst); return new action_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_directive
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_directive : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_directive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_directive(SdaiInstance instance) : base(instance) { }
        public action_directive() : base(0) { }

        public static implicit operator action_directive(SdaiInstance instance) => new action_directive(instance);

        /// <summary>
        /// Create new instace of action_directive and returns object of this class to interact with
        /// </summary>
        public static new action_directive Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_directive"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue analysis
            {
            get { return get_string("analysis", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis", ifcengine.sdaiSTRING, value); }
            }
        public TextValue comment
            {
            get { return get_string("comment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "comment", ifcengine.sdaiSTRING, value); }
            }
        public set_of_versioned_action_request requests { get { return (new set_of_versioned_action_requestSerializer()).FromAttr(m_instance, "requests"); } }
        public void put_requests(IEnumerable<versioned_action_request> lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }
        public void put_requests_untyped(IEnumerable lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }

        protected override TextValue WrapperEntityName() { return "action_directive"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method(SdaiInstance instance) : base(instance) { }
        public action_method() : base(0) { }

        public static implicit operator action_method(SdaiInstance instance) => new action_method(instance);

        /// <summary>
        /// Create new instace of action_method and returns object of this class to interact with
        /// </summary>
        public static new action_method Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue consequence
            {
            get { return get_string("consequence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "consequence", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "action_method"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class address : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public address(SdaiInstance instance) : base(instance) { }
        public address() : base(0) { }

        public static implicit operator address(SdaiInstance instance) => new address(instance);

        /// <summary>
        /// Create new instace of address and returns object of this class to interact with
        /// </summary>
        public static new address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "address"); Debug.Assert(inst != 0); return inst; }

        public TextValue internal_location
            {
            get { return get_string("internal_location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "internal_location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue street_number
            {
            get { return get_string("street_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "street_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue street
            {
            get { return get_string("street", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "street", ifcengine.sdaiSTRING, value); }
            }
        public TextValue postal_box
            {
            get { return get_string("postal_box", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "postal_box", ifcengine.sdaiSTRING, value); }
            }
        public TextValue town
            {
            get { return get_string("town", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "town", ifcengine.sdaiSTRING, value); }
            }
        public TextValue region
            {
            get { return get_string("region", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "region", ifcengine.sdaiSTRING, value); }
            }
        public TextValue postal_code
            {
            get { return get_string("postal_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "postal_code", ifcengine.sdaiSTRING, value); }
            }
        public TextValue country
            {
            get { return get_string("country", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "country", ifcengine.sdaiSTRING, value); }
            }
        public TextValue facsimile_number
            {
            get { return get_string("facsimile_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "facsimile_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue telephone_number
            {
            get { return get_string("telephone_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "telephone_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue electronic_mail_address
            {
            get { return get_string("electronic_mail_address", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "electronic_mail_address", ifcengine.sdaiSTRING, value); }
            }
        public TextValue telex_number
            {
            get { return get_string("telex_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "telex_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue url { get { return get_string("url", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_method
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_method : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_method(SdaiInstance instance) : base(instance) { }
        public analysis_method() : base(0) { }

        public static implicit operator analysis_method(SdaiInstance instance) => new analysis_method(instance);

        /// <summary>
        /// Create new instace of analysis_method and returns object of this class to interact with
        /// </summary>
        public static new analysis_method Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_method"); Debug.Assert(inst != 0); return inst; }

        public TextValue analysis_name
            {
            get { return get_string("analysis_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue analysis_assumptions
            {
            get { return get_string("analysis_assumptions", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis_assumptions", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_method"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_method_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_method_documented : analysis_method
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_method_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_method_documented(SdaiInstance instance) : base(instance) { }
        public analysis_method_documented() : base(0) { }

        public static implicit operator analysis_method_documented(SdaiInstance instance) => new analysis_method_documented(instance);

        /// <summary>
        /// Create new instace of analysis_method_documented and returns object of this class to interact with
        /// </summary>
        public static new analysis_method_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_method_documented"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_usage_constraint documented_constraints { get { return (new set_of_document_usage_constraintSerializer()).FromAttr(m_instance, "documented_constraints"); } }
        public void put_documented_constraints(IEnumerable<document_usage_constraint> lst) { (new set_of_document_usage_constraintSerializer()).ToSdaiAggr(lst, m_instance, "documented_constraints"); }
        public void put_documented_constraints_untyped(IEnumerable lst) { (new set_of_document_usage_constraintSerializer()).ToSdaiAggr(lst, m_instance, "documented_constraints"); }

        protected override TextValue WrapperEntityName() { return "analysis_method_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_method_dynamic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_method_dynamic : analysis_method
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_method_dynamic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_method_dynamic(SdaiInstance instance) : base(instance) { }
        public analysis_method_dynamic() : base(0) { }

        public static implicit operator analysis_method_dynamic(SdaiInstance instance) => new analysis_method_dynamic(instance);

        /// <summary>
        /// Create new instace of analysis_method_dynamic and returns object of this class to interact with
        /// </summary>
        public static new analysis_method_dynamic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_method_dynamic"); Debug.Assert(inst != 0); return inst; }

        public dynamic_analysis_type? analysis_type 
            { 
            get { var str = get_string("analysis_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.dynamic_analysis_type_); return EnumValue<dynamic_analysis_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<dynamic_analysis_type>.FromValue(value.Value, EnumNames.dynamic_analysis_type_); ifcengine.sdaiPutAttrBN(m_instance, "analysis_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_method_dynamic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_method_pseudo_dynamic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_method_pseudo_dynamic : analysis_method
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_method_pseudo_dynamic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_method_pseudo_dynamic(SdaiInstance instance) : base(instance) { }
        public analysis_method_pseudo_dynamic() : base(0) { }

        public static implicit operator analysis_method_pseudo_dynamic(SdaiInstance instance) => new analysis_method_pseudo_dynamic(instance);

        /// <summary>
        /// Create new instace of analysis_method_pseudo_dynamic and returns object of this class to interact with
        /// </summary>
        public static new analysis_method_pseudo_dynamic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_method_pseudo_dynamic"); Debug.Assert(inst != 0); return inst; }

        public TextValue analysis_type
            {
            get { return get_string("analysis_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_method_pseudo_dynamic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_method_static
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_method_static : analysis_method
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_method_static
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_method_static(SdaiInstance instance) : base(instance) { }
        public analysis_method_static() : base(0) { }

        public static implicit operator analysis_method_static(SdaiInstance instance) => new analysis_method_static(instance);

        /// <summary>
        /// Create new instace of analysis_method_static and returns object of this class to interact with
        /// </summary>
        public static new analysis_method_static Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_method_static"); Debug.Assert(inst != 0); return inst; }

        public static_analysis_type? analysis_type 
            { 
            get { var str = get_string("analysis_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.static_analysis_type_); return EnumValue<static_analysis_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<static_analysis_type>.FromValue(value.Value, EnumNames.static_analysis_type_); ifcengine.sdaiPutAttrBN(m_instance, "analysis_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_method_static"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model(SdaiInstance instance) : base(instance) { }
        public analysis_model() : base(0) { }

        public static implicit operator analysis_model(SdaiInstance instance) => new analysis_model(instance);

        /// <summary>
        /// Create new instace of analysis_model and returns object of this class to interact with
        /// </summary>
        public static new analysis_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model"); Debug.Assert(inst != 0); return inst; }

        public TextValue model_name
            {
            get { return get_string("model_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "model_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue model_description
            {
            get { return get_string("model_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "model_description", ifcengine.sdaiSTRING, value); }
            }
        public frame_type? model_type 
            { 
            get { var str = get_string("model_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.frame_type_); return EnumValue<frame_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<frame_type>.FromValue(value.Value, EnumNames.frame_type_); ifcengine.sdaiPutAttrBN(m_instance, "model_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public analysis_method method_of_analysis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "method_of_analysis", ifcengine.sdaiINSTANCE, out inst); return new analysis_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "method_of_analysis", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? coordinate_space_dimension
            {
            get { return get_IntValue("coordinate_space_dimension", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "coordinate_space_dimension", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public set_of_element component_elements { get { return (new set_of_elementSerializer()).FromAttr(m_instance, "component_elements"); } }
        public set_of_node component_nodes { get { return (new set_of_nodeSerializer()).FromAttr(m_instance, "component_nodes"); } }

        protected override TextValue WrapperEntityName() { return "analysis_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_2D : analysis_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_2D(SdaiInstance instance) : base(instance) { }
        public analysis_model_2D() : base(0) { }

        public static implicit operator analysis_model_2D(SdaiInstance instance) => new analysis_model_2D(instance);

        /// <summary>
        /// Create new instace of analysis_model_2D and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_2D"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "analysis_model_2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_3D : analysis_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_3D(SdaiInstance instance) : base(instance) { }
        public analysis_model_3D() : base(0) { }

        public static implicit operator analysis_model_3D(SdaiInstance instance) => new analysis_model_3D(instance);

        /// <summary>
        /// Create new instace of analysis_model_3D and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_3D"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "analysis_model_3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_child
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_child : analysis_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_child
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_child(SdaiInstance instance) : base(instance) { }
        public analysis_model_child() : base(0) { }

        public static implicit operator analysis_model_child(SdaiInstance instance) => new analysis_model_child(instance);

        /// <summary>
        /// Create new instace of analysis_model_child and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_child Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_child"); Debug.Assert(inst != 0); return inst; }

        public analysis_model parent_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_model_child"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_located
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_located : analysis_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_located
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_located(SdaiInstance instance) : base(instance) { }
        public analysis_model_located() : base(0) { }

        public static implicit operator analysis_model_located(SdaiInstance instance) => new analysis_model_located(instance);

        /// <summary>
        /// Create new instace of analysis_model_located and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_located Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_located"); Debug.Assert(inst != 0); return inst; }

        public coord_system model_coord_sys 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "model_coord_sys", ifcengine.sdaiINSTANCE, out inst); return new coord_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "model_coord_sys", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_model_located"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_mapping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_mapping : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_mapping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_mapping(SdaiInstance instance) : base(instance) { }
        public analysis_model_mapping() : base(0) { }

        public static implicit operator analysis_model_mapping(SdaiInstance instance) => new analysis_model_mapping(instance);

        /// <summary>
        /// Create new instace of analysis_model_mapping and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_mapping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_mapping"); Debug.Assert(inst != 0); return inst; }

        public analysis_model mapped_analysis_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapped_analysis_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapped_analysis_model", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_assembly represented_assemblies { get { return (new set_of_assemblySerializer()).FromAttr(m_instance, "represented_assemblies"); } }
        public void put_represented_assemblies(IEnumerable<assembly> lst) { (new set_of_assemblySerializer()).ToSdaiAggr(lst, m_instance, "represented_assemblies"); }
        public void put_represented_assemblies_untyped(IEnumerable lst) { (new set_of_assemblySerializer()).ToSdaiAggr(lst, m_instance, "represented_assemblies"); }

        protected override TextValue WrapperEntityName() { return "analysis_model_mapping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_model_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_model_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_model_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_model_relationship(SdaiInstance instance) : base(instance) { }
        public analysis_model_relationship() : base(0) { }

        public static implicit operator analysis_model_relationship(SdaiInstance instance) => new analysis_model_relationship(instance);

        /// <summary>
        /// Create new instace of analysis_model_relationship and returns object of this class to interact with
        /// </summary>
        public static new analysis_model_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_model_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue relationship_name
            {
            get { return get_string("relationship_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue relationship_description
            {
            get { return get_string("relationship_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_description", ifcengine.sdaiSTRING, value); }
            }
        public analysis_model relating_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_model", ifcengine.sdaiINSTANCE, i); }
            }
        public analysis_model related_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_model", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_model_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result(SdaiInstance instance) : base(instance) { }
        public analysis_result() : base(0) { }

        public static implicit operator analysis_result(SdaiInstance instance) => new analysis_result(instance);

        public TextValue analysis_result_name
            {
            get { return get_string("analysis_result_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis_result_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue sign_convention
            {
            get { return get_string("sign_convention", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "sign_convention", ifcengine.sdaiSTRING, value); }
            }
        public analysis_method results_for_analysis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "results_for_analysis", ifcengine.sdaiINSTANCE, out inst); return new analysis_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "results_for_analysis", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element : analysis_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element(SdaiInstance instance) : base(instance) { }
        public analysis_result_element() : base(0) { }

        public static implicit operator analysis_result_element(SdaiInstance instance) => new analysis_result_element(instance);


        protected override TextValue WrapperEntityName() { return "analysis_result_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_curve : analysis_result_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_curve(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_curve() : base(0) { }

        public static implicit operator analysis_result_element_curve(SdaiInstance instance) => new analysis_result_element_curve(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_curve and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_curve"); Debug.Assert(inst != 0); return inst; }

        public element_curve result_for_element_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_element_curve", ifcengine.sdaiINSTANCE, out inst); return new element_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_element_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? x_increasing
            {
            get { return get_bool("x_increasing", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x_increasing", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public reaction result_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, out inst); return new reaction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit result_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue position_label
            {
            get { return get_string("position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "position_label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_node
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_node : analysis_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_node
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_node(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_node() : base(0) { }

        public static implicit operator analysis_result_element_node(SdaiInstance instance) => new analysis_result_element_node(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_node and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_node Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_node"); Debug.Assert(inst != 0); return inst; }

        public element_node_connectivity result_for_element_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_element_node", ifcengine.sdaiINSTANCE, out inst); return new element_node_connectivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_element_node", ifcengine.sdaiINSTANCE, i); }
            }
        public reaction result_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, out inst); return new reaction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_node"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_point : analysis_result_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_point(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_point() : base(0) { }

        public static implicit operator analysis_result_element_point(SdaiInstance instance) => new analysis_result_element_point(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_point and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_point"); Debug.Assert(inst != 0); return inst; }

        public element_point result_for_element_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_element_point", ifcengine.sdaiINSTANCE, out inst); return new element_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_element_point", ifcengine.sdaiINSTANCE, i); }
            }
        public reaction result_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, out inst); return new reaction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_surface : analysis_result_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_surface(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_surface() : base(0) { }

        public static implicit operator analysis_result_element_surface(SdaiInstance instance) => new analysis_result_element_surface(instance);

        public element_surface result_for_element_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_element_surface", ifcengine.sdaiINSTANCE, out inst); return new element_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_element_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public point result_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue position_label
            {
            get { return get_string("position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "position_label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_surface_stresses
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_surface_stresses : analysis_result_element_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_surface_stresses
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_surface_stresses(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_surface_stresses() : base(0) { }

        public static implicit operator analysis_result_element_surface_stresses(SdaiInstance instance) => new analysis_result_element_surface_stresses(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_surface_stresses and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_surface_stresses Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_surface_stresses"); Debug.Assert(inst != 0); return inst; }

        public pressure_measure_with_unit direct_stress_sigma_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "direct_stress_sigma_y", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "direct_stress_sigma_y", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit membrane_stress_tau_yz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "membrane_stress_tau_yz", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "membrane_stress_tau_yz", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit direct_stress_sigma_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "direct_stress_sigma_z", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "direct_stress_sigma_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_surface_stresses"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_surface_tractions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_surface_tractions : analysis_result_element_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_surface_tractions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_surface_tractions(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_surface_tractions() : base(0) { }

        public static implicit operator analysis_result_element_surface_tractions(SdaiInstance instance) => new analysis_result_element_surface_tractions(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_surface_tractions and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_surface_tractions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_surface_tractions"); Debug.Assert(inst != 0); return inst; }

        public force_per_length_measure_with_unit thrust_tz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thrust_tz", ifcengine.sdaiINSTANCE, out inst); return new force_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thrust_tz", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit bending_traction_my 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bending_traction_my", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bending_traction_my", ifcengine.sdaiINSTANCE, i); }
            }
        public force_per_length_measure_with_unit thrust_ty 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thrust_ty", ifcengine.sdaiINSTANCE, out inst); return new force_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thrust_ty", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit torsional_traction_mzy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "torsional_traction_mzy", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "torsional_traction_mzy", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit torsional_traction_myz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "torsional_traction_myz", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "torsional_traction_myz", ifcengine.sdaiINSTANCE, i); }
            }
        public force_per_length_measure_with_unit shear_traction_qz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_traction_qz", ifcengine.sdaiINSTANCE, out inst); return new force_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_traction_qz", ifcengine.sdaiINSTANCE, i); }
            }
        public force_per_length_measure_with_unit shear_traction_qy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_traction_qy", ifcengine.sdaiINSTANCE, out inst); return new force_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_traction_qy", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit bending_traction_mz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bending_traction_mz", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bending_traction_mz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_surface_tractions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_volume : analysis_result_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_volume(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_volume() : base(0) { }

        public static implicit operator analysis_result_element_volume(SdaiInstance instance) => new analysis_result_element_volume(instance);

        public element_volume result_for_element_volume 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_element_volume", ifcengine.sdaiINSTANCE, out inst); return new element_volume(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_element_volume", ifcengine.sdaiINSTANCE, i); }
            }
        public point result_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue position_label
            {
            get { return get_string("position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "position_label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_element_volume_stress_tensor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_element_volume_stress_tensor : analysis_result_element_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_element_volume_stress_tensor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_element_volume_stress_tensor(SdaiInstance instance) : base(instance) { }
        public analysis_result_element_volume_stress_tensor() : base(0) { }

        public static implicit operator analysis_result_element_volume_stress_tensor(SdaiInstance instance) => new analysis_result_element_volume_stress_tensor(instance);

        /// <summary>
        /// Create new instace of analysis_result_element_volume_stress_tensor and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_element_volume_stress_tensor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_element_volume_stress_tensor"); Debug.Assert(inst != 0); return inst; }

        public pressure_measure_with_unit shear_stress_tau_zy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_zy", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_zy", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit shear_stress_tau_xz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_xz", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_xz", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit normal_stress_sigma_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "normal_stress_sigma_z", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "normal_stress_sigma_z", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit normal_stress_sigma_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "normal_stress_sigma_y", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "normal_stress_sigma_y", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit normal_stress_sigma_x 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "normal_stress_sigma_x", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "normal_stress_sigma_x", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit shear_stress_tau_zx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_zx", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_zx", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit shear_stress_tau_yz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_yz", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_yz", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit shear_stress_tau_yx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_yx", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_yx", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit shear_stress_tau_xy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_stress_tau_xy", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_stress_tau_xy", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_element_volume_stress_tensor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_result_node
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_result_node : analysis_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_result_node
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_result_node(SdaiInstance instance) : base(instance) { }
        public analysis_result_node() : base(0) { }

        public static implicit operator analysis_result_node(SdaiInstance instance) => new analysis_result_node(instance);

        /// <summary>
        /// Create new instace of analysis_result_node and returns object of this class to interact with
        /// </summary>
        public static new analysis_result_node Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_result_node"); Debug.Assert(inst != 0); return inst; }

        public node result_for_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_node", ifcengine.sdaiINSTANCE, out inst); return new node(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_node", ifcengine.sdaiINSTANCE, i); }
            }
        public reaction result_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, out inst); return new reaction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_values", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_result_node"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_results_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_results_set : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_results_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_results_set(SdaiInstance instance) : base(instance) { }
        public analysis_results_set() : base(0) { }

        public static implicit operator analysis_results_set(SdaiInstance instance) => new analysis_results_set(instance);

        /// <summary>
        /// Create new instace of analysis_results_set and returns object of this class to interact with
        /// </summary>
        public static new analysis_results_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_results_set"); Debug.Assert(inst != 0); return inst; }

        public TextValue results_set_name
            {
            get { return get_string("results_set_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "results_set_name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_analysis_result component_results { get { return (new set_of_analysis_resultSerializer()).FromAttr(m_instance, "component_results"); } }
        public void put_component_results(IEnumerable<analysis_result> lst) { (new set_of_analysis_resultSerializer()).ToSdaiAggr(lst, m_instance, "component_results"); }
        public void put_component_results_untyped(IEnumerable lst) { (new set_of_analysis_resultSerializer()).ToSdaiAggr(lst, m_instance, "component_results"); }

        protected override TextValue WrapperEntityName() { return "analysis_results_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_results_set_basic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_results_set_basic : analysis_results_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_results_set_basic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_results_set_basic(SdaiInstance instance) : base(instance) { }
        public analysis_results_set_basic() : base(0) { }

        public static implicit operator analysis_results_set_basic(SdaiInstance instance) => new analysis_results_set_basic(instance);

        /// <summary>
        /// Create new instace of analysis_results_set_basic and returns object of this class to interact with
        /// </summary>
        public static new analysis_results_set_basic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_results_set_basic"); Debug.Assert(inst != 0); return inst; }

        public load_case basic_load_case 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basic_load_case", ifcengine.sdaiINSTANCE, out inst); return new load_case(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basic_load_case", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_results_set_basic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_results_set_combined
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_results_set_combined : analysis_results_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_results_set_combined
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_results_set_combined(SdaiInstance instance) : base(instance) { }
        public analysis_results_set_combined() : base(0) { }

        public static implicit operator analysis_results_set_combined(SdaiInstance instance) => new analysis_results_set_combined(instance);

        /// <summary>
        /// Create new instace of analysis_results_set_combined and returns object of this class to interact with
        /// </summary>
        public static new analysis_results_set_combined Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_results_set_combined"); Debug.Assert(inst != 0); return inst; }

        public loading_combination loading_combination_ref 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "loading_combination_ref", ifcengine.sdaiINSTANCE, out inst); return new loading_combination(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "loading_combination_ref", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "analysis_results_set_combined"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_results_set_envelope
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_results_set_envelope : analysis_results_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_results_set_envelope
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_results_set_envelope(SdaiInstance instance) : base(instance) { }
        public analysis_results_set_envelope() : base(0) { }

        public static implicit operator analysis_results_set_envelope(SdaiInstance instance) => new analysis_results_set_envelope(instance);

        /// <summary>
        /// Create new instace of analysis_results_set_envelope and returns object of this class to interact with
        /// </summary>
        public static new analysis_results_set_envelope Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_results_set_envelope"); Debug.Assert(inst != 0); return inst; }

        public maximum_or_minimum? max_or_min 
            { 
            get { var str = get_string("max_or_min", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.maximum_or_minimum_); return EnumValue<maximum_or_minimum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<maximum_or_minimum>.FromValue(value.Value, EnumNames.maximum_or_minimum_); ifcengine.sdaiPutAttrBN(m_instance, "max_or_min", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_analysis_results_set_combined component_combinations { get { return (new set_of_analysis_results_set_combinedSerializer()).FromAttr(m_instance, "component_combinations"); } }
        public void put_component_combinations(IEnumerable<analysis_results_set_combined> lst) { (new set_of_analysis_results_set_combinedSerializer()).ToSdaiAggr(lst, m_instance, "component_combinations"); }
        public void put_component_combinations_untyped(IEnumerable lst) { (new set_of_analysis_results_set_combinedSerializer()).ToSdaiAggr(lst, m_instance, "component_combinations"); }

        protected override TextValue WrapperEntityName() { return "analysis_results_set_envelope"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of analysis_results_set_redistributed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class analysis_results_set_redistributed : analysis_results_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of analysis_results_set_redistributed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public analysis_results_set_redistributed(SdaiInstance instance) : base(instance) { }
        public analysis_results_set_redistributed() : base(0) { }

        public static implicit operator analysis_results_set_redistributed(SdaiInstance instance) => new analysis_results_set_redistributed(instance);

        /// <summary>
        /// Create new instace of analysis_results_set_redistributed and returns object of this class to interact with
        /// </summary>
        public static new analysis_results_set_redistributed Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "analysis_results_set_redistributed"); Debug.Assert(inst != 0); return inst; }

        public list_of_ratio_measure_with_unit redistribution_factors { get { return (new list_of_ratio_measure_with_unitSerializer()).FromAttr(m_instance, "redistribution_factors"); } }
        public void put_redistribution_factors(IEnumerable<ratio_measure_with_unit> lst) { (new list_of_ratio_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "redistribution_factors"); }
        public void put_redistribution_factors_untyped(IEnumerable lst) { (new list_of_ratio_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "redistribution_factors"); }

        protected override TextValue WrapperEntityName() { return "analysis_results_set_redistributed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load(SdaiInstance instance) : base(instance) { }
        public applied_load() : base(0) { }

        public static implicit operator applied_load(SdaiInstance instance) => new applied_load(instance);

        public TextValue applied_load_name
            {
            get { return get_string("applied_load_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "applied_load_name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_dynamic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_dynamic : applied_load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_dynamic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_dynamic(SdaiInstance instance) : base(instance) { }
        public applied_load_dynamic() : base(0) { }

        public static implicit operator applied_load_dynamic(SdaiInstance instance) => new applied_load_dynamic(instance);

        /// <summary>
        /// Create new instace of applied_load_dynamic and returns object of this class to interact with
        /// </summary>
        public static new applied_load_dynamic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_dynamic"); Debug.Assert(inst != 0); return inst; }

        public applied_load_static initial_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "initial_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "initial_value", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load_static final_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "final_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "final_value", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load_static maximum_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "maximum_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "maximum_value", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load_static minimum_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "minimum_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "minimum_value", ifcengine.sdaiINSTANCE, i); }
            }
        public double? number_of_cycles
            {
            get { return get_double("number_of_cycles", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "number_of_cycles", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public time_measure_with_unit load_duration 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_duration", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_duration", ifcengine.sdaiINSTANCE, i); }
            }
        public frequency_measure_with_unit load_frequency 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_frequency", ifcengine.sdaiINSTANCE, out inst); return new frequency_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_frequency", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_dynamic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_dynamic_acceleration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_dynamic_acceleration : applied_load_dynamic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_dynamic_acceleration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_dynamic_acceleration(SdaiInstance instance) : base(instance) { }
        public applied_load_dynamic_acceleration() : base(0) { }

        public static implicit operator applied_load_dynamic_acceleration(SdaiInstance instance) => new applied_load_dynamic_acceleration(instance);

        /// <summary>
        /// Create new instace of applied_load_dynamic_acceleration and returns object of this class to interact with
        /// </summary>
        public static new applied_load_dynamic_acceleration Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_dynamic_acceleration"); Debug.Assert(inst != 0); return inst; }

        public linear_acceleration_measure_with_unit preset_acceleration_ax 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_ax", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_ax", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_acceleration_measure_with_unit preset_acceleration_ay 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_ay", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_ay", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_acceleration_measure_with_unit preset_acceleration_az 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_az", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_az", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit preset_acceleration_arx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_arx", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_arx", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit preset_acceleration_ary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_ary", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_ary", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit preset_acceleration_arz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_acceleration_arz", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_acceleration_arz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_dynamic_acceleration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_dynamic_velocity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_dynamic_velocity : applied_load_dynamic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_dynamic_velocity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_dynamic_velocity(SdaiInstance instance) : base(instance) { }
        public applied_load_dynamic_velocity() : base(0) { }

        public static implicit operator applied_load_dynamic_velocity(SdaiInstance instance) => new applied_load_dynamic_velocity(instance);

        /// <summary>
        /// Create new instace of applied_load_dynamic_velocity and returns object of this class to interact with
        /// </summary>
        public static new applied_load_dynamic_velocity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_dynamic_velocity"); Debug.Assert(inst != 0); return inst; }

        public linear_velocity_measure_with_unit preset_velocity_vx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vx", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vx", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_velocity_measure_with_unit preset_velocity_vy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vy", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vy", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_velocity_measure_with_unit preset_velocity_vz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vz", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vz", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit preset_velocity_vrx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vrx", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vrx", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit preset_velocity_vry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vry", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vry", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit preset_velocity_vrz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_velocity_vrz", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_velocity_vrz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_dynamic_velocity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_static
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_static : applied_load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_static
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_static(SdaiInstance instance) : base(instance) { }
        public applied_load_static() : base(0) { }

        public static implicit operator applied_load_static(SdaiInstance instance) => new applied_load_static(instance);


        protected override TextValue WrapperEntityName() { return "applied_load_static"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_static_displacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_static_displacement : applied_load_static
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_static_displacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_static_displacement(SdaiInstance instance) : base(instance) { }
        public applied_load_static_displacement() : base(0) { }

        public static implicit operator applied_load_static_displacement(SdaiInstance instance) => new applied_load_static_displacement(instance);

        /// <summary>
        /// Create new instace of applied_load_static_displacement and returns object of this class to interact with
        /// </summary>
        public static new applied_load_static_displacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_static_displacement"); Debug.Assert(inst != 0); return inst; }

        public length_measure_with_unit preset_displacement_dx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_dx", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_dx", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit preset_displacement_dy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_dy", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_dy", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit preset_displacement_dz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_dz", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_dz", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit preset_displacement_rx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_rx", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_rx", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit preset_displacement_ry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_ry", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_ry", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit preset_displacement_rz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preset_displacement_rz", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preset_displacement_rz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_static_displacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_static_force
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_static_force : applied_load_static
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_static_force
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_static_force(SdaiInstance instance) : base(instance) { }
        public applied_load_static_force() : base(0) { }

        public static implicit operator applied_load_static_force(SdaiInstance instance) => new applied_load_static_force(instance);

        /// <summary>
        /// Create new instace of applied_load_static_force and returns object of this class to interact with
        /// </summary>
        public static new applied_load_static_force Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_static_force"); Debug.Assert(inst != 0); return inst; }

        public force_measure_with_unit applied_force_fx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_force_fx", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_force_fx", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit applied_force_fy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_force_fy", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_force_fy", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit applied_force_fz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_force_fz", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_force_fz", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit applied_moment_mx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_moment_mx", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_moment_mx", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit applied_moment_my 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_moment_my", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_moment_my", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit applied_moment_mz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_moment_mz", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_moment_mz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_static_force"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_load_static_pressure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_load_static_pressure : applied_load_static
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_load_static_pressure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_load_static_pressure(SdaiInstance instance) : base(instance) { }
        public applied_load_static_pressure() : base(0) { }

        public static implicit operator applied_load_static_pressure(SdaiInstance instance) => new applied_load_static_pressure(instance);

        /// <summary>
        /// Create new instace of applied_load_static_pressure and returns object of this class to interact with
        /// </summary>
        public static new applied_load_static_pressure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_load_static_pressure"); Debug.Assert(inst != 0); return inst; }

        public pressure_measure_with_unit applied_pressure_px 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_pressure_px", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_pressure_px", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit applied_pressure_py 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_pressure_py", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_pressure_py", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit applied_pressure_pz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applied_pressure_pz", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applied_pressure_pz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "applied_load_static_pressure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval(SdaiInstance instance) : base(instance) { }
        public approval() : base(0) { }

        public static implicit operator approval(SdaiInstance instance) => new approval(instance);

        /// <summary>
        /// Create new instace of approval and returns object of this class to interact with
        /// </summary>
        public static new approval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval"); Debug.Assert(inst != 0); return inst; }

        public approval_status status 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, out inst); return new approval_status(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue level
            {
            get { return get_string("level", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "level", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "approval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_status : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_status(SdaiInstance instance) : base(instance) { }
        public approval_status() : base(0) { }

        public static implicit operator approval_status(SdaiInstance instance) => new approval_status(instance);

        /// <summary>
        /// Create new instace of approval_status and returns object of this class to interact with
        /// </summary>
        public static new approval_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "approval_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_with_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_with_unit(SdaiInstance instance) : base(instance) { }
        public measure_with_unit() : base(0) { }

        public static implicit operator measure_with_unit(SdaiInstance instance) => new measure_with_unit(instance);

        /// <summary>
        /// Create new instace of measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        public measure_value value_component
            {
            get { return new measure_value(m_instance, "value_component", 0); }
            }

        public unit unit_component
            {
            get { return new unit(m_instance, "unit_component", 0); }
            }

        protected override TextValue WrapperEntityName() { return "measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public area_measure_with_unit() : base(0) { }

        public static implicit operator area_measure_with_unit(SdaiInstance instance) => new area_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of area_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new area_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "area_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of named_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class named_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of named_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public named_unit(SdaiInstance instance) : base(instance) { }
        public named_unit() : base(0) { }

        public static implicit operator named_unit(SdaiInstance instance) => new named_unit(instance);

        /// <summary>
        /// Create new instace of named_unit and returns object of this class to interact with
        /// </summary>
        public static new named_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "named_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents dimensions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "named_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_unit(SdaiInstance instance) : base(instance) { }
        public area_unit() : base(0) { }

        public static implicit operator area_unit(SdaiInstance instance) => new area_unit(instance);

        /// <summary>
        /// Create new instace of area_unit and returns object of this class to interact with
        /// </summary>
        public static new area_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "area_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item(SdaiInstance instance) : base(instance) { }
        public structural_frame_item() : base(0) { }

        public static implicit operator structural_frame_item(SdaiInstance instance) => new structural_frame_item(instance);

        /// <summary>
        /// Create new instace of structural_frame_item and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item"); Debug.Assert(inst != 0); return inst; }

        public IntValue? item_number
            {
            get { return get_IntValue("item_number", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "item_number", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue item_name
            {
            get { return get_string("item_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "item_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue item_description
            {
            get { return get_string("item_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "item_description", ifcengine.sdaiSTRING, value); }
            }
        public bag_of_identifier item_ref { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "item_ref"); } }
        public bag_of_label cost_code { get { return (new bag_of_labelSerializer()).FromAttr(m_instance, "cost_code"); } }
        public TextValue object_id { get { return get_string("object_id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "structural_frame_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_process
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_process : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_process(SdaiInstance instance) : base(instance) { }
        public structural_frame_process() : base(0) { }

        public static implicit operator structural_frame_process(SdaiInstance instance) => new structural_frame_process(instance);

        /// <summary>
        /// Create new instace of structural_frame_process and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_process Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_process"); Debug.Assert(inst != 0); return inst; }

        public organizational_address place_of_process 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "place_of_process", ifcengine.sdaiINSTANCE, out inst); return new organizational_address(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "place_of_process", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_process"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assemble
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assemble : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assemble
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assemble(SdaiInstance instance) : base(instance) { }
        public assemble() : base(0) { }

        public static implicit operator assemble(SdaiInstance instance) => new assemble(instance);

        /// <summary>
        /// Create new instace of assemble and returns object of this class to interact with
        /// </summary>
        public static new assemble Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assemble"); Debug.Assert(inst != 0); return inst; }

        public located_assembly resulting_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "resulting_assembly", ifcengine.sdaiINSTANCE, out inst); return new located_assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "resulting_assembly", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_assembly_component_select components { get { return (new set_of_assembly_component_selectSerializer()).FromAttr(m_instance, "components"); } }
        public void put_components(IEnumerable<assembly_component_select> lst) { (new set_of_assembly_component_selectSerializer()).ToSdaiAggr(lst, m_instance, "components"); }
        public void put_components_untyped(IEnumerable lst) { (new set_of_assembly_component_selectSerializer()).ToSdaiAggr(lst, m_instance, "components"); }
        public set_of_structural_frame_process required_processes { get { return (new set_of_structural_frame_processSerializer()).FromAttr(m_instance, "required_processes"); } }
        public void put_required_processes(IEnumerable<structural_frame_process> lst) { (new set_of_structural_frame_processSerializer()).ToSdaiAggr(lst, m_instance, "required_processes"); }
        public void put_required_processes_untyped(IEnumerable lst) { (new set_of_structural_frame_processSerializer()).ToSdaiAggr(lst, m_instance, "required_processes"); }

        protected override TextValue WrapperEntityName() { return "assemble"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_product
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_product : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_product(SdaiInstance instance) : base(instance) { }
        public structural_frame_product() : base(0) { }

        public static implicit operator structural_frame_product(SdaiInstance instance) => new structural_frame_product(instance);

        /// <summary>
        /// Create new instace of structural_frame_product and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_product Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_product"); Debug.Assert(inst != 0); return inst; }

        public TextValue life_cycle_stage
            {
            get { return get_string("life_cycle_stage", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "life_cycle_stage", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_product"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly(SdaiInstance instance) : base(instance) { }
        public assembly() : base(0) { }

        public static implicit operator assembly(SdaiInstance instance) => new assembly(instance);

        public IntValue? assembly_sequence_number
            {
            get { return get_IntValue("assembly_sequence_number", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "assembly_sequence_number", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public complexity_level? complexity 
            { 
            get { var str = get_string("complexity", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.complexity_level_); return EnumValue<complexity_level>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<complexity_level>.FromValue(value.Value, EnumNames.complexity_level_); ifcengine.sdaiPutAttrBN(m_instance, "complexity", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_located_assembly uses { get { return (new set_of_located_assemblySerializer()).FromAttr(m_instance, "uses"); } }

        protected override TextValue WrapperEntityName() { return "assembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design : assembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design(SdaiInstance instance) : base(instance) { }
        public assembly_design() : base(0) { }

        public static implicit operator assembly_design(SdaiInstance instance) => new assembly_design(instance);

        /// <summary>
        /// Create new instace of assembly_design and returns object of this class to interact with
        /// </summary>
        public static new assembly_design Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design"); Debug.Assert(inst != 0); return inst; }

        public bool? designed
            {
            get { return get_bool("designed", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "designed", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? checked_
            {
            get { return get_bool("checked_", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "checked_", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public set_of_functional_role roles { get { return (new set_of_functional_roleSerializer()).FromAttr(m_instance, "roles"); } }
        public void put_roles(IEnumerable<functional_role> lst) { (new set_of_functional_roleSerializer()).ToSdaiAggr(lst, m_instance, "roles"); }
        public void put_roles_untyped(IEnumerable lst) { (new set_of_functional_roleSerializer()).ToSdaiAggr(lst, m_instance, "roles"); }
        public set_of_design_criterion governing_criteria { get { return (new set_of_design_criterionSerializer()).FromAttr(m_instance, "governing_criteria"); } }
        public void put_governing_criteria(IEnumerable<design_criterion> lst) { (new set_of_design_criterionSerializer()).ToSdaiAggr(lst, m_instance, "governing_criteria"); }
        public void put_governing_criteria_untyped(IEnumerable lst) { (new set_of_design_criterionSerializer()).ToSdaiAggr(lst, m_instance, "governing_criteria"); }

        protected override TextValue WrapperEntityName() { return "assembly_design"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_child
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_child : assembly_design
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_child
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_child(SdaiInstance instance) : base(instance) { }
        public assembly_design_child() : base(0) { }

        public static implicit operator assembly_design_child(SdaiInstance instance) => new assembly_design_child(instance);

        /// <summary>
        /// Create new instace of assembly_design_child and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_child Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_child"); Debug.Assert(inst != 0); return inst; }

        public set_of_assembly_design parent_assemblies { get { return (new set_of_assembly_designSerializer()).FromAttr(m_instance, "parent_assemblies"); } }
        public void put_parent_assemblies(IEnumerable<assembly_design> lst) { (new set_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }
        public void put_parent_assemblies_untyped(IEnumerable lst) { (new set_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }

        protected override TextValue WrapperEntityName() { return "assembly_design_child"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_connection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_connection : assembly_design
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_connection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_connection(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_connection() : base(0) { }

        public static implicit operator assembly_design_structural_connection(SdaiInstance instance) => new assembly_design_structural_connection(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_connection and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_connection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_connection"); Debug.Assert(inst != 0); return inst; }

        public connection_type? struc_connection_type 
            { 
            get { var str = get_string("struc_connection_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.connection_type_); return EnumValue<connection_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<connection_type>.FromValue(value.Value, EnumNames.connection_type_); ifcengine.sdaiPutAttrBN(m_instance, "struc_connection_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_connection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_connection_external
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_connection_external : assembly_design_structural_connection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_connection_external
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_connection_external(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_connection_external() : base(0) { }

        public static implicit operator assembly_design_structural_connection_external(SdaiInstance instance) => new assembly_design_structural_connection_external(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_connection_external and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_connection_external Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_connection_external"); Debug.Assert(inst != 0); return inst; }

        public assembly_design_structural_member connected_member 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "connected_member", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_member(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "connected_member", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_connection_external"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_connection_internal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_connection_internal : assembly_design_structural_connection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_connection_internal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_connection_internal(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_connection_internal() : base(0) { }

        public static implicit operator assembly_design_structural_connection_internal(SdaiInstance instance) => new assembly_design_structural_connection_internal(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_connection_internal and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_connection_internal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_connection_internal"); Debug.Assert(inst != 0); return inst; }

        public set_of_assembly_design_structural_member connected_members { get { return (new set_of_assembly_design_structural_memberSerializer()).FromAttr(m_instance, "connected_members"); } }
        public void put_connected_members(IEnumerable<assembly_design_structural_member> lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "connected_members"); }
        public void put_connected_members_untyped(IEnumerable lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "connected_members"); }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_connection_internal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_frame
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_frame : assembly_design
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_frame
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_frame(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_frame() : base(0) { }

        public static implicit operator assembly_design_structural_frame(SdaiInstance instance) => new assembly_design_structural_frame(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_frame and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_frame Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_frame"); Debug.Assert(inst != 0); return inst; }

        public frame_type? type_of_frame 
            { 
            get { var str = get_string("type_of_frame", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.frame_type_); return EnumValue<frame_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<frame_type>.FromValue(value.Value, EnumNames.frame_type_); ifcengine.sdaiPutAttrBN(m_instance, "type_of_frame", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public frame_continuity? continuity 
            { 
            get { var str = get_string("continuity", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.frame_continuity_); return EnumValue<frame_continuity>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<frame_continuity>.FromValue(value.Value, EnumNames.frame_continuity_); ifcengine.sdaiPutAttrBN(m_instance, "continuity", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? sway_frame
            {
            get { return get_bool("sway_frame", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "sway_frame", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? braced_frame
            {
            get { return get_bool("braced_frame", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "braced_frame", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? bracing_frame
            {
            get { return get_bool("bracing_frame", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "bracing_frame", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public set_of_assembly_design_structural_member frame_members { get { return (new set_of_assembly_design_structural_memberSerializer()).FromAttr(m_instance, "frame_members"); } }
        public void put_frame_members(IEnumerable<assembly_design_structural_member> lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "frame_members"); }
        public void put_frame_members_untyped(IEnumerable lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "frame_members"); }
        public set_of_assembly_design_structural_connection frame_connections { get { return (new set_of_assembly_design_structural_connectionSerializer()).FromAttr(m_instance, "frame_connections"); } }
        public void put_frame_connections(IEnumerable<assembly_design_structural_connection> lst) { (new set_of_assembly_design_structural_connectionSerializer()).ToSdaiAggr(lst, m_instance, "frame_connections"); }
        public void put_frame_connections_untyped(IEnumerable lst) { (new set_of_assembly_design_structural_connectionSerializer()).ToSdaiAggr(lst, m_instance, "frame_connections"); }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_frame"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member : assembly_design
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member() : base(0) { }

        public static implicit operator assembly_design_structural_member(SdaiInstance instance) => new assembly_design_structural_member(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member"); Debug.Assert(inst != 0); return inst; }

        public bool? key_member
            {
            get { return get_bool("key_member", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "key_member", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public member_role? structural_member_use 
            { 
            get { var str = get_string("structural_member_use", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_role_); return EnumValue<member_role>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_role>.FromValue(value.Value, EnumNames.member_role_); ifcengine.sdaiPutAttrBN(m_instance, "structural_member_use", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public member_class? structural_member_class 
            { 
            get { var str = get_string("structural_member_class", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_class_); return EnumValue<member_class>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_class>.FromValue(value.Value, EnumNames.member_class_); ifcengine.sdaiPutAttrBN(m_instance, "structural_member_class", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_restraint restraints { get { return (new set_of_restraintSerializer()).FromAttr(m_instance, "restraints"); } }
        public set_of_effective_buckling_length effective_lengths { get { return (new set_of_effective_buckling_lengthSerializer()).FromAttr(m_instance, "effective_lengths"); } }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_cubic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_cubic : assembly_design_structural_member
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_cubic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_cubic(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_cubic() : base(0) { }

        public static implicit operator assembly_design_structural_member_cubic(SdaiInstance instance) => new assembly_design_structural_member_cubic(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_cubic and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_cubic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_cubic"); Debug.Assert(inst != 0); return inst; }

        public member_cubic_type? cubic_member_type 
            { 
            get { var str = get_string("cubic_member_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_cubic_type_); return EnumValue<member_cubic_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_cubic_type>.FromValue(value.Value, EnumNames.member_cubic_type_); ifcengine.sdaiPutAttrBN(m_instance, "cubic_member_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_assembly_design_structural_member cubic_member_components { get { return (new set_of_assembly_design_structural_memberSerializer()).FromAttr(m_instance, "cubic_member_components"); } }
        public void put_cubic_member_components(IEnumerable<assembly_design_structural_member> lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "cubic_member_components"); }
        public void put_cubic_member_components_untyped(IEnumerable lst) { (new set_of_assembly_design_structural_memberSerializer()).ToSdaiAggr(lst, m_instance, "cubic_member_components"); }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_cubic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear : assembly_design_structural_member
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear(SdaiInstance instance) => new assembly_design_structural_member_linear(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear"); Debug.Assert(inst != 0); return inst; }

        public member_linear_type? linear_member_type 
            { 
            get { var str = get_string("linear_member_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_linear_type_); return EnumValue<member_linear_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_linear_type>.FromValue(value.Value, EnumNames.member_linear_type_); ifcengine.sdaiPutAttrBN(m_instance, "linear_member_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_beam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_beam : assembly_design_structural_member_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_beam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_beam(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_beam() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_beam(SdaiInstance instance) => new assembly_design_structural_member_linear_beam(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_beam and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_beam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_beam"); Debug.Assert(inst != 0); return inst; }

        public set_of_member_beam_type beam_type { get { return (new set_of_member_beam_typeSerializer()).FromAttr(m_instance, "beam_type"); } }
        public void put_beam_type(IEnumerable<member_beam_type> lst) { (new set_of_member_beam_typeSerializer()).ToSdaiAggr(lst, m_instance, "beam_type"); }
        public void put_beam_type_untyped(IEnumerable lst) { (new set_of_member_beam_typeSerializer()).ToSdaiAggr(lst, m_instance, "beam_type"); }
        public set_of_member_beam_role beam_role { get { return (new set_of_member_beam_roleSerializer()).FromAttr(m_instance, "beam_role"); } }
        public void put_beam_role(IEnumerable<member_beam_role> lst) { (new set_of_member_beam_roleSerializer()).ToSdaiAggr(lst, m_instance, "beam_role"); }
        public void put_beam_role_untyped(IEnumerable lst) { (new set_of_member_beam_roleSerializer()).ToSdaiAggr(lst, m_instance, "beam_role"); }
        public LOGICAL_VALUE? unrestrained_beam 
            { 
            get { var str = get_string("unrestrained_beam", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "unrestrained_beam", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? deep_beam 
            { 
            get { var str = get_string("deep_beam", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "deep_beam", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_beam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_brace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_brace : assembly_design_structural_member_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_brace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_brace(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_brace() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_brace(SdaiInstance instance) => new assembly_design_structural_member_linear_brace(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_brace and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_brace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_brace"); Debug.Assert(inst != 0); return inst; }

        public member_brace_type? brace_type 
            { 
            get { var str = get_string("brace_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_brace_type_); return EnumValue<member_brace_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_brace_type>.FromValue(value.Value, EnumNames.member_brace_type_); ifcengine.sdaiPutAttrBN(m_instance, "brace_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_brace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_cable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_cable : assembly_design_structural_member_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_cable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_cable(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_cable() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_cable(SdaiInstance instance) => new assembly_design_structural_member_linear_cable(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_cable and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_cable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_cable"); Debug.Assert(inst != 0); return inst; }

        public member_cable_type? cable_type 
            { 
            get { var str = get_string("cable_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_cable_type_); return EnumValue<member_cable_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_cable_type>.FromValue(value.Value, EnumNames.member_cable_type_); ifcengine.sdaiPutAttrBN(m_instance, "cable_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_cable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_cambered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_cambered : assembly_design_structural_member_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_cambered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_cambered(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_cambered() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_cambered(SdaiInstance instance) => new assembly_design_structural_member_linear_cambered(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_cambered and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_cambered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_cambered"); Debug.Assert(inst != 0); return inst; }

        public TextValue camber_description
            {
            get { return get_string("camber_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "camber_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_cambered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_cambered_absolute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_cambered_absolute : assembly_design_structural_member_linear_cambered
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_cambered_absolute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_cambered_absolute(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_cambered_absolute() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_cambered_absolute(SdaiInstance instance) => new assembly_design_structural_member_linear_cambered_absolute(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_cambered_absolute and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_cambered_absolute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_cambered_absolute"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit absolute_offset_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_position", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_position", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit absolute_offset_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_y", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_y", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit absolute_offset_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_z", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_cambered_absolute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_cambered_relative
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_cambered_relative : assembly_design_structural_member_linear_cambered
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_cambered_relative
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_cambered_relative(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_cambered_relative() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_cambered_relative(SdaiInstance instance) => new assembly_design_structural_member_linear_cambered_relative(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_cambered_relative and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_cambered_relative Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_cambered_relative"); Debug.Assert(inst != 0); return inst; }

        public ratio_measure_with_unit relative_offset_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_position", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_position", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_offset_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_y", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_y", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_offset_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_z", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_cambered_relative"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_linear_column
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_linear_column : assembly_design_structural_member_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_linear_column
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_linear_column(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_linear_column() : base(0) { }

        public static implicit operator assembly_design_structural_member_linear_column(SdaiInstance instance) => new assembly_design_structural_member_linear_column(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_linear_column and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_linear_column Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_linear_column"); Debug.Assert(inst != 0); return inst; }

        public set_of_member_column_type column_type { get { return (new set_of_member_column_typeSerializer()).FromAttr(m_instance, "column_type"); } }
        public void put_column_type(IEnumerable<member_column_type> lst) { (new set_of_member_column_typeSerializer()).ToSdaiAggr(lst, m_instance, "column_type"); }
        public void put_column_type_untyped(IEnumerable lst) { (new set_of_member_column_typeSerializer()).ToSdaiAggr(lst, m_instance, "column_type"); }
        public LOGICAL_VALUE? slender_column 
            { 
            get { var str = get_string("slender_column", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "slender_column", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_linear_column"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_planar
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_planar : assembly_design_structural_member
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_planar
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_planar(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_planar() : base(0) { }

        public static implicit operator assembly_design_structural_member_planar(SdaiInstance instance) => new assembly_design_structural_member_planar(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_planar and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_planar Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_planar"); Debug.Assert(inst != 0); return inst; }

        public member_planar_type? planar_member_type 
            { 
            get { var str = get_string("planar_member_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_planar_type_); return EnumValue<member_planar_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_planar_type>.FromValue(value.Value, EnumNames.member_planar_type_); ifcengine.sdaiPutAttrBN(m_instance, "planar_member_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_assembly_design_structural_member_linear planar_member_components { get { return (new set_of_assembly_design_structural_member_linearSerializer()).FromAttr(m_instance, "planar_member_components"); } }
        public void put_planar_member_components(IEnumerable<assembly_design_structural_member_linear> lst) { (new set_of_assembly_design_structural_member_linearSerializer()).ToSdaiAggr(lst, m_instance, "planar_member_components"); }
        public void put_planar_member_components_untyped(IEnumerable lst) { (new set_of_assembly_design_structural_member_linearSerializer()).ToSdaiAggr(lst, m_instance, "planar_member_components"); }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_planar"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_planar_plate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_planar_plate : assembly_design_structural_member_planar
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_planar_plate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_planar_plate(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_planar_plate() : base(0) { }

        public static implicit operator assembly_design_structural_member_planar_plate(SdaiInstance instance) => new assembly_design_structural_member_planar_plate(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_planar_plate and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_planar_plate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_planar_plate"); Debug.Assert(inst != 0); return inst; }

        public member_plate_type? plate_type 
            { 
            get { var str = get_string("plate_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_plate_type_); return EnumValue<member_plate_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_plate_type>.FromValue(value.Value, EnumNames.member_plate_type_); ifcengine.sdaiPutAttrBN(m_instance, "plate_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? stiffened_plate 
            { 
            get { var str = get_string("stiffened_plate", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "stiffened_plate", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? thick_plate 
            { 
            get { var str = get_string("thick_plate", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "thick_plate", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_planar_plate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_planar_slab
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_planar_slab : assembly_design_structural_member_planar
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_planar_slab
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_planar_slab(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_planar_slab() : base(0) { }

        public static implicit operator assembly_design_structural_member_planar_slab(SdaiInstance instance) => new assembly_design_structural_member_planar_slab(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_planar_slab and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_planar_slab Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_planar_slab"); Debug.Assert(inst != 0); return inst; }

        public member_slab_type? slab_type 
            { 
            get { var str = get_string("slab_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_slab_type_); return EnumValue<member_slab_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_slab_type>.FromValue(value.Value, EnumNames.member_slab_type_); ifcengine.sdaiPutAttrBN(m_instance, "slab_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_planar_slab"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_design_structural_member_planar_wall
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_design_structural_member_planar_wall : assembly_design_structural_member_planar
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_design_structural_member_planar_wall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_design_structural_member_planar_wall(SdaiInstance instance) : base(instance) { }
        public assembly_design_structural_member_planar_wall() : base(0) { }

        public static implicit operator assembly_design_structural_member_planar_wall(SdaiInstance instance) => new assembly_design_structural_member_planar_wall(instance);

        /// <summary>
        /// Create new instace of assembly_design_structural_member_planar_wall and returns object of this class to interact with
        /// </summary>
        public static new assembly_design_structural_member_planar_wall Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_design_structural_member_planar_wall"); Debug.Assert(inst != 0); return inst; }

        public member_wall_type? wall_type 
            { 
            get { var str = get_string("wall_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.member_wall_type_); return EnumValue<member_wall_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<member_wall_type>.FromValue(value.Value, EnumNames.member_wall_type_); ifcengine.sdaiPutAttrBN(m_instance, "wall_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_design_structural_member_planar_wall"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_manufacturing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_manufacturing : assembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_manufacturing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_manufacturing(SdaiInstance instance) : base(instance) { }
        public assembly_manufacturing() : base(0) { }

        public static implicit operator assembly_manufacturing(SdaiInstance instance) => new assembly_manufacturing(instance);

        /// <summary>
        /// Create new instace of assembly_manufacturing and returns object of this class to interact with
        /// </summary>
        public static new assembly_manufacturing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_manufacturing"); Debug.Assert(inst != 0); return inst; }

        public TextValue surface_treatment
            {
            get { return get_string("surface_treatment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "surface_treatment", ifcengine.sdaiSTRING, value); }
            }
        public TextValue assembly_sequence
            {
            get { return get_string("assembly_sequence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "assembly_sequence", ifcengine.sdaiSTRING, value); }
            }
        public TextValue assembly_use
            {
            get { return get_string("assembly_use", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "assembly_use", ifcengine.sdaiSTRING, value); }
            }
        public shop_or_site? place_of_assembly 
            { 
            get { var str = get_string("place_of_assembly", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shop_or_site_); return EnumValue<shop_or_site>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<shop_or_site>.FromValue(value.Value, EnumNames.shop_or_site_); ifcengine.sdaiPutAttrBN(m_instance, "place_of_assembly", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_manufacturing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_manufacturing_child
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_manufacturing_child : assembly_manufacturing
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_manufacturing_child
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_manufacturing_child(SdaiInstance instance) : base(instance) { }
        public assembly_manufacturing_child() : base(0) { }

        public static implicit operator assembly_manufacturing_child(SdaiInstance instance) => new assembly_manufacturing_child(instance);

        /// <summary>
        /// Create new instace of assembly_manufacturing_child and returns object of this class to interact with
        /// </summary>
        public static new assembly_manufacturing_child Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_manufacturing_child"); Debug.Assert(inst != 0); return inst; }

        public assembly_manufacturing parent_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly_manufacturing(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_manufacturing_child"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_map : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_map(SdaiInstance instance) : base(instance) { }
        public assembly_map() : base(0) { }

        public static implicit operator assembly_map(SdaiInstance instance) => new assembly_map(instance);

        /// <summary>
        /// Create new instace of assembly_map and returns object of this class to interact with
        /// </summary>
        public static new assembly_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_map"); Debug.Assert(inst != 0); return inst; }

        public assembly represented_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "represented_assembly", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_element representing_elements { get { return (new set_of_elementSerializer()).FromAttr(m_instance, "representing_elements"); } }
        public void put_representing_elements(IEnumerable<element> lst) { (new set_of_elementSerializer()).ToSdaiAggr(lst, m_instance, "representing_elements"); }
        public void put_representing_elements_untyped(IEnumerable lst) { (new set_of_elementSerializer()).ToSdaiAggr(lst, m_instance, "representing_elements"); }

        protected override TextValue WrapperEntityName() { return "assembly_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_relationship(SdaiInstance instance) : base(instance) { }
        public assembly_relationship() : base(0) { }

        public static implicit operator assembly_relationship(SdaiInstance instance) => new assembly_relationship(instance);

        /// <summary>
        /// Create new instace of assembly_relationship and returns object of this class to interact with
        /// </summary>
        public static new assembly_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue relationship_name
            {
            get { return get_string("relationship_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue relationship_description
            {
            get { return get_string("relationship_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_description", ifcengine.sdaiSTRING, value); }
            }
        public assembly related_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_assembly", ifcengine.sdaiINSTANCE, i); }
            }
        public assembly relating_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_assembly", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_with_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_with_shape : assembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_with_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_with_shape(SdaiInstance instance) : base(instance) { }
        public assembly_with_shape() : base(0) { }

        public static implicit operator assembly_with_shape(SdaiInstance instance) => new assembly_with_shape(instance);

        /// <summary>
        /// Create new instace of assembly_with_shape and returns object of this class to interact with
        /// </summary>
        public static new assembly_with_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_with_shape"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_with_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_with_bounding_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_with_bounding_box : assembly_with_shape
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_with_bounding_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_with_bounding_box(SdaiInstance instance) : base(instance) { }
        public assembly_with_bounding_box() : base(0) { }

        public static implicit operator assembly_with_bounding_box(SdaiInstance instance) => new assembly_with_bounding_box(instance);

        /// <summary>
        /// Create new instace of assembly_with_bounding_box and returns object of this class to interact with
        /// </summary>
        public static new assembly_with_bounding_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_with_bounding_box"); Debug.Assert(inst != 0); return inst; }

        public set_of_representation_item bounding_box { get { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "bounding_box"); } }

        protected override TextValue WrapperEntityName() { return "assembly_with_bounding_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_item(SdaiInstance instance) : base(instance) { }
        public representation_item() : base(0) { }

        public static implicit operator representation_item(SdaiInstance instance) => new representation_item(instance);

        /// <summary>
        /// Create new instace of representation_item and returns object of this class to interact with
        /// </summary>
        public static new representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_item(SdaiInstance instance) : base(instance) { }
        public geometric_representation_item() : base(0) { }

        public static implicit operator geometric_representation_item(SdaiInstance instance) => new geometric_representation_item(instance);

        /// <summary>
        /// Create new instace of geometric_representation_item and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_item"); Debug.Assert(inst != 0); return inst; }

        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "geometric_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placement : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placement(SdaiInstance instance) : base(instance) { }
        public placement() : base(0) { }

        public static implicit operator placement(SdaiInstance instance) => new placement(instance);

        /// <summary>
        /// Create new instace of placement and returns object of this class to interact with
        /// </summary>
        public static new placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placement"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis1_placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis1_placement : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis1_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis1_placement(SdaiInstance instance) : base(instance) { }
        public axis1_placement() : base(0) { }

        public static implicit operator axis1_placement(SdaiInstance instance) => new axis1_placement(instance);

        /// <summary>
        /// Create new instace of axis1_placement and returns object of this class to interact with
        /// </summary>
        public static new axis1_placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis1_placement"); Debug.Assert(inst != 0); return inst; }

        public direction axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public direction z { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "z", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } }

        protected override TextValue WrapperEntityName() { return "axis1_placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_2d : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_2d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_2d() : base(0) { }

        public static implicit operator axis2_placement_2d(SdaiInstance instance) => new axis2_placement_2d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_2d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_2d"); Debug.Assert(inst != 0); return inst; }

        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction p { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "p"); } }

        protected override TextValue WrapperEntityName() { return "axis2_placement_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_3d : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_3d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_3d() : base(0) { }

        public static implicit operator axis2_placement_3d(SdaiInstance instance) => new axis2_placement_3d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_3d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_3d"); Debug.Assert(inst != 0); return inst; }

        public direction axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction p { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "p"); } }

        protected override TextValue WrapperEntityName() { return "axis2_placement_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve(SdaiInstance instance) : base(instance) { }
        public curve() : base(0) { }

        public static implicit operator curve(SdaiInstance instance) => new curve(instance);

        /// <summary>
        /// Create new instace of curve and returns object of this class to interact with
        /// </summary>
        public static new curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_curve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_curve(SdaiInstance instance) : base(instance) { }
        public bounded_curve() : base(0) { }

        public static implicit operator bounded_curve(SdaiInstance instance) => new bounded_curve(instance);

        /// <summary>
        /// Create new instace of bounded_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve(SdaiInstance instance) : base(instance) { }
        public b_spline_curve() : base(0) { }

        public static implicit operator b_spline_curve(SdaiInstance instance) => new b_spline_curve(instance);

        /// <summary>
        /// Create new instace of b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public IntValue? degree
            {
            get { return get_IntValue("degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public list_of_cartesian_point control_points_list { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); } }
        public void put_control_points_list(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_curve_form? curve_form 
            { 
            get { var str = get_string("curve_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_curve_form_); return EnumValue<b_spline_curve_form>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<b_spline_curve_form>.FromValue(value.Value, EnumNames.b_spline_curve_form_); ifcengine.sdaiPutAttrBN(m_instance, "curve_form", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? closed_curve 
            { 
            get { var str = get_string("closed_curve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "closed_curve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? upper_index_on_control_points { get { return get_IntValue("upper_index_on_control_points", ifcengine.sdaiINTEGER); } }
        public array_of_cartesian_point control_points { get { return (new array_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points"); } }

        protected override TextValue WrapperEntityName() { return "b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve_with_knots : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_curve_with_knots() : base(0) { }

        public static implicit operator b_spline_curve_with_knots(SdaiInstance instance) => new b_spline_curve_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_curve_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue knot_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "knot_multiplicities"); } }
        public void put_knot_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        public void put_knot_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        public list_of_parameter_value knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "knots"); } }
        public void put_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        public void put_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        public knot_type? knot_spec 
            { 
            get { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<knot_type>.FromValue(value.Value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? upper_index_on_knots { get { return get_IntValue("upper_index_on_knots", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "b_spline_curve_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface(SdaiInstance instance) : base(instance) { }
        public surface() : base(0) { }

        public static implicit operator surface(SdaiInstance instance) => new surface(instance);

        /// <summary>
        /// Create new instace of surface and returns object of this class to interact with
        /// </summary>
        public static new surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface(SdaiInstance instance) : base(instance) { }
        public bounded_surface() : base(0) { }

        public static implicit operator bounded_surface(SdaiInstance instance) => new bounded_surface(instance);

        /// <summary>
        /// Create new instace of bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface(SdaiInstance instance) : base(instance) { }
        public b_spline_surface() : base(0) { }

        public static implicit operator b_spline_surface(SdaiInstance instance) => new b_spline_surface(instance);

        /// <summary>
        /// Create new instace of b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public IntValue? u_degree
            {
            get { return get_IntValue("u_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? v_degree
            {
            get { return get_IntValue("v_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public list_of_list_of_cartesian_point control_points_list { get { return (new list_of_list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); } }
        public void put_control_points_list(IEnumerable<list_of_cartesian_point> lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_surface_form? surface_form 
            { 
            get { var str = get_string("surface_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_surface_form_); return EnumValue<b_spline_surface_form>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<b_spline_surface_form>.FromValue(value.Value, EnumNames.b_spline_surface_form_); ifcengine.sdaiPutAttrBN(m_instance, "surface_form", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? u_closed 
            { 
            get { var str = get_string("u_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "u_closed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? v_closed 
            { 
            get { var str = get_string("v_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "v_closed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? u_upper { get { return get_IntValue("u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? v_upper { get { return get_IntValue("v_upper", ifcengine.sdaiINTEGER); } }
        public array_of_array_of_cartesian_point control_points { get { return (new array_of_array_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points"); } }

        protected override TextValue WrapperEntityName() { return "b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface_with_knots : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_surface_with_knots() : base(0) { }

        public static implicit operator b_spline_surface_with_knots(SdaiInstance instance) => new b_spline_surface_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_surface_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue u_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "u_multiplicities"); } }
        public void put_u_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public void put_u_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public ListOfIntValue v_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "v_multiplicities"); } }
        public void put_v_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public void put_v_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public list_of_parameter_value u_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "u_knots"); } }
        public void put_u_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public void put_u_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public list_of_parameter_value v_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "v_knots"); } }
        public void put_v_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public void put_v_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public knot_type? knot_spec 
            { 
            get { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<knot_type>.FromValue(value.Value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? knot_u_upper { get { return get_IntValue("knot_u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? knot_v_upper { get { return get_IntValue("knot_v_upper", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "b_spline_surface_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume(SdaiInstance instance) : base(instance) { }
        public volume() : base(0) { }

        public static implicit operator volume(SdaiInstance instance) => new volume(instance);

        /// <summary>
        /// Create new instace of volume and returns object of this class to interact with
        /// </summary>
        public static new volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_volume(SdaiInstance instance) : base(instance) { }
        public b_spline_volume() : base(0) { }

        public static implicit operator b_spline_volume(SdaiInstance instance) => new b_spline_volume(instance);

        /// <summary>
        /// Create new instace of b_spline_volume and returns object of this class to interact with
        /// </summary>
        public static new b_spline_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_volume"); Debug.Assert(inst != 0); return inst; }

        public IntValue? u_degree
            {
            get { return get_IntValue("u_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? v_degree
            {
            get { return get_IntValue("v_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? w_degree
            {
            get { return get_IntValue("w_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "w_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public list_of_list_of_list_of_cartesian_point control_points_list { get { return (new list_of_list_of_list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); } }
        public void put_control_points_list(IEnumerable<list_of_list_of_cartesian_point> lst) { (new list_of_list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public IntValue? u_upper { get { return get_IntValue("u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? v_upper { get { return get_IntValue("v_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? w_upper { get { return get_IntValue("w_upper", ifcengine.sdaiINTEGER); } }
        public array_of_array_of_array_of_cartesian_point control_points { get { return (new array_of_array_of_array_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points"); } }

        protected override TextValue WrapperEntityName() { return "b_spline_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_volume_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_volume_with_knots : b_spline_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_volume_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_volume_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_volume_with_knots() : base(0) { }

        public static implicit operator b_spline_volume_with_knots(SdaiInstance instance) => new b_spline_volume_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_volume_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_volume_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_volume_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue u_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "u_multiplicities"); } }
        public void put_u_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public void put_u_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public ListOfIntValue v_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "v_multiplicities"); } }
        public void put_v_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public void put_v_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public ListOfIntValue w_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "w_multiplicities"); } }
        public void put_w_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "w_multiplicities"); }
        public void put_w_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "w_multiplicities"); }
        public list_of_parameter_value u_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "u_knots"); } }
        public void put_u_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public void put_u_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public list_of_parameter_value v_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "v_knots"); } }
        public void put_v_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public void put_v_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public list_of_parameter_value w_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "w_knots"); } }
        public void put_w_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "w_knots"); }
        public void put_w_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "w_knots"); }
        public IntValue? knot_u_upper { get { return get_IntValue("knot_u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? knot_v_upper { get { return get_IntValue("knot_v_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? knot_w_upper { get { return get_IntValue("knot_w_upper", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "b_spline_volume_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bend
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bend : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bend
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bend(SdaiInstance instance) : base(instance) { }
        public bend() : base(0) { }

        public static implicit operator bend(SdaiInstance instance) => new bend(instance);

        /// <summary>
        /// Create new instace of bend and returns object of this class to interact with
        /// </summary>
        public static new bend Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bend"); Debug.Assert(inst != 0); return inst; }

        public bending_method? method 
            { 
            get { var str = get_string("method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.bending_method_); return EnumValue<bending_method>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<bending_method>.FromValue(value.Value, EnumNames.bending_method_); ifcengine.sdaiPutAttrBN(m_instance, "method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "bend"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_curve(SdaiInstance instance) : base(instance) { }
        public bezier_curve() : base(0) { }

        public static implicit operator bezier_curve(SdaiInstance instance) => new bezier_curve(instance);

        /// <summary>
        /// Create new instace of bezier_curve and returns object of this class to interact with
        /// </summary>
        public static new bezier_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bezier_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_surface(SdaiInstance instance) : base(instance) { }
        public bezier_surface() : base(0) { }

        public static implicit operator bezier_surface(SdaiInstance instance) => new bezier_surface(instance);

        /// <summary>
        /// Create new instace of bezier_surface and returns object of this class to interact with
        /// </summary>
        public static new bezier_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bezier_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_volume : b_spline_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_volume(SdaiInstance instance) : base(instance) { }
        public bezier_volume() : base(0) { }

        public static implicit operator bezier_volume(SdaiInstance instance) => new bezier_volume(instance);

        /// <summary>
        /// Create new instace of bezier_volume and returns object of this class to interact with
        /// </summary>
        public static new bezier_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_volume"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bezier_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of block
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class block : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public block(SdaiInstance instance) : base(instance) { }
        public block() : base(0) { }

        public static implicit operator block(SdaiInstance instance) => new block(instance);

        /// <summary>
        /// Create new instace of block and returns object of this class to interact with
        /// </summary>
        public static new block Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "block"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "block"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of block_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class block_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of block_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public block_volume(SdaiInstance instance) : base(instance) { }
        public block_volume() : base(0) { }

        public static implicit operator block_volume(SdaiInstance instance) => new block_volume(instance);

        /// <summary>
        /// Create new instace of block_volume and returns object of this class to interact with
        /// </summary>
        public static new block_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "block_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "block_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_result : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_result(SdaiInstance instance) : base(instance) { }
        public boolean_result() : base(0) { }

        public static implicit operator boolean_result(SdaiInstance instance) => new boolean_result(instance);

        /// <summary>
        /// Create new instace of boolean_result and returns object of this class to interact with
        /// </summary>
        public static new boolean_result Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_result"); Debug.Assert(inst != 0); return inst; }

        public boolean_operator? operator_ 
            { 
            get { var str = get_string("operator_", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.boolean_operator_); return EnumValue<boolean_operator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<boolean_operator>.FromValue(value.Value, EnumNames.boolean_operator_); ifcengine.sdaiPutAttrBN(m_instance, "operator_", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public boolean_operand first_operand
            {
            get { return new boolean_operand(m_instance, "first_operand", 0); }
            }

        public boolean_operand second_operand
            {
            get { return new boolean_operand(m_instance, "second_operand", 0); }
            }

        protected override TextValue WrapperEntityName() { return "boolean_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition(SdaiInstance instance) : base(instance) { }
        public boundary_condition() : base(0) { }

        public static implicit operator boundary_condition(SdaiInstance instance) => new boundary_condition(instance);

        public TextValue boundary_condition_name
            {
            get { return get_string("boundary_condition_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "boundary_condition_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue boundary_condition_description
            {
            get { return get_string("boundary_condition_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "boundary_condition_description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_node restrained_nodes { get { return (new set_of_nodeSerializer()).FromAttr(m_instance, "restrained_nodes"); } }

        protected override TextValue WrapperEntityName() { return "boundary_condition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition_logical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition_logical : boundary_condition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition_logical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition_logical(SdaiInstance instance) : base(instance) { }
        public boundary_condition_logical() : base(0) { }

        public static implicit operator boundary_condition_logical(SdaiInstance instance) => new boundary_condition_logical(instance);

        /// <summary>
        /// Create new instace of boundary_condition_logical and returns object of this class to interact with
        /// </summary>
        public static new boundary_condition_logical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_condition_logical"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? bc_x_displacement_free 
            { 
            get { var str = get_string("bc_x_displacement_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_x_displacement_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? bc_y_displacement_free 
            { 
            get { var str = get_string("bc_y_displacement_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_y_displacement_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? bc_z_displacement_free 
            { 
            get { var str = get_string("bc_z_displacement_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_z_displacement_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? bc_x_rotation_free 
            { 
            get { var str = get_string("bc_x_rotation_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_x_rotation_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? bc_y_rotation_free 
            { 
            get { var str = get_string("bc_y_rotation_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_y_rotation_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? bc_z_rotation_free 
            { 
            get { var str = get_string("bc_z_rotation_free", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "bc_z_rotation_free", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "boundary_condition_logical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition_skewed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition_skewed : boundary_condition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition_skewed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition_skewed(SdaiInstance instance) : base(instance) { }
        public boundary_condition_skewed() : base(0) { }

        public static implicit operator boundary_condition_skewed(SdaiInstance instance) => new boundary_condition_skewed(instance);

        /// <summary>
        /// Create new instace of boundary_condition_skewed and returns object of this class to interact with
        /// </summary>
        public static new boundary_condition_skewed Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_condition_skewed"); Debug.Assert(inst != 0); return inst; }

        public plane_angle_measure_with_unit x_skew_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "x_skew_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "x_skew_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit y_skew_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "y_skew_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "y_skew_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit z_skew_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "z_skew_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "z_skew_angle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "boundary_condition_skewed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition_spring_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition_spring_linear : boundary_condition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition_spring_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition_spring_linear(SdaiInstance instance) : base(instance) { }
        public boundary_condition_spring_linear() : base(0) { }

        public static implicit operator boundary_condition_spring_linear(SdaiInstance instance) => new boundary_condition_spring_linear(instance);

        /// <summary>
        /// Create new instace of boundary_condition_spring_linear and returns object of this class to interact with
        /// </summary>
        public static new boundary_condition_spring_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_condition_spring_linear"); Debug.Assert(inst != 0); return inst; }

        public linear_stiffness_measure_with_unit bc_x_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_x_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_x_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit bc_y_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_y_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_y_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit bc_z_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_z_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_z_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit bc_x_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_x_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_x_rotation", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit bc_y_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_y_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_y_rotation", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit bc_z_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_z_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_z_rotation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "boundary_condition_spring_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition_spring_non_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition_spring_non_linear : boundary_condition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition_spring_non_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition_spring_non_linear(SdaiInstance instance) : base(instance) { }
        public boundary_condition_spring_non_linear() : base(0) { }

        public static implicit operator boundary_condition_spring_non_linear(SdaiInstance instance) => new boundary_condition_spring_non_linear(instance);

        /// <summary>
        /// Create new instace of boundary_condition_spring_non_linear and returns object of this class to interact with
        /// </summary>
        public static new boundary_condition_spring_non_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_condition_spring_non_linear"); Debug.Assert(inst != 0); return inst; }

        public list_of_measure_with_unit change_values { get { return (new list_of_measure_with_unitSerializer()).FromAttr(m_instance, "change_values"); } }
        public void put_change_values(IEnumerable<measure_with_unit> lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "change_values"); }
        public void put_change_values_untyped(IEnumerable lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "change_values"); }
        public list_of_boundary_condition_spring_linear values { get { return (new list_of_boundary_condition_spring_linearSerializer()).FromAttr(m_instance, "values"); } }
        public void put_values(IEnumerable<boundary_condition_spring_linear> lst) { (new list_of_boundary_condition_spring_linearSerializer()).ToSdaiAggr(lst, m_instance, "values"); }
        public void put_values_untyped(IEnumerable lst) { (new list_of_boundary_condition_spring_linearSerializer()).ToSdaiAggr(lst, m_instance, "values"); }
        public IntValue? number_of_values { get { return get_IntValue("number_of_values", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "boundary_condition_spring_non_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_condition_warping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_condition_warping : boundary_condition_spring_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_condition_warping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_condition_warping(SdaiInstance instance) : base(instance) { }
        public boundary_condition_warping() : base(0) { }

        public static implicit operator boundary_condition_warping(SdaiInstance instance) => new boundary_condition_warping(instance);

        /// <summary>
        /// Create new instace of boundary_condition_warping and returns object of this class to interact with
        /// </summary>
        public static new boundary_condition_warping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_condition_warping"); Debug.Assert(inst != 0); return inst; }

        public rotational_stiffness_measure_with_unit bc_warping 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bc_warping", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bc_warping", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "boundary_condition_warping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve(SdaiInstance instance) : base(instance) { }
        public composite_curve() : base(0) { }

        public static implicit operator composite_curve(SdaiInstance instance) => new composite_curve(instance);

        /// <summary>
        /// Create new instace of composite_curve and returns object of this class to interact with
        /// </summary>
        public static new composite_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_composite_curve_segment segments { get { return (new list_of_composite_curve_segmentSerializer()).FromAttr(m_instance, "segments"); } }
        public void put_segments(IEnumerable<composite_curve_segment> lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public void put_segments_untyped(IEnumerable lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? n_segments { get { return get_IntValue("n_segments", ifcengine.sdaiINTEGER); } }
        public LOGICAL_VALUE? closed_curve { get { var str = get_string("closed_curve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } }

        protected override TextValue WrapperEntityName() { return "composite_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_on_surface : composite_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_on_surface(SdaiInstance instance) : base(instance) { }
        public composite_curve_on_surface() : base(0) { }

        public static implicit operator composite_curve_on_surface(SdaiInstance instance) => new composite_curve_on_surface(instance);

        /// <summary>
        /// Create new instace of composite_curve_on_surface and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_on_surface"); Debug.Assert(inst != 0); return inst; }

        public set_of_surface basis_surface { get { return (new set_of_surfaceSerializer()).FromAttr(m_instance, "basis_surface"); } }

        protected override TextValue WrapperEntityName() { return "composite_curve_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_curve : composite_curve_on_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_curve(SdaiInstance instance) : base(instance) { }
        public boundary_curve() : base(0) { }

        public static implicit operator boundary_curve(SdaiInstance instance) => new boundary_curve(instance);

        /// <summary>
        /// Create new instace of boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pcurve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pcurve(SdaiInstance instance) : base(instance) { }
        public pcurve() : base(0) { }

        public static implicit operator pcurve(SdaiInstance instance) => new pcurve(instance);

        /// <summary>
        /// Create new instace of pcurve and returns object of this class to interact with
        /// </summary>
        public static new pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public definitional_representation reference_to_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_pcurve : pcurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_pcurve(SdaiInstance instance) : base(instance) { }
        public bounded_pcurve() : base(0) { }

        public static implicit operator bounded_pcurve(SdaiInstance instance) => new bounded_pcurve(instance);

        /// <summary>
        /// Create new instace of bounded_pcurve and returns object of this class to interact with
        /// </summary>
        public static new bounded_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_pcurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve(SdaiInstance instance) : base(instance) { }
        public surface_curve() : base(0) { }

        public static implicit operator surface_curve(SdaiInstance instance) => new surface_curve(instance);

        /// <summary>
        /// Create new instace of surface_curve and returns object of this class to interact with
        /// </summary>
        public static new surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve"); Debug.Assert(inst != 0); return inst; }

        public curve curve_3d 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_pcurve_or_surface associated_geometry { get { return (new list_of_pcurve_or_surfaceSerializer()).FromAttr(m_instance, "associated_geometry"); } }
        public void put_associated_geometry(IEnumerable<pcurve_or_surface> lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        public void put_associated_geometry_untyped(IEnumerable lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        public preferred_surface_curve_representation? master_representation 
            { 
            get { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.preferred_surface_curve_representation_); return EnumValue<preferred_surface_curve_representation>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<preferred_surface_curve_representation>.FromValue(value.Value, EnumNames.preferred_surface_curve_representation_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_surface basis_surface { get { return (new set_of_surfaceSerializer()).FromAttr(m_instance, "basis_surface"); } }

        protected override TextValue WrapperEntityName() { return "surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface_curve(SdaiInstance instance) : base(instance) { }
        public bounded_surface_curve() : base(0) { }

        public static implicit operator bounded_surface_curve(SdaiInstance instance) => new bounded_surface_curve(instance);

        /// <summary>
        /// Create new instace of bounded_surface_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of box_domain
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class box_domain : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of box_domain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public box_domain(SdaiInstance instance) : base(instance) { }
        public box_domain() : base(0) { }

        public static implicit operator box_domain(SdaiInstance instance) => new box_domain(instance);

        /// <summary>
        /// Create new instace of box_domain and returns object of this class to interact with
        /// </summary>
        public static new box_domain Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "box_domain"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point corner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, i); }
            }
        public double? xlength
            {
            get { return get_double("xlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "xlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ylength
            {
            get { return get_double("ylength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ylength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? zlength
            {
            get { return get_double("zlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "zlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "box_domain"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of half_space_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class half_space_solid : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of half_space_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public half_space_solid(SdaiInstance instance) : base(instance) { }
        public half_space_solid() : base(0) { }

        public static implicit operator half_space_solid(SdaiInstance instance) => new half_space_solid(instance);

        /// <summary>
        /// Create new instace of half_space_solid and returns object of this class to interact with
        /// </summary>
        public static new half_space_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "half_space_solid"); Debug.Assert(inst != 0); return inst; }

        public surface base_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? agreement_flag
            {
            get { return get_bool("agreement_flag", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "agreement_flag", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "half_space_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boxed_half_space
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boxed_half_space : half_space_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boxed_half_space
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boxed_half_space(SdaiInstance instance) : base(instance) { }
        public boxed_half_space() : base(0) { }

        public static implicit operator boxed_half_space(SdaiInstance instance) => new boxed_half_space(instance);

        /// <summary>
        /// Create new instace of boxed_half_space and returns object of this class to interact with
        /// </summary>
        public static new boxed_half_space Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boxed_half_space"); Debug.Assert(inst != 0); return inst; }

        public box_domain enclosure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, out inst); return new box_domain(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "boxed_half_space"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of braze
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class braze : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of braze
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public braze(SdaiInstance instance) : base(instance) { }
        public braze() : base(0) { }

        public static implicit operator braze(SdaiInstance instance) => new braze(instance);

        /// <summary>
        /// Create new instace of braze and returns object of this class to interact with
        /// </summary>
        public static new braze Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "braze"); Debug.Assert(inst != 0); return inst; }

        public brazing_type? braze_type 
            { 
            get { var str = get_string("braze_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.brazing_type_); return EnumValue<brazing_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<brazing_type>.FromValue(value.Value, EnumNames.brazing_type_); ifcengine.sdaiPutAttrBN(m_instance, "braze_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "braze"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_model(SdaiInstance instance) : base(instance) { }
        public solid_model() : base(0) { }

        public static implicit operator solid_model(SdaiInstance instance) => new solid_model(instance);

        /// <summary>
        /// Create new instace of solid_model and returns object of this class to interact with
        /// </summary>
        public static new solid_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_model"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of brep_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class brep_2d : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of brep_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public brep_2d(SdaiInstance instance) : base(instance) { }
        public brep_2d() : base(0) { }

        public static implicit operator brep_2d(SdaiInstance instance) => new brep_2d(instance);

        /// <summary>
        /// Create new instace of brep_2d and returns object of this class to interact with
        /// </summary>
        public static new brep_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "brep_2d"); Debug.Assert(inst != 0); return inst; }

        public face extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, out inst); return new face(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "brep_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_solid_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_solid_brep : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_solid_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_solid_brep(SdaiInstance instance) : base(instance) { }
        public manifold_solid_brep() : base(0) { }

        public static implicit operator manifold_solid_brep(SdaiInstance instance) => new manifold_solid_brep(instance);

        /// <summary>
        /// Create new instace of manifold_solid_brep and returns object of this class to interact with
        /// </summary>
        public static new manifold_solid_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_solid_brep"); Debug.Assert(inst != 0); return inst; }

        public closed_shell outer 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, out inst); return new closed_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "manifold_solid_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of brep_with_voids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class brep_with_voids : manifold_solid_brep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of brep_with_voids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public brep_with_voids(SdaiInstance instance) : base(instance) { }
        public brep_with_voids() : base(0) { }

        public static implicit operator brep_with_voids(SdaiInstance instance) => new brep_with_voids(instance);

        /// <summary>
        /// Create new instace of brep_with_voids and returns object of this class to interact with
        /// </summary>
        public static new brep_with_voids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "brep_with_voids"); Debug.Assert(inst != 0); return inst; }

        public set_of_oriented_closed_shell voids { get { return (new set_of_oriented_closed_shellSerializer()).FromAttr(m_instance, "voids"); } }
        public void put_voids(IEnumerable<oriented_closed_shell> lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }
        public void put_voids_untyped(IEnumerable lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }

        protected override TextValue WrapperEntityName() { return "brep_with_voids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of building
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class building : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of building
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public building(SdaiInstance instance) : base(instance) { }
        public building() : base(0) { }

        public static implicit operator building(SdaiInstance instance) => new building(instance);

        /// <summary>
        /// Create new instace of building and returns object of this class to interact with
        /// </summary>
        public static new building Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "building"); Debug.Assert(inst != 0); return inst; }

        public TextValue building_class
            {
            get { return get_string("building_class", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "building_class", ifcengine.sdaiSTRING, value); }
            }
        public person_and_organization owner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "owner", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "owner", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_structure building_structures { get { return (new list_of_structureSerializer()).FromAttr(m_instance, "building_structures"); } }
        public void put_building_structures(IEnumerable<structure> lst) { (new list_of_structureSerializer()).ToSdaiAggr(lst, m_instance, "building_structures"); }
        public void put_building_structures_untyped(IEnumerable lst) { (new list_of_structureSerializer()).ToSdaiAggr(lst, m_instance, "building_structures"); }

        protected override TextValue WrapperEntityName() { return "building"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of building_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class building_complex : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of building_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public building_complex(SdaiInstance instance) : base(instance) { }
        public building_complex() : base(0) { }

        public static implicit operator building_complex(SdaiInstance instance) => new building_complex(instance);

        /// <summary>
        /// Create new instace of building_complex and returns object of this class to interact with
        /// </summary>
        public static new building_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "building_complex"); Debug.Assert(inst != 0); return inst; }

        public site building_site 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "building_site", ifcengine.sdaiINSTANCE, out inst); return new site(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "building_site", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_building buildings { get { return (new list_of_buildingSerializer()).FromAttr(m_instance, "buildings"); } }
        public void put_buildings(IEnumerable<building> lst) { (new list_of_buildingSerializer()).ToSdaiAggr(lst, m_instance, "buildings"); }
        public void put_buildings_untyped(IEnumerable lst) { (new list_of_buildingSerializer()).ToSdaiAggr(lst, m_instance, "buildings"); }

        protected override TextValue WrapperEntityName() { return "building_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of building_with_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class building_with_shape : building
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of building_with_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public building_with_shape(SdaiInstance instance) : base(instance) { }
        public building_with_shape() : base(0) { }

        public static implicit operator building_with_shape(SdaiInstance instance) => new building_with_shape(instance);

        /// <summary>
        /// Create new instace of building_with_shape and returns object of this class to interact with
        /// </summary>
        public static new building_with_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "building_with_shape"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "building_with_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date(SdaiInstance instance) : base(instance) { }
        public date() : base(0) { }

        public static implicit operator date(SdaiInstance instance) => new date(instance);

        /// <summary>
        /// Create new instace of date and returns object of this class to interact with
        /// </summary>
        public static new date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? year_component
            {
            get { return get_IntValue("year_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "year_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of calendar_date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class calendar_date : date
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of calendar_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public calendar_date(SdaiInstance instance) : base(instance) { }
        public calendar_date() : base(0) { }

        public static implicit operator calendar_date(SdaiInstance instance) => new calendar_date(instance);

        /// <summary>
        /// Create new instace of calendar_date and returns object of this class to interact with
        /// </summary>
        public static new calendar_date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "calendar_date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? day_component
            {
            get { return get_IntValue("day_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "day_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? month_component
            {
            get { return get_IntValue("month_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "month_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "calendar_date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point(SdaiInstance instance) : base(instance) { }
        public point() : base(0) { }

        public static implicit operator point(SdaiInstance instance) => new point(instance);

        /// <summary>
        /// Create new instace of point and returns object of this class to interact with
        /// </summary>
        public static new point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_point : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_point(SdaiInstance instance) : base(instance) { }
        public cartesian_point() : base(0) { }

        public static implicit operator cartesian_point(SdaiInstance instance) => new cartesian_point(instance);

        /// <summary>
        /// Create new instace of cartesian_point and returns object of this class to interact with
        /// </summary>
        public static new cartesian_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_point"); Debug.Assert(inst != 0); return inst; }

        public list_of_length_measure coordinates { get { return (new list_of_length_measureSerializer()).FromAttr(m_instance, "coordinates"); } }
        public void put_coordinates(IEnumerable<double> lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }
        public void put_coordinates_untyped(IEnumerable lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }

        protected override TextValue WrapperEntityName() { return "cartesian_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator() : base(0) { }

        public static implicit operator cartesian_transformation_operator(SdaiInstance instance) => new cartesian_transformation_operator(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public direction axis1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, i); }
            }
        public direction axis2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point local_origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, i); }
            }
        public double? scale
            {
            get { return get_double("scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? scl { get { return get_double("scl", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_2d : cartesian_transformation_operator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_2d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_2d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_2d(SdaiInstance instance) => new cartesian_transformation_operator_2d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_2d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_2d"); Debug.Assert(inst != 0); return inst; }

        public list_of_direction u { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "u"); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_3d : cartesian_transformation_operator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_3d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_3d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_3d(SdaiInstance instance) => new cartesian_transformation_operator_3d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_3d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_3d"); Debug.Assert(inst != 0); return inst; }

        public direction axis3 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction u { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "u"); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification(SdaiInstance instance) : base(instance) { }
        public certification() : base(0) { }

        public static implicit operator certification(SdaiInstance instance) => new certification(instance);

        /// <summary>
        /// Create new instace of certification and returns object of this class to interact with
        /// </summary>
        public static new certification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public certification_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new certification_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "certification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification_type(SdaiInstance instance) : base(instance) { }
        public certification_type() : base(0) { }

        public static implicit operator certification_type(SdaiInstance instance) => new certification_type(instance);

        /// <summary>
        /// Create new instace of certification_type and returns object of this class to interact with
        /// </summary>
        public static new certification_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "certification_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of chemical_mechanism
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class chemical_mechanism : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of chemical_mechanism
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public chemical_mechanism(SdaiInstance instance) : base(instance) { }
        public chemical_mechanism() : base(0) { }

        public static implicit operator chemical_mechanism(SdaiInstance instance) => new chemical_mechanism(instance);

        /// <summary>
        /// Create new instace of chemical_mechanism and returns object of this class to interact with
        /// </summary>
        public static new chemical_mechanism Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "chemical_mechanism"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit layer_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "layer_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "layer_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public pressure_measure_with_unit layer_design_strength 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "layer_design_strength", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "layer_design_strength", ifcengine.sdaiINSTANCE, i); }
            }
        public chemical_mechanism_type? layer_type 
            { 
            get { var str = get_string("layer_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.chemical_mechanism_type_); return EnumValue<chemical_mechanism_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<chemical_mechanism_type>.FromValue(value.Value, EnumNames.chemical_mechanism_type_); ifcengine.sdaiPutAttrBN(m_instance, "layer_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "chemical_mechanism"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conic : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conic(SdaiInstance instance) : base(instance) { }
        public conic() : base(0) { }

        public static implicit operator conic(SdaiInstance instance) => new conic(instance);

        /// <summary>
        /// Create new instace of conic and returns object of this class to interact with
        /// </summary>
        public static new conic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conic"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement position
            {
            get { return new axis2_placement(m_instance, "position", 0); }
            }

        protected override TextValue WrapperEntityName() { return "conic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circle : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circle(SdaiInstance instance) : base(instance) { }
        public circle() : base(0) { }

        public static implicit operator circle(SdaiInstance instance) => new circle(instance);

        /// <summary>
        /// Create new instace of circle and returns object of this class to interact with
        /// </summary>
        public static new circle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circle"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "circle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of primitive_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class primitive_2d : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of primitive_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public primitive_2d(SdaiInstance instance) : base(instance) { }
        public primitive_2d() : base(0) { }

        public static implicit operator primitive_2d(SdaiInstance instance) => new primitive_2d(instance);

        /// <summary>
        /// Create new instace of primitive_2d and returns object of this class to interact with
        /// </summary>
        public static new primitive_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "primitive_2d"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "primitive_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circular_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circular_area : primitive_2d
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circular_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circular_area(SdaiInstance instance) : base(instance) { }
        public circular_area() : base(0) { }

        public static implicit operator circular_area(SdaiInstance instance) => new circular_area(instance);

        /// <summary>
        /// Create new instace of circular_area and returns object of this class to interact with
        /// </summary>
        public static new circular_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circular_area"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point centre 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, i); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "circular_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of topological_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class topological_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of topological_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public topological_representation_item(SdaiInstance instance) : base(instance) { }
        public topological_representation_item() : base(0) { }

        public static implicit operator topological_representation_item(SdaiInstance instance) => new topological_representation_item(instance);

        /// <summary>
        /// Create new instace of topological_representation_item and returns object of this class to interact with
        /// </summary>
        public static new topological_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "topological_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "topological_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_face_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_face_set : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_face_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_face_set(SdaiInstance instance) : base(instance) { }
        public connected_face_set() : base(0) { }

        public static implicit operator connected_face_set(SdaiInstance instance) => new connected_face_set(instance);

        /// <summary>
        /// Create new instace of connected_face_set and returns object of this class to interact with
        /// </summary>
        public static new connected_face_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_face_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_face cfs_faces { get { return (new set_of_faceSerializer()).FromAttr(m_instance, "cfs_faces"); } }
        public void put_cfs_faces(IEnumerable<face> lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }
        public void put_cfs_faces_untyped(IEnumerable lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }

        protected override TextValue WrapperEntityName() { return "connected_face_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class closed_shell : connected_face_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public closed_shell(SdaiInstance instance) : base(instance) { }
        public closed_shell() : base(0) { }

        public static implicit operator closed_shell(SdaiInstance instance) => new closed_shell(instance);

        /// <summary>
        /// Create new instace of closed_shell and returns object of this class to interact with
        /// </summary>
        public static new closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "closed_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of clothoid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class clothoid : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of clothoid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public clothoid(SdaiInstance instance) : base(instance) { }
        public clothoid() : base(0) { }

        public static implicit operator clothoid(SdaiInstance instance) => new clothoid(instance);

        /// <summary>
        /// Create new instace of clothoid and returns object of this class to interact with
        /// </summary>
        public static new clothoid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "clothoid"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement position
            {
            get { return new axis2_placement(m_instance, "position", 0); }
            }
        public double? clothoid_constant
            {
            get { return get_double("clothoid_constant", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "clothoid_constant", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "clothoid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coating
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coating : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coating
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coating(SdaiInstance instance) : base(instance) { }
        public coating() : base(0) { }

        public static implicit operator coating(SdaiInstance instance) => new coating(instance);

        /// <summary>
        /// Create new instace of coating and returns object of this class to interact with
        /// </summary>
        public static new coating Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coating"); Debug.Assert(inst != 0); return inst; }

        public coating_purpose? primary_purpose 
            { 
            get { var str = get_string("primary_purpose", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.coating_purpose_); return EnumValue<coating_purpose>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<coating_purpose>.FromValue(value.Value, EnumNames.coating_purpose_); ifcengine.sdaiPutAttrBN(m_instance, "primary_purpose", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "coating"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of founded_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class founded_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of founded_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public founded_item(SdaiInstance instance) : base(instance) { }
        public founded_item() : base(0) { }

        public static implicit operator founded_item(SdaiInstance instance) => new founded_item(instance);

        /// <summary>
        /// Create new instace of founded_item and returns object of this class to interact with
        /// </summary>
        public static new founded_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "founded_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "founded_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_segment : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public composite_curve_segment() : base(0) { }

        public static implicit operator composite_curve_segment(SdaiInstance instance) => new composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public transition_code? transition 
            { 
            get { var str = get_string("transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public curve parent_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public bag_of_composite_curve using_curves { get { return (new bag_of_composite_curveSerializer()).FromAttr(m_instance, "using_curves"); } }

        protected override TextValue WrapperEntityName() { return "composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of elementary_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class elementary_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of elementary_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public elementary_surface(SdaiInstance instance) : base(instance) { }
        public elementary_surface() : base(0) { }

        public static implicit operator elementary_surface(SdaiInstance instance) => new elementary_surface(instance);

        /// <summary>
        /// Create new instace of elementary_surface and returns object of this class to interact with
        /// </summary>
        public static new elementary_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "elementary_surface"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "elementary_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conical_surface(SdaiInstance instance) : base(instance) { }
        public conical_surface() : base(0) { }

        public static implicit operator conical_surface(SdaiInstance instance) => new conical_surface(instance);

        /// <summary>
        /// Create new instace of conical_surface and returns object of this class to interact with
        /// </summary>
        public static new conical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_angle
            {
            get { return get_double("semi_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "conical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_edge_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_edge_set : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_edge_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_edge_set(SdaiInstance instance) : base(instance) { }
        public connected_edge_set() : base(0) { }

        public static implicit operator connected_edge_set(SdaiInstance instance) => new connected_edge_set(instance);

        /// <summary>
        /// Create new instace of connected_edge_set and returns object of this class to interact with
        /// </summary>
        public static new connected_edge_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_edge_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_edge ces_edges { get { return (new set_of_edgeSerializer()).FromAttr(m_instance, "ces_edges"); } }
        public void put_ces_edges(IEnumerable<edge> lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }
        public void put_ces_edges_untyped(IEnumerable lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }

        protected override TextValue WrapperEntityName() { return "connected_edge_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_unit(SdaiInstance instance) : base(instance) { }
        public context_dependent_unit() : base(0) { }

        public static implicit operator context_dependent_unit(SdaiInstance instance) => new context_dependent_unit(instance);

        /// <summary>
        /// Create new instace of context_dependent_unit and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "context_dependent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract(SdaiInstance instance) : base(instance) { }
        public contract() : base(0) { }

        public static implicit operator contract(SdaiInstance instance) => new contract(instance);

        /// <summary>
        /// Create new instace of contract and returns object of this class to interact with
        /// </summary>
        public static new contract Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public contract_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new contract_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "contract"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_type(SdaiInstance instance) : base(instance) { }
        public contract_type() : base(0) { }

        public static implicit operator contract_type(SdaiInstance instance) => new contract_type(instance);

        /// <summary>
        /// Create new instace of contract_type and returns object of this class to interact with
        /// </summary>
        public static new contract_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "contract_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conversion_based_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public conversion_based_unit() : base(0) { }

        public static implicit operator conversion_based_unit(SdaiInstance instance) => new conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conversion_based_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit conversion_factor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_primitive
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_primitive : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_primitive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_primitive(SdaiInstance instance) : base(instance) { }
        public faceted_primitive() : base(0) { }

        public static implicit operator faceted_primitive(SdaiInstance instance) => new faceted_primitive(instance);

        /// <summary>
        /// Create new instace of faceted_primitive and returns object of this class to interact with
        /// </summary>
        public static new faceted_primitive Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_primitive"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point points { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "points"); } }
        public void put_points(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }
        public void put_points_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }

        protected override TextValue WrapperEntityName() { return "faceted_primitive"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of convex_hexahedron
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class convex_hexahedron : faceted_primitive
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of convex_hexahedron
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public convex_hexahedron(SdaiInstance instance) : base(instance) { }
        public convex_hexahedron() : base(0) { }

        public static implicit operator convex_hexahedron(SdaiInstance instance) => new convex_hexahedron(instance);

        /// <summary>
        /// Create new instace of convex_hexahedron and returns object of this class to interact with
        /// </summary>
        public static new convex_hexahedron Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "convex_hexahedron"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "convex_hexahedron"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system(SdaiInstance instance) : base(instance) { }
        public coord_system() : base(0) { }

        public static implicit operator coord_system(SdaiInstance instance) => new coord_system(instance);

        public TextValue coord_system_name
            {
            get { return get_string("coord_system_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "coord_system_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue coord_system_use
            {
            get { return get_string("coord_system_use", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "coord_system_use", ifcengine.sdaiSTRING, value); }
            }
        public TextValue sign_convention
            {
            get { return get_string("sign_convention", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "sign_convention", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? coord_system_dimensionality
            {
            get { return get_IntValue("coord_system_dimensionality", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "coord_system_dimensionality", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "coord_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system_cartesian_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system_cartesian_2d : coord_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system_cartesian_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system_cartesian_2d(SdaiInstance instance) : base(instance) { }
        public coord_system_cartesian_2d() : base(0) { }

        public static implicit operator coord_system_cartesian_2d(SdaiInstance instance) => new coord_system_cartesian_2d(instance);

        /// <summary>
        /// Create new instace of coord_system_cartesian_2d and returns object of this class to interact with
        /// </summary>
        public static new coord_system_cartesian_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coord_system_cartesian_2d"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_2d axes_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axes_definition", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_2d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axes_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public double? origin_1 { get { return get_double("origin_1", ifcengine.sdaiREAL); } }
        public double? origin_2 { get { return get_double("origin_2", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "coord_system_cartesian_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system_cartesian_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system_cartesian_3d : coord_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system_cartesian_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system_cartesian_3d(SdaiInstance instance) : base(instance) { }
        public coord_system_cartesian_3d() : base(0) { }

        public static implicit operator coord_system_cartesian_3d(SdaiInstance instance) => new coord_system_cartesian_3d(instance);

        /// <summary>
        /// Create new instace of coord_system_cartesian_3d and returns object of this class to interact with
        /// </summary>
        public static new coord_system_cartesian_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coord_system_cartesian_3d"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d axes_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axes_definition", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axes_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public double? origin_x { get { return get_double("origin_x", ifcengine.sdaiREAL); } }
        public double? origin_y { get { return get_double("origin_y", ifcengine.sdaiREAL); } }
        public double? origin_z { get { return get_double("origin_z", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "coord_system_cartesian_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system_child
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system_child : coord_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system_child
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system_child(SdaiInstance instance) : base(instance) { }
        public coord_system_child() : base(0) { }

        public static implicit operator coord_system_child(SdaiInstance instance) => new coord_system_child(instance);

        /// <summary>
        /// Create new instace of coord_system_child and returns object of this class to interact with
        /// </summary>
        public static new coord_system_child Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coord_system_child"); Debug.Assert(inst != 0); return inst; }

        public coord_system parent_coord_system 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_coord_system", ifcengine.sdaiINSTANCE, out inst); return new coord_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_coord_system", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "coord_system_child"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system_cylindrical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system_cylindrical : coord_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system_cylindrical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system_cylindrical(SdaiInstance instance) : base(instance) { }
        public coord_system_cylindrical() : base(0) { }

        public static implicit operator coord_system_cylindrical(SdaiInstance instance) => new coord_system_cylindrical(instance);

        /// <summary>
        /// Create new instace of coord_system_cylindrical and returns object of this class to interact with
        /// </summary>
        public static new coord_system_cylindrical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coord_system_cylindrical"); Debug.Assert(inst != 0); return inst; }

        public cylindrical_point origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "origin", ifcengine.sdaiINSTANCE, out inst); return new cylindrical_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "origin", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction axes_definition { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "axes_definition"); } }
        public void put_axes_definition(IEnumerable<direction> lst) { (new list_of_directionSerializer()).ToSdaiAggr(lst, m_instance, "axes_definition"); }
        public void put_axes_definition_untyped(IEnumerable lst) { (new list_of_directionSerializer()).ToSdaiAggr(lst, m_instance, "axes_definition"); }

        protected override TextValue WrapperEntityName() { return "coord_system_cylindrical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coord_system_spherical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coord_system_spherical : coord_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coord_system_spherical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coord_system_spherical(SdaiInstance instance) : base(instance) { }
        public coord_system_spherical() : base(0) { }

        public static implicit operator coord_system_spherical(SdaiInstance instance) => new coord_system_spherical(instance);

        /// <summary>
        /// Create new instace of coord_system_spherical and returns object of this class to interact with
        /// </summary>
        public static new coord_system_spherical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coord_system_spherical"); Debug.Assert(inst != 0); return inst; }

        public spherical_point origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "origin", ifcengine.sdaiINSTANCE, out inst); return new spherical_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "origin", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction axes_definition { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "axes_definition"); } }
        public void put_axes_definition(IEnumerable<direction> lst) { (new list_of_directionSerializer()).ToSdaiAggr(lst, m_instance, "axes_definition"); }
        public void put_axes_definition_untyped(IEnumerable lst) { (new list_of_directionSerializer()).ToSdaiAggr(lst, m_instance, "axes_definition"); }

        protected override TextValue WrapperEntityName() { return "coord_system_spherical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coordinated_universal_time_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coordinated_universal_time_offset : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coordinated_universal_time_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coordinated_universal_time_offset(SdaiInstance instance) : base(instance) { }
        public coordinated_universal_time_offset() : base(0) { }

        public static implicit operator coordinated_universal_time_offset(SdaiInstance instance) => new coordinated_universal_time_offset(instance);

        /// <summary>
        /// Create new instace of coordinated_universal_time_offset and returns object of this class to interact with
        /// </summary>
        public static new coordinated_universal_time_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coordinated_universal_time_offset"); Debug.Assert(inst != 0); return inst; }

        public IntValue? hour_offset
            {
            get { return get_IntValue("hour_offset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hour_offset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? minute_offset
            {
            get { return get_IntValue("minute_offset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minute_offset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ahead_or_behind? sense 
            { 
            get { var str = get_string("sense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.ahead_or_behind_); return EnumValue<ahead_or_behind>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<ahead_or_behind>.FromValue(value.Value, EnumNames.ahead_or_behind_); ifcengine.sdaiPutAttrBN(m_instance, "sense", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? actual_minute_offset { get { return get_IntValue("actual_minute_offset", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "coordinated_universal_time_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of csg_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class csg_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of csg_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public csg_solid(SdaiInstance instance) : base(instance) { }
        public csg_solid() : base(0) { }

        public static implicit operator csg_solid(SdaiInstance instance) => new csg_solid(instance);

        /// <summary>
        /// Create new instace of csg_solid and returns object of this class to interact with
        /// </summary>
        public static new csg_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "csg_solid"); Debug.Assert(inst != 0); return inst; }


        public csg_select tree_root_expression
            {
            get { return new csg_select(m_instance, "tree_root_expression", 0); }
            }

        protected override TextValue WrapperEntityName() { return "csg_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of currency_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class currency_measure_with_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of currency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public currency_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public currency_measure_with_unit() : base(0) { }

        public static implicit operator currency_measure_with_unit(SdaiInstance instance) => new currency_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of currency_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new currency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "currency_measure_with_unit"); Debug.Assert(inst != 0); return inst; }

        public double? amount
            {
            get { return get_double("amount", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "amount", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public currency_unit unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, out inst); return new currency_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "currency_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of currency_rate_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class currency_rate_with_unit : currency_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of currency_rate_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public currency_rate_with_unit(SdaiInstance instance) : base(instance) { }
        public currency_rate_with_unit() : base(0) { }

        public static implicit operator currency_rate_with_unit(SdaiInstance instance) => new currency_rate_with_unit(instance);

        /// <summary>
        /// Create new instace of currency_rate_with_unit and returns object of this class to interact with
        /// </summary>
        public static new currency_rate_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "currency_rate_with_unit"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit per_quantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "per_quantity", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "per_quantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "currency_rate_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of currency_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class currency_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of currency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public currency_unit(SdaiInstance instance) : base(instance) { }
        public currency_unit() : base(0) { }

        public static implicit operator currency_unit(SdaiInstance instance) => new currency_unit(instance);

        /// <summary>
        /// Create new instace of currency_unit and returns object of this class to interact with
        /// </summary>
        public static new currency_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "currency_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "currency_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_bounded_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_bounded_surface(SdaiInstance instance) : base(instance) { }
        public curve_bounded_surface() : base(0) { }

        public static implicit operator curve_bounded_surface(SdaiInstance instance) => new curve_bounded_surface(instance);

        /// <summary>
        /// Create new instace of curve_bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new curve_bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_bounded_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_boundary_curve boundaries { get { return (new set_of_boundary_curveSerializer()).FromAttr(m_instance, "boundaries"); } }
        public void put_boundaries(IEnumerable<boundary_curve> lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public void put_boundaries_untyped(IEnumerable lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public bool? implicit_outer
            {
            get { return get_bool("implicit_outer", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "implicit_outer", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "curve_bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_replica : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_replica(SdaiInstance instance) : base(instance) { }
        public curve_replica() : base(0) { }

        public static implicit operator curve_replica(SdaiInstance instance) => new curve_replica(instance);

        /// <summary>
        /// Create new instace of curve_replica and returns object of this class to interact with
        /// </summary>
        public static new curve_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_replica"); Debug.Assert(inst != 0); return inst; }

        public curve parent_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "curve_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cut
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cut : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cut
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cut(SdaiInstance instance) : base(instance) { }
        public cut() : base(0) { }

        public static implicit operator cut(SdaiInstance instance) => new cut(instance);

        /// <summary>
        /// Create new instace of cut and returns object of this class to interact with
        /// </summary>
        public static new cut Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cut"); Debug.Assert(inst != 0); return inst; }

        public cutting_type? cutting_method 
            { 
            get { var str = get_string("cutting_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.cutting_type_); return EnumValue<cutting_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<cutting_type>.FromValue(value.Value, EnumNames.cutting_type_); ifcengine.sdaiPutAttrBN(m_instance, "cutting_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cut"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cyclide_segment_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cyclide_segment_solid : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cyclide_segment_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cyclide_segment_solid(SdaiInstance instance) : base(instance) { }
        public cyclide_segment_solid() : base(0) { }

        public static implicit operator cyclide_segment_solid(SdaiInstance instance) => new cyclide_segment_solid(instance);

        /// <summary>
        /// Create new instace of cyclide_segment_solid and returns object of this class to interact with
        /// </summary>
        public static new cyclide_segment_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cyclide_segment_solid"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? radius1
            {
            get { return get_double("radius1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius2
            {
            get { return get_double("radius2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? cone_angle1
            {
            get { return get_double("cone_angle1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "cone_angle1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? cone_angle2
            {
            get { return get_double("cone_angle2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "cone_angle2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? turn_angle
            {
            get { return get_double("turn_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "turn_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cyclide_segment_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_point : cartesian_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_point(SdaiInstance instance) : base(instance) { }
        public cylindrical_point() : base(0) { }

        public static implicit operator cylindrical_point(SdaiInstance instance) => new cylindrical_point(instance);

        /// <summary>
        /// Create new instace of cylindrical_point and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_point"); Debug.Assert(inst != 0); return inst; }

        public double? r
            {
            get { return get_double("r", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "r", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? theta
            {
            get { return get_double("theta", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "theta", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_surface(SdaiInstance instance) : base(instance) { }
        public cylindrical_surface() : base(0) { }

        public static implicit operator cylindrical_surface(SdaiInstance instance) => new cylindrical_surface(instance);

        /// <summary>
        /// Create new instace of cylindrical_surface and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_volume(SdaiInstance instance) : base(instance) { }
        public cylindrical_volume() : base(0) { }

        public static implicit operator cylindrical_volume(SdaiInstance instance) => new cylindrical_volume(instance);

        /// <summary>
        /// Create new instace of cylindrical_volume and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_and_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_and_time : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_and_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_and_time(SdaiInstance instance) : base(instance) { }
        public date_and_time() : base(0) { }

        public static implicit operator date_and_time(SdaiInstance instance) => new date_and_time(instance);

        /// <summary>
        /// Create new instace of date_and_time and returns object of this class to interact with
        /// </summary>
        public static new date_and_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_and_time"); Debug.Assert(inst != 0); return inst; }

        public calendar_date date_component 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, i); }
            }
        public local_time time_component 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, out inst); return new local_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "date_and_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation(SdaiInstance instance) : base(instance) { }
        public representation() : base(0) { }

        public static implicit operator representation(SdaiInstance instance) => new representation(instance);

        /// <summary>
        /// Create new instace of representation and returns object of this class to interact with
        /// </summary>
        public static new representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_representation_item items { get { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context context_of_items 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of definitional_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class definitional_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of definitional_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public definitional_representation(SdaiInstance instance) : base(instance) { }
        public definitional_representation() : base(0) { }

        public static implicit operator definitional_representation(SdaiInstance instance) => new definitional_representation(instance);

        /// <summary>
        /// Create new instace of definitional_representation and returns object of this class to interact with
        /// </summary>
        public static new definitional_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "definitional_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "definitional_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_pcurve : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public degenerate_pcurve() : base(0) { }

        public static implicit operator degenerate_pcurve(SdaiInstance instance) => new degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public definitional_representation reference_to_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class toroidal_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public toroidal_surface(SdaiInstance instance) : base(instance) { }
        public toroidal_surface() : base(0) { }

        public static implicit operator toroidal_surface(SdaiInstance instance) => new toroidal_surface(instance);

        /// <summary>
        /// Create new instace of toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public double? major_radius
            {
            get { return get_double("major_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? minor_radius
            {
            get { return get_double("minor_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_toroidal_surface : toroidal_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_toroidal_surface(SdaiInstance instance) : base(instance) { }
        public degenerate_toroidal_surface() : base(0) { }

        public static implicit operator degenerate_toroidal_surface(SdaiInstance instance) => new degenerate_toroidal_surface(instance);

        /// <summary>
        /// Create new instace of degenerate_toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new degenerate_toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? select_outer
            {
            get { return get_bool("select_outer", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "select_outer", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "degenerate_toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public derived_measure_with_unit() : base(0) { }

        public static implicit operator derived_measure_with_unit(SdaiInstance instance) => new derived_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of derived_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new derived_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "derived_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit(SdaiInstance instance) : base(instance) { }
        public derived_unit() : base(0) { }

        public static implicit operator derived_unit(SdaiInstance instance) => new derived_unit(instance);

        /// <summary>
        /// Create new instace of derived_unit and returns object of this class to interact with
        /// </summary>
        public static new derived_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit"); Debug.Assert(inst != 0); return inst; }

        public set_of_derived_unit_element elements { get { return (new set_of_derived_unit_elementSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<derived_unit_element> lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "derived_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit_element : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit_element(SdaiInstance instance) : base(instance) { }
        public derived_unit_element() : base(0) { }

        public static implicit operator derived_unit_element(SdaiInstance instance) => new derived_unit_element(instance);

        /// <summary>
        /// Create new instace of derived_unit_element and returns object of this class to interact with
        /// </summary>
        public static new derived_unit_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit_element"); Debug.Assert(inst != 0); return inst; }

        public named_unit unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, out inst); return new named_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, i); }
            }
        public double? exponent
            {
            get { return get_double("exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "derived_unit_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of description_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class description_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of description_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public description_attribute(SdaiInstance instance) : base(instance) { }
        public description_attribute() : base(0) { }

        public static implicit operator description_attribute(SdaiInstance instance) => new description_attribute(instance);

        /// <summary>
        /// Create new instace of description_attribute and returns object of this class to interact with
        /// </summary>
        public static new description_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "description_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public description_attribute_select described_item
            {
            get { return new description_attribute_select(m_instance, "described_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "description_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_criterion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_criterion : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_criterion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_criterion(SdaiInstance instance) : base(instance) { }
        public design_criterion() : base(0) { }

        public static implicit operator design_criterion(SdaiInstance instance) => new design_criterion(instance);

        /// <summary>
        /// Create new instace of design_criterion and returns object of this class to interact with
        /// </summary>
        public static new design_criterion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_criterion"); Debug.Assert(inst != 0); return inst; }

        public TextValue criterion_name
            {
            get { return get_string("criterion_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "criterion_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue criterion_description
            {
            get { return get_string("criterion_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "criterion_description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue design_assumptions
            {
            get { return get_string("design_assumptions", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "design_assumptions", ifcengine.sdaiSTRING, value); }
            }
        public set_of_assembly_design governed_assemblies { get { return (new set_of_assembly_designSerializer()).FromAttr(m_instance, "governed_assemblies"); } }

        protected override TextValue WrapperEntityName() { return "design_criterion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_criterion_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_criterion_documented : design_criterion
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_criterion_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_criterion_documented(SdaiInstance instance) : base(instance) { }
        public design_criterion_documented() : base(0) { }

        public static implicit operator design_criterion_documented(SdaiInstance instance) => new design_criterion_documented(instance);

        /// <summary>
        /// Create new instace of design_criterion_documented and returns object of this class to interact with
        /// </summary>
        public static new design_criterion_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_criterion_documented"); Debug.Assert(inst != 0); return inst; }

        public document_usage_constraint documented_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "documented_reference", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "documented_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "design_criterion_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_joint_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_joint_system : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_joint_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_joint_system(SdaiInstance instance) : base(instance) { }
        public design_joint_system() : base(0) { }

        public static implicit operator design_joint_system(SdaiInstance instance) => new design_joint_system(instance);

        /// <summary>
        /// Create new instace of design_joint_system and returns object of this class to interact with
        /// </summary>
        public static new design_joint_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_joint_system"); Debug.Assert(inst != 0); return inst; }

        public TextValue design_joint_system_name
            {
            get { return get_string("design_joint_system_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "design_joint_system_name", ifcengine.sdaiSTRING, value); }
            }
        public joint_system design_joint_system_spec 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "design_joint_system_spec", ifcengine.sdaiINSTANCE, out inst); return new joint_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "design_joint_system_spec", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_assembly_design parent_assemblies { get { return (new list_of_assembly_designSerializer()).FromAttr(m_instance, "parent_assemblies"); } }
        public void put_parent_assemblies(IEnumerable<assembly_design> lst) { (new list_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }
        public void put_parent_assemblies_untyped(IEnumerable lst) { (new list_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }
        public list_of_coord_system locations { get { return (new list_of_coord_systemSerializer()).FromAttr(m_instance, "locations"); } }
        public void put_locations(IEnumerable<coord_system> lst) { (new list_of_coord_systemSerializer()).ToSdaiAggr(lst, m_instance, "locations"); }
        public void put_locations_untyped(IEnumerable lst) { (new list_of_coord_systemSerializer()).ToSdaiAggr(lst, m_instance, "locations"); }
        public set_of_design_part connected_parts { get { return (new set_of_design_partSerializer()).FromAttr(m_instance, "connected_parts"); } }
        public void put_connected_parts(IEnumerable<design_part> lst) { (new set_of_design_partSerializer()).ToSdaiAggr(lst, m_instance, "connected_parts"); }
        public void put_connected_parts_untyped(IEnumerable lst) { (new set_of_design_partSerializer()).ToSdaiAggr(lst, m_instance, "connected_parts"); }

        protected override TextValue WrapperEntityName() { return "design_joint_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_part : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_part(SdaiInstance instance) : base(instance) { }
        public design_part() : base(0) { }

        public static implicit operator design_part(SdaiInstance instance) => new design_part(instance);

        /// <summary>
        /// Create new instace of design_part and returns object of this class to interact with
        /// </summary>
        public static new design_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_part"); Debug.Assert(inst != 0); return inst; }

        public TextValue design_part_name
            {
            get { return get_string("design_part_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "design_part_name", ifcengine.sdaiSTRING, value); }
            }
        public part design_part_spec 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "design_part_spec", ifcengine.sdaiINSTANCE, out inst); return new part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "design_part_spec", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_assembly_design parent_assemblies { get { return (new list_of_assembly_designSerializer()).FromAttr(m_instance, "parent_assemblies"); } }
        public void put_parent_assemblies(IEnumerable<assembly_design> lst) { (new list_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }
        public void put_parent_assemblies_untyped(IEnumerable lst) { (new list_of_assembly_designSerializer()).ToSdaiAggr(lst, m_instance, "parent_assemblies"); }
        public list_of_coord_system locations { get { return (new list_of_coord_systemSerializer()).FromAttr(m_instance, "locations"); } }
        public void put_locations(IEnumerable<coord_system> lst) { (new list_of_coord_systemSerializer()).ToSdaiAggr(lst, m_instance, "locations"); }
        public void put_locations_untyped(IEnumerable lst) { (new list_of_coord_systemSerializer()).ToSdaiAggr(lst, m_instance, "locations"); }

        protected override TextValue WrapperEntityName() { return "design_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result(SdaiInstance instance) : base(instance) { }
        public design_result() : base(0) { }

        public static implicit operator design_result(SdaiInstance instance) => new design_result(instance);

        public TextValue design_result_name
            {
            get { return get_string("design_result_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "design_result_name", ifcengine.sdaiSTRING, value); }
            }
        public resistance design_resistance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "design_resistance", ifcengine.sdaiINSTANCE, out inst); return new resistance(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "design_resistance", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "design_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_connection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_connection : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_connection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_connection(SdaiInstance instance) : base(instance) { }
        public design_result_connection() : base(0) { }

        public static implicit operator design_result_connection(SdaiInstance instance) => new design_result_connection(instance);

        /// <summary>
        /// Create new instace of design_result_connection and returns object of this class to interact with
        /// </summary>
        public static new design_result_connection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_connection"); Debug.Assert(inst != 0); return inst; }

        public assembly_design_structural_connection result_for_connection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_connection", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_connection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_connection", ifcengine.sdaiINSTANCE, i); }
            }
        public point result_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue position_label
            {
            get { return get_string("position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "position_label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_connection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_joint_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_joint_system : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_joint_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_joint_system(SdaiInstance instance) : base(instance) { }
        public design_result_joint_system() : base(0) { }

        public static implicit operator design_result_joint_system(SdaiInstance instance) => new design_result_joint_system(instance);

        /// <summary>
        /// Create new instace of design_result_joint_system and returns object of this class to interact with
        /// </summary>
        public static new design_result_joint_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_joint_system"); Debug.Assert(inst != 0); return inst; }

        public design_joint_system result_for_joint_system 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_joint_system", ifcengine.sdaiINSTANCE, out inst); return new design_joint_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_joint_system", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_joint_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_mapped
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_mapped : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_mapped
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_mapped(SdaiInstance instance) : base(instance) { }
        public design_result_mapped() : base(0) { }

        public static implicit operator design_result_mapped(SdaiInstance instance) => new design_result_mapped(instance);

        /// <summary>
        /// Create new instace of design_result_mapped and returns object of this class to interact with
        /// </summary>
        public static new design_result_mapped Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_mapped"); Debug.Assert(inst != 0); return inst; }

        public analysis_results_set origin_of_forces 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "origin_of_forces", ifcengine.sdaiINSTANCE, out inst); return new analysis_results_set(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "origin_of_forces", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_mapped"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_member
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_member : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_member
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_member(SdaiInstance instance) : base(instance) { }
        public design_result_member() : base(0) { }

        public static implicit operator design_result_member(SdaiInstance instance) => new design_result_member(instance);

        /// <summary>
        /// Create new instace of design_result_member and returns object of this class to interact with
        /// </summary>
        public static new design_result_member Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_member"); Debug.Assert(inst != 0); return inst; }

        public assembly_design_structural_member result_for_member 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_member", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_member(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_member", ifcengine.sdaiINSTANCE, i); }
            }
        public point result_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_position", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue position_label
            {
            get { return get_string("position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "position_label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_member"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_part : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_part(SdaiInstance instance) : base(instance) { }
        public design_result_part() : base(0) { }

        public static implicit operator design_result_part(SdaiInstance instance) => new design_result_part(instance);

        /// <summary>
        /// Create new instace of design_result_part and returns object of this class to interact with
        /// </summary>
        public static new design_result_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_part"); Debug.Assert(inst != 0); return inst; }

        public design_part result_for_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result_for_part", ifcengine.sdaiINSTANCE, out inst); return new design_part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result_for_part", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_result_resolved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_result_resolved : design_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_result_resolved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_result_resolved(SdaiInstance instance) : base(instance) { }
        public design_result_resolved() : base(0) { }

        public static implicit operator design_result_resolved(SdaiInstance instance) => new design_result_resolved(instance);

        /// <summary>
        /// Create new instace of design_result_resolved and returns object of this class to interact with
        /// </summary>
        public static new design_result_resolved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_result_resolved"); Debug.Assert(inst != 0); return inst; }

        public reaction_force design_forces 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "design_forces", ifcengine.sdaiINSTANCE, out inst); return new reaction_force(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "design_forces", ifcengine.sdaiINSTANCE, i); }
            }
        public double? design_factor
            {
            get { return get_double("design_factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "design_factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "design_result_resolved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_exponents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_exponents : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_exponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_exponents(SdaiInstance instance) : base(instance) { }
        public dimensional_exponents() : base(0) { }

        public static implicit operator dimensional_exponents(SdaiInstance instance) => new dimensional_exponents(instance);

        /// <summary>
        /// Create new instace of dimensional_exponents and returns object of this class to interact with
        /// </summary>
        public static new dimensional_exponents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_exponents"); Debug.Assert(inst != 0); return inst; }

        public double? length_exponent
            {
            get { return get_double("length_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "length_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? mass_exponent
            {
            get { return get_double("mass_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "mass_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? time_exponent
            {
            get { return get_double("time_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "time_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? electric_current_exponent
            {
            get { return get_double("electric_current_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "electric_current_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? thermodynamic_temperature_exponent
            {
            get { return get_double("thermodynamic_temperature_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "thermodynamic_temperature_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? amount_of_substance_exponent
            {
            get { return get_double("amount_of_substance_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "amount_of_substance_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? luminous_intensity_exponent
            {
            get { return get_double("luminous_intensity_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "luminous_intensity_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_exponents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of executed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class executed_action : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of executed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public executed_action(SdaiInstance instance) : base(instance) { }
        public executed_action() : base(0) { }

        public static implicit operator executed_action(SdaiInstance instance) => new executed_action(instance);

        /// <summary>
        /// Create new instace of executed_action and returns object of this class to interact with
        /// </summary>
        public static new executed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "executed_action"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "executed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_action : executed_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_action(SdaiInstance instance) : base(instance) { }
        public directed_action() : base(0) { }

        public static implicit operator directed_action(SdaiInstance instance) => new directed_action(instance);

        /// <summary>
        /// Create new instace of directed_action and returns object of this class to interact with
        /// </summary>
        public static new directed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_action"); Debug.Assert(inst != 0); return inst; }

        public action_directive directive 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, out inst); return new action_directive(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "directed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class direction : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public direction(SdaiInstance instance) : base(instance) { }
        public direction() : base(0) { }

        public static implicit operator direction(SdaiInstance instance) => new direction(instance);

        /// <summary>
        /// Create new instace of direction and returns object of this class to interact with
        /// </summary>
        public static new direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "direction"); Debug.Assert(inst != 0); return inst; }

        public list_of_double direction_ratios { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "direction_ratios"); } }
        public void put_direction_ratios(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }
        public void put_direction_ratios_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }

        protected override TextValue WrapperEntityName() { return "direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dispatch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dispatch : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dispatch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dispatch(SdaiInstance instance) : base(instance) { }
        public dispatch() : base(0) { }

        public static implicit operator dispatch(SdaiInstance instance) => new dispatch(instance);

        /// <summary>
        /// Create new instace of dispatch and returns object of this class to interact with
        /// </summary>
        public static new dispatch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dispatch"); Debug.Assert(inst != 0); return inst; }

        public list_of_product_item_select transported_products { get { return (new list_of_product_item_selectSerializer()).FromAttr(m_instance, "transported_products"); } }
        public void put_transported_products(IEnumerable<product_item_select> lst) { (new list_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "transported_products"); }
        public void put_transported_products_untyped(IEnumerable lst) { (new list_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "transported_products"); }
        public organizational_address dispatch_address 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dispatch_address", ifcengine.sdaiINSTANCE, out inst); return new organizational_address(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dispatch_address", ifcengine.sdaiINSTANCE, i); }
            }
        public organizational_address delivery_address 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "delivery_address", ifcengine.sdaiINSTANCE, out inst); return new organizational_address(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "delivery_address", ifcengine.sdaiINSTANCE, i); }
            }
        public calendar_date dispatch_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dispatch_date", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dispatch_date", ifcengine.sdaiINSTANCE, i); }
            }
        public calendar_date delivery_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "delivery_date", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "delivery_date", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dispatch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document(SdaiInstance instance) : base(instance) { }
        public document() : base(0) { }

        public static implicit operator document(SdaiInstance instance) => new document(instance);

        /// <summary>
        /// Create new instace of document and returns object of this class to interact with
        /// </summary>
        public static new document Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public document_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new document_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_document_representation_type representation_types { get { return (new set_of_document_representation_typeSerializer()).FromAttr(m_instance, "representation_types"); } }

        protected override TextValue WrapperEntityName() { return "document"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_relationship(SdaiInstance instance) : base(instance) { }
        public document_relationship() : base(0) { }

        public static implicit operator document_relationship(SdaiInstance instance) => new document_relationship(instance);

        /// <summary>
        /// Create new instace of document_relationship and returns object of this class to interact with
        /// </summary>
        public static new document_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public document relating_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, i); }
            }
        public document related_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "document_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_representation_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_representation_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_representation_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_representation_type(SdaiInstance instance) : base(instance) { }
        public document_representation_type() : base(0) { }

        public static implicit operator document_representation_type(SdaiInstance instance) => new document_representation_type(instance);

        /// <summary>
        /// Create new instace of document_representation_type and returns object of this class to interact with
        /// </summary>
        public static new document_representation_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_representation_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public document represented_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "document_representation_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_with_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_with_class : document
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_with_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_with_class(SdaiInstance instance) : base(instance) { }
        public document_with_class() : base(0) { }

        public static implicit operator document_with_class(SdaiInstance instance) => new document_with_class(instance);

        /// <summary>
        /// Create new instace of document_with_class and returns object of this class to interact with
        /// </summary>
        public static new document_with_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_with_class"); Debug.Assert(inst != 0); return inst; }

        public TextValue class_
            {
            get { return get_string("class_", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "class_", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_with_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_standard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_standard : document_with_class
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_standard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_standard(SdaiInstance instance) : base(instance) { }
        public document_standard() : base(0) { }

        public static implicit operator document_standard(SdaiInstance instance) => new document_standard(instance);

        /// <summary>
        /// Create new instace of document_standard and returns object of this class to interact with
        /// </summary>
        public static new document_standard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_standard"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_usage_constraint relevant_clauses { get { return (new set_of_document_usage_constraintSerializer()).FromAttr(m_instance, "relevant_clauses"); } }
        public set_of_document_usage_constraint clauses { get { return (new set_of_document_usage_constraintSerializer()).FromAttr(m_instance, "clauses"); } }

        protected override TextValue WrapperEntityName() { return "document_standard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_type(SdaiInstance instance) : base(instance) { }
        public document_type() : base(0) { }

        public static implicit operator document_type(SdaiInstance instance) => new document_type(instance);

        /// <summary>
        /// Create new instace of document_type and returns object of this class to interact with
        /// </summary>
        public static new document_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue product_data_type
            {
            get { return get_string("product_data_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "product_data_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage : document_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage(SdaiInstance instance) : base(instance) { }
        public document_usage() : base(0) { }

        public static implicit operator document_usage(SdaiInstance instance) => new document_usage(instance);

        /// <summary>
        /// Create new instace of document_usage and returns object of this class to interact with
        /// </summary>
        public static new document_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "document_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_constraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_constraint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_constraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_constraint(SdaiInstance instance) : base(instance) { }
        public document_usage_constraint() : base(0) { }

        public static implicit operator document_usage_constraint(SdaiInstance instance) => new document_usage_constraint(instance);

        /// <summary>
        /// Create new instace of document_usage_constraint and returns object of this class to interact with
        /// </summary>
        public static new document_usage_constraint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage_constraint"); Debug.Assert(inst != 0); return inst; }

        public document source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue subject_element
            {
            get { return get_string("subject_element", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "subject_element", ifcengine.sdaiSTRING, value); }
            }
        public TextValue subject_element_value
            {
            get { return get_string("subject_element_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "subject_element_value", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_usage_constraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of eccentric_cone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class eccentric_cone : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of eccentric_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public eccentric_cone(SdaiInstance instance) : base(instance) { }
        public eccentric_cone() : base(0) { }

        public static implicit operator eccentric_cone(SdaiInstance instance) => new eccentric_cone(instance);

        /// <summary>
        /// Create new instace of eccentric_cone and returns object of this class to interact with
        /// </summary>
        public static new eccentric_cone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "eccentric_cone"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? x_offset
            {
            get { return get_double("x_offset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x_offset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y_offset
            {
            get { return get_double("y_offset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y_offset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ratio
            {
            get { return get_double("ratio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ratio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "eccentric_cone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of eccentric_conical_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class eccentric_conical_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of eccentric_conical_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public eccentric_conical_volume(SdaiInstance instance) : base(instance) { }
        public eccentric_conical_volume() : base(0) { }

        public static implicit operator eccentric_conical_volume(SdaiInstance instance) => new eccentric_conical_volume(instance);

        /// <summary>
        /// Create new instace of eccentric_conical_volume and returns object of this class to interact with
        /// </summary>
        public static new eccentric_conical_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "eccentric_conical_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? x_offset
            {
            get { return get_double("x_offset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x_offset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y_offset
            {
            get { return get_double("y_offset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y_offset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ratio
            {
            get { return get_double("ratio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ratio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "eccentric_conical_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge(SdaiInstance instance) : base(instance) { }
        public edge() : base(0) { }

        public static implicit operator edge(SdaiInstance instance) => new edge(instance);

        /// <summary>
        /// Create new instace of edge and returns object of this class to interact with
        /// </summary>
        public static new edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge"); Debug.Assert(inst != 0); return inst; }

        public vertex edge_start 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, i); }
            }
        public vertex edge_end 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_based_wireframe_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_based_wireframe_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_based_wireframe_model(SdaiInstance instance) : base(instance) { }
        public edge_based_wireframe_model() : base(0) { }

        public static implicit operator edge_based_wireframe_model(SdaiInstance instance) => new edge_based_wireframe_model(instance);

        /// <summary>
        /// Create new instace of edge_based_wireframe_model and returns object of this class to interact with
        /// </summary>
        public static new edge_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_based_wireframe_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_edge_set ebwm_boundary { get { return (new set_of_connected_edge_setSerializer()).FromAttr(m_instance, "ebwm_boundary"); } }
        public void put_ebwm_boundary(IEnumerable<connected_edge_set> lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }
        public void put_ebwm_boundary_untyped(IEnumerable lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }

        protected override TextValue WrapperEntityName() { return "edge_based_wireframe_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_curve : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_curve(SdaiInstance instance) : base(instance) { }
        public edge_curve() : base(0) { }

        public static implicit operator edge_curve(SdaiInstance instance) => new edge_curve(instance);

        /// <summary>
        /// Create new instace of edge_curve and returns object of this class to interact with
        /// </summary>
        public static new edge_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_curve"); Debug.Assert(inst != 0); return inst; }

        public curve edge_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "edge_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loop : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loop(SdaiInstance instance) : base(instance) { }
        public loop() : base(0) { }

        public static implicit operator loop(SdaiInstance instance) => new loop(instance);

        /// <summary>
        /// Create new instace of loop and returns object of this class to interact with
        /// </summary>
        public static new loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loop"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_loop(SdaiInstance instance) : base(instance) { }
        public edge_loop() : base(0) { }

        public static implicit operator edge_loop(SdaiInstance instance) => new edge_loop(instance);

        /// <summary>
        /// Create new instace of edge_loop and returns object of this class to interact with
        /// </summary>
        public static new edge_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge edge_list { get { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public IntValue? ne { get { return get_IntValue("ne", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "edge_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effective_buckling_length
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effective_buckling_length : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effective_buckling_length
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effective_buckling_length(SdaiInstance instance) : base(instance) { }
        public effective_buckling_length() : base(0) { }

        public static implicit operator effective_buckling_length(SdaiInstance instance) => new effective_buckling_length(instance);

        /// <summary>
        /// Create new instace of effective_buckling_length and returns object of this class to interact with
        /// </summary>
        public static new effective_buckling_length Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effective_buckling_length"); Debug.Assert(inst != 0); return inst; }

        public TextValue effective_length_name
            {
            get { return get_string("effective_length_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "effective_length_name", ifcengine.sdaiSTRING, value); }
            }
        public double? effective_length_factor
            {
            get { return get_double("effective_length_factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "effective_length_factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue effective_length_use
            {
            get { return get_string("effective_length_use", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "effective_length_use", ifcengine.sdaiSTRING, value); }
            }
        public buckling_direction? effective_length_direction 
            { 
            get { var str = get_string("effective_length_direction", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.buckling_direction_); return EnumValue<buckling_direction>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<buckling_direction>.FromValue(value.Value, EnumNames.buckling_direction_); ifcengine.sdaiPutAttrBN(m_instance, "effective_length_direction", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public assembly_design_structural_member applicable_member 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applicable_member", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_member(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applicable_member", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "effective_buckling_length"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element(SdaiInstance instance) : base(instance) { }
        public element() : base(0) { }

        public static implicit operator element(SdaiInstance instance) => new element(instance);

        /// <summary>
        /// Create new instace of element and returns object of this class to interact with
        /// </summary>
        public static new element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element"); Debug.Assert(inst != 0); return inst; }

        public TextValue element_name
            {
            get { return get_string("element_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "element_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue element_description
            {
            get { return get_string("element_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "element_description", ifcengine.sdaiSTRING, value); }
            }
        public analysis_model parent_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? element_dimensionality
            {
            get { return get_IntValue("element_dimensionality", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "element_dimensionality", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public set_of_element_node_connectivity connectivity { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "connectivity"); } }

        protected override TextValue WrapperEntityName() { return "element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_curve : element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_curve(SdaiInstance instance) : base(instance) { }
        public element_curve() : base(0) { }

        public static implicit operator element_curve(SdaiInstance instance) => new element_curve(instance);

        public IntValue? element_subdivision
            {
            get { return get_IntValue("element_subdivision", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "element_subdivision", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public set_of_element_node_connectivity connectivities { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "connectivities"); } }

        protected override TextValue WrapperEntityName() { return "element_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_curve_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_curve_complex : element_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_curve_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_curve_complex(SdaiInstance instance) : base(instance) { }
        public element_curve_complex() : base(0) { }

        public static implicit operator element_curve_complex(SdaiInstance instance) => new element_curve_complex(instance);

        /// <summary>
        /// Create new instace of element_curve_complex and returns object of this class to interact with
        /// </summary>
        public static new element_curve_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_curve_complex"); Debug.Assert(inst != 0); return inst; }

        public list_of_section_profile cross_sections { get { return (new list_of_section_profileSerializer()).FromAttr(m_instance, "cross_sections"); } }
        public void put_cross_sections(IEnumerable<section_profile> lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public void put_cross_sections_untyped(IEnumerable lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public list_of_point_on_curve points_defining_element_axis { get { return (new list_of_point_on_curveSerializer()).FromAttr(m_instance, "points_defining_element_axis"); } }
        public void put_points_defining_element_axis(IEnumerable<point_on_curve> lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_element_axis"); }
        public void put_points_defining_element_axis_untyped(IEnumerable lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_element_axis"); }
        public list_of_orientation_select element_orientations { get { return (new list_of_orientation_selectSerializer()).FromAttr(m_instance, "element_orientations"); } }
        public void put_element_orientations(IEnumerable<orientation_select> lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "element_orientations"); }
        public void put_element_orientations_untyped(IEnumerable lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "element_orientations"); }
        public IntValue? number_of_sections { get { return get_IntValue("number_of_sections", ifcengine.sdaiINTEGER); } }
        public curve curve_defining_element { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_defining_element", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } }

        protected override TextValue WrapperEntityName() { return "element_curve_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_curve_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_curve_simple : element_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_curve_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_curve_simple(SdaiInstance instance) : base(instance) { }
        public element_curve_simple() : base(0) { }

        public static implicit operator element_curve_simple(SdaiInstance instance) => new element_curve_simple(instance);

        /// <summary>
        /// Create new instace of element_curve_simple and returns object of this class to interact with
        /// </summary>
        public static new element_curve_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_curve_simple"); Debug.Assert(inst != 0); return inst; }

        public section_profile cross_section 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "cross_section", ifcengine.sdaiINSTANCE, out inst); return new section_profile(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "cross_section", ifcengine.sdaiINSTANCE, i); }
            }

        public orientation_select element_orientation
            {
            get { return new orientation_select(m_instance, "element_orientation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "element_curve_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_eccentricity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_eccentricity : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_eccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_eccentricity(SdaiInstance instance) : base(instance) { }
        public element_eccentricity() : base(0) { }

        public static implicit operator element_eccentricity(SdaiInstance instance) => new element_eccentricity(instance);

        /// <summary>
        /// Create new instace of element_eccentricity and returns object of this class to interact with
        /// </summary>
        public static new element_eccentricity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_eccentricity"); Debug.Assert(inst != 0); return inst; }

        public TextValue element_eccentricity_name
            {
            get { return get_string("element_eccentricity_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "element_eccentricity_name", ifcengine.sdaiSTRING, value); }
            }
        public length_measure_with_unit x_eccentricity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "x_eccentricity", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "x_eccentricity", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit y_eccentricity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "y_eccentricity", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "y_eccentricity", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit z_eccentricity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "z_eccentricity", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "z_eccentricity", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_element_node_connectivity eccentric_connectivities { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "eccentric_connectivities"); } }

        protected override TextValue WrapperEntityName() { return "element_eccentricity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_mapping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_mapping : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_mapping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_mapping(SdaiInstance instance) : base(instance) { }
        public element_mapping() : base(0) { }

        public static implicit operator element_mapping(SdaiInstance instance) => new element_mapping(instance);

        /// <summary>
        /// Create new instace of element_mapping and returns object of this class to interact with
        /// </summary>
        public static new element_mapping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_mapping"); Debug.Assert(inst != 0); return inst; }

        public element mapped_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapped_element", ifcengine.sdaiINSTANCE, out inst); return new element(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapped_element", ifcengine.sdaiINSTANCE, i); }
            }

        public part_select represented_part
            {
            get { return new part_select(m_instance, "represented_part", 0); }
            }

        protected override TextValue WrapperEntityName() { return "element_mapping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_node_connectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_node_connectivity : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_node_connectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_node_connectivity(SdaiInstance instance) : base(instance) { }
        public element_node_connectivity() : base(0) { }

        public static implicit operator element_node_connectivity(SdaiInstance instance) => new element_node_connectivity(instance);

        /// <summary>
        /// Create new instace of element_node_connectivity and returns object of this class to interact with
        /// </summary>
        public static new element_node_connectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_node_connectivity"); Debug.Assert(inst != 0); return inst; }

        public IntValue? connectivity_number
            {
            get { return get_IntValue("connectivity_number", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "connectivity_number", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue connectivity_name
            {
            get { return get_string("connectivity_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "connectivity_name", ifcengine.sdaiSTRING, value); }
            }
        public node connecting_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "connecting_node", ifcengine.sdaiINSTANCE, out inst); return new node(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "connecting_node", ifcengine.sdaiINSTANCE, i); }
            }
        public element connecting_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "connecting_element", ifcengine.sdaiINSTANCE, out inst); return new element(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "connecting_element", ifcengine.sdaiINSTANCE, i); }
            }
        public element_eccentricity eccentricity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "eccentricity", ifcengine.sdaiINSTANCE, out inst); return new element_eccentricity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "eccentricity", ifcengine.sdaiINSTANCE, i); }
            }
        public release fixity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fixity", ifcengine.sdaiINSTANCE, out inst); return new release(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fixity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "element_node_connectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_point : element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_point(SdaiInstance instance) : base(instance) { }
        public element_point() : base(0) { }

        public static implicit operator element_point(SdaiInstance instance) => new element_point(instance);

        public bag_of_element_node_connectivity connectivities { get { return (new bag_of_element_node_connectivitySerializer()).FromAttr(m_instance, "connectivities"); } }

        protected override TextValue WrapperEntityName() { return "element_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_point_grounded_damper
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_point_grounded_damper : element_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_point_grounded_damper
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_point_grounded_damper(SdaiInstance instance) : base(instance) { }
        public element_point_grounded_damper() : base(0) { }

        public static implicit operator element_point_grounded_damper(SdaiInstance instance) => new element_point_grounded_damper(instance);

        /// <summary>
        /// Create new instace of element_point_grounded_damper and returns object of this class to interact with
        /// </summary>
        public static new element_point_grounded_damper Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_point_grounded_damper"); Debug.Assert(inst != 0); return inst; }

        public array_of_double damping_coefficients { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "damping_coefficients"); } }
        public void put_damping_coefficients(IEnumerable<double> lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "damping_coefficients"); }
        public void put_damping_coefficients_untyped(IEnumerable lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "damping_coefficients"); }

        protected override TextValue WrapperEntityName() { return "element_point_grounded_damper"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_point_grounded_spring
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_point_grounded_spring : element_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_point_grounded_spring
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_point_grounded_spring(SdaiInstance instance) : base(instance) { }
        public element_point_grounded_spring() : base(0) { }

        public static implicit operator element_point_grounded_spring(SdaiInstance instance) => new element_point_grounded_spring(instance);

        /// <summary>
        /// Create new instace of element_point_grounded_spring and returns object of this class to interact with
        /// </summary>
        public static new element_point_grounded_spring Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_point_grounded_spring"); Debug.Assert(inst != 0); return inst; }

        public array_of_double stiffness_coefficients { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "stiffness_coefficients"); } }
        public void put_stiffness_coefficients(IEnumerable<double> lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "stiffness_coefficients"); }
        public void put_stiffness_coefficients_untyped(IEnumerable lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "stiffness_coefficients"); }

        protected override TextValue WrapperEntityName() { return "element_point_grounded_spring"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_point_stationary_mass
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_point_stationary_mass : element_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_point_stationary_mass
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_point_stationary_mass(SdaiInstance instance) : base(instance) { }
        public element_point_stationary_mass() : base(0) { }

        public static implicit operator element_point_stationary_mass(SdaiInstance instance) => new element_point_stationary_mass(instance);

        /// <summary>
        /// Create new instace of element_point_stationary_mass and returns object of this class to interact with
        /// </summary>
        public static new element_point_stationary_mass Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_point_stationary_mass"); Debug.Assert(inst != 0); return inst; }

        public array_of_double masses { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "masses"); } }
        public void put_masses(IEnumerable<double> lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "masses"); }
        public void put_masses_untyped(IEnumerable lst) { (new array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "masses"); }
        public array_of_array_of_double moments_of_inertia { get { return (new array_of_array_of_doubleSerializer()).FromAttr(m_instance, "moments_of_inertia"); } }
        public void put_moments_of_inertia(IEnumerable<array_of_double> lst) { (new array_of_array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "moments_of_inertia"); }
        public void put_moments_of_inertia_untyped(IEnumerable lst) { (new array_of_array_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "moments_of_inertia"); }

        protected override TextValue WrapperEntityName() { return "element_point_stationary_mass"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_surface : element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_surface(SdaiInstance instance) : base(instance) { }
        public element_surface() : base(0) { }

        public static implicit operator element_surface(SdaiInstance instance) => new element_surface(instance);

        /// <summary>
        /// Create new instace of element_surface and returns object of this class to interact with
        /// </summary>
        public static new element_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_surface"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_element_node_connectivity connectivities { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "connectivities"); } }

        protected override TextValue WrapperEntityName() { return "element_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_surface_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_surface_complex : element_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_surface_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_surface_complex(SdaiInstance instance) : base(instance) { }
        public element_surface_complex() : base(0) { }

        public static implicit operator element_surface_complex(SdaiInstance instance) => new element_surface_complex(instance);

        /// <summary>
        /// Create new instace of element_surface_complex and returns object of this class to interact with
        /// </summary>
        public static new element_surface_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_surface_complex"); Debug.Assert(inst != 0); return inst; }

        public surface surface_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "element_surface_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_surface_plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_surface_plane : element_surface_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_surface_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_surface_plane(SdaiInstance instance) : base(instance) { }
        public element_surface_plane() : base(0) { }

        public static implicit operator element_surface_plane(SdaiInstance instance) => new element_surface_plane(instance);

        /// <summary>
        /// Create new instace of element_surface_plane and returns object of this class to interact with
        /// </summary>
        public static new element_surface_plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_surface_plane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "element_surface_plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_surface_profiled
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_surface_profiled : element_surface_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_surface_profiled
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_surface_profiled(SdaiInstance instance) : base(instance) { }
        public element_surface_profiled() : base(0) { }

        public static implicit operator element_surface_profiled(SdaiInstance instance) => new element_surface_profiled(instance);

        /// <summary>
        /// Create new instace of element_surface_profiled and returns object of this class to interact with
        /// </summary>
        public static new element_surface_profiled Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_surface_profiled"); Debug.Assert(inst != 0); return inst; }

        public curve profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "element_surface_profiled"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_surface_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_surface_simple : element_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_surface_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_surface_simple(SdaiInstance instance) : base(instance) { }
        public element_surface_simple() : base(0) { }

        public static implicit operator element_surface_simple(SdaiInstance instance) => new element_surface_simple(instance);

        /// <summary>
        /// Create new instace of element_surface_simple and returns object of this class to interact with
        /// </summary>
        public static new element_surface_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_surface_simple"); Debug.Assert(inst != 0); return inst; }

        public element_surface_shape? shape 
            { 
            get { var str = get_string("shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.element_surface_shape_); return EnumValue<element_surface_shape>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<element_surface_shape>.FromValue(value.Value, EnumNames.element_surface_shape_); ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public plane_stress_or_strain? assumption 
            { 
            get { var str = get_string("assumption", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.plane_stress_or_strain_); return EnumValue<plane_stress_or_strain>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<plane_stress_or_strain>.FromValue(value.Value, EnumNames.plane_stress_or_strain_); ifcengine.sdaiPutAttrBN(m_instance, "assumption", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "element_surface_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_volume : element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_volume(SdaiInstance instance) : base(instance) { }
        public element_volume() : base(0) { }

        public static implicit operator element_volume(SdaiInstance instance) => new element_volume(instance);

        public set_of_element_node_connectivity connectivities { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "connectivities"); } }

        protected override TextValue WrapperEntityName() { return "element_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_volume_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_volume_complex : element_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_volume_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_volume_complex(SdaiInstance instance) : base(instance) { }
        public element_volume_complex() : base(0) { }

        public static implicit operator element_volume_complex(SdaiInstance instance) => new element_volume_complex(instance);

        /// <summary>
        /// Create new instace of element_volume_complex and returns object of this class to interact with
        /// </summary>
        public static new element_volume_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_volume_complex"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "element_volume_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_volume_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_volume_simple : element_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_volume_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_volume_simple(SdaiInstance instance) : base(instance) { }
        public element_volume_simple() : base(0) { }

        public static implicit operator element_volume_simple(SdaiInstance instance) => new element_volume_simple(instance);

        /// <summary>
        /// Create new instace of element_volume_simple and returns object of this class to interact with
        /// </summary>
        public static new element_volume_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_volume_simple"); Debug.Assert(inst != 0); return inst; }

        public element_volume_shape? shape 
            { 
            get { var str = get_string("shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.element_volume_shape_); return EnumValue<element_volume_shape>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<element_volume_shape>.FromValue(value.Value, EnumNames.element_volume_shape_); ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "element_volume_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_with_material
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_with_material : element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_with_material
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_with_material(SdaiInstance instance) : base(instance) { }
        public element_with_material() : base(0) { }

        public static implicit operator element_with_material(SdaiInstance instance) => new element_with_material(instance);

        /// <summary>
        /// Create new instace of element_with_material and returns object of this class to interact with
        /// </summary>
        public static new element_with_material Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_with_material"); Debug.Assert(inst != 0); return inst; }

        public material material_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "material_definition", ifcengine.sdaiINSTANCE, out inst); return new material(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "material_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "element_with_material"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ellipse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ellipse : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ellipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ellipse(SdaiInstance instance) : base(instance) { }
        public ellipse() : base(0) { }

        public static implicit operator ellipse(SdaiInstance instance) => new ellipse(instance);

        /// <summary>
        /// Create new instace of ellipse and returns object of this class to interact with
        /// </summary>
        public static new ellipse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ellipse"); Debug.Assert(inst != 0); return inst; }

        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "ellipse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ellipsoid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ellipsoid : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ellipsoid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ellipsoid(SdaiInstance instance) : base(instance) { }
        public ellipsoid() : base(0) { }

        public static implicit operator ellipsoid(SdaiInstance instance) => new ellipsoid(instance);

        /// <summary>
        /// Create new instace of ellipsoid and returns object of this class to interact with
        /// </summary>
        public static new ellipsoid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ellipsoid"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_3
            {
            get { return get_double("semi_axis_3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "ellipsoid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ellipsoid_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ellipsoid_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ellipsoid_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ellipsoid_volume(SdaiInstance instance) : base(instance) { }
        public ellipsoid_volume() : base(0) { }

        public static implicit operator ellipsoid_volume(SdaiInstance instance) => new ellipsoid_volume(instance);

        /// <summary>
        /// Create new instace of ellipsoid_volume and returns object of this class to interact with
        /// </summary>
        public static new ellipsoid_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ellipsoid_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_3
            {
            get { return get_double("semi_axis_3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "ellipsoid_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of elliptic_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class elliptic_area : primitive_2d
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of elliptic_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public elliptic_area(SdaiInstance instance) : base(instance) { }
        public elliptic_area() : base(0) { }

        public static implicit operator elliptic_area(SdaiInstance instance) => new elliptic_area(instance);

        /// <summary>
        /// Create new instace of elliptic_area and returns object of this class to interact with
        /// </summary>
        public static new elliptic_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "elliptic_area"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_2d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_2d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "elliptic_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of evaluated_degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class evaluated_degenerate_pcurve : degenerate_pcurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of evaluated_degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public evaluated_degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public evaluated_degenerate_pcurve() : base(0) { }

        public static implicit operator evaluated_degenerate_pcurve(SdaiInstance instance) => new evaluated_degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of evaluated_degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new evaluated_degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "evaluated_degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point equivalent_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "evaluated_degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_area_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_area_solid(SdaiInstance instance) : base(instance) { }
        public swept_area_solid() : base(0) { }

        public static implicit operator swept_area_solid(SdaiInstance instance) => new swept_area_solid(instance);

        /// <summary>
        /// Create new instace of swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve_bounded_surface swept_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, out inst); return new curve_bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_area_solid(SdaiInstance instance) : base(instance) { }
        public extruded_area_solid() : base(0) { }

        public static implicit operator extruded_area_solid(SdaiInstance instance) => new extruded_area_solid(instance);

        /// <summary>
        /// Create new instace of extruded_area_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_area_solid"); Debug.Assert(inst != 0); return inst; }

        public direction extruded_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public double? depth
            {
            get { return get_double("depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "extruded_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_face_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_face_solid(SdaiInstance instance) : base(instance) { }
        public swept_face_solid() : base(0) { }

        public static implicit operator swept_face_solid(SdaiInstance instance) => new swept_face_solid(instance);

        /// <summary>
        /// Create new instace of swept_face_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_face_solid"); Debug.Assert(inst != 0); return inst; }

        public face_surface swept_face 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, out inst); return new face_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid : swept_face_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid() : base(0) { }

        public static implicit operator extruded_face_solid(SdaiInstance instance) => new extruded_face_solid(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid"); Debug.Assert(inst != 0); return inst; }

        public direction extruded_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public double? depth
            {
            get { return get_double("depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "extruded_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face(SdaiInstance instance) : base(instance) { }
        public face() : base(0) { }

        public static implicit operator face(SdaiInstance instance) => new face(instance);

        /// <summary>
        /// Create new instace of face and returns object of this class to interact with
        /// </summary>
        public static new face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face"); Debug.Assert(inst != 0); return inst; }

        public set_of_face_bound bounds { get { return (new set_of_face_boundSerializer()).FromAttr(m_instance, "bounds"); } }
        public void put_bounds(IEnumerable<face_bound> lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }
        public void put_bounds_untyped(IEnumerable lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }

        protected override TextValue WrapperEntityName() { return "face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_based_surface_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_based_surface_model(SdaiInstance instance) : base(instance) { }
        public face_based_surface_model() : base(0) { }

        public static implicit operator face_based_surface_model(SdaiInstance instance) => new face_based_surface_model(instance);

        /// <summary>
        /// Create new instace of face_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new face_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_face_set fbsm_faces { get { return (new set_of_connected_face_setSerializer()).FromAttr(m_instance, "fbsm_faces"); } }
        public void put_fbsm_faces(IEnumerable<connected_face_set> lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }
        public void put_fbsm_faces_untyped(IEnumerable lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }

        protected override TextValue WrapperEntityName() { return "face_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_bound : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_bound(SdaiInstance instance) : base(instance) { }
        public face_bound() : base(0) { }

        public static implicit operator face_bound(SdaiInstance instance) => new face_bound(instance);

        /// <summary>
        /// Create new instace of face_bound and returns object of this class to interact with
        /// </summary>
        public static new face_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_bound"); Debug.Assert(inst != 0); return inst; }

        public loop bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, out inst); return new loop(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "face_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_outer_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_outer_bound : face_bound
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_outer_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_outer_bound(SdaiInstance instance) : base(instance) { }
        public face_outer_bound() : base(0) { }

        public static implicit operator face_outer_bound(SdaiInstance instance) => new face_outer_bound(instance);

        /// <summary>
        /// Create new instace of face_outer_bound and returns object of this class to interact with
        /// </summary>
        public static new face_outer_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_outer_bound"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "face_outer_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_surface : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_surface(SdaiInstance instance) : base(instance) { }
        public face_surface() : base(0) { }

        public static implicit operator face_surface(SdaiInstance instance) => new face_surface(instance);

        /// <summary>
        /// Create new instace of face_surface and returns object of this class to interact with
        /// </summary>
        public static new face_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_surface"); Debug.Assert(inst != 0); return inst; }

        public surface face_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "face_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_brep : manifold_solid_brep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_brep(SdaiInstance instance) : base(instance) { }
        public faceted_brep() : base(0) { }

        public static implicit operator faceted_brep(SdaiInstance instance) => new faceted_brep(instance);

        /// <summary>
        /// Create new instace of faceted_brep and returns object of this class to interact with
        /// </summary>
        public static new faceted_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_brep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "faceted_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener(SdaiInstance instance) : base(instance) { }
        public fastener() : base(0) { }

        public static implicit operator fastener(SdaiInstance instance) => new fastener(instance);

        /// <summary>
        /// Create new instace of fastener and returns object of this class to interact with
        /// </summary>
        public static new fastener Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener"); Debug.Assert(inst != 0); return inst; }

        public TextValue fastener_grade
            {
            get { return get_string("fastener_grade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "fastener_grade", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "fastener"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_complex : fastener
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_complex(SdaiInstance instance) : base(instance) { }
        public fastener_complex() : base(0) { }

        public static implicit operator fastener_complex(SdaiInstance instance) => new fastener_complex(instance);

        /// <summary>
        /// Create new instace of fastener_complex and returns object of this class to interact with
        /// </summary>
        public static new fastener_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_complex"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units fastener_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fastener_shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fastener_shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_mechanism
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_mechanism : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_mechanism
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_mechanism(SdaiInstance instance) : base(instance) { }
        public fastener_mechanism() : base(0) { }

        public static implicit operator fastener_mechanism(SdaiInstance instance) => new fastener_mechanism(instance);

        /// <summary>
        /// Create new instace of fastener_mechanism and returns object of this class to interact with
        /// </summary>
        public static new fastener_mechanism Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_mechanism"); Debug.Assert(inst != 0); return inst; }

        public TextValue sequence
            {
            get { return get_string("sequence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "sequence", ifcengine.sdaiSTRING, value); }
            }
        public list_of_fastener fasteners { get { return (new list_of_fastenerSerializer()).FromAttr(m_instance, "fasteners"); } }
        public void put_fasteners(IEnumerable<fastener> lst) { (new list_of_fastenerSerializer()).ToSdaiAggr(lst, m_instance, "fasteners"); }
        public void put_fasteners_untyped(IEnumerable lst) { (new list_of_fastenerSerializer()).ToSdaiAggr(lst, m_instance, "fasteners"); }

        protected override TextValue WrapperEntityName() { return "fastener_mechanism"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_mechanism_with_position
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_mechanism_with_position : fastener_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_mechanism_with_position
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_mechanism_with_position(SdaiInstance instance) : base(instance) { }
        public fastener_mechanism_with_position() : base(0) { }

        public static implicit operator fastener_mechanism_with_position(SdaiInstance instance) => new fastener_mechanism_with_position(instance);

        /// <summary>
        /// Create new instace of fastener_mechanism_with_position and returns object of this class to interact with
        /// </summary>
        public static new fastener_mechanism_with_position Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_mechanism_with_position"); Debug.Assert(inst != 0); return inst; }

        public list_of_length_measure_with_unit fastener_positions { get { return (new list_of_length_measure_with_unitSerializer()).FromAttr(m_instance, "fastener_positions"); } }
        public void put_fastener_positions(IEnumerable<length_measure_with_unit> lst) { (new list_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "fastener_positions"); }
        public void put_fastener_positions_untyped(IEnumerable lst) { (new list_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "fastener_positions"); }

        protected override TextValue WrapperEntityName() { return "fastener_mechanism_with_position"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple : fastener
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple(SdaiInstance instance) : base(instance) { }
        public fastener_simple() : base(0) { }

        public static implicit operator fastener_simple(SdaiInstance instance) => new fastener_simple(instance);

        /// <summary>
        /// Create new instace of fastener_simple and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit nominal_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "nominal_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "nominal_diameter", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit nominal_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "nominal_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "nominal_length", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_bolt
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_bolt : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_bolt
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_bolt(SdaiInstance instance) : base(instance) { }
        public fastener_simple_bolt() : base(0) { }

        public static implicit operator fastener_simple_bolt(SdaiInstance instance) => new fastener_simple_bolt(instance);

        /// <summary>
        /// Create new instace of fastener_simple_bolt and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_bolt Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_bolt"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit length_of_shank 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "length_of_shank", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "length_of_shank", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit bolt_preload 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bolt_preload", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bolt_preload", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit full_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit reduced_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, i); }
            }
        public bag_of_identifier bolt_ref { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "bolt_ref"); } }

        protected override TextValue WrapperEntityName() { return "fastener_simple_bolt"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_bolt_circular_head
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_bolt_circular_head : fastener_simple_bolt
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_bolt_circular_head
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_bolt_circular_head(SdaiInstance instance) : base(instance) { }
        public fastener_simple_bolt_circular_head() : base(0) { }

        public static implicit operator fastener_simple_bolt_circular_head(SdaiInstance instance) => new fastener_simple_bolt_circular_head(instance);

        /// <summary>
        /// Create new instace of fastener_simple_bolt_circular_head and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_bolt_circular_head Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_bolt_circular_head"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit bolt_head_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit head_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "head_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "head_diameter", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_bolt_circular_head"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_bolt_hexagonal_head
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_bolt_hexagonal_head : fastener_simple_bolt
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_bolt_hexagonal_head
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_bolt_hexagonal_head(SdaiInstance instance) : base(instance) { }
        public fastener_simple_bolt_hexagonal_head() : base(0) { }

        public static implicit operator fastener_simple_bolt_hexagonal_head(SdaiInstance instance) => new fastener_simple_bolt_hexagonal_head(instance);

        /// <summary>
        /// Create new instace of fastener_simple_bolt_hexagonal_head and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_bolt_hexagonal_head Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_bolt_hexagonal_head"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit bolt_head_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit distance_across_vertices 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_vertices", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_vertices", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit distance_across_flats 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_bolt_hexagonal_head"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_bolt_square_head
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_bolt_square_head : fastener_simple_bolt
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_bolt_square_head
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_bolt_square_head(SdaiInstance instance) : base(instance) { }
        public fastener_simple_bolt_square_head() : base(0) { }

        public static implicit operator fastener_simple_bolt_square_head(SdaiInstance instance) => new fastener_simple_bolt_square_head(instance);

        /// <summary>
        /// Create new instace of fastener_simple_bolt_square_head and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_bolt_square_head Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_bolt_square_head"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit bolt_head_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bolt_head_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit distance_across_flats 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_bolt_square_head"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_countersunk
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_countersunk : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_countersunk
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_countersunk(SdaiInstance instance) : base(instance) { }
        public fastener_simple_countersunk() : base(0) { }

        public static implicit operator fastener_simple_countersunk(SdaiInstance instance) => new fastener_simple_countersunk(instance);

        /// <summary>
        /// Create new instace of fastener_simple_countersunk and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_countersunk Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_countersunk"); Debug.Assert(inst != 0); return inst; }

        public plane_angle_measure_with_unit countersink_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "countersink_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "countersink_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit countersink_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "countersink_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "countersink_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_countersunk"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_curved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_curved : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_curved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_curved(SdaiInstance instance) : base(instance) { }
        public fastener_simple_curved() : base(0) { }

        public static implicit operator fastener_simple_curved(SdaiInstance instance) => new fastener_simple_curved(instance);

        /// <summary>
        /// Create new instace of fastener_simple_curved and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_curved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_curved"); Debug.Assert(inst != 0); return inst; }

        public curve curve_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_curved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nail
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nail : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nail
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nail(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nail() : base(0) { }

        public static implicit operator fastener_simple_nail(SdaiInstance instance) => new fastener_simple_nail(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nail and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nail Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nail"); Debug.Assert(inst != 0); return inst; }

        public TextValue nail_type
            {
            get { return get_string("nail_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "nail_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue nail_drive_type
            {
            get { return get_string("nail_drive_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "nail_drive_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue nail_head_shape
            {
            get { return get_string("nail_head_shape", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "nail_head_shape", ifcengine.sdaiSTRING, value); }
            }
        public TextValue nail_point_type
            {
            get { return get_string("nail_point_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "nail_point_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nail"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nut
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nut : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nut
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nut(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nut() : base(0) { }

        public static implicit operator fastener_simple_nut(SdaiInstance instance) => new fastener_simple_nut(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nut and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nut Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nut"); Debug.Assert(inst != 0); return inst; }

        public bag_of_identifier nut_ref { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "nut_ref"); } }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nut"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nut_circular
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nut_circular : fastener_simple_nut
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nut_circular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nut_circular(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nut_circular() : base(0) { }

        public static implicit operator fastener_simple_nut_circular(SdaiInstance instance) => new fastener_simple_nut_circular(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nut_circular and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nut_circular Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nut_circular"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit outside_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "outside_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "outside_diameter", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nut_circular"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nut_closed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nut_closed : fastener_simple_nut
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nut_closed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nut_closed(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nut_closed() : base(0) { }

        public static implicit operator fastener_simple_nut_closed(SdaiInstance instance) => new fastener_simple_nut_closed(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nut_closed and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nut_closed Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nut_closed"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit nut_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "nut_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "nut_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nut_closed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nut_hexagonal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nut_hexagonal : fastener_simple_nut
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nut_hexagonal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nut_hexagonal(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nut_hexagonal() : base(0) { }

        public static implicit operator fastener_simple_nut_hexagonal(SdaiInstance instance) => new fastener_simple_nut_hexagonal(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nut_hexagonal and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nut_hexagonal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nut_hexagonal"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit distance_across_vertices 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_vertices", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_vertices", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit distance_across_flats 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nut_hexagonal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_nut_square
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_nut_square : fastener_simple_nut
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_nut_square
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_nut_square(SdaiInstance instance) : base(instance) { }
        public fastener_simple_nut_square() : base(0) { }

        public static implicit operator fastener_simple_nut_square(SdaiInstance instance) => new fastener_simple_nut_square(instance);

        /// <summary>
        /// Create new instace of fastener_simple_nut_square and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_nut_square Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_nut_square"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit distance_across_flats 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "distance_across_flats", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_nut_square"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_pin
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_pin : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_pin
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_pin(SdaiInstance instance) : base(instance) { }
        public fastener_simple_pin() : base(0) { }

        public static implicit operator fastener_simple_pin(SdaiInstance instance) => new fastener_simple_pin(instance);

        /// <summary>
        /// Create new instace of fastener_simple_pin and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_pin Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_pin"); Debug.Assert(inst != 0); return inst; }

        public TextValue pin_type
            {
            get { return get_string("pin_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "pin_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_pin"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_screw
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_screw : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_screw
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_screw(SdaiInstance instance) : base(instance) { }
        public fastener_simple_screw() : base(0) { }

        public static implicit operator fastener_simple_screw(SdaiInstance instance) => new fastener_simple_screw(instance);

        /// <summary>
        /// Create new instace of fastener_simple_screw and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_screw Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_screw"); Debug.Assert(inst != 0); return inst; }

        public TextValue screw_type
            {
            get { return get_string("screw_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "screw_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue screw_drive_type
            {
            get { return get_string("screw_drive_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "screw_drive_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue screw_point_type
            {
            get { return get_string("screw_point_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "screw_point_type", ifcengine.sdaiSTRING, value); }
            }
        public positive_length_measure_with_unit screw_head_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "screw_head_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "screw_head_height", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit full_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit reduced_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_screw"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_screw_machine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_screw_machine : fastener_simple_screw
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_screw_machine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_screw_machine(SdaiInstance instance) : base(instance) { }
        public fastener_simple_screw_machine() : base(0) { }

        public static implicit operator fastener_simple_screw_machine(SdaiInstance instance) => new fastener_simple_screw_machine(instance);

        /// <summary>
        /// Create new instace of fastener_simple_screw_machine and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_screw_machine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_screw_machine"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "fastener_simple_screw_machine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_screw_self_drilling
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_screw_self_drilling : fastener_simple_screw
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_screw_self_drilling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_screw_self_drilling(SdaiInstance instance) : base(instance) { }
        public fastener_simple_screw_self_drilling() : base(0) { }

        public static implicit operator fastener_simple_screw_self_drilling(SdaiInstance instance) => new fastener_simple_screw_self_drilling(instance);

        /// <summary>
        /// Create new instace of fastener_simple_screw_self_drilling and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_screw_self_drilling Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_screw_self_drilling"); Debug.Assert(inst != 0); return inst; }

        public cutting_type? hole_cutting_method 
            { 
            get { var str = get_string("hole_cutting_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.cutting_type_); return EnumValue<cutting_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<cutting_type>.FromValue(value.Value, EnumNames.cutting_type_); ifcengine.sdaiPutAttrBN(m_instance, "hole_cutting_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit pilot_hole_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pilot_hole_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pilot_hole_diameter", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit drill_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "drill_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "drill_diameter", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_screw_self_drilling"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_screw_self_tapping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_screw_self_tapping : fastener_simple_screw
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_screw_self_tapping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_screw_self_tapping(SdaiInstance instance) : base(instance) { }
        public fastener_simple_screw_self_tapping() : base(0) { }

        public static implicit operator fastener_simple_screw_self_tapping(SdaiInstance instance) => new fastener_simple_screw_self_tapping(instance);

        /// <summary>
        /// Create new instace of fastener_simple_screw_self_tapping and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_screw_self_tapping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_screw_self_tapping"); Debug.Assert(inst != 0); return inst; }

        public cutting_type? thread_cutting_method 
            { 
            get { var str = get_string("thread_cutting_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.cutting_type_); return EnumValue<cutting_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<cutting_type>.FromValue(value.Value, EnumNames.cutting_type_); ifcengine.sdaiPutAttrBN(m_instance, "thread_cutting_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit pilot_hole_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pilot_hole_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pilot_hole_diameter", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_screw_self_tapping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_screw_tapered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_screw_tapered : fastener_simple_screw
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_screw_tapered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_screw_tapered(SdaiInstance instance) : base(instance) { }
        public fastener_simple_screw_tapered() : base(0) { }

        public static implicit operator fastener_simple_screw_tapered(SdaiInstance instance) => new fastener_simple_screw_tapered(instance);

        /// <summary>
        /// Create new instace of fastener_simple_screw_tapered and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_screw_tapered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_screw_tapered"); Debug.Assert(inst != 0); return inst; }

        public length_measure_with_unit absolute_taper 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_taper", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_taper", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_taper 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_taper", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_taper", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_screw_tapered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_shear_connector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_shear_connector : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_shear_connector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_shear_connector(SdaiInstance instance) : base(instance) { }
        public fastener_simple_shear_connector() : base(0) { }

        public static implicit operator fastener_simple_shear_connector(SdaiInstance instance) => new fastener_simple_shear_connector(instance);

        /// <summary>
        /// Create new instace of fastener_simple_shear_connector and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_shear_connector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_shear_connector"); Debug.Assert(inst != 0); return inst; }

        public TextValue head_shape
            {
            get { return get_string("head_shape", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "head_shape", ifcengine.sdaiSTRING, value); }
            }
        public TextValue connector_type
            {
            get { return get_string("connector_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "connector_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue connection_method
            {
            get { return get_string("connection_method", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "connection_method", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_shear_connector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_stud
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_stud : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_stud
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_stud(SdaiInstance instance) : base(instance) { }
        public fastener_simple_stud() : base(0) { }

        public static implicit operator fastener_simple_stud(SdaiInstance instance) => new fastener_simple_stud(instance);

        /// <summary>
        /// Create new instace of fastener_simple_stud and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_stud Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_stud"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit thread_length_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_length_1", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_length_1", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit thread_length_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_length_2", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_length_2", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit length_of_shank 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "length_of_shank", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "length_of_shank", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit full_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "full_section_area", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit reduced_section_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reduced_section_area", ifcengine.sdaiINSTANCE, i); }
            }
        public double? thread_length_value_1 { get { return get_double("thread_length_value_1", ifcengine.sdaiREAL); } }
        public double? thread_length_value_2 { get { return get_double("thread_length_value_2", ifcengine.sdaiREAL); } }
        public double? length_of_shank_value { get { return get_double("length_of_shank_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "fastener_simple_stud"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_washer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_washer : fastener_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_washer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_washer(SdaiInstance instance) : base(instance) { }
        public fastener_simple_washer() : base(0) { }

        public static implicit operator fastener_simple_washer(SdaiInstance instance) => new fastener_simple_washer(instance);

        /// <summary>
        /// Create new instace of fastener_simple_washer and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_washer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_washer"); Debug.Assert(inst != 0); return inst; }

        public TextValue washer_shape
            {
            get { return get_string("washer_shape", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "washer_shape", ifcengine.sdaiSTRING, value); }
            }
        public positive_length_measure_with_unit inside_diameter 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "inside_diameter", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "inside_diameter", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit external_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "external_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "external_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public bag_of_identifier washer_ref { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "washer_ref"); } }

        protected override TextValue WrapperEntityName() { return "fastener_simple_washer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_washer_load_indicating
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_washer_load_indicating : fastener_simple_washer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_washer_load_indicating
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_washer_load_indicating(SdaiInstance instance) : base(instance) { }
        public fastener_simple_washer_load_indicating() : base(0) { }

        public static implicit operator fastener_simple_washer_load_indicating(SdaiInstance instance) => new fastener_simple_washer_load_indicating(instance);

        /// <summary>
        /// Create new instace of fastener_simple_washer_load_indicating and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_washer_load_indicating Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_washer_load_indicating"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit final_gap 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "final_gap", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "final_gap", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_washer_load_indicating"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fastener_simple_washer_tapered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fastener_simple_washer_tapered : fastener_simple_washer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fastener_simple_washer_tapered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fastener_simple_washer_tapered(SdaiInstance instance) : base(instance) { }
        public fastener_simple_washer_tapered() : base(0) { }

        public static implicit operator fastener_simple_washer_tapered(SdaiInstance instance) => new fastener_simple_washer_tapered(instance);

        /// <summary>
        /// Create new instace of fastener_simple_washer_tapered and returns object of this class to interact with
        /// </summary>
        public static new fastener_simple_washer_tapered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fastener_simple_washer_tapered"); Debug.Assert(inst != 0); return inst; }

        public ratio_measure_with_unit taper 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "taper", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "taper", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fastener_simple_washer_tapered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature(SdaiInstance instance) : base(instance) { }
        public feature() : base(0) { }

        public static implicit operator feature(SdaiInstance instance) => new feature(instance);

        /// <summary>
        /// Create new instace of feature and returns object of this class to interact with
        /// </summary>
        public static new feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature"); Debug.Assert(inst != 0); return inst; }

        public set_of_located_feature uses { get { return (new set_of_located_featureSerializer()).FromAttr(m_instance, "uses"); } }

        protected override TextValue WrapperEntityName() { return "feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_cutting_plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_cutting_plane : feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_cutting_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_cutting_plane(SdaiInstance instance) : base(instance) { }
        public feature_cutting_plane() : base(0) { }

        public static implicit operator feature_cutting_plane(SdaiInstance instance) => new feature_cutting_plane(instance);

        /// <summary>
        /// Create new instace of feature_cutting_plane and returns object of this class to interact with
        /// </summary>
        public static new feature_cutting_plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_cutting_plane"); Debug.Assert(inst != 0); return inst; }

        public plane plane_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "plane_definition", ifcengine.sdaiINSTANCE, out inst); return new plane(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "plane_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_cutting_plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_edge_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_edge_chamfer : feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_edge_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_edge_chamfer(SdaiInstance instance) : base(instance) { }
        public feature_edge_chamfer() : base(0) { }

        public static implicit operator feature_edge_chamfer(SdaiInstance instance) => new feature_edge_chamfer(instance);

        public bool? follow_round
            {
            get { return get_bool("follow_round", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "follow_round", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "feature_edge_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_edge_chamfer_fillet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_edge_chamfer_fillet : feature_edge_chamfer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_edge_chamfer_fillet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_edge_chamfer_fillet(SdaiInstance instance) : base(instance) { }
        public feature_edge_chamfer_fillet() : base(0) { }

        public static implicit operator feature_edge_chamfer_fillet(SdaiInstance instance) => new feature_edge_chamfer_fillet(instance);

        /// <summary>
        /// Create new instace of feature_edge_chamfer_fillet and returns object of this class to interact with
        /// </summary>
        public static new feature_edge_chamfer_fillet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_edge_chamfer_fillet"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit edge_fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_edge_chamfer_fillet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_edge_chamfer_rounding
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_edge_chamfer_rounding : feature_edge_chamfer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_edge_chamfer_rounding
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_edge_chamfer_rounding(SdaiInstance instance) : base(instance) { }
        public feature_edge_chamfer_rounding() : base(0) { }

        public static implicit operator feature_edge_chamfer_rounding(SdaiInstance instance) => new feature_edge_chamfer_rounding(instance);

        /// <summary>
        /// Create new instace of feature_edge_chamfer_rounding and returns object of this class to interact with
        /// </summary>
        public static new feature_edge_chamfer_rounding Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_edge_chamfer_rounding"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit edge_rounding_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_rounding_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_rounding_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_edge_chamfer_rounding"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_edge_chamfer_straight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_edge_chamfer_straight : feature_edge_chamfer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_edge_chamfer_straight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_edge_chamfer_straight(SdaiInstance instance) : base(instance) { }
        public feature_edge_chamfer_straight() : base(0) { }

        public static implicit operator feature_edge_chamfer_straight(SdaiInstance instance) => new feature_edge_chamfer_straight(instance);

        /// <summary>
        /// Create new instace of feature_edge_chamfer_straight and returns object of this class to interact with
        /// </summary>
        public static new feature_edge_chamfer_straight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_edge_chamfer_straight"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit edge_chamfer_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_chamfer_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_chamfer_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit edge_chamfer_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_chamfer_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_chamfer_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_edge_chamfer_straight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface : feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface(SdaiInstance instance) : base(instance) { }
        public feature_surface() : base(0) { }

        public static implicit operator feature_surface(SdaiInstance instance) => new feature_surface(instance);


        protected override TextValue WrapperEntityName() { return "feature_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_complex : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_complex(SdaiInstance instance) : base(instance) { }
        public feature_surface_complex() : base(0) { }

        public static implicit operator feature_surface_complex(SdaiInstance instance) => new feature_surface_complex(instance);

        /// <summary>
        /// Create new instace of feature_surface_complex and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_complex"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface feature_boundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_boundary", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature_boundary", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_surface_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_name_tag
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_name_tag : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_name_tag
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_name_tag(SdaiInstance instance) : base(instance) { }
        public feature_surface_name_tag() : base(0) { }

        public static implicit operator feature_surface_name_tag(SdaiInstance instance) => new feature_surface_name_tag(instance);

        /// <summary>
        /// Create new instace of feature_surface_name_tag and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_name_tag Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_name_tag"); Debug.Assert(inst != 0); return inst; }

        public list_of_text name_tag_items { get { return (new list_of_textSerializer()).FromAttr(m_instance, "name_tag_items"); } }
        public void put_name_tag_items(IEnumerable<TextValue> lst) { (new list_of_textSerializer()).ToSdaiAggr(lst, m_instance, "name_tag_items"); }
        public void put_name_tag_items_untyped(IEnumerable lst) { (new list_of_textSerializer()).ToSdaiAggr(lst, m_instance, "name_tag_items"); }

        protected override TextValue WrapperEntityName() { return "feature_surface_name_tag"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_point : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_point(SdaiInstance instance) : base(instance) { }
        public feature_surface_point() : base(0) { }

        public static implicit operator feature_surface_point(SdaiInstance instance) => new feature_surface_point(instance);

        /// <summary>
        /// Create new instace of feature_surface_point and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_point"); Debug.Assert(inst != 0); return inst; }

        public point feature_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_point", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature_point", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_surface_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_point_mark
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_point_mark : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_point_mark
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_point_mark(SdaiInstance instance) : base(instance) { }
        public feature_surface_point_mark() : base(0) { }

        public static implicit operator feature_surface_point_mark(SdaiInstance instance) => new feature_surface_point_mark(instance);

        /// <summary>
        /// Create new instace of feature_surface_point_mark and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_point_mark Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_point_mark"); Debug.Assert(inst != 0); return inst; }

        public surface_treatment_hard_stamp marking_process 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "marking_process", ifcengine.sdaiINSTANCE, out inst); return new surface_treatment_hard_stamp(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "marking_process", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_surface_point_mark"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_simple : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_simple(SdaiInstance instance) : base(instance) { }
        public feature_surface_simple() : base(0) { }

        public static implicit operator feature_surface_simple(SdaiInstance instance) => new feature_surface_simple(instance);

        /// <summary>
        /// Create new instace of feature_surface_simple and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_simple"); Debug.Assert(inst != 0); return inst; }

        public list_of_point feature_boundary { get { return (new list_of_pointSerializer()).FromAttr(m_instance, "feature_boundary"); } }
        public void put_feature_boundary(IEnumerable<point> lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "feature_boundary"); }
        public void put_feature_boundary_untyped(IEnumerable lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "feature_boundary"); }

        protected override TextValue WrapperEntityName() { return "feature_surface_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_treatment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_treatment : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_treatment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_treatment(SdaiInstance instance) : base(instance) { }
        public feature_surface_treatment() : base(0) { }

        public static implicit operator feature_surface_treatment(SdaiInstance instance) => new feature_surface_treatment(instance);

        /// <summary>
        /// Create new instace of feature_surface_treatment and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_treatment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_treatment"); Debug.Assert(inst != 0); return inst; }

        public surface_treatment treatment_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "treatment_definition", ifcengine.sdaiINSTANCE, out inst); return new surface_treatment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "treatment_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_surface_treatment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_surface_with_layout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_surface_with_layout : feature_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_surface_with_layout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_surface_with_layout(SdaiInstance instance) : base(instance) { }
        public feature_surface_with_layout() : base(0) { }

        public static implicit operator feature_surface_with_layout(SdaiInstance instance) => new feature_surface_with_layout(instance);

        /// <summary>
        /// Create new instace of feature_surface_with_layout and returns object of this class to interact with
        /// </summary>
        public static new feature_surface_with_layout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_surface_with_layout"); Debug.Assert(inst != 0); return inst; }

        public set_of_point layout { get { return (new set_of_pointSerializer()).FromAttr(m_instance, "layout"); } }
        public void put_layout(IEnumerable<point> lst) { (new set_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout"); }
        public void put_layout_untyped(IEnumerable lst) { (new set_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout"); }

        protected override TextValue WrapperEntityName() { return "feature_surface_with_layout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_thread
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_thread : feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_thread
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_thread(SdaiInstance instance) : base(instance) { }
        public feature_thread() : base(0) { }

        public static implicit operator feature_thread(SdaiInstance instance) => new feature_thread(instance);

        /// <summary>
        /// Create new instace of feature_thread and returns object of this class to interact with
        /// </summary>
        public static new feature_thread Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_thread"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit thread_pitch 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_pitch", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_pitch", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit thread_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_length", ifcengine.sdaiINSTANCE, i); }
            }
        public shape_representation_with_units thread_profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_profile", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_profile", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? right_handed
            {
            get { return get_bool("right_handed", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "right_handed", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? number_of_threads
            {
            get { return get_IntValue("number_of_threads", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "number_of_threads", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "feature_thread"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume : feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume(SdaiInstance instance) : base(instance) { }
        public feature_volume() : base(0) { }

        public static implicit operator feature_volume(SdaiInstance instance) => new feature_volume(instance);


        protected override TextValue WrapperEntityName() { return "feature_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_complex : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_complex(SdaiInstance instance) : base(instance) { }
        public feature_volume_complex() : base(0) { }

        public static implicit operator feature_volume_complex(SdaiInstance instance) => new feature_volume_complex(instance);

        /// <summary>
        /// Create new instace of feature_volume_complex and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_complex"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units feature_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature_shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_curved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_curved : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_curved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_curved(SdaiInstance instance) : base(instance) { }
        public feature_volume_curved() : base(0) { }

        public static implicit operator feature_volume_curved(SdaiInstance instance) => new feature_volume_curved(instance);

        /// <summary>
        /// Create new instace of feature_volume_curved and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_curved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_curved"); Debug.Assert(inst != 0); return inst; }

        public curve feature_trace 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_trace", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature_trace", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_curved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_curved_line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_curved_line : feature_volume_curved
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_curved_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_curved_line(SdaiInstance instance) : base(instance) { }
        public feature_volume_curved_line() : base(0) { }

        public static implicit operator feature_volume_curved_line(SdaiInstance instance) => new feature_volume_curved_line(instance);

        /// <summary>
        /// Create new instace of feature_volume_curved_line and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_curved_line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_curved_line"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_volume_curved_line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole() : base(0) { }

        public static implicit operator feature_volume_hole(SdaiInstance instance) => new feature_volume_hole(instance);


        protected override TextValue WrapperEntityName() { return "feature_volume_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole_circular
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole_circular : feature_volume_hole
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole_circular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole_circular(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole_circular() : base(0) { }

        public static implicit operator feature_volume_hole_circular(SdaiInstance instance) => new feature_volume_hole_circular(instance);

        /// <summary>
        /// Create new instace of feature_volume_hole_circular and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_hole_circular Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_hole_circular"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit hole_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "hole_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "hole_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_hole_circular"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole_circular_threaded
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole_circular_threaded : feature_volume_hole_circular
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole_circular_threaded
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole_circular_threaded(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole_circular_threaded() : base(0) { }

        public static implicit operator feature_volume_hole_circular_threaded(SdaiInstance instance) => new feature_volume_hole_circular_threaded(instance);

        /// <summary>
        /// Create new instace of feature_volume_hole_circular_threaded and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_hole_circular_threaded Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_hole_circular_threaded"); Debug.Assert(inst != 0); return inst; }

        public feature_thread thread_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thread_definition", ifcengine.sdaiINSTANCE, out inst); return new feature_thread(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thread_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_hole_circular_threaded"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole_rectangular
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole_rectangular : feature_volume_hole
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole_rectangular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole_rectangular(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole_rectangular() : base(0) { }

        public static implicit operator feature_volume_hole_rectangular(SdaiInstance instance) => new feature_volume_hole_rectangular(instance);

        /// <summary>
        /// Create new instace of feature_volume_hole_rectangular and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_hole_rectangular Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_hole_rectangular"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit hole_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "hole_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "hole_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit hole_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "hole_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "hole_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public double? fillet_radius_value { get { return get_double("fillet_radius_value", ifcengine.sdaiREAL); } }
        public double? hole_length_value { get { return get_double("hole_length_value", ifcengine.sdaiREAL); } }
        public double? hole_height_value { get { return get_double("hole_height_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "feature_volume_hole_rectangular"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole_slotted
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole_slotted : feature_volume_hole
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole_slotted
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole_slotted(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole_slotted() : base(0) { }

        public static implicit operator feature_volume_hole_slotted(SdaiInstance instance) => new feature_volume_hole_slotted(instance);

        /// <summary>
        /// Create new instace of feature_volume_hole_slotted and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_hole_slotted Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_hole_slotted"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit slot_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "slot_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "slot_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit slot_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "slot_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "slot_length", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_hole_slotted"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_hole_slotted_curved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_hole_slotted_curved : feature_volume_hole_slotted
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_hole_slotted_curved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_hole_slotted_curved(SdaiInstance instance) : base(instance) { }
        public feature_volume_hole_slotted_curved() : base(0) { }

        public static implicit operator feature_volume_hole_slotted_curved(SdaiInstance instance) => new feature_volume_hole_slotted_curved(instance);

        /// <summary>
        /// Create new instace of feature_volume_hole_slotted_curved and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_hole_slotted_curved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_hole_slotted_curved"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit curve_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit sector_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sector_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sector_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public double? slot_radius { get { return get_double("slot_radius", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "feature_volume_hole_slotted_curved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic() : base(0) { }

        public static implicit operator feature_volume_prismatic(SdaiInstance instance) => new feature_volume_prismatic(instance);

        public top_or_bottom? top_or_bottom_edge 
            { 
            get { var str = get_string("top_or_bottom_edge", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.top_or_bottom_); return EnumValue<top_or_bottom>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<top_or_bottom>.FromValue(value.Value, EnumNames.top_or_bottom_); ifcengine.sdaiPutAttrBN(m_instance, "top_or_bottom_edge", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public start_or_end_face? start_or_end 
            { 
            get { var str = get_string("start_or_end", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.start_or_end_face_); return EnumValue<start_or_end_face>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<start_or_end_face>.FromValue(value.Value, EnumNames.start_or_end_face_); ifcengine.sdaiPutAttrBN(m_instance, "start_or_end", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? original_face
            {
            get { return get_bool("original_face", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "original_face", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic_chamfer : feature_volume_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic_chamfer(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic_chamfer() : base(0) { }

        public static implicit operator feature_volume_prismatic_chamfer(SdaiInstance instance) => new feature_volume_prismatic_chamfer(instance);

        /// <summary>
        /// Create new instace of feature_volume_prismatic_chamfer and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_prismatic_chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_prismatic_chamfer"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit chamfer_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "chamfer_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "chamfer_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit chamfer_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "chamfer_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "chamfer_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic_flange_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic_flange_chamfer : feature_volume_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic_flange_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic_flange_chamfer(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic_flange_chamfer() : base(0) { }

        public static implicit operator feature_volume_prismatic_flange_chamfer(SdaiInstance instance) => new feature_volume_prismatic_flange_chamfer(instance);

        /// <summary>
        /// Create new instace of feature_volume_prismatic_flange_chamfer and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_prismatic_flange_chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_prismatic_flange_chamfer"); Debug.Assert(inst != 0); return inst; }

        public left_or_right? left_or_right_hand 
            { 
            get { var str = get_string("left_or_right_hand", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.left_or_right_); return EnumValue<left_or_right>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<left_or_right>.FromValue(value.Value, EnumNames.left_or_right_); ifcengine.sdaiPutAttrBN(m_instance, "left_or_right_hand", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit flange_chamfer_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_chamfer_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_chamfer_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_chamfer_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_chamfer_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_chamfer_width", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic_flange_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic_flange_notch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic_flange_notch : feature_volume_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic_flange_notch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic_flange_notch(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic_flange_notch() : base(0) { }

        public static implicit operator feature_volume_prismatic_flange_notch(SdaiInstance instance) => new feature_volume_prismatic_flange_notch(instance);

        /// <summary>
        /// Create new instace of feature_volume_prismatic_flange_notch and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_prismatic_flange_notch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_prismatic_flange_notch"); Debug.Assert(inst != 0); return inst; }

        public left_or_right? left_or_right_hand 
            { 
            get { var str = get_string("left_or_right_hand", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.left_or_right_); return EnumValue<left_or_right>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<left_or_right>.FromValue(value.Value, EnumNames.left_or_right_); ifcengine.sdaiPutAttrBN(m_instance, "left_or_right_hand", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit flange_notch_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_notch_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_notch_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_notch_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_notch_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_notch_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_notch_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_notch_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_notch_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic_flange_notch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic_notch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic_notch : feature_volume_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic_notch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic_notch(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic_notch() : base(0) { }

        public static implicit operator feature_volume_prismatic_notch(SdaiInstance instance) => new feature_volume_prismatic_notch(instance);

        /// <summary>
        /// Create new instace of feature_volume_prismatic_notch and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_prismatic_notch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_prismatic_notch"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit notch_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "notch_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "notch_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit notch_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "notch_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "notch_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit notch_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "notch_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "notch_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic_notch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_prismatic_skewed_end
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_prismatic_skewed_end : feature_volume_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_prismatic_skewed_end
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_prismatic_skewed_end(SdaiInstance instance) : base(instance) { }
        public feature_volume_prismatic_skewed_end() : base(0) { }

        public static implicit operator feature_volume_prismatic_skewed_end(SdaiInstance instance) => new feature_volume_prismatic_skewed_end(instance);

        /// <summary>
        /// Create new instace of feature_volume_prismatic_skewed_end and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_prismatic_skewed_end Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_prismatic_skewed_end"); Debug.Assert(inst != 0); return inst; }

        public plane_angle_measure_with_unit skew_angle_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "skew_angle_1", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "skew_angle_1", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit skew_angle_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "skew_angle_2", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "skew_angle_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_prismatic_skewed_end"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_with_depth
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_with_depth : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_with_depth
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_with_depth(SdaiInstance instance) : base(instance) { }
        public feature_volume_with_depth() : base(0) { }

        public static implicit operator feature_volume_with_depth(SdaiInstance instance) => new feature_volume_with_depth(instance);

        /// <summary>
        /// Create new instace of feature_volume_with_depth and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_with_depth Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_with_depth"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit penetration_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "penetration_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "penetration_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_with_depth"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_with_layout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_with_layout : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_with_layout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_with_layout(SdaiInstance instance) : base(instance) { }
        public feature_volume_with_layout() : base(0) { }

        public static implicit operator feature_volume_with_layout(SdaiInstance instance) => new feature_volume_with_layout(instance);

        /// <summary>
        /// Create new instace of feature_volume_with_layout and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_with_layout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_with_layout"); Debug.Assert(inst != 0); return inst; }

        public set_of_point layout { get { return (new set_of_pointSerializer()).FromAttr(m_instance, "layout"); } }
        public void put_layout(IEnumerable<point> lst) { (new set_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout"); }
        public void put_layout_untyped(IEnumerable lst) { (new set_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout"); }

        protected override TextValue WrapperEntityName() { return "feature_volume_with_layout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_with_limit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_with_limit : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_with_limit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_with_limit(SdaiInstance instance) : base(instance) { }
        public feature_volume_with_limit() : base(0) { }

        public static implicit operator feature_volume_with_limit(SdaiInstance instance) => new feature_volume_with_limit(instance);

        /// <summary>
        /// Create new instace of feature_volume_with_limit and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_with_limit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_with_limit"); Debug.Assert(inst != 0); return inst; }

        public IntValue? penetration_limit
            {
            get { return get_IntValue("penetration_limit", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "penetration_limit", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_with_limit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_volume_with_process
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_volume_with_process : feature_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_volume_with_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_volume_with_process(SdaiInstance instance) : base(instance) { }
        public feature_volume_with_process() : base(0) { }

        public static implicit operator feature_volume_with_process(SdaiInstance instance) => new feature_volume_with_process(instance);

        /// <summary>
        /// Create new instace of feature_volume_with_process and returns object of this class to interact with
        /// </summary>
        public static new feature_volume_with_process Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_volume_with_process"); Debug.Assert(inst != 0); return inst; }

        public cut process_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "process_definition", ifcengine.sdaiINSTANCE, out inst); return new cut(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "process_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "feature_volume_with_process"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_surface(SdaiInstance instance) : base(instance) { }
        public swept_surface() : base(0) { }

        public static implicit operator swept_surface(SdaiInstance instance) => new swept_surface(instance);

        /// <summary>
        /// Create new instace of swept_surface and returns object of this class to interact with
        /// </summary>
        public static new swept_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_surface"); Debug.Assert(inst != 0); return inst; }

        public curve swept_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fixed_reference_swept_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fixed_reference_swept_surface : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fixed_reference_swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fixed_reference_swept_surface(SdaiInstance instance) : base(instance) { }
        public fixed_reference_swept_surface() : base(0) { }

        public static implicit operator fixed_reference_swept_surface(SdaiInstance instance) => new fixed_reference_swept_surface(instance);

        /// <summary>
        /// Create new instace of fixed_reference_swept_surface and returns object of this class to interact with
        /// </summary>
        public static new fixed_reference_swept_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fixed_reference_swept_surface"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public direction fixed_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fixed_reference", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fixed_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fixed_reference_swept_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_assignment(SdaiInstance instance) : base(instance) { }
        public group_assignment() : base(0) { }

        public static implicit operator group_assignment(SdaiInstance instance) => new group_assignment(instance);

        public group assigned_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of flavour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class flavour : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of flavour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public flavour(SdaiInstance instance) : base(instance) { }
        public flavour() : base(0) { }

        public static implicit operator flavour(SdaiInstance instance) => new flavour(instance);

        /// <summary>
        /// Create new instace of flavour and returns object of this class to interact with
        /// </summary>
        public static new flavour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "flavour"); Debug.Assert(inst != 0); return inst; }

        public set_of_item_reference items { get { return (new set_of_item_referenceSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<item_reference> lst) { (new set_of_item_referenceSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_item_referenceSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "flavour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public force_measure_with_unit() : base(0) { }

        public static implicit operator force_measure_with_unit(SdaiInstance instance) => new force_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of force_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new force_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "force_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_per_length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_per_length_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_per_length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_per_length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public force_per_length_measure_with_unit() : base(0) { }

        public static implicit operator force_per_length_measure_with_unit(SdaiInstance instance) => new force_per_length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of force_per_length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new force_per_length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_per_length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "force_per_length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_per_length_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_per_length_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_per_length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_per_length_unit(SdaiInstance instance) : base(instance) { }
        public force_per_length_unit() : base(0) { }

        public static implicit operator force_per_length_unit(SdaiInstance instance) => new force_per_length_unit(instance);

        /// <summary>
        /// Create new instace of force_per_length_unit and returns object of this class to interact with
        /// </summary>
        public static new force_per_length_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_per_length_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "force_per_length_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_unit(SdaiInstance instance) : base(instance) { }
        public force_unit() : base(0) { }

        public static implicit operator force_unit(SdaiInstance instance) => new force_unit(instance);

        /// <summary>
        /// Create new instace of force_unit and returns object of this class to interact with
        /// </summary>
        public static new force_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "force_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of frequency_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class frequency_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of frequency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public frequency_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public frequency_measure_with_unit() : base(0) { }

        public static implicit operator frequency_measure_with_unit(SdaiInstance instance) => new frequency_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of frequency_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new frequency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "frequency_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "frequency_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of frequency_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class frequency_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of frequency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public frequency_unit(SdaiInstance instance) : base(instance) { }
        public frequency_unit() : base(0) { }

        public static implicit operator frequency_unit(SdaiInstance instance) => new frequency_unit(instance);

        /// <summary>
        /// Create new instace of frequency_unit and returns object of this class to interact with
        /// </summary>
        public static new frequency_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "frequency_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "frequency_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functional_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functional_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functional_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functional_role(SdaiInstance instance) : base(instance) { }
        public functional_role() : base(0) { }

        public static implicit operator functional_role(SdaiInstance instance) => new functional_role(instance);

        /// <summary>
        /// Create new instace of functional_role and returns object of this class to interact with
        /// </summary>
        public static new functional_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functional_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue functional_role_name
            {
            get { return get_string("functional_role_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "functional_role_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue functional_role_description
            {
            get { return get_string("functional_role_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "functional_role_description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_assembly_design role_for_assemblies { get { return (new set_of_assembly_designSerializer()).FromAttr(m_instance, "role_for_assemblies"); } }

        protected override TextValue WrapperEntityName() { return "functional_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functional_role_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functional_role_documented : functional_role
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functional_role_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functional_role_documented(SdaiInstance instance) : base(instance) { }
        public functional_role_documented() : base(0) { }

        public static implicit operator functional_role_documented(SdaiInstance instance) => new functional_role_documented(instance);

        /// <summary>
        /// Create new instace of functional_role_documented and returns object of this class to interact with
        /// </summary>
        public static new functional_role_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functional_role_documented"); Debug.Assert(inst != 0); return inst; }

        public document_usage_constraint document_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "functional_role_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functionally_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functionally_defined_transformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functionally_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functionally_defined_transformation(SdaiInstance instance) : base(instance) { }
        public functionally_defined_transformation() : base(0) { }

        public static implicit operator functionally_defined_transformation(SdaiInstance instance) => new functionally_defined_transformation(instance);

        /// <summary>
        /// Create new instace of functionally_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new functionally_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functionally_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "functionally_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geographical_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geographical_location : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geographical_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geographical_location(SdaiInstance instance) : base(instance) { }
        public geographical_location() : base(0) { }

        public static implicit operator geographical_location(SdaiInstance instance) => new geographical_location(instance);

        public length_measure_with_unit height_above_datum 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "height_above_datum", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "height_above_datum", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue datum_name
            {
            get { return get_string("datum_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "datum_name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "geographical_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_set : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_set(SdaiInstance instance) : base(instance) { }
        public geometric_set() : base(0) { }

        public static implicit operator geometric_set(SdaiInstance instance) => new geometric_set(instance);

        /// <summary>
        /// Create new instace of geometric_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_geometric_set_select elements { get { return (new set_of_geometric_set_selectSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<geometric_set_select> lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue WrapperEntityName() { return "geometric_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_curve_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_curve_set : geometric_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_curve_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_curve_set(SdaiInstance instance) : base(instance) { }
        public geometric_curve_set() : base(0) { }

        public static implicit operator geometric_curve_set(SdaiInstance instance) => new geometric_curve_set(instance);

        /// <summary>
        /// Create new instace of geometric_curve_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_curve_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_curve_set"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometric_curve_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_context : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_context(SdaiInstance instance) : base(instance) { }
        public representation_context() : base(0) { }

        public static implicit operator representation_context(SdaiInstance instance) => new representation_context(instance);

        /// <summary>
        /// Create new instace of representation_context and returns object of this class to interact with
        /// </summary>
        public static new representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue context_identifier
            {
            get { return get_string("context_identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "context_identifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue context_type
            {
            get { return get_string("context_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "context_type", ifcengine.sdaiSTRING, value); }
            }
        public set_of_representation representations_in_context { get { return (new set_of_representationSerializer()).FromAttr(m_instance, "representations_in_context"); } }

        protected override TextValue WrapperEntityName() { return "representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_context(SdaiInstance instance) : base(instance) { }
        public geometric_representation_context() : base(0) { }

        public static implicit operator geometric_representation_context(SdaiInstance instance) => new geometric_representation_context(instance);

        /// <summary>
        /// Create new instace of geometric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_context"); Debug.Assert(inst != 0); return inst; }

        public IntValue? coordinate_space_dimension
            {
            get { return get_IntValue("coordinate_space_dimension", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "coordinate_space_dimension", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_set_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_set_replica : geometric_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_set_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_set_replica(SdaiInstance instance) : base(instance) { }
        public geometric_set_replica() : base(0) { }

        public static implicit operator geometric_set_replica(SdaiInstance instance) => new geometric_set_replica(instance);

        /// <summary>
        /// Create new instace of geometric_set_replica and returns object of this class to interact with
        /// </summary>
        public static new geometric_set_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_set_replica"); Debug.Assert(inst != 0); return inst; }

        public geometric_set parent_set 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_set", ifcengine.sdaiINSTANCE, out inst); return new geometric_set(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_set", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_set_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_location : geographical_location
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_location(SdaiInstance instance) : base(instance) { }
        public global_location() : base(0) { }

        public static implicit operator global_location(SdaiInstance instance) => new global_location(instance);

        /// <summary>
        /// Create new instace of global_location and returns object of this class to interact with
        /// </summary>
        public static new global_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_location"); Debug.Assert(inst != 0); return inst; }

        public IntValue? latitude_degrees
            {
            get { return get_IntValue("latitude_degrees", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "latitude_degrees", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? latitude_minutes
            {
            get { return get_IntValue("latitude_minutes", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "latitude_minutes", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? latitude_seconds
            {
            get { return get_double("latitude_seconds", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "latitude_seconds", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? longitude_degrees
            {
            get { return get_IntValue("longitude_degrees", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "longitude_degrees", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? longitude_minutes
            {
            get { return get_IntValue("longitude_minutes", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "longitude_minutes", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? longitude_seconds
            {
            get { return get_double("longitude_seconds", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "longitude_seconds", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "global_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_uncertainty_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_uncertainty_assigned_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_uncertainty_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_uncertainty_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_uncertainty_assigned_context() : base(0) { }

        public static implicit operator global_uncertainty_assigned_context(SdaiInstance instance) => new global_uncertainty_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_uncertainty_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_uncertainty_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_uncertainty_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_uncertainty_measure_with_unit uncertainty { get { return (new set_of_uncertainty_measure_with_unitSerializer()).FromAttr(m_instance, "uncertainty"); } }
        public void put_uncertainty(IEnumerable<uncertainty_measure_with_unit> lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }
        public void put_uncertainty_untyped(IEnumerable lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }

        protected override TextValue WrapperEntityName() { return "global_uncertainty_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_unit_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_unit_assigned_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_unit_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_unit_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_unit_assigned_context() : base(0) { }

        public static implicit operator global_unit_assigned_context(SdaiInstance instance) => new global_unit_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_unit_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_unit_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_unit_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_unit units { get { return (new set_of_unitSerializer()).FromAttr(m_instance, "units"); } }
        public void put_units(IEnumerable<unit> lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }
        public void put_units_untyped(IEnumerable lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }

        protected override TextValue WrapperEntityName() { return "global_unit_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid(SdaiInstance instance) : base(instance) { }
        public grid() : base(0) { }

        public static implicit operator grid(SdaiInstance instance) => new grid(instance);

        /// <summary>
        /// Create new instace of grid and returns object of this class to interact with
        /// </summary>
        public static new grid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid"); Debug.Assert(inst != 0); return inst; }

        public TextValue grid_name
            {
            get { return get_string("grid_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "grid_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue grid_description
            {
            get { return get_string("grid_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "grid_description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue grid_use
            {
            get { return get_string("grid_use", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "grid_use", ifcengine.sdaiSTRING, value); }
            }
        public set_of_gridline constituent_lines { get { return (new set_of_gridlineSerializer()).FromAttr(m_instance, "constituent_lines"); } }
        public set_of_gridline gridlines { get { return (new set_of_gridlineSerializer()).FromAttr(m_instance, "gridlines"); } }
        public set_of_grid_level grid_levels { get { return (new set_of_grid_levelSerializer()).FromAttr(m_instance, "grid_levels"); } }

        protected override TextValue WrapperEntityName() { return "grid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_intersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_intersection : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_intersection(SdaiInstance instance) : base(instance) { }
        public grid_intersection() : base(0) { }

        public static implicit operator grid_intersection(SdaiInstance instance) => new grid_intersection(instance);

        /// <summary>
        /// Create new instace of grid_intersection and returns object of this class to interact with
        /// </summary>
        public static new grid_intersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_intersection"); Debug.Assert(inst != 0); return inst; }

        public TextValue grid_intersection_name
            {
            get { return get_string("grid_intersection_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "grid_intersection_name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_gridline gridlines { get { return (new set_of_gridlineSerializer()).FromAttr(m_instance, "gridlines"); } }
        public void put_gridlines(IEnumerable<gridline> lst) { (new set_of_gridlineSerializer()).ToSdaiAggr(lst, m_instance, "gridlines"); }
        public void put_gridlines_untyped(IEnumerable lst) { (new set_of_gridlineSerializer()).ToSdaiAggr(lst, m_instance, "gridlines"); }
        public grid_level level 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "level", ifcengine.sdaiINSTANCE, out inst); return new grid_level(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "level", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_intersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_intersection_resolved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_intersection_resolved : grid_intersection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_intersection_resolved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_intersection_resolved(SdaiInstance instance) : base(instance) { }
        public grid_intersection_resolved() : base(0) { }

        public static implicit operator grid_intersection_resolved(SdaiInstance instance) => new grid_intersection_resolved(instance);

        /// <summary>
        /// Create new instace of grid_intersection_resolved and returns object of this class to interact with
        /// </summary>
        public static new grid_intersection_resolved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_intersection_resolved"); Debug.Assert(inst != 0); return inst; }

        public geographical_location resolution_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "resolution_point", ifcengine.sdaiINSTANCE, out inst); return new geographical_location(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "resolution_point", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_intersection_resolved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane(SdaiInstance instance) : base(instance) { }
        public plane() : base(0) { }

        public static implicit operator plane(SdaiInstance instance) => new plane(instance);

        /// <summary>
        /// Create new instace of plane and returns object of this class to interact with
        /// </summary>
        public static new plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_level
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_level : plane
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_level
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_level(SdaiInstance instance) : base(instance) { }
        public grid_level() : base(0) { }

        public static implicit operator grid_level(SdaiInstance instance) => new grid_level(instance);

        /// <summary>
        /// Create new instace of grid_level and returns object of this class to interact with
        /// </summary>
        public static new grid_level Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_level"); Debug.Assert(inst != 0); return inst; }

        public grid parent_grid 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_grid", ifcengine.sdaiINSTANCE, out inst); return new grid(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_grid", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_level"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_of_building
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_of_building : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_of_building
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_of_building(SdaiInstance instance) : base(instance) { }
        public grid_of_building() : base(0) { }

        public static implicit operator grid_of_building(SdaiInstance instance) => new grid_of_building(instance);

        /// <summary>
        /// Create new instace of grid_of_building and returns object of this class to interact with
        /// </summary>
        public static new grid_of_building Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_of_building"); Debug.Assert(inst != 0); return inst; }

        public building grid_for_building 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "grid_for_building", ifcengine.sdaiINSTANCE, out inst); return new building(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "grid_for_building", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_of_building"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_of_site
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_of_site : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_of_site
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_of_site(SdaiInstance instance) : base(instance) { }
        public grid_of_site() : base(0) { }

        public static implicit operator grid_of_site(SdaiInstance instance) => new grid_of_site(instance);

        /// <summary>
        /// Create new instace of grid_of_site and returns object of this class to interact with
        /// </summary>
        public static new grid_of_site Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_of_site"); Debug.Assert(inst != 0); return inst; }

        public site grid_for_site 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "grid_for_site", ifcengine.sdaiINSTANCE, out inst); return new site(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "grid_for_site", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_of_site"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_of_structure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_of_structure : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_of_structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_of_structure(SdaiInstance instance) : base(instance) { }
        public grid_of_structure() : base(0) { }

        public static implicit operator grid_of_structure(SdaiInstance instance) => new grid_of_structure(instance);

        /// <summary>
        /// Create new instace of grid_of_structure and returns object of this class to interact with
        /// </summary>
        public static new grid_of_structure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_of_structure"); Debug.Assert(inst != 0); return inst; }

        public structure grid_for_structure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "grid_for_structure", ifcengine.sdaiINSTANCE, out inst); return new structure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "grid_for_structure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "grid_of_structure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_offset : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_offset(SdaiInstance instance) : base(instance) { }
        public grid_offset() : base(0) { }

        public static implicit operator grid_offset(SdaiInstance instance) => new grid_offset(instance);

        /// <summary>
        /// Create new instace of grid_offset and returns object of this class to interact with
        /// </summary>
        public static new grid_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_offset"); Debug.Assert(inst != 0); return inst; }

        public grid_intersection intersection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "intersection", ifcengine.sdaiINSTANCE, out inst); return new grid_intersection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "intersection", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_length_measure_with_unit offset { get { return (new list_of_length_measure_with_unitSerializer()).FromAttr(m_instance, "offset"); } }
        public void put_offset(IEnumerable<length_measure_with_unit> lst) { (new list_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "offset"); }
        public void put_offset_untyped(IEnumerable lst) { (new list_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "offset"); }

        protected override TextValue WrapperEntityName() { return "grid_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_orthogonal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_orthogonal : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_orthogonal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_orthogonal(SdaiInstance instance) : base(instance) { }
        public grid_orthogonal() : base(0) { }

        public static implicit operator grid_orthogonal(SdaiInstance instance) => new grid_orthogonal(instance);

        /// <summary>
        /// Create new instace of grid_orthogonal and returns object of this class to interact with
        /// </summary>
        public static new grid_orthogonal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_orthogonal"); Debug.Assert(inst != 0); return inst; }

        public list_of_positive_length_measure_with_unit spacing_1 { get { return (new list_of_positive_length_measure_with_unitSerializer()).FromAttr(m_instance, "spacing_1"); } }
        public void put_spacing_1(IEnumerable<positive_length_measure_with_unit> lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }
        public void put_spacing_1_untyped(IEnumerable lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }
        public list_of_positive_length_measure_with_unit spacing_2 { get { return (new list_of_positive_length_measure_with_unitSerializer()).FromAttr(m_instance, "spacing_2"); } }
        public void put_spacing_2(IEnumerable<positive_length_measure_with_unit> lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_2"); }
        public void put_spacing_2_untyped(IEnumerable lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_2"); }

        protected override TextValue WrapperEntityName() { return "grid_orthogonal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_radial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_radial : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_radial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_radial(SdaiInstance instance) : base(instance) { }
        public grid_radial() : base(0) { }

        public static implicit operator grid_radial(SdaiInstance instance) => new grid_radial(instance);

        /// <summary>
        /// Create new instace of grid_radial and returns object of this class to interact with
        /// </summary>
        public static new grid_radial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_radial"); Debug.Assert(inst != 0); return inst; }

        public list_of_plane_angle_measure_with_unit spacing_1 { get { return (new list_of_plane_angle_measure_with_unitSerializer()).FromAttr(m_instance, "spacing_1"); } }
        public void put_spacing_1(IEnumerable<plane_angle_measure_with_unit> lst) { (new list_of_plane_angle_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }
        public void put_spacing_1_untyped(IEnumerable lst) { (new list_of_plane_angle_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }

        protected override TextValue WrapperEntityName() { return "grid_radial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of grid_skewed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class grid_skewed : grid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of grid_skewed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public grid_skewed(SdaiInstance instance) : base(instance) { }
        public grid_skewed() : base(0) { }

        public static implicit operator grid_skewed(SdaiInstance instance) => new grid_skewed(instance);

        /// <summary>
        /// Create new instace of grid_skewed and returns object of this class to interact with
        /// </summary>
        public static new grid_skewed Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "grid_skewed"); Debug.Assert(inst != 0); return inst; }

        public plane_angle_measure_with_unit skew_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "skew_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "skew_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_positive_length_measure_with_unit spacing_1 { get { return (new list_of_positive_length_measure_with_unitSerializer()).FromAttr(m_instance, "spacing_1"); } }
        public void put_spacing_1(IEnumerable<positive_length_measure_with_unit> lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }
        public void put_spacing_1_untyped(IEnumerable lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_1"); }
        public list_of_positive_length_measure_with_unit spacing_2 { get { return (new list_of_positive_length_measure_with_unitSerializer()).FromAttr(m_instance, "spacing_2"); } }
        public void put_spacing_2(IEnumerable<positive_length_measure_with_unit> lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_2"); }
        public void put_spacing_2_untyped(IEnumerable lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "spacing_2"); }

        protected override TextValue WrapperEntityName() { return "grid_skewed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of gridline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class gridline : plane
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of gridline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public gridline(SdaiInstance instance) : base(instance) { }
        public gridline() : base(0) { }

        public static implicit operator gridline(SdaiInstance instance) => new gridline(instance);

        /// <summary>
        /// Create new instace of gridline and returns object of this class to interact with
        /// </summary>
        public static new gridline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "gridline"); Debug.Assert(inst != 0); return inst; }

        public grid parent_grid 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_grid", ifcengine.sdaiINSTANCE, out inst); return new grid(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_grid", ifcengine.sdaiINSTANCE, i); }
            }
        public gridline preceding_line 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "preceding_line", ifcengine.sdaiINSTANCE, out inst); return new gridline(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "preceding_line", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_gridline succeeding_line { get { return (new set_of_gridlineSerializer()).FromAttr(m_instance, "succeeding_line"); } }

        protected override TextValue WrapperEntityName() { return "gridline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group(SdaiInstance instance) : base(instance) { }
        public group() : base(0) { }

        public static implicit operator group(SdaiInstance instance) => new group(instance);

        /// <summary>
        /// Create new instace of group and returns object of this class to interact with
        /// </summary>
        public static new group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group"); Debug.Assert(inst != 0); return inst; }

        public TextValue group_name
            {
            get { return get_string("group_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "group_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue group_description
            {
            get { return get_string("group_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "group_description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_assignment_actioned
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_assignment_actioned : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_assignment_actioned
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_assignment_actioned(SdaiInstance instance) : base(instance) { }
        public group_assignment_actioned() : base(0) { }

        public static implicit operator group_assignment_actioned(SdaiInstance instance) => new group_assignment_actioned(instance);

        /// <summary>
        /// Create new instace of group_assignment_actioned and returns object of this class to interact with
        /// </summary>
        public static new group_assignment_actioned Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_assignment_actioned"); Debug.Assert(inst != 0); return inst; }

        public action assigned_action 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, out inst); return new action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "group_assignment_actioned"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_assignment_approved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_assignment_approved : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_assignment_approved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_assignment_approved(SdaiInstance instance) : base(instance) { }
        public group_assignment_approved() : base(0) { }

        public static implicit operator group_assignment_approved(SdaiInstance instance) => new group_assignment_approved(instance);

        /// <summary>
        /// Create new instace of group_assignment_approved and returns object of this class to interact with
        /// </summary>
        public static new group_assignment_approved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_assignment_approved"); Debug.Assert(inst != 0); return inst; }

        public approval assigned_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "group_assignment_approved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_analysis_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_analysis_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_analysis_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_analysis_data(SdaiInstance instance) : base(instance) { }
        public group_of_analysis_data() : base(0) { }

        public static implicit operator group_of_analysis_data(SdaiInstance instance) => new group_of_analysis_data(instance);

        /// <summary>
        /// Create new instace of group_of_analysis_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_analysis_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_analysis_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_analysis_item items { get { return (new set_of_select_analysis_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_analysis_item> lst) { (new set_of_select_analysis_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_analysis_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_analysis_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_design_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_design_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_design_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_design_data(SdaiInstance instance) : base(instance) { }
        public group_of_design_data() : base(0) { }

        public static implicit operator group_of_design_data(SdaiInstance instance) => new group_of_design_data(instance);

        /// <summary>
        /// Create new instace of group_of_design_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_design_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_design_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_design_item items { get { return (new set_of_select_design_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_design_item> lst) { (new set_of_select_design_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_design_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_design_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_generic_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_generic_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_generic_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_generic_data(SdaiInstance instance) : base(instance) { }
        public group_of_generic_data() : base(0) { }

        public static implicit operator group_of_generic_data(SdaiInstance instance) => new group_of_generic_data(instance);

        /// <summary>
        /// Create new instace of group_of_generic_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_generic_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_generic_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_generic_item items { get { return (new set_of_select_generic_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_generic_item> lst) { (new set_of_select_generic_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_generic_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_generic_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_physical_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_physical_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_physical_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_physical_data(SdaiInstance instance) : base(instance) { }
        public group_of_physical_data() : base(0) { }

        public static implicit operator group_of_physical_data(SdaiInstance instance) => new group_of_physical_data(instance);

        /// <summary>
        /// Create new instace of group_of_physical_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_physical_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_physical_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_physical_item items { get { return (new set_of_select_physical_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_physical_item> lst) { (new set_of_select_physical_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_physical_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_physical_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_project_definition_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_project_definition_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_project_definition_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_project_definition_data(SdaiInstance instance) : base(instance) { }
        public group_of_project_definition_data() : base(0) { }

        public static implicit operator group_of_project_definition_data(SdaiInstance instance) => new group_of_project_definition_data(instance);

        /// <summary>
        /// Create new instace of group_of_project_definition_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_project_definition_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_project_definition_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_project_definition_item items { get { return (new set_of_select_project_definition_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_project_definition_item> lst) { (new set_of_select_project_definition_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_project_definition_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_project_definition_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_of_structural_data
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_of_structural_data : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_of_structural_data
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_of_structural_data(SdaiInstance instance) : base(instance) { }
        public group_of_structural_data() : base(0) { }

        public static implicit operator group_of_structural_data(SdaiInstance instance) => new group_of_structural_data(instance);

        /// <summary>
        /// Create new instace of group_of_structural_data and returns object of this class to interact with
        /// </summary>
        public static new group_of_structural_data Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_of_structural_data"); Debug.Assert(inst != 0); return inst; }

        public set_of_select_structural_item items { get { return (new set_of_select_structural_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<select_structural_item> lst) { (new set_of_select_structural_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_select_structural_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "group_of_structural_data"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_relationship(SdaiInstance instance) : base(instance) { }
        public group_relationship() : base(0) { }

        public static implicit operator group_relationship(SdaiInstance instance) => new group_relationship(instance);

        /// <summary>
        /// Create new instace of group_relationship and returns object of this class to interact with
        /// </summary>
        public static new group_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public group relating_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, i); }
            }
        public group related_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "group_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_usage : group_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_usage(SdaiInstance instance) : base(instance) { }
        public group_usage() : base(0) { }

        public static implicit operator group_usage(SdaiInstance instance) => new group_usage(instance);

        /// <summary>
        /// Create new instace of group_usage and returns object of this class to interact with
        /// </summary>
        public static new group_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "group_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of half_space_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class half_space_2d : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of half_space_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public half_space_2d(SdaiInstance instance) : base(instance) { }
        public half_space_2d() : base(0) { }

        public static implicit operator half_space_2d(SdaiInstance instance) => new half_space_2d(instance);

        /// <summary>
        /// Create new instace of half_space_2d and returns object of this class to interact with
        /// </summary>
        public static new half_space_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "half_space_2d"); Debug.Assert(inst != 0); return inst; }

        public curve base_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? agreement_flag
            {
            get { return get_bool("agreement_flag", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "agreement_flag", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "half_space_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hexahedron_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hexahedron_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hexahedron_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hexahedron_volume(SdaiInstance instance) : base(instance) { }
        public hexahedron_volume() : base(0) { }

        public static implicit operator hexahedron_volume(SdaiInstance instance) => new hexahedron_volume(instance);

        /// <summary>
        /// Create new instace of hexahedron_volume and returns object of this class to interact with
        /// </summary>
        public static new hexahedron_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hexahedron_volume"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point points { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "points"); } }
        public void put_points(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }
        public void put_points_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }

        protected override TextValue WrapperEntityName() { return "hexahedron_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hyperbola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hyperbola : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hyperbola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hyperbola(SdaiInstance instance) : base(instance) { }
        public hyperbola() : base(0) { }

        public static implicit operator hyperbola(SdaiInstance instance) => new hyperbola(instance);

        /// <summary>
        /// Create new instace of hyperbola and returns object of this class to interact with
        /// </summary>
        public static new hyperbola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hyperbola"); Debug.Assert(inst != 0); return inst; }

        public double? semi_axis
            {
            get { return get_double("semi_axis", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_imag_axis
            {
            get { return get_double("semi_imag_axis", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_imag_axis", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "hyperbola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of id_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class id_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of id_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public id_attribute(SdaiInstance instance) : base(instance) { }
        public id_attribute() : base(0) { }

        public static implicit operator id_attribute(SdaiInstance instance) => new id_attribute(instance);

        /// <summary>
        /// Create new instace of id_attribute and returns object of this class to interact with
        /// </summary>
        public static new id_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "id_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public id_attribute_select identified_item
            {
            get { return new id_attribute_select(m_instance, "identified_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "id_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inertia_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inertia_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inertia_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inertia_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public inertia_measure_with_unit() : base(0) { }

        public static implicit operator inertia_measure_with_unit(SdaiInstance instance) => new inertia_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of inertia_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new inertia_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inertia_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "inertia_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inertia_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inertia_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inertia_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inertia_unit(SdaiInstance instance) : base(instance) { }
        public inertia_unit() : base(0) { }

        public static implicit operator inertia_unit(SdaiInstance instance) => new inertia_unit(instance);

        /// <summary>
        /// Create new instace of inertia_unit and returns object of this class to interact with
        /// </summary>
        public static new inertia_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inertia_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "inertia_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of intersection_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class intersection_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of intersection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public intersection_curve(SdaiInstance instance) : base(instance) { }
        public intersection_curve() : base(0) { }

        public static implicit operator intersection_curve(SdaiInstance instance) => new intersection_curve(instance);

        /// <summary>
        /// Create new instace of intersection_curve and returns object of this class to interact with
        /// </summary>
        public static new intersection_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "intersection_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "intersection_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_cost_code
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_cost_code : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_cost_code
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_cost_code(SdaiInstance instance) : base(instance) { }
        public item_cost_code() : base(0) { }

        public static implicit operator item_cost_code(SdaiInstance instance) => new item_cost_code(instance);

        /// <summary>
        /// Create new instace of item_cost_code and returns object of this class to interact with
        /// </summary>
        public static new item_cost_code Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_cost_code"); Debug.Assert(inst != 0); return inst; }

        public TextValue cost_code
            {
            get { return get_string("cost_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "cost_code", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "item_cost_code"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_cost_code_assigned
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_cost_code_assigned : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_cost_code_assigned
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_cost_code_assigned(SdaiInstance instance) : base(instance) { }
        public item_cost_code_assigned() : base(0) { }

        public static implicit operator item_cost_code_assigned(SdaiInstance instance) => new item_cost_code_assigned(instance);

        /// <summary>
        /// Create new instace of item_cost_code_assigned and returns object of this class to interact with
        /// </summary>
        public static new item_cost_code_assigned Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_cost_code_assigned"); Debug.Assert(inst != 0); return inst; }

        public item_cost_code code 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "code", ifcengine.sdaiINSTANCE, out inst); return new item_cost_code(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "code", ifcengine.sdaiINSTANCE, i); }
            }
        public structural_frame_item costed_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "costed_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "costed_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_cost_code_assigned"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_cost_code_with_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_cost_code_with_source : item_cost_code
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_cost_code_with_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_cost_code_with_source(SdaiInstance instance) : base(instance) { }
        public item_cost_code_with_source() : base(0) { }

        public static implicit operator item_cost_code_with_source(SdaiInstance instance) => new item_cost_code_with_source(instance);

        /// <summary>
        /// Create new instace of item_cost_code_with_source and returns object of this class to interact with
        /// </summary>
        public static new item_cost_code_with_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_cost_code_with_source"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_cost_code_with_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_defined_transformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_defined_transformation(SdaiInstance instance) : base(instance) { }
        public item_defined_transformation() : base(0) { }

        public static implicit operator item_defined_transformation(SdaiInstance instance) => new item_defined_transformation(instance);

        /// <summary>
        /// Create new instace of item_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new item_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public representation_item transform_item_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item transform_item_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_property : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_property(SdaiInstance instance) : base(instance) { }
        public item_property() : base(0) { }

        public static implicit operator item_property(SdaiInstance instance) => new item_property(instance);

        /// <summary>
        /// Create new instace of item_property and returns object of this class to interact with
        /// </summary>
        public static new item_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue property_name
            {
            get { return get_string("property_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "property_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue property_description
            {
            get { return get_string("property_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "property_description", ifcengine.sdaiSTRING, value); }
            }

        public measure_select property_value
            {
            get { return new measure_select(m_instance, "property_value", 0); }
            }

        protected override TextValue WrapperEntityName() { return "item_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_property_assigned
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_property_assigned : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_property_assigned
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_property_assigned(SdaiInstance instance) : base(instance) { }
        public item_property_assigned() : base(0) { }

        public static implicit operator item_property_assigned(SdaiInstance instance) => new item_property_assigned(instance);

        /// <summary>
        /// Create new instace of item_property_assigned and returns object of this class to interact with
        /// </summary>
        public static new item_property_assigned Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_property_assigned"); Debug.Assert(inst != 0); return inst; }

        public item_property property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, out inst); return new item_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, i); }
            }
        public structural_frame_item item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_property_assigned"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_property_with_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_property_with_source : item_property
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_property_with_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_property_with_source(SdaiInstance instance) : base(instance) { }
        public item_property_with_source() : base(0) { }

        public static implicit operator item_property_with_source(SdaiInstance instance) => new item_property_with_source(instance);

        /// <summary>
        /// Create new instace of item_property_with_source and returns object of this class to interact with
        /// </summary>
        public static new item_property_with_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_property_with_source"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_property_with_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_ref_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_ref_source : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_ref_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_ref_source(SdaiInstance instance) : base(instance) { }
        public item_ref_source() : base(0) { }

        public static implicit operator item_ref_source(SdaiInstance instance) => new item_ref_source(instance);


        protected override TextValue WrapperEntityName() { return "item_ref_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_ref_source_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_ref_source_documented : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_ref_source_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_ref_source_documented(SdaiInstance instance) : base(instance) { }
        public item_ref_source_documented() : base(0) { }

        public static implicit operator item_ref_source_documented(SdaiInstance instance) => new item_ref_source_documented(instance);

        /// <summary>
        /// Create new instace of item_ref_source_documented and returns object of this class to interact with
        /// </summary>
        public static new item_ref_source_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_ref_source_documented"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source documented_item_source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "documented_item_source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "documented_item_source", ifcengine.sdaiINSTANCE, i); }
            }
        public document_usage_constraint document_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_ref_source_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_ref_source_library
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_ref_source_library : item_ref_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_ref_source_library
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_ref_source_library(SdaiInstance instance) : base(instance) { }
        public item_ref_source_library() : base(0) { }

        public static implicit operator item_ref_source_library(SdaiInstance instance) => new item_ref_source_library(instance);

        /// <summary>
        /// Create new instace of item_ref_source_library and returns object of this class to interact with
        /// </summary>
        public static new item_ref_source_library Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_ref_source_library"); Debug.Assert(inst != 0); return inst; }

        public person_and_organization library_owner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "library_owner", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "library_owner", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue library_name
            {
            get { return get_string("library_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "library_name", ifcengine.sdaiSTRING, value); }
            }
        public calendar_date date_of_library 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_of_library", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "date_of_library", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue version_of_library
            {
            get { return get_string("version_of_library", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "version_of_library", ifcengine.sdaiSTRING, value); }
            }
        public set_of_item_reference_library library_items { get { return (new set_of_item_reference_librarySerializer()).FromAttr(m_instance, "library_items"); } }

        protected override TextValue WrapperEntityName() { return "item_ref_source_library"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_ref_source_proprietary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_ref_source_proprietary : item_ref_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_ref_source_proprietary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_ref_source_proprietary(SdaiInstance instance) : base(instance) { }
        public item_ref_source_proprietary() : base(0) { }

        public static implicit operator item_ref_source_proprietary(SdaiInstance instance) => new item_ref_source_proprietary(instance);

        /// <summary>
        /// Create new instace of item_ref_source_proprietary and returns object of this class to interact with
        /// </summary>
        public static new item_ref_source_proprietary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_ref_source_proprietary"); Debug.Assert(inst != 0); return inst; }

        public organization manufacturers_name 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "manufacturers_name", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "manufacturers_name", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue manufacturers_range
            {
            get { return get_string("manufacturers_range", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "manufacturers_range", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? year_of_range
            {
            get { return get_IntValue("year_of_range", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "year_of_range", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue version_of_range
            {
            get { return get_string("version_of_range", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "version_of_range", ifcengine.sdaiSTRING, value); }
            }
        public set_of_item_reference_proprietary proprietary_items { get { return (new set_of_item_reference_proprietarySerializer()).FromAttr(m_instance, "proprietary_items"); } }

        protected override TextValue WrapperEntityName() { return "item_ref_source_proprietary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_ref_source_standard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_ref_source_standard : item_ref_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_ref_source_standard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_ref_source_standard(SdaiInstance instance) : base(instance) { }
        public item_ref_source_standard() : base(0) { }

        public static implicit operator item_ref_source_standard(SdaiInstance instance) => new item_ref_source_standard(instance);

        /// <summary>
        /// Create new instace of item_ref_source_standard and returns object of this class to interact with
        /// </summary>
        public static new item_ref_source_standard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_ref_source_standard"); Debug.Assert(inst != 0); return inst; }

        public TextValue standardization_organization
            {
            get { return get_string("standardization_organization", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "standardization_organization", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name_of_standard
            {
            get { return get_string("name_of_standard", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name_of_standard", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? year_of_standard
            {
            get { return get_IntValue("year_of_standard", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "year_of_standard", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue version_of_standard
            {
            get { return get_string("version_of_standard", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "version_of_standard", ifcengine.sdaiSTRING, value); }
            }
        public set_of_item_reference_standard standard_items { get { return (new set_of_item_reference_standardSerializer()).FromAttr(m_instance, "standard_items"); } }

        protected override TextValue WrapperEntityName() { return "item_ref_source_standard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_reference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_reference(SdaiInstance instance) : base(instance) { }
        public item_reference() : base(0) { }

        public static implicit operator item_reference(SdaiInstance instance) => new item_reference(instance);

        /// <summary>
        /// Create new instace of item_reference and returns object of this class to interact with
        /// </summary>
        public static new item_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_reference"); Debug.Assert(inst != 0); return inst; }

        public TextValue ref_
            {
            get { return get_string("ref_", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ref_", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "item_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_reference_assigned
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_reference_assigned : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_reference_assigned
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_reference_assigned(SdaiInstance instance) : base(instance) { }
        public item_reference_assigned() : base(0) { }

        public static implicit operator item_reference_assigned(SdaiInstance instance) => new item_reference_assigned(instance);

        /// <summary>
        /// Create new instace of item_reference_assigned and returns object of this class to interact with
        /// </summary>
        public static new item_reference_assigned Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_reference_assigned"); Debug.Assert(inst != 0); return inst; }

        public item_reference assigned_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_reference", ifcengine.sdaiINSTANCE, out inst); return new item_reference(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_reference", ifcengine.sdaiINSTANCE, i); }
            }
        public structural_frame_item assigned_to_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_to_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_to_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_reference_assigned"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_reference_library
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_reference_library : item_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_reference_library
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_reference_library(SdaiInstance instance) : base(instance) { }
        public item_reference_library() : base(0) { }

        public static implicit operator item_reference_library(SdaiInstance instance) => new item_reference_library(instance);

        /// <summary>
        /// Create new instace of item_reference_library and returns object of this class to interact with
        /// </summary>
        public static new item_reference_library Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_reference_library"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source_library source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source_library(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_reference_library"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_reference_proprietary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_reference_proprietary : item_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_reference_proprietary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_reference_proprietary(SdaiInstance instance) : base(instance) { }
        public item_reference_proprietary() : base(0) { }

        public static implicit operator item_reference_proprietary(SdaiInstance instance) => new item_reference_proprietary(instance);

        /// <summary>
        /// Create new instace of item_reference_proprietary and returns object of this class to interact with
        /// </summary>
        public static new item_reference_proprietary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_reference_proprietary"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source_proprietary source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source_proprietary(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_reference_proprietary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_reference_standard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_reference_standard : item_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_reference_standard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_reference_standard(SdaiInstance instance) : base(instance) { }
        public item_reference_standard() : base(0) { }

        public static implicit operator item_reference_standard(SdaiInstance instance) => new item_reference_standard(instance);

        /// <summary>
        /// Create new instace of item_reference_standard and returns object of this class to interact with
        /// </summary>
        public static new item_reference_standard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_reference_standard"); Debug.Assert(inst != 0); return inst; }

        public item_ref_source_standard source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new item_ref_source_standard(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_reference_standard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system(SdaiInstance instance) : base(instance) { }
        public joint_system() : base(0) { }

        public static implicit operator joint_system(SdaiInstance instance) => new joint_system(instance);

        /// <summary>
        /// Create new instace of joint_system and returns object of this class to interact with
        /// </summary>
        public static new joint_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system"); Debug.Assert(inst != 0); return inst; }

        public shop_or_site? place_of_assembly 
            { 
            get { var str = get_string("place_of_assembly", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shop_or_site_); return EnumValue<shop_or_site>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<shop_or_site>.FromValue(value.Value, EnumNames.shop_or_site_); ifcengine.sdaiPutAttrBN(m_instance, "place_of_assembly", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? joint_system_number { get { return get_IntValue("joint_system_number", ifcengine.sdaiINTEGER); } }
        public TextValue joint_system_name { get { return get_string("joint_system_name", ifcengine.sdaiSTRING); } }
        public set_of_design_joint_system design_uses { get { return (new set_of_design_joint_systemSerializer()).FromAttr(m_instance, "design_uses"); } }
        public set_of_located_joint_system physical_uses { get { return (new set_of_located_joint_systemSerializer()).FromAttr(m_instance, "physical_uses"); } }

        protected override TextValue WrapperEntityName() { return "joint_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_amorphous
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_amorphous : joint_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_amorphous
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_amorphous(SdaiInstance instance) : base(instance) { }
        public joint_system_amorphous() : base(0) { }

        public static implicit operator joint_system_amorphous(SdaiInstance instance) => new joint_system_amorphous(instance);

        /// <summary>
        /// Create new instace of joint_system_amorphous and returns object of this class to interact with
        /// </summary>
        public static new joint_system_amorphous Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_amorphous"); Debug.Assert(inst != 0); return inst; }

        public chemical_mechanism specification 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "specification", ifcengine.sdaiINSTANCE, out inst); return new chemical_mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "specification", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_amorphous"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_chemical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_chemical : joint_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_chemical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_chemical(SdaiInstance instance) : base(instance) { }
        public joint_system_chemical() : base(0) { }

        public static implicit operator joint_system_chemical(SdaiInstance instance) => new joint_system_chemical(instance);

        /// <summary>
        /// Create new instace of joint_system_chemical and returns object of this class to interact with
        /// </summary>
        public static new joint_system_chemical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_chemical"); Debug.Assert(inst != 0); return inst; }

        public surface joining_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "joining_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "joining_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public surface joined_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "joined_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "joined_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_chemical_mechanism specification { get { return (new list_of_chemical_mechanismSerializer()).FromAttr(m_instance, "specification"); } }
        public void put_specification(IEnumerable<chemical_mechanism> lst) { (new list_of_chemical_mechanismSerializer()).ToSdaiAggr(lst, m_instance, "specification"); }
        public void put_specification_untyped(IEnumerable lst) { (new list_of_chemical_mechanismSerializer()).ToSdaiAggr(lst, m_instance, "specification"); }
        public IntValue? number_of_layers { get { return get_IntValue("number_of_layers", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "joint_system_chemical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_complex : joint_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_complex(SdaiInstance instance) : base(instance) { }
        public joint_system_complex() : base(0) { }

        public static implicit operator joint_system_complex(SdaiInstance instance) => new joint_system_complex(instance);

        /// <summary>
        /// Create new instace of joint_system_complex and returns object of this class to interact with
        /// </summary>
        public static new joint_system_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_complex"); Debug.Assert(inst != 0); return inst; }

        public list_of_joint_system systems { get { return (new list_of_joint_systemSerializer()).FromAttr(m_instance, "systems"); } }
        public void put_systems(IEnumerable<joint_system> lst) { (new list_of_joint_systemSerializer()).ToSdaiAggr(lst, m_instance, "systems"); }
        public void put_systems_untyped(IEnumerable lst) { (new list_of_joint_systemSerializer()).ToSdaiAggr(lst, m_instance, "systems"); }

        protected override TextValue WrapperEntityName() { return "joint_system_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_mechanical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_mechanical : joint_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_mechanical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_mechanical(SdaiInstance instance) : base(instance) { }
        public joint_system_mechanical() : base(0) { }

        public static implicit operator joint_system_mechanical(SdaiInstance instance) => new joint_system_mechanical(instance);

        /// <summary>
        /// Create new instace of joint_system_mechanical and returns object of this class to interact with
        /// </summary>
        public static new joint_system_mechanical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_mechanical"); Debug.Assert(inst != 0); return inst; }

        public list_of_point layout_points { get { return (new list_of_pointSerializer()).FromAttr(m_instance, "layout_points"); } }
        public void put_layout_points(IEnumerable<point> lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout_points"); }
        public void put_layout_points_untyped(IEnumerable lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "layout_points"); }
        public fastener_mechanism mechanism 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mechanism", ifcengine.sdaiINSTANCE, out inst); return new fastener_mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mechanism", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_mechanical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_welded
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_welded : joint_system
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_welded
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_welded(SdaiInstance instance) : base(instance) { }
        public joint_system_welded() : base(0) { }

        public static implicit operator joint_system_welded(SdaiInstance instance) => new joint_system_welded(instance);

        /// <summary>
        /// Create new instace of joint_system_welded and returns object of this class to interact with
        /// </summary>
        public static new joint_system_welded Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_welded"); Debug.Assert(inst != 0); return inst; }

        public weld_mechanism weld_specification 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_specification", ifcengine.sdaiINSTANCE, out inst); return new weld_mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_specification", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_welded"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_welded_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_welded_linear : joint_system_welded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_welded_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_welded_linear(SdaiInstance instance) : base(instance) { }
        public joint_system_welded_linear() : base(0) { }

        public static implicit operator joint_system_welded_linear(SdaiInstance instance) => new joint_system_welded_linear(instance);

        /// <summary>
        /// Create new instace of joint_system_welded_linear and returns object of this class to interact with
        /// </summary>
        public static new joint_system_welded_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_welded_linear"); Debug.Assert(inst != 0); return inst; }

        public composite_curve weld_path 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_path", ifcengine.sdaiINSTANCE, out inst); return new composite_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_path", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_welded_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_welded_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_welded_point : joint_system_welded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_welded_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_welded_point(SdaiInstance instance) : base(instance) { }
        public joint_system_welded_point() : base(0) { }

        public static implicit operator joint_system_welded_point(SdaiInstance instance) => new joint_system_welded_point(instance);

        /// <summary>
        /// Create new instace of joint_system_welded_point and returns object of this class to interact with
        /// </summary>
        public static new joint_system_welded_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_welded_point"); Debug.Assert(inst != 0); return inst; }

        public point weld_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_welded_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_welded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_welded_surface : joint_system_welded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_welded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_welded_surface(SdaiInstance instance) : base(instance) { }
        public joint_system_welded_surface() : base(0) { }

        public static implicit operator joint_system_welded_surface(SdaiInstance instance) => new joint_system_welded_surface(instance);

        /// <summary>
        /// Create new instace of joint_system_welded_surface and returns object of this class to interact with
        /// </summary>
        public static new joint_system_welded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_welded_surface"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface weld_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_surface", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_welded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joint_system_welded_with_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joint_system_welded_with_shape : joint_system_welded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joint_system_welded_with_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joint_system_welded_with_shape(SdaiInstance instance) : base(instance) { }
        public joint_system_welded_with_shape() : base(0) { }

        public static implicit operator joint_system_welded_with_shape(SdaiInstance instance) => new joint_system_welded_with_shape(instance);

        /// <summary>
        /// Create new instace of joint_system_welded_with_shape and returns object of this class to interact with
        /// </summary>
        public static new joint_system_welded_with_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joint_system_welded_with_shape"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units weld_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "joint_system_welded_with_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public length_measure_with_unit() : base(0) { }

        public static implicit operator length_measure_with_unit(SdaiInstance instance) => new length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_unit(SdaiInstance instance) : base(instance) { }
        public length_unit() : base(0) { }

        public static implicit operator length_unit(SdaiInstance instance) => new length_unit(instance);

        /// <summary>
        /// Create new instace of length_unit and returns object of this class to interact with
        /// </summary>
        public static new length_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "length_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class line : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public line(SdaiInstance instance) : base(instance) { }
        public line() : base(0) { }

        public static implicit operator line(SdaiInstance instance) => new line(instance);

        /// <summary>
        /// Create new instace of line and returns object of this class to interact with
        /// </summary>
        public static new line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "line"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point pnt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, i); }
            }
        public vector dir 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_acceleration_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_acceleration_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_acceleration_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_acceleration_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public linear_acceleration_measure_with_unit() : base(0) { }

        public static implicit operator linear_acceleration_measure_with_unit(SdaiInstance instance) => new linear_acceleration_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of linear_acceleration_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_acceleration_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_acceleration_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_acceleration_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_acceleration_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_acceleration_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_acceleration_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_acceleration_unit(SdaiInstance instance) : base(instance) { }
        public linear_acceleration_unit() : base(0) { }

        public static implicit operator linear_acceleration_unit(SdaiInstance instance) => new linear_acceleration_unit(instance);

        /// <summary>
        /// Create new instace of linear_acceleration_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_acceleration_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_acceleration_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_acceleration_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_stiffness_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_stiffness_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_stiffness_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_stiffness_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public linear_stiffness_measure_with_unit() : base(0) { }

        public static implicit operator linear_stiffness_measure_with_unit(SdaiInstance instance) => new linear_stiffness_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of linear_stiffness_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_stiffness_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_stiffness_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_stiffness_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_stiffness_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_stiffness_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_stiffness_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_stiffness_unit(SdaiInstance instance) : base(instance) { }
        public linear_stiffness_unit() : base(0) { }

        public static implicit operator linear_stiffness_unit(SdaiInstance instance) => new linear_stiffness_unit(instance);

        /// <summary>
        /// Create new instace of linear_stiffness_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_stiffness_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_stiffness_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_stiffness_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_velocity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_velocity_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_velocity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_velocity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public linear_velocity_measure_with_unit() : base(0) { }

        public static implicit operator linear_velocity_measure_with_unit(SdaiInstance instance) => new linear_velocity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of linear_velocity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_velocity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_velocity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_velocity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_velocity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_velocity_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_velocity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_velocity_unit(SdaiInstance instance) : base(instance) { }
        public linear_velocity_unit() : base(0) { }

        public static implicit operator linear_velocity_unit(SdaiInstance instance) => new linear_velocity_unit(instance);

        /// <summary>
        /// Create new instace of linear_velocity_unit and returns object of this class to interact with
        /// </summary>
        public static new linear_velocity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_velocity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_velocity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load(SdaiInstance instance) : base(instance) { }
        public load() : base(0) { }

        public static implicit operator load(SdaiInstance instance) => new load(instance);

        public load_case parent_load_case 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_load_case", ifcengine.sdaiINSTANCE, out inst); return new load_case(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_load_case", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue load_name
            {
            get { return get_string("load_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "load_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue load_description
            {
            get { return get_string("load_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "load_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "load"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_case
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_case : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_case
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_case(SdaiInstance instance) : base(instance) { }
        public load_case() : base(0) { }

        public static implicit operator load_case(SdaiInstance instance) => new load_case(instance);

        /// <summary>
        /// Create new instace of load_case and returns object of this class to interact with
        /// </summary>
        public static new load_case Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_case"); Debug.Assert(inst != 0); return inst; }

        public TextValue load_case_name
            {
            get { return get_string("load_case_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "load_case_name", ifcengine.sdaiSTRING, value); }
            }
        public double? load_case_factor
            {
            get { return get_double("load_case_factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "load_case_factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public set_of_analysis_method governing_analyses { get { return (new set_of_analysis_methodSerializer()).FromAttr(m_instance, "governing_analyses"); } }
        public void put_governing_analyses(IEnumerable<analysis_method> lst) { (new set_of_analysis_methodSerializer()).ToSdaiAggr(lst, m_instance, "governing_analyses"); }
        public void put_governing_analyses_untyped(IEnumerable lst) { (new set_of_analysis_methodSerializer()).ToSdaiAggr(lst, m_instance, "governing_analyses"); }
        public physical_action time_variation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_variation", ifcengine.sdaiINSTANCE, out inst); return new physical_action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_variation", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_load loads { get { return (new set_of_loadSerializer()).FromAttr(m_instance, "loads"); } }
        public set_of_load load_components { get { return (new set_of_loadSerializer()).FromAttr(m_instance, "load_components"); } }

        protected override TextValue WrapperEntityName() { return "load_case"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_case_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_case_documented : load_case
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_case_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_case_documented(SdaiInstance instance) : base(instance) { }
        public load_case_documented() : base(0) { }

        public static implicit operator load_case_documented(SdaiInstance instance) => new load_case_documented(instance);

        /// <summary>
        /// Create new instace of load_case_documented and returns object of this class to interact with
        /// </summary>
        public static new load_case_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_case_documented"); Debug.Assert(inst != 0); return inst; }

        public document_usage_constraint code_ref 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "code_ref", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "code_ref", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_case_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_combination_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_combination_occurrence : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_combination_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_combination_occurrence(SdaiInstance instance) : base(instance) { }
        public load_combination_occurrence() : base(0) { }

        public static implicit operator load_combination_occurrence(SdaiInstance instance) => new load_combination_occurrence(instance);

        /// <summary>
        /// Create new instace of load_combination_occurrence and returns object of this class to interact with
        /// </summary>
        public static new load_combination_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_combination_occurrence"); Debug.Assert(inst != 0); return inst; }

        public double? load_combination_factor
            {
            get { return get_double("load_combination_factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "load_combination_factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public loading_combination parent_load_combination 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_load_combination", ifcengine.sdaiINSTANCE, out inst); return new loading_combination(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_load_combination", ifcengine.sdaiINSTANCE, i); }
            }
        public load_case component_load_case 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "component_load_case", ifcengine.sdaiINSTANCE, out inst); return new load_case(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "component_load_case", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_combination_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_connection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_connection : load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_connection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_connection(SdaiInstance instance) : base(instance) { }
        public load_connection() : base(0) { }

        public static implicit operator load_connection(SdaiInstance instance) => new load_connection(instance);

        /// <summary>
        /// Create new instace of load_connection and returns object of this class to interact with
        /// </summary>
        public static new load_connection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_connection"); Debug.Assert(inst != 0); return inst; }

        public assembly_design_structural_connection supporting_connection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "supporting_connection", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_connection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "supporting_connection", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load load_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_values", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_values", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_connection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element : load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element(SdaiInstance instance) : base(instance) { }
        public load_element() : base(0) { }

        public static implicit operator load_element(SdaiInstance instance) => new load_element(instance);

        public element supporting_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "supporting_element", ifcengine.sdaiINSTANCE, out inst); return new element(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "supporting_element", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue load_position_label
            {
            get { return get_string("load_position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "load_position_label", ifcengine.sdaiSTRING, value); }
            }
        public TextValue reference_system
            {
            get { return get_string("reference_system", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "reference_system", ifcengine.sdaiSTRING, value); }
            }
        public bool? destablizing_load
            {
            get { return get_bool("destablizing_load", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "destablizing_load", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public global_or_local_load? global_or_local 
            { 
            get { var str = get_string("global_or_local", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.global_or_local_load_); return EnumValue<global_or_local_load>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<global_or_local_load>.FromValue(value.Value, EnumNames.global_or_local_load_); ifcengine.sdaiPutAttrBN(m_instance, "global_or_local", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "load_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_concentrated
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_concentrated : load_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_concentrated
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_concentrated(SdaiInstance instance) : base(instance) { }
        public load_element_concentrated() : base(0) { }

        public static implicit operator load_element_concentrated(SdaiInstance instance) => new load_element_concentrated(instance);

        /// <summary>
        /// Create new instace of load_element_concentrated and returns object of this class to interact with
        /// </summary>
        public static new load_element_concentrated Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_concentrated"); Debug.Assert(inst != 0); return inst; }

        public point load_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_position", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_element_concentrated"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed : load_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed(SdaiInstance instance) : base(instance) { }
        public load_element_distributed() : base(0) { }

        public static implicit operator load_element_distributed(SdaiInstance instance) => new load_element_distributed(instance);

        public projected_or_true_length? projected_or_true 
            { 
            get { var str = get_string("projected_or_true", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.projected_or_true_length_); return EnumValue<projected_or_true_length>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<projected_or_true_length>.FromValue(value.Value, EnumNames.projected_or_true_length_); ifcengine.sdaiPutAttrBN(m_instance, "projected_or_true", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "load_element_distributed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed_curve : load_element_distributed
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed_curve(SdaiInstance instance) : base(instance) { }
        public load_element_distributed_curve() : base(0) { }

        public static implicit operator load_element_distributed_curve(SdaiInstance instance) => new load_element_distributed_curve(instance);

        /// <summary>
        /// Create new instace of load_element_distributed_curve and returns object of this class to interact with
        /// </summary>
        public static new load_element_distributed_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_distributed_curve"); Debug.Assert(inst != 0); return inst; }

        public applied_load start_load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "start_load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "start_load_value", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load end_load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "end_load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "end_load_value", ifcengine.sdaiINSTANCE, i); }
            }
        public curve curve_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_element_distributed_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed_curve_line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed_curve_line : load_element_distributed_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed_curve_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed_curve_line(SdaiInstance instance) : base(instance) { }
        public load_element_distributed_curve_line() : base(0) { }

        public static implicit operator load_element_distributed_curve_line(SdaiInstance instance) => new load_element_distributed_curve_line(instance);

        /// <summary>
        /// Create new instace of load_element_distributed_curve_line and returns object of this class to interact with
        /// </summary>
        public static new load_element_distributed_curve_line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_distributed_curve_line"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "load_element_distributed_curve_line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed_surface : load_element_distributed
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed_surface(SdaiInstance instance) : base(instance) { }
        public load_element_distributed_surface() : base(0) { }

        public static implicit operator load_element_distributed_surface(SdaiInstance instance) => new load_element_distributed_surface(instance);

        public bounded_surface surface_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_element_distributed_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed_surface_uniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed_surface_uniform : load_element_distributed_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed_surface_uniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed_surface_uniform(SdaiInstance instance) : base(instance) { }
        public load_element_distributed_surface_uniform() : base(0) { }

        public static implicit operator load_element_distributed_surface_uniform(SdaiInstance instance) => new load_element_distributed_surface_uniform(instance);

        /// <summary>
        /// Create new instace of load_element_distributed_surface_uniform and returns object of this class to interact with
        /// </summary>
        public static new load_element_distributed_surface_uniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_distributed_surface_uniform"); Debug.Assert(inst != 0); return inst; }

        public applied_load_static_pressure load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static_pressure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_element_distributed_surface_uniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_distributed_surface_varying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_distributed_surface_varying : load_element_distributed_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_distributed_surface_varying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_distributed_surface_varying(SdaiInstance instance) : base(instance) { }
        public load_element_distributed_surface_varying() : base(0) { }

        public static implicit operator load_element_distributed_surface_varying(SdaiInstance instance) => new load_element_distributed_surface_varying(instance);

        /// <summary>
        /// Create new instace of load_element_distributed_surface_varying and returns object of this class to interact with
        /// </summary>
        public static new load_element_distributed_surface_varying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_distributed_surface_varying"); Debug.Assert(inst != 0); return inst; }

        public set_of_applied_load_static_pressure load_values { get { return (new set_of_applied_load_static_pressureSerializer()).FromAttr(m_instance, "load_values"); } }
        public void put_load_values(IEnumerable<applied_load_static_pressure> lst) { (new set_of_applied_load_static_pressureSerializer()).ToSdaiAggr(lst, m_instance, "load_values"); }
        public void put_load_values_untyped(IEnumerable lst) { (new set_of_applied_load_static_pressureSerializer()).ToSdaiAggr(lst, m_instance, "load_values"); }

        protected override TextValue WrapperEntityName() { return "load_element_distributed_surface_varying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_element_thermal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_element_thermal : load_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_element_thermal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_element_thermal(SdaiInstance instance) : base(instance) { }
        public load_element_thermal() : base(0) { }

        public static implicit operator load_element_thermal(SdaiInstance instance) => new load_element_thermal(instance);

        /// <summary>
        /// Create new instace of load_element_thermal and returns object of this class to interact with
        /// </summary>
        public static new load_element_thermal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_element_thermal"); Debug.Assert(inst != 0); return inst; }

        public list_of_measure_with_unit temperature_gradients { get { return (new list_of_measure_with_unitSerializer()).FromAttr(m_instance, "temperature_gradients"); } }
        public void put_temperature_gradients(IEnumerable<measure_with_unit> lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "temperature_gradients"); }
        public void put_temperature_gradients_untyped(IEnumerable lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "temperature_gradients"); }

        protected override TextValue WrapperEntityName() { return "load_element_thermal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member : load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member(SdaiInstance instance) : base(instance) { }
        public load_member() : base(0) { }

        public static implicit operator load_member(SdaiInstance instance) => new load_member(instance);

        public assembly_design_structural_member supporting_member 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "supporting_member", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_member(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "supporting_member", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue load_position_label
            {
            get { return get_string("load_position_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "load_position_label", ifcengine.sdaiSTRING, value); }
            }
        public TextValue reference_system
            {
            get { return get_string("reference_system", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "reference_system", ifcengine.sdaiSTRING, value); }
            }
        public bool? destablizing_load
            {
            get { return get_bool("destablizing_load", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "destablizing_load", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public global_or_local_load? global_or_local 
            { 
            get { var str = get_string("global_or_local", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.global_or_local_load_); return EnumValue<global_or_local_load>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<global_or_local_load>.FromValue(value.Value, EnumNames.global_or_local_load_); ifcengine.sdaiPutAttrBN(m_instance, "global_or_local", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "load_member"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_concentrated
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_concentrated : load_member
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_concentrated
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_concentrated(SdaiInstance instance) : base(instance) { }
        public load_member_concentrated() : base(0) { }

        public static implicit operator load_member_concentrated(SdaiInstance instance) => new load_member_concentrated(instance);

        /// <summary>
        /// Create new instace of load_member_concentrated and returns object of this class to interact with
        /// </summary>
        public static new load_member_concentrated Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_member_concentrated"); Debug.Assert(inst != 0); return inst; }

        public point load_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_position", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_position", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_member_concentrated"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed : load_member
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed(SdaiInstance instance) : base(instance) { }
        public load_member_distributed() : base(0) { }

        public static implicit operator load_member_distributed(SdaiInstance instance) => new load_member_distributed(instance);

        public projected_or_true_length? projected_or_true 
            { 
            get { var str = get_string("projected_or_true", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.projected_or_true_length_); return EnumValue<projected_or_true_length>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<projected_or_true_length>.FromValue(value.Value, EnumNames.projected_or_true_length_); ifcengine.sdaiPutAttrBN(m_instance, "projected_or_true", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "load_member_distributed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed_curve : load_member_distributed
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed_curve(SdaiInstance instance) : base(instance) { }
        public load_member_distributed_curve() : base(0) { }

        public static implicit operator load_member_distributed_curve(SdaiInstance instance) => new load_member_distributed_curve(instance);

        /// <summary>
        /// Create new instace of load_member_distributed_curve and returns object of this class to interact with
        /// </summary>
        public static new load_member_distributed_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_member_distributed_curve"); Debug.Assert(inst != 0); return inst; }

        public applied_load start_load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "start_load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "start_load_value", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load end_load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "end_load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "end_load_value", ifcengine.sdaiINSTANCE, i); }
            }
        public curve curve_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_member_distributed_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed_curve_line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed_curve_line : load_member_distributed_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed_curve_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed_curve_line(SdaiInstance instance) : base(instance) { }
        public load_member_distributed_curve_line() : base(0) { }

        public static implicit operator load_member_distributed_curve_line(SdaiInstance instance) => new load_member_distributed_curve_line(instance);

        /// <summary>
        /// Create new instace of load_member_distributed_curve_line and returns object of this class to interact with
        /// </summary>
        public static new load_member_distributed_curve_line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_member_distributed_curve_line"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "load_member_distributed_curve_line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed_surface : load_member_distributed
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed_surface(SdaiInstance instance) : base(instance) { }
        public load_member_distributed_surface() : base(0) { }

        public static implicit operator load_member_distributed_surface(SdaiInstance instance) => new load_member_distributed_surface(instance);

        public bounded_surface surface_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_member_distributed_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed_surface_uniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed_surface_uniform : load_member_distributed_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed_surface_uniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed_surface_uniform(SdaiInstance instance) : base(instance) { }
        public load_member_distributed_surface_uniform() : base(0) { }

        public static implicit operator load_member_distributed_surface_uniform(SdaiInstance instance) => new load_member_distributed_surface_uniform(instance);

        /// <summary>
        /// Create new instace of load_member_distributed_surface_uniform and returns object of this class to interact with
        /// </summary>
        public static new load_member_distributed_surface_uniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_member_distributed_surface_uniform"); Debug.Assert(inst != 0); return inst; }

        public applied_load_static_pressure load_value 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, out inst); return new applied_load_static_pressure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_value", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_member_distributed_surface_uniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_member_distributed_surface_varying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_member_distributed_surface_varying : load_member_distributed_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_member_distributed_surface_varying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_member_distributed_surface_varying(SdaiInstance instance) : base(instance) { }
        public load_member_distributed_surface_varying() : base(0) { }

        public static implicit operator load_member_distributed_surface_varying(SdaiInstance instance) => new load_member_distributed_surface_varying(instance);

        /// <summary>
        /// Create new instace of load_member_distributed_surface_varying and returns object of this class to interact with
        /// </summary>
        public static new load_member_distributed_surface_varying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_member_distributed_surface_varying"); Debug.Assert(inst != 0); return inst; }

        public set_of_applied_load_static_pressure load_values { get { return (new set_of_applied_load_static_pressureSerializer()).FromAttr(m_instance, "load_values"); } }
        public void put_load_values(IEnumerable<applied_load_static_pressure> lst) { (new set_of_applied_load_static_pressureSerializer()).ToSdaiAggr(lst, m_instance, "load_values"); }
        public void put_load_values_untyped(IEnumerable lst) { (new set_of_applied_load_static_pressureSerializer()).ToSdaiAggr(lst, m_instance, "load_values"); }

        protected override TextValue WrapperEntityName() { return "load_member_distributed_surface_varying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of load_node
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class load_node : load
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of load_node
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public load_node(SdaiInstance instance) : base(instance) { }
        public load_node() : base(0) { }

        public static implicit operator load_node(SdaiInstance instance) => new load_node(instance);

        /// <summary>
        /// Create new instace of load_node and returns object of this class to interact with
        /// </summary>
        public static new load_node Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "load_node"); Debug.Assert(inst != 0); return inst; }

        public node supporting_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "supporting_node", ifcengine.sdaiINSTANCE, out inst); return new node(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "supporting_node", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load load_values 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_values", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_values", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "load_node"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loaded_product
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loaded_product : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loaded_product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loaded_product(SdaiInstance instance) : base(instance) { }
        public loaded_product() : base(0) { }

        public static implicit operator loaded_product(SdaiInstance instance) => new loaded_product(instance);

        /// <summary>
        /// Create new instace of loaded_product and returns object of this class to interact with
        /// </summary>
        public static new loaded_product Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loaded_product"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_product product 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "product", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_product(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "product", ifcengine.sdaiINSTANCE, i); }
            }
        public applied_load load_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "load_definition", ifcengine.sdaiINSTANCE, out inst); return new applied_load(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "load_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public physical_action time_variation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_variation", ifcengine.sdaiINSTANCE, out inst); return new physical_action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_variation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "loaded_product"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loading_combination
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loading_combination : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loading_combination
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loading_combination(SdaiInstance instance) : base(instance) { }
        public loading_combination() : base(0) { }

        public static implicit operator loading_combination(SdaiInstance instance) => new loading_combination(instance);

        /// <summary>
        /// Create new instace of loading_combination and returns object of this class to interact with
        /// </summary>
        public static new loading_combination Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loading_combination"); Debug.Assert(inst != 0); return inst; }

        public TextValue loading_combination_name
            {
            get { return get_string("loading_combination_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "loading_combination_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue loading_combination_description
            {
            get { return get_string("loading_combination_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "loading_combination_description", ifcengine.sdaiSTRING, value); }
            }
        public analysis_model loaded_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "loaded_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "loaded_model", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_load_combination_occurrence load_cases { get { return (new set_of_load_combination_occurrenceSerializer()).FromAttr(m_instance, "load_cases"); } }
        public set_of_load_combination_occurrence cases { get { return (new set_of_load_combination_occurrenceSerializer()).FromAttr(m_instance, "cases"); } }

        protected override TextValue WrapperEntityName() { return "loading_combination"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of local_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class local_time : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of local_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public local_time(SdaiInstance instance) : base(instance) { }
        public local_time() : base(0) { }

        public static implicit operator local_time(SdaiInstance instance) => new local_time(instance);

        /// <summary>
        /// Create new instace of local_time and returns object of this class to interact with
        /// </summary>
        public static new local_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "local_time"); Debug.Assert(inst != 0); return inst; }

        public IntValue? hour_component
            {
            get { return get_IntValue("hour_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hour_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? minute_component
            {
            get { return get_IntValue("minute_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minute_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? second_component
            {
            get { return get_double("second_component", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "second_component", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public coordinated_universal_time_offset zone 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, out inst); return new coordinated_universal_time_offset(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "local_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_item : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_item(SdaiInstance instance) : base(instance) { }
        public located_item() : base(0) { }

        public static implicit operator located_item(SdaiInstance instance) => new located_item(instance);

        public coord_system location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, out inst); return new coord_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_assembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_assembly : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_assembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_assembly(SdaiInstance instance) : base(instance) { }
        public located_assembly() : base(0) { }

        public static implicit operator located_assembly(SdaiInstance instance) => new located_assembly(instance);

        /// <summary>
        /// Create new instace of located_assembly and returns object of this class to interact with
        /// </summary>
        public static new located_assembly Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_assembly"); Debug.Assert(inst != 0); return inst; }

        public set_of_grid_offset location_on_grid { get { return (new set_of_grid_offsetSerializer()).FromAttr(m_instance, "location_on_grid"); } }
        public void put_location_on_grid(IEnumerable<grid_offset> lst) { (new set_of_grid_offsetSerializer()).ToSdaiAggr(lst, m_instance, "location_on_grid"); }
        public void put_location_on_grid_untyped(IEnumerable lst) { (new set_of_grid_offsetSerializer()).ToSdaiAggr(lst, m_instance, "location_on_grid"); }
        public assembly descriptive_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_assembly", ifcengine.sdaiINSTANCE, i); }
            }

        public structure_select parent_structure
            {
            get { return new structure_select(m_instance, "parent_structure", 0); }
            }
        public set_of_located_part component_parts { get { return (new set_of_located_partSerializer()).FromAttr(m_instance, "component_parts"); } }
        public set_of_located_assembly sub_assemblies { get { return (new set_of_located_assemblySerializer()).FromAttr(m_instance, "sub_assemblies"); } }

        protected override TextValue WrapperEntityName() { return "located_assembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_assembly_child
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_assembly_child : located_assembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_assembly_child
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_assembly_child(SdaiInstance instance) : base(instance) { }
        public located_assembly_child() : base(0) { }

        public static implicit operator located_assembly_child(SdaiInstance instance) => new located_assembly_child(instance);

        /// <summary>
        /// Create new instace of located_assembly_child and returns object of this class to interact with
        /// </summary>
        public static new located_assembly_child Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_assembly_child"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "located_assembly_child"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_assembly_marked
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_assembly_marked : located_assembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_assembly_marked
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_assembly_marked(SdaiInstance instance) : base(instance) { }
        public located_assembly_marked() : base(0) { }

        public static implicit operator located_assembly_marked(SdaiInstance instance) => new located_assembly_marked(instance);

        /// <summary>
        /// Create new instace of located_assembly_marked and returns object of this class to interact with
        /// </summary>
        public static new located_assembly_marked Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_assembly_marked"); Debug.Assert(inst != 0); return inst; }

        public TextValue assembly_mark
            {
            get { return get_string("assembly_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "assembly_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue client_mark
            {
            get { return get_string("client_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "client_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue prelim_mark
            {
            get { return get_string("prelim_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "prelim_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue shipping_mark
            {
            get { return get_string("shipping_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "shipping_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue bar_code
            {
            get { return get_string("bar_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "bar_code", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "located_assembly_marked"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature(SdaiInstance instance) : base(instance) { }
        public located_feature() : base(0) { }

        public static implicit operator located_feature(SdaiInstance instance) => new located_feature(instance);

        public feature descriptive_feature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_feature", ifcengine.sdaiINSTANCE, out inst); return new feature(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_feature", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_for_assembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_for_assembly : located_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_for_assembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_for_assembly(SdaiInstance instance) : base(instance) { }
        public located_feature_for_assembly() : base(0) { }

        public static implicit operator located_feature_for_assembly(SdaiInstance instance) => new located_feature_for_assembly(instance);

        /// <summary>
        /// Create new instace of located_feature_for_assembly and returns object of this class to interact with
        /// </summary>
        public static new located_feature_for_assembly Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_for_assembly"); Debug.Assert(inst != 0); return inst; }

        public assembly modified_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "modified_assembly", ifcengine.sdaiINSTANCE, out inst); return new assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "modified_assembly", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_for_assembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_for_design_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_for_design_part : located_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_for_design_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_for_design_part(SdaiInstance instance) : base(instance) { }
        public located_feature_for_design_part() : base(0) { }

        public static implicit operator located_feature_for_design_part(SdaiInstance instance) => new located_feature_for_design_part(instance);

        /// <summary>
        /// Create new instace of located_feature_for_design_part and returns object of this class to interact with
        /// </summary>
        public static new located_feature_for_design_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_for_design_part"); Debug.Assert(inst != 0); return inst; }

        public design_part modified_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, out inst); return new design_part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_for_design_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_for_located_assembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_for_located_assembly : located_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_for_located_assembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_for_located_assembly(SdaiInstance instance) : base(instance) { }
        public located_feature_for_located_assembly() : base(0) { }

        public static implicit operator located_feature_for_located_assembly(SdaiInstance instance) => new located_feature_for_located_assembly(instance);

        /// <summary>
        /// Create new instace of located_feature_for_located_assembly and returns object of this class to interact with
        /// </summary>
        public static new located_feature_for_located_assembly Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_for_located_assembly"); Debug.Assert(inst != 0); return inst; }

        public located_assembly modified_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "modified_assembly", ifcengine.sdaiINSTANCE, out inst); return new located_assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "modified_assembly", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_for_located_assembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_for_located_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_for_located_part : located_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_for_located_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_for_located_part(SdaiInstance instance) : base(instance) { }
        public located_feature_for_located_part() : base(0) { }

        public static implicit operator located_feature_for_located_part(SdaiInstance instance) => new located_feature_for_located_part(instance);

        /// <summary>
        /// Create new instace of located_feature_for_located_part and returns object of this class to interact with
        /// </summary>
        public static new located_feature_for_located_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_for_located_part"); Debug.Assert(inst != 0); return inst; }

        public located_part modified_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, out inst); return new located_part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_for_located_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_for_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_for_part : located_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_for_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_for_part(SdaiInstance instance) : base(instance) { }
        public located_feature_for_part() : base(0) { }

        public static implicit operator located_feature_for_part(SdaiInstance instance) => new located_feature_for_part(instance);

        /// <summary>
        /// Create new instace of located_feature_for_part and returns object of this class to interact with
        /// </summary>
        public static new located_feature_for_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_for_part"); Debug.Assert(inst != 0); return inst; }

        public part modified_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, out inst); return new part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "modified_part", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_for_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_feature_joint_dependent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_feature_joint_dependent : located_feature_for_located_part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_feature_joint_dependent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_feature_joint_dependent(SdaiInstance instance) : base(instance) { }
        public located_feature_joint_dependent() : base(0) { }

        public static implicit operator located_feature_joint_dependent(SdaiInstance instance) => new located_feature_joint_dependent(instance);

        /// <summary>
        /// Create new instace of located_feature_joint_dependent and returns object of this class to interact with
        /// </summary>
        public static new located_feature_joint_dependent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_feature_joint_dependent"); Debug.Assert(inst != 0); return inst; }

        public located_joint_system feature_for_joint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_for_joint", ifcengine.sdaiINSTANCE, out inst); return new located_joint_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature_for_joint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "located_feature_joint_dependent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_joint_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_joint_system : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_joint_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_joint_system(SdaiInstance instance) : base(instance) { }
        public located_joint_system() : base(0) { }

        public static implicit operator located_joint_system(SdaiInstance instance) => new located_joint_system(instance);

        /// <summary>
        /// Create new instace of located_joint_system and returns object of this class to interact with
        /// </summary>
        public static new located_joint_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_joint_system"); Debug.Assert(inst != 0); return inst; }

        public joint_system descriptive_joint_system 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_joint_system", ifcengine.sdaiINSTANCE, out inst); return new joint_system(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_joint_system", ifcengine.sdaiINSTANCE, i); }
            }
        public located_assembly parent_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, out inst); return new located_assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_located_feature_joint_dependent features { get { return (new set_of_located_feature_joint_dependentSerializer()).FromAttr(m_instance, "features"); } }

        protected override TextValue WrapperEntityName() { return "located_joint_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_part : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_part(SdaiInstance instance) : base(instance) { }
        public located_part() : base(0) { }

        public static implicit operator located_part(SdaiInstance instance) => new located_part(instance);

        /// <summary>
        /// Create new instace of located_part and returns object of this class to interact with
        /// </summary>
        public static new located_part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_part"); Debug.Assert(inst != 0); return inst; }

        public part descriptive_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_part", ifcengine.sdaiINSTANCE, out inst); return new part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_part", ifcengine.sdaiINSTANCE, i); }
            }
        public located_assembly parent_assembly 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, out inst); return new located_assembly(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_assembly", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_located_feature_for_located_part features { get { return (new set_of_located_feature_for_located_partSerializer()).FromAttr(m_instance, "features"); } }

        protected override TextValue WrapperEntityName() { return "located_part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_part_joint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_part_joint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_part_joint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_part_joint(SdaiInstance instance) : base(instance) { }
        public located_part_joint() : base(0) { }

        public static implicit operator located_part_joint(SdaiInstance instance) => new located_part_joint(instance);

        /// <summary>
        /// Create new instace of located_part_joint and returns object of this class to interact with
        /// </summary>
        public static new located_part_joint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_part_joint"); Debug.Assert(inst != 0); return inst; }

        public TextValue part_joint_label
            {
            get { return get_string("part_joint_label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "part_joint_label", ifcengine.sdaiSTRING, value); }
            }
        public TextValue part_joint_nature
            {
            get { return get_string("part_joint_nature", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "part_joint_nature", ifcengine.sdaiSTRING, value); }
            }
        public set_of_located_part logically_joined_parts { get { return (new set_of_located_partSerializer()).FromAttr(m_instance, "logically_joined_parts"); } }
        public void put_logically_joined_parts(IEnumerable<located_part> lst) { (new set_of_located_partSerializer()).ToSdaiAggr(lst, m_instance, "logically_joined_parts"); }
        public void put_logically_joined_parts_untyped(IEnumerable lst) { (new set_of_located_partSerializer()).ToSdaiAggr(lst, m_instance, "logically_joined_parts"); }
        public set_of_located_joint_system required_joints { get { return (new set_of_located_joint_systemSerializer()).FromAttr(m_instance, "required_joints"); } }
        public void put_required_joints(IEnumerable<located_joint_system> lst) { (new set_of_located_joint_systemSerializer()).ToSdaiAggr(lst, m_instance, "required_joints"); }
        public void put_required_joints_untyped(IEnumerable lst) { (new set_of_located_joint_systemSerializer()).ToSdaiAggr(lst, m_instance, "required_joints"); }

        protected override TextValue WrapperEntityName() { return "located_part_joint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_part_marked
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_part_marked : located_part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_part_marked
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_part_marked(SdaiInstance instance) : base(instance) { }
        public located_part_marked() : base(0) { }

        public static implicit operator located_part_marked(SdaiInstance instance) => new located_part_marked(instance);

        /// <summary>
        /// Create new instace of located_part_marked and returns object of this class to interact with
        /// </summary>
        public static new located_part_marked Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_part_marked"); Debug.Assert(inst != 0); return inst; }

        public TextValue piece_mark
            {
            get { return get_string("piece_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "piece_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue prelim_mark
            {
            get { return get_string("prelim_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "prelim_mark", ifcengine.sdaiSTRING, value); }
            }
        public TextValue bar_code
            {
            get { return get_string("bar_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "bar_code", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? quantity
            {
            get { return get_IntValue("quantity", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "quantity", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? main_piece 
            { 
            get { var str = get_string("main_piece", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "main_piece", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "located_part_marked"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_site
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_site : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_site
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_site(SdaiInstance instance) : base(instance) { }
        public located_site() : base(0) { }

        public static implicit operator located_site(SdaiInstance instance) => new located_site(instance);

        /// <summary>
        /// Create new instace of located_site and returns object of this class to interact with
        /// </summary>
        public static new located_site Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_site"); Debug.Assert(inst != 0); return inst; }

        public site descriptive_site 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_site", ifcengine.sdaiINSTANCE, out inst); return new site(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_site", ifcengine.sdaiINSTANCE, i); }
            }

        public project_select parent_project
            {
            get { return new project_select(m_instance, "parent_project", 0); }
            }

        protected override TextValue WrapperEntityName() { return "located_site"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of located_structure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class located_structure : located_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of located_structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public located_structure(SdaiInstance instance) : base(instance) { }
        public located_structure() : base(0) { }

        public static implicit operator located_structure(SdaiInstance instance) => new located_structure(instance);

        /// <summary>
        /// Create new instace of located_structure and returns object of this class to interact with
        /// </summary>
        public static new located_structure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "located_structure"); Debug.Assert(inst != 0); return inst; }

        public structure descriptive_structure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "descriptive_structure", ifcengine.sdaiINSTANCE, out inst); return new structure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "descriptive_structure", ifcengine.sdaiINSTANCE, i); }
            }

        public site_select parent_site
            {
            get { return new site_select(m_instance, "parent_site", 0); }
            }

        protected override TextValue WrapperEntityName() { return "located_structure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_application_installation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_application_installation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_application_installation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_application_installation(SdaiInstance instance) : base(instance) { }
        public managed_application_installation() : base(0) { }

        public static implicit operator managed_application_installation(SdaiInstance instance) => new managed_application_installation(instance);

        /// <summary>
        /// Create new instace of managed_application_installation and returns object of this class to interact with
        /// </summary>
        public static new managed_application_installation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_application_installation"); Debug.Assert(inst != 0); return inst; }

        public IntValue? application_id
            {
            get { return get_IntValue("application_id", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "application_id", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue application_name
            {
            get { return get_string("application_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "application_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue application_version
            {
            get { return get_string("application_version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "application_version", ifcengine.sdaiSTRING, value); }
            }
        public TextValue application_description
            {
            get { return get_string("application_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "application_description", ifcengine.sdaiSTRING, value); }
            }
        public organization application_vendor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "application_vendor", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "application_vendor", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? installation_id
            {
            get { return get_IntValue("installation_id", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "installation_id", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue installation_name
            {
            get { return get_string("installation_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "installation_name", ifcengine.sdaiSTRING, value); }
            }
        public organization installation_owner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "installation_owner", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "installation_owner", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "managed_application_installation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_transaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_transaction : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_transaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_transaction(SdaiInstance instance) : base(instance) { }
        public managed_data_transaction() : base(0) { }

        public static implicit operator managed_data_transaction(SdaiInstance instance) => new managed_data_transaction(instance);

        /// <summary>
        /// Create new instace of managed_data_transaction and returns object of this class to interact with
        /// </summary>
        public static new managed_data_transaction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_transaction"); Debug.Assert(inst != 0); return inst; }

        public managed_application_installation application 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, out inst); return new managed_application_installation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, i); }
            }
        public person_and_organization user 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "user", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "user", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time processing_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "processing_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "processing_date", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? new_ids_assigned
            {
            get { return get_bool("new_ids_assigned", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "new_ids_assigned", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue life_cycle_stage
            {
            get { return get_string("life_cycle_stage", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "life_cycle_stage", ifcengine.sdaiSTRING, value); }
            }
        public TextValue transaction_description
            {
            get { return get_string("transaction_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "transaction_description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_managed_data_item processed_items { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "processed_items"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_transaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_creation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_creation : managed_data_transaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_creation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_creation(SdaiInstance instance) : base(instance) { }
        public managed_data_creation() : base(0) { }

        public static implicit operator managed_data_creation(SdaiInstance instance) => new managed_data_creation(instance);

        /// <summary>
        /// Create new instace of managed_data_creation and returns object of this class to interact with
        /// </summary>
        public static new managed_data_creation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_creation"); Debug.Assert(inst != 0); return inst; }

        public set_of_managed_data_item created_set { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "created_set"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_creation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_deleted
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_deleted : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_deleted
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_deleted(SdaiInstance instance) : base(instance) { }
        public managed_data_deleted() : base(0) { }

        public static implicit operator managed_data_deleted(SdaiInstance instance) => new managed_data_deleted(instance);

        /// <summary>
        /// Create new instace of managed_data_deleted and returns object of this class to interact with
        /// </summary>
        public static new managed_data_deleted Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_deleted"); Debug.Assert(inst != 0); return inst; }

        public data_status_type? data_status 
            { 
            get { var str = get_string("data_status", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.data_status_type_); return EnumValue<data_status_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<data_status_type>.FromValue(value.Value, EnumNames.data_status_type_); ifcengine.sdaiPutAttrBN(m_instance, "data_status", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_managed_data_item deleted_data_items { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "deleted_data_items"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_deleted"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_export
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_export : managed_data_transaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_export
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_export(SdaiInstance instance) : base(instance) { }
        public managed_data_export() : base(0) { }

        public static implicit operator managed_data_export(SdaiInstance instance) => new managed_data_export(instance);

        /// <summary>
        /// Create new instace of managed_data_export and returns object of this class to interact with
        /// </summary>
        public static new managed_data_export Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_export"); Debug.Assert(inst != 0); return inst; }


        public select_data_source data_destination
            {
            get { return new select_data_source(m_instance, "data_destination", 0); }
            }
        public set_of_managed_data_item exported_set { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "exported_set"); } }
        public set_of_managed_data_group assignments { get { return (new set_of_managed_data_groupSerializer()).FromAttr(m_instance, "assignments"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_export"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_group : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_group(SdaiInstance instance) : base(instance) { }
        public managed_data_group() : base(0) { }

        public static implicit operator managed_data_group(SdaiInstance instance) => new managed_data_group(instance);

        /// <summary>
        /// Create new instace of managed_data_group and returns object of this class to interact with
        /// </summary>
        public static new managed_data_group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_group"); Debug.Assert(inst != 0); return inst; }

        public set_of_managed_data_transaction items { get { return (new set_of_managed_data_transactionSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<managed_data_transaction> lst) { (new set_of_managed_data_transactionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_managed_data_transactionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "managed_data_group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_import
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_import : managed_data_transaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_import
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_import(SdaiInstance instance) : base(instance) { }
        public managed_data_import() : base(0) { }

        public static implicit operator managed_data_import(SdaiInstance instance) => new managed_data_import(instance);

        /// <summary>
        /// Create new instace of managed_data_import and returns object of this class to interact with
        /// </summary>
        public static new managed_data_import Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_import"); Debug.Assert(inst != 0); return inst; }


        public select_data_source data_source
            {
            get { return new select_data_source(m_instance, "data_source", 0); }
            }
        public set_of_managed_data_item imported_set { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "imported_set"); } }
        public set_of_managed_data_group assignments { get { return (new set_of_managed_data_groupSerializer()).FromAttr(m_instance, "assignments"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_import"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_item(SdaiInstance instance) : base(instance) { }
        public managed_data_item() : base(0) { }

        public static implicit operator managed_data_item(SdaiInstance instance) => new managed_data_item(instance);

        /// <summary>
        /// Create new instace of managed_data_item and returns object of this class to interact with
        /// </summary>
        public static new managed_data_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue instance_id
            {
            get { return get_string("instance_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "instance_id", ifcengine.sdaiSTRING, value); }
            }
        public managed_application_installation originating_application 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "originating_application", ifcengine.sdaiINSTANCE, out inst); return new managed_application_installation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "originating_application", ifcengine.sdaiINSTANCE, i); }
            }

        public select_data_item data_item
            {
            get { return new select_data_item(m_instance, "data_item", 0); }
            }
        public list_of_managed_data_transaction history { get { return (new list_of_managed_data_transactionSerializer()).FromAttr(m_instance, "history"); } }
        public void put_history(IEnumerable<managed_data_transaction> lst) { (new list_of_managed_data_transactionSerializer()).ToSdaiAggr(lst, m_instance, "history"); }
        public void put_history_untyped(IEnumerable lst) { (new list_of_managed_data_transactionSerializer()).ToSdaiAggr(lst, m_instance, "history"); }
        public LOGICAL_VALUE? original_data 
            { 
            get { var str = get_string("original_data", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "original_data", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "managed_data_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_item_with_history
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_item_with_history : managed_data_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_item_with_history
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_item_with_history(SdaiInstance instance) : base(instance) { }
        public managed_data_item_with_history() : base(0) { }

        public static implicit operator managed_data_item_with_history(SdaiInstance instance) => new managed_data_item_with_history(instance);

        /// <summary>
        /// Create new instace of managed_data_item_with_history and returns object of this class to interact with
        /// </summary>
        public static new managed_data_item_with_history Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_item_with_history"); Debug.Assert(inst != 0); return inst; }

        public IntValue? number_of_uses { get { return get_IntValue("number_of_uses", ifcengine.sdaiINTEGER); } }
        public managed_application_installation first_managing_application { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "first_managing_application", ifcengine.sdaiINSTANCE, out inst); return new managed_application_installation(inst); } }
        public person first_managing_person { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "first_managing_person", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } }
        public calendar_date date_first_managed { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_first_managed", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } }
        public managed_application_installation last_managing_application { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "last_managing_application", ifcengine.sdaiINSTANCE, out inst); return new managed_application_installation(inst); } }
        public person last_managing_person { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "last_managing_person", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } }
        public calendar_date date_last_managed { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_last_managed", ifcengine.sdaiINSTANCE, out inst); return new calendar_date(inst); } }

        protected override TextValue WrapperEntityName() { return "managed_data_item_with_history"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of managed_data_modification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class managed_data_modification : managed_data_transaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of managed_data_modification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public managed_data_modification(SdaiInstance instance) : base(instance) { }
        public managed_data_modification() : base(0) { }

        public static implicit operator managed_data_modification(SdaiInstance instance) => new managed_data_modification(instance);

        /// <summary>
        /// Create new instace of managed_data_modification and returns object of this class to interact with
        /// </summary>
        public static new managed_data_modification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "managed_data_modification"); Debug.Assert(inst != 0); return inst; }

        public set_of_managed_data_item modified_set { get { return (new set_of_managed_data_itemSerializer()).FromAttr(m_instance, "modified_set"); } }

        protected override TextValue WrapperEntityName() { return "managed_data_modification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of map_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class map_location : geographical_location
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of map_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public map_location(SdaiInstance instance) : base(instance) { }
        public map_location() : base(0) { }

        public static implicit operator map_location(SdaiInstance instance) => new map_location(instance);

        /// <summary>
        /// Create new instace of map_location and returns object of this class to interact with
        /// </summary>
        public static new map_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "map_location"); Debug.Assert(inst != 0); return inst; }

        public TextValue map_name
            {
            get { return get_string("map_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "map_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue map_code
            {
            get { return get_string("map_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "map_code", ifcengine.sdaiSTRING, value); }
            }
        public length_measure_with_unit eastings 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "eastings", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "eastings", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit northings 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "northings", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "northings", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "map_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mapped_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mapped_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mapped_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mapped_item(SdaiInstance instance) : base(instance) { }
        public mapped_item() : base(0) { }

        public static implicit operator mapped_item(SdaiInstance instance) => new mapped_item(instance);

        /// <summary>
        /// Create new instace of mapped_item and returns object of this class to interact with
        /// </summary>
        public static new mapped_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mapped_item"); Debug.Assert(inst != 0); return inst; }

        public representation_map mapping_source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item mapping_target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "mapped_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public mass_measure_with_unit() : base(0) { }

        public static implicit operator mass_measure_with_unit(SdaiInstance instance) => new mass_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of mass_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_per_length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_per_length_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_per_length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_per_length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public mass_per_length_measure_with_unit() : base(0) { }

        public static implicit operator mass_per_length_measure_with_unit(SdaiInstance instance) => new mass_per_length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of mass_per_length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_per_length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_per_length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_per_length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_per_length_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_per_length_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_per_length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_per_length_unit(SdaiInstance instance) : base(instance) { }
        public mass_per_length_unit() : base(0) { }

        public static implicit operator mass_per_length_unit(SdaiInstance instance) => new mass_per_length_unit(instance);

        /// <summary>
        /// Create new instace of mass_per_length_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_per_length_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_per_length_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_per_length_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_unit(SdaiInstance instance) : base(instance) { }
        public mass_unit() : base(0) { }

        public static implicit operator mass_unit(SdaiInstance instance) => new mass_unit(instance);

        /// <summary>
        /// Create new instace of mass_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material(SdaiInstance instance) : base(instance) { }
        public material() : base(0) { }

        public static implicit operator material(SdaiInstance instance) => new material(instance);

        /// <summary>
        /// Create new instace of material and returns object of this class to interact with
        /// </summary>
        public static new material Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material"); Debug.Assert(inst != 0); return inst; }

        public IntValue? material_number { get { return get_IntValue("material_number", ifcengine.sdaiINTEGER); } }
        public TextValue material_name { get { return get_string("material_name", ifcengine.sdaiSTRING); } }
        public bag_of_identifier material_grade { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "material_grade"); } }

        protected override TextValue WrapperEntityName() { return "material"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_anisotropic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_anisotropic : material
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_anisotropic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_anisotropic(SdaiInstance instance) : base(instance) { }
        public material_anisotropic() : base(0) { }

        public static implicit operator material_anisotropic(SdaiInstance instance) => new material_anisotropic(instance);

        /// <summary>
        /// Create new instace of material_anisotropic and returns object of this class to interact with
        /// </summary>
        public static new material_anisotropic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_anisotropic"); Debug.Assert(inst != 0); return inst; }

        public list_of_material_representation properties { get { return (new list_of_material_representationSerializer()).FromAttr(m_instance, "properties"); } }
        public void put_properties(IEnumerable<material_representation> lst) { (new list_of_material_representationSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }
        public void put_properties_untyped(IEnumerable lst) { (new list_of_material_representationSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }
        public list_of_placement material_location { get { return (new list_of_placementSerializer()).FromAttr(m_instance, "material_location"); } }
        public void put_material_location(IEnumerable<placement> lst) { (new list_of_placementSerializer()).ToSdaiAggr(lst, m_instance, "material_location"); }
        public void put_material_location_untyped(IEnumerable lst) { (new list_of_placementSerializer()).ToSdaiAggr(lst, m_instance, "material_location"); }

        protected override TextValue WrapperEntityName() { return "material_anisotropic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_constituent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_constituent : material
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_constituent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_constituent(SdaiInstance instance) : base(instance) { }
        public material_constituent() : base(0) { }

        public static implicit operator material_constituent(SdaiInstance instance) => new material_constituent(instance);

        /// <summary>
        /// Create new instace of material_constituent and returns object of this class to interact with
        /// </summary>
        public static new material_constituent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_constituent"); Debug.Assert(inst != 0); return inst; }

        public material parent_material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_material", ifcengine.sdaiINSTANCE, out inst); return new material(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_material", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit constituent_amount 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "constituent_amount", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "constituent_amount", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue composition_basis
            {
            get { return get_string("composition_basis", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "composition_basis", ifcengine.sdaiSTRING, value); }
            }
        public TextValue class_
            {
            get { return get_string("class_", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "class_", ifcengine.sdaiSTRING, value); }
            }
        public TextValue determination_method
            {
            get { return get_string("determination_method", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "determination_method", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "material_constituent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_representation_item(SdaiInstance instance) : base(instance) { }
        public material_representation_item() : base(0) { }

        public static implicit operator material_representation_item(SdaiInstance instance) => new material_representation_item(instance);

        /// <summary>
        /// Create new instace of material_representation_item and returns object of this class to interact with
        /// </summary>
        public static new material_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "material_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_elasticity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_elasticity : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_elasticity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_elasticity(SdaiInstance instance) : base(instance) { }
        public material_elasticity() : base(0) { }

        public static implicit operator material_elasticity(SdaiInstance instance) => new material_elasticity(instance);

        /// <summary>
        /// Create new instace of material_elasticity and returns object of this class to interact with
        /// </summary>
        public static new material_elasticity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_elasticity"); Debug.Assert(inst != 0); return inst; }

        public double? poisson_ratio
            {
            get { return get_double("poisson_ratio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "poisson_ratio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? young_modulus
            {
            get { return get_double("young_modulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "young_modulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? shear_modulus
            {
            get { return get_double("shear_modulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "shear_modulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? secant_modulus
            {
            get { return get_double("secant_modulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "secant_modulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_elasticity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_hardness
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_hardness : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_hardness
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_hardness(SdaiInstance instance) : base(instance) { }
        public material_hardness() : base(0) { }

        public static implicit operator material_hardness(SdaiInstance instance) => new material_hardness(instance);

        /// <summary>
        /// Create new instace of material_hardness and returns object of this class to interact with
        /// </summary>
        public static new material_hardness Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_hardness"); Debug.Assert(inst != 0); return inst; }

        public double? hardness_values
            {
            get { return get_double("hardness_values", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hardness_values", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_hardness"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_isotropic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_isotropic : material
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_isotropic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_isotropic(SdaiInstance instance) : base(instance) { }
        public material_isotropic() : base(0) { }

        public static implicit operator material_isotropic(SdaiInstance instance) => new material_isotropic(instance);

        /// <summary>
        /// Create new instace of material_isotropic and returns object of this class to interact with
        /// </summary>
        public static new material_isotropic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_isotropic"); Debug.Assert(inst != 0); return inst; }

        public material_representation definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, out inst); return new material_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "material_isotropic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_mass_density
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_mass_density : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_mass_density
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_mass_density(SdaiInstance instance) : base(instance) { }
        public material_mass_density() : base(0) { }

        public static implicit operator material_mass_density(SdaiInstance instance) => new material_mass_density(instance);

        /// <summary>
        /// Create new instace of material_mass_density and returns object of this class to interact with
        /// </summary>
        public static new material_mass_density Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_mass_density"); Debug.Assert(inst != 0); return inst; }

        public double? mass_density
            {
            get { return get_double("mass_density", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "mass_density", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_mass_density"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_orthotropic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_orthotropic : material
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_orthotropic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_orthotropic(SdaiInstance instance) : base(instance) { }
        public material_orthotropic() : base(0) { }

        public static implicit operator material_orthotropic(SdaiInstance instance) => new material_orthotropic(instance);

        /// <summary>
        /// Create new instace of material_orthotropic and returns object of this class to interact with
        /// </summary>
        public static new material_orthotropic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_orthotropic"); Debug.Assert(inst != 0); return inst; }

        public material_representation in_plane_properties 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "in_plane_properties", ifcengine.sdaiINSTANCE, out inst); return new material_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "in_plane_properties", ifcengine.sdaiINSTANCE, i); }
            }
        public material_representation out_of_plane_properties 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "out_of_plane_properties", ifcengine.sdaiINSTANCE, out inst); return new material_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "out_of_plane_properties", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "material_orthotropic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context(SdaiInstance instance) : base(instance) { }
        public material_property_context() : base(0) { }

        public static implicit operator material_property_context(SdaiInstance instance) => new material_property_context(instance);


        protected override TextValue WrapperEntityName() { return "material_property_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context_dimensional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context_dimensional : material_property_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context_dimensional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context_dimensional(SdaiInstance instance) : base(instance) { }
        public material_property_context_dimensional() : base(0) { }

        public static implicit operator material_property_context_dimensional(SdaiInstance instance) => new material_property_context_dimensional(instance);

        /// <summary>
        /// Create new instace of material_property_context_dimensional and returns object of this class to interact with
        /// </summary>
        public static new material_property_context_dimensional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_context_dimensional"); Debug.Assert(inst != 0); return inst; }

        public double? lower_value_for_dimension
            {
            get { return get_double("lower_value_for_dimension", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "lower_value_for_dimension", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? upper_value_for_dimension
            {
            get { return get_double("upper_value_for_dimension", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "upper_value_for_dimension", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_context_dimensional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context_loading
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context_loading : material_property_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context_loading
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context_loading(SdaiInstance instance) : base(instance) { }
        public material_property_context_loading() : base(0) { }

        public static implicit operator material_property_context_loading(SdaiInstance instance) => new material_property_context_loading(instance);

        /// <summary>
        /// Create new instace of material_property_context_loading and returns object of this class to interact with
        /// </summary>
        public static new material_property_context_loading Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_context_loading"); Debug.Assert(inst != 0); return inst; }

        public loading_status? loading 
            { 
            get { var str = get_string("loading", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.loading_status_); return EnumValue<loading_status>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<loading_status>.FromValue(value.Value, EnumNames.loading_status_); ifcengine.sdaiPutAttrBN(m_instance, "loading", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_context_loading"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context_strain
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context_strain : material_property_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context_strain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context_strain(SdaiInstance instance) : base(instance) { }
        public material_property_context_strain() : base(0) { }

        public static implicit operator material_property_context_strain(SdaiInstance instance) => new material_property_context_strain(instance);

        /// <summary>
        /// Create new instace of material_property_context_strain and returns object of this class to interact with
        /// </summary>
        public static new material_property_context_strain Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_context_strain"); Debug.Assert(inst != 0); return inst; }

        public double? lower_value_for_strain
            {
            get { return get_double("lower_value_for_strain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "lower_value_for_strain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? upper_value_for_strain
            {
            get { return get_double("upper_value_for_strain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "upper_value_for_strain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_context_strain"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context_stress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context_stress : material_property_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context_stress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context_stress(SdaiInstance instance) : base(instance) { }
        public material_property_context_stress() : base(0) { }

        public static implicit operator material_property_context_stress(SdaiInstance instance) => new material_property_context_stress(instance);

        /// <summary>
        /// Create new instace of material_property_context_stress and returns object of this class to interact with
        /// </summary>
        public static new material_property_context_stress Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_context_stress"); Debug.Assert(inst != 0); return inst; }

        public double? lower_value_for_stress
            {
            get { return get_double("lower_value_for_stress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "lower_value_for_stress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? upper_value_for_stress
            {
            get { return get_double("upper_value_for_stress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "upper_value_for_stress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_context_stress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_context_temperature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_context_temperature : material_property_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_context_temperature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_context_temperature(SdaiInstance instance) : base(instance) { }
        public material_property_context_temperature() : base(0) { }

        public static implicit operator material_property_context_temperature(SdaiInstance instance) => new material_property_context_temperature(instance);

        /// <summary>
        /// Create new instace of material_property_context_temperature and returns object of this class to interact with
        /// </summary>
        public static new material_property_context_temperature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_context_temperature"); Debug.Assert(inst != 0); return inst; }

        public double? temperature_lower_bound
            {
            get { return get_double("temperature_lower_bound", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "temperature_lower_bound", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? temperature_upper_bound
            {
            get { return get_double("temperature_upper_bound", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "temperature_upper_bound", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_context_temperature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_representation(SdaiInstance instance) : base(instance) { }
        public material_representation() : base(0) { }

        public static implicit operator material_representation(SdaiInstance instance) => new material_representation(instance);

        /// <summary>
        /// Create new instace of material_representation and returns object of this class to interact with
        /// </summary>
        public static new material_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "material_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_strength
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_strength : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_strength
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_strength(SdaiInstance instance) : base(instance) { }
        public material_strength() : base(0) { }

        public static implicit operator material_strength(SdaiInstance instance) => new material_strength(instance);

        /// <summary>
        /// Create new instace of material_strength and returns object of this class to interact with
        /// </summary>
        public static new material_strength Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_strength"); Debug.Assert(inst != 0); return inst; }

        public double? material_strength_value
            {
            get { return get_double("material_strength_value", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "material_strength_value", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_strength"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_thermal_expansion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_thermal_expansion : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_thermal_expansion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_thermal_expansion(SdaiInstance instance) : base(instance) { }
        public material_thermal_expansion() : base(0) { }

        public static implicit operator material_thermal_expansion(SdaiInstance instance) => new material_thermal_expansion(instance);

        /// <summary>
        /// Create new instace of material_thermal_expansion and returns object of this class to interact with
        /// </summary>
        public static new material_thermal_expansion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_thermal_expansion"); Debug.Assert(inst != 0); return inst; }

        public double? thermal_expansion_coeff
            {
            get { return get_double("thermal_expansion_coeff", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "thermal_expansion_coeff", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_thermal_expansion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_toughness
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_toughness : material_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_toughness
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_toughness(SdaiInstance instance) : base(instance) { }
        public material_toughness() : base(0) { }

        public static implicit operator material_toughness(SdaiInstance instance) => new material_toughness(instance);

        /// <summary>
        /// Create new instace of material_toughness and returns object of this class to interact with
        /// </summary>
        public static new material_toughness Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_toughness"); Debug.Assert(inst != 0); return inst; }

        public double? toughness_values
            {
            get { return get_double("toughness_values", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "toughness_values", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "material_toughness"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_qualification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_qualification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_qualification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_qualification(SdaiInstance instance) : base(instance) { }
        public measure_qualification() : base(0) { }

        public static implicit operator measure_qualification(SdaiInstance instance) => new measure_qualification(instance);

        /// <summary>
        /// Create new instace of measure_qualification and returns object of this class to interact with
        /// </summary>
        public static new measure_qualification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_qualification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit qualified_measure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_value_qualifier qualifiers { get { return (new set_of_value_qualifierSerializer()).FromAttr(m_instance, "qualifiers"); } }
        public void put_qualifiers(IEnumerable<value_qualifier> lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }
        public void put_qualifiers_untyped(IEnumerable lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }

        protected override TextValue WrapperEntityName() { return "measure_qualification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of media_content
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class media_content : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of media_content
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public media_content(SdaiInstance instance) : base(instance) { }
        public media_content() : base(0) { }

        public static implicit operator media_content(SdaiInstance instance) => new media_content(instance);

        /// <summary>
        /// Create new instace of media_content and returns object of this class to interact with
        /// </summary>
        public static new media_content Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "media_content"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "media_content"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of media_content_drawing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class media_content_drawing : media_content
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of media_content_drawing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public media_content_drawing(SdaiInstance instance) : base(instance) { }
        public media_content_drawing() : base(0) { }

        public static implicit operator media_content_drawing(SdaiInstance instance) => new media_content_drawing(instance);

        /// <summary>
        /// Create new instace of media_content_drawing and returns object of this class to interact with
        /// </summary>
        public static new media_content_drawing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "media_content_drawing"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "media_content_drawing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of media_file
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class media_file : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of media_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public media_file(SdaiInstance instance) : base(instance) { }
        public media_file() : base(0) { }

        public static implicit operator media_file(SdaiInstance instance) => new media_file(instance);

        /// <summary>
        /// Create new instace of media_file and returns object of this class to interact with
        /// </summary>
        public static new media_file Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "media_file"); Debug.Assert(inst != 0); return inst; }

        public TextValue file_source
            {
            get { return get_string("file_source", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "file_source", ifcengine.sdaiSTRING, value); }
            }
        public TextValue file_format
            {
            get { return get_string("file_format", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "file_format", ifcengine.sdaiSTRING, value); }
            }
        public date_and_time file_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "file_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "file_date", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue media_type
            {
            get { return get_string("media_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "media_type", ifcengine.sdaiSTRING, value); }
            }
        public list_of_person_and_organization author { get { return (new list_of_person_and_organizationSerializer()).FromAttr(m_instance, "author"); } }
        public void put_author(IEnumerable<person_and_organization> lst) { (new list_of_person_and_organizationSerializer()).ToSdaiAggr(lst, m_instance, "author"); }
        public void put_author_untyped(IEnumerable lst) { (new list_of_person_and_organizationSerializer()).ToSdaiAggr(lst, m_instance, "author"); }
        public list_of_person_and_organization owner { get { return (new list_of_person_and_organizationSerializer()).FromAttr(m_instance, "owner"); } }
        public void put_owner(IEnumerable<person_and_organization> lst) { (new list_of_person_and_organizationSerializer()).ToSdaiAggr(lst, m_instance, "owner"); }
        public void put_owner_untyped(IEnumerable lst) { (new list_of_person_and_organizationSerializer()).ToSdaiAggr(lst, m_instance, "owner"); }

        protected override TextValue WrapperEntityName() { return "media_file"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of media_file_cnc
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class media_file_cnc : media_file
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of media_file_cnc
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public media_file_cnc(SdaiInstance instance) : base(instance) { }
        public media_file_cnc() : base(0) { }

        public static implicit operator media_file_cnc(SdaiInstance instance) => new media_file_cnc(instance);

        /// <summary>
        /// Create new instace of media_file_cnc and returns object of this class to interact with
        /// </summary>
        public static new media_file_cnc Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "media_file_cnc"); Debug.Assert(inst != 0); return inst; }

        public TextValue cnc_data_format
            {
            get { return get_string("cnc_data_format", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "cnc_data_format", ifcengine.sdaiSTRING, value); }
            }
        public TextValue cnc_file_title { get { return get_string("cnc_file_title", ifcengine.sdaiSTRING); } }
        public person created_by { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "created_by", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } }
        public organization detail_company { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "detail_company", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } }
        public date_and_time creation_date { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "creation_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } }
        public TextValue cnc_filename { get { return get_string("cnc_filename", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "media_file_cnc"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of media_file_drawing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class media_file_drawing : media_file
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of media_file_drawing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public media_file_drawing(SdaiInstance instance) : base(instance) { }
        public media_file_drawing() : base(0) { }

        public static implicit operator media_file_drawing(SdaiInstance instance) => new media_file_drawing(instance);

        /// <summary>
        /// Create new instace of media_file_drawing and returns object of this class to interact with
        /// </summary>
        public static new media_file_drawing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "media_file_drawing"); Debug.Assert(inst != 0); return inst; }

        public TextValue drawing_number
            {
            get { return get_string("drawing_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "drawing_number", ifcengine.sdaiSTRING, value); }
            }
        public drawing_class? drawing_type 
            { 
            get { var str = get_string("drawing_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.drawing_class_); return EnumValue<drawing_class>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<drawing_class>.FromValue(value.Value, EnumNames.drawing_class_); ifcengine.sdaiPutAttrBN(m_instance, "drawing_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue drawing_size
            {
            get { return get_string("drawing_size", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "drawing_size", ifcengine.sdaiSTRING, value); }
            }
        public TextValue current_revision_mark
            {
            get { return get_string("current_revision_mark", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "current_revision_mark", ifcengine.sdaiSTRING, value); }
            }
        public person_and_organization current_revision_by 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "current_revision_by", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "current_revision_by", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time current_revision_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "current_revision_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "current_revision_date", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue current_revision_note
            {
            get { return get_string("current_revision_note", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "current_revision_note", ifcengine.sdaiSTRING, value); }
            }
        public TextValue drawing_title { get { return get_string("drawing_title", ifcengine.sdaiSTRING); } }
        public person drawn_by { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "drawn_by", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } }
        public organization detail_company { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "detail_company", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } }
        public date_and_time creation_date { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "creation_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } }
        public TextValue drawing_filename { get { return get_string("drawing_filename", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "media_file_drawing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modulus_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modulus_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modulus_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modulus_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public modulus_measure_with_unit() : base(0) { }

        public static implicit operator modulus_measure_with_unit(SdaiInstance instance) => new modulus_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of modulus_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new modulus_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "modulus_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "modulus_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modulus_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modulus_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modulus_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modulus_unit(SdaiInstance instance) : base(instance) { }
        public modulus_unit() : base(0) { }

        public static implicit operator modulus_unit(SdaiInstance instance) => new modulus_unit(instance);

        /// <summary>
        /// Create new instace of modulus_unit and returns object of this class to interact with
        /// </summary>
        public static new modulus_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "modulus_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "modulus_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of moment_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class moment_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of moment_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public moment_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public moment_measure_with_unit() : base(0) { }

        public static implicit operator moment_measure_with_unit(SdaiInstance instance) => new moment_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of moment_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new moment_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "moment_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "moment_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of moment_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class moment_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of moment_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public moment_unit(SdaiInstance instance) : base(instance) { }
        public moment_unit() : base(0) { }

        public static implicit operator moment_unit(SdaiInstance instance) => new moment_unit(instance);

        /// <summary>
        /// Create new instace of moment_unit and returns object of this class to interact with
        /// </summary>
        public static new moment_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "moment_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "moment_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of move
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class move : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of move
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public move(SdaiInstance instance) : base(instance) { }
        public move() : base(0) { }

        public static implicit operator move(SdaiInstance instance) => new move(instance);

        /// <summary>
        /// Create new instace of move and returns object of this class to interact with
        /// </summary>
        public static new move Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "move"); Debug.Assert(inst != 0); return inst; }

        public placement initial_location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "initial_location", ifcengine.sdaiINSTANCE, out inst); return new placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "initial_location", ifcengine.sdaiINSTANCE, i); }
            }
        public placement final_location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "final_location", ifcengine.sdaiINSTANCE, out inst); return new placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "final_location", ifcengine.sdaiINSTANCE, i); }
            }
        public curve path 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "move"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of name_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class name_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of name_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public name_attribute(SdaiInstance instance) : base(instance) { }
        public name_attribute() : base(0) { }

        public static implicit operator name_attribute(SdaiInstance instance) => new name_attribute(instance);

        /// <summary>
        /// Create new instace of name_attribute and returns object of this class to interact with
        /// </summary>
        public static new name_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "name_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public name_attribute_select named_item
            {
            get { return new name_attribute_select(m_instance, "named_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "name_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of node
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class node : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of node
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public node(SdaiInstance instance) : base(instance) { }
        public node() : base(0) { }

        public static implicit operator node(SdaiInstance instance) => new node(instance);

        /// <summary>
        /// Create new instace of node and returns object of this class to interact with
        /// </summary>
        public static new node Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "node"); Debug.Assert(inst != 0); return inst; }

        public TextValue node_name
            {
            get { return get_string("node_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "node_name", ifcengine.sdaiSTRING, value); }
            }
        public point node_coords 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "node_coords", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "node_coords", ifcengine.sdaiINSTANCE, i); }
            }
        public boundary_condition restraints 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraints", ifcengine.sdaiINSTANCE, out inst); return new boundary_condition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraints", ifcengine.sdaiINSTANCE, i); }
            }
        public analysis_model parent_model 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, out inst); return new analysis_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_model", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "node"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of node_dependency
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class node_dependency : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of node_dependency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public node_dependency(SdaiInstance instance) : base(instance) { }
        public node_dependency() : base(0) { }

        public static implicit operator node_dependency(SdaiInstance instance) => new node_dependency(instance);

        /// <summary>
        /// Create new instace of node_dependency and returns object of this class to interact with
        /// </summary>
        public static new node_dependency Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "node_dependency"); Debug.Assert(inst != 0); return inst; }

        public node master_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "master_node", ifcengine.sdaiINSTANCE, out inst); return new node(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "master_node", ifcengine.sdaiINSTANCE, i); }
            }
        public node slave_node 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "slave_node", ifcengine.sdaiINSTANCE, out inst); return new node(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "slave_node", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue dependency_description
            {
            get { return get_string("dependency_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "dependency_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "node_dependency"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of object_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class object_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of object_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public object_role(SdaiInstance instance) : base(instance) { }
        public object_role() : base(0) { }

        public static implicit operator object_role(SdaiInstance instance) => new object_role(instance);

        /// <summary>
        /// Create new instace of object_role and returns object of this class to interact with
        /// </summary>
        public static new object_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "object_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "object_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_2d : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_2d(SdaiInstance instance) : base(instance) { }
        public offset_curve_2d() : base(0) { }

        public static implicit operator offset_curve_2d(SdaiInstance instance) => new offset_curve_2d(instance);

        /// <summary>
        /// Create new instace of offset_curve_2d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_2d"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "offset_curve_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_3d : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_3d(SdaiInstance instance) : base(instance) { }
        public offset_curve_3d() : base(0) { }

        public static implicit operator offset_curve_3d(SdaiInstance instance) => new offset_curve_3d(instance);

        /// <summary>
        /// Create new instace of offset_curve_3d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_3d"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "offset_curve_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_surface(SdaiInstance instance) : base(instance) { }
        public offset_surface() : base(0) { }

        public static implicit operator offset_surface(SdaiInstance instance) => new offset_surface(instance);

        /// <summary>
        /// Create new instace of offset_surface and returns object of this class to interact with
        /// </summary>
        public static new offset_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "offset_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class path : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public path(SdaiInstance instance) : base(instance) { }
        public path() : base(0) { }

        public static implicit operator path(SdaiInstance instance) => new path(instance);

        /// <summary>
        /// Create new instace of path and returns object of this class to interact with
        /// </summary>
        public static new path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "path"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge edge_list { get { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }

        protected override TextValue WrapperEntityName() { return "path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of open_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class open_path : path
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of open_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public open_path(SdaiInstance instance) : base(instance) { }
        public open_path() : base(0) { }

        public static implicit operator open_path(SdaiInstance instance) => new open_path(instance);

        /// <summary>
        /// Create new instace of open_path and returns object of this class to interact with
        /// </summary>
        public static new open_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "open_path"); Debug.Assert(inst != 0); return inst; }

        public IntValue? ne { get { return get_IntValue("ne", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "open_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class open_shell : connected_face_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public open_shell(SdaiInstance instance) : base(instance) { }
        public open_shell() : base(0) { }

        public static implicit operator open_shell(SdaiInstance instance) => new open_shell(instance);

        /// <summary>
        /// Create new instace of open_shell and returns object of this class to interact with
        /// </summary>
        public static new open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "open_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization(SdaiInstance instance) : base(instance) { }
        public organization() : base(0) { }

        public static implicit operator organization(SdaiInstance instance) => new organization(instance);

        /// <summary>
        /// Create new instace of organization and returns object of this class to interact with
        /// </summary>
        public static new organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_relationship(SdaiInstance instance) : base(instance) { }
        public organization_relationship() : base(0) { }

        public static implicit operator organization_relationship(SdaiInstance instance) => new organization_relationship(instance);

        /// <summary>
        /// Create new instace of organization_relationship and returns object of this class to interact with
        /// </summary>
        public static new organization_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public organization relating_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public organization related_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organization_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_relationship_contractual
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_relationship_contractual : organization_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_relationship_contractual
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_relationship_contractual(SdaiInstance instance) : base(instance) { }
        public organization_relationship_contractual() : base(0) { }

        public static implicit operator organization_relationship_contractual(SdaiInstance instance) => new organization_relationship_contractual(instance);

        /// <summary>
        /// Create new instace of organization_relationship_contractual and returns object of this class to interact with
        /// </summary>
        public static new organization_relationship_contractual Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_relationship_contractual"); Debug.Assert(inst != 0); return inst; }

        public contract assigned_contract 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, out inst); return new contract(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time effective_start_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effective_start_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "effective_start_date", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time effective_end_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effective_end_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "effective_end_date", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organization_relationship_contractual"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_address : address
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_address(SdaiInstance instance) : base(instance) { }
        public organizational_address() : base(0) { }

        public static implicit operator organizational_address(SdaiInstance instance) => new organizational_address(instance);

        /// <summary>
        /// Create new instace of organizational_address and returns object of this class to interact with
        /// </summary>
        public static new organizational_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_organization organizations { get { return (new set_of_organizationSerializer()).FromAttr(m_instance, "organizations"); } }
        public void put_organizations(IEnumerable<organization> lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        public void put_organizations_untyped(IEnumerable lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "organizational_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_closed_shell : closed_shell
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_closed_shell(SdaiInstance instance) : base(instance) { }
        public oriented_closed_shell() : base(0) { }

        public static implicit operator oriented_closed_shell(SdaiInstance instance) => new oriented_closed_shell(instance);

        /// <summary>
        /// Create new instace of oriented_closed_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_closed_shell"); Debug.Assert(inst != 0); return inst; }

        public closed_shell closed_shell_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, out inst); return new closed_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_edge : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_edge(SdaiInstance instance) : base(instance) { }
        public oriented_edge() : base(0) { }

        public static implicit operator oriented_edge(SdaiInstance instance) => new oriented_edge(instance);

        /// <summary>
        /// Create new instace of oriented_edge and returns object of this class to interact with
        /// </summary>
        public static new oriented_edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_edge"); Debug.Assert(inst != 0); return inst; }

        public edge edge_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, out inst); return new edge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_face : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_face(SdaiInstance instance) : base(instance) { }
        public oriented_face() : base(0) { }

        public static implicit operator oriented_face(SdaiInstance instance) => new oriented_face(instance);

        /// <summary>
        /// Create new instace of oriented_face and returns object of this class to interact with
        /// </summary>
        public static new oriented_face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_face"); Debug.Assert(inst != 0); return inst; }

        public face face_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, out inst); return new face(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_open_shell : open_shell
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_open_shell(SdaiInstance instance) : base(instance) { }
        public oriented_open_shell() : base(0) { }

        public static implicit operator oriented_open_shell(SdaiInstance instance) => new oriented_open_shell(instance);

        /// <summary>
        /// Create new instace of oriented_open_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_open_shell"); Debug.Assert(inst != 0); return inst; }

        public open_shell open_shell_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, out inst); return new open_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_path : path
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_path(SdaiInstance instance) : base(instance) { }
        public oriented_path() : base(0) { }

        public static implicit operator oriented_path(SdaiInstance instance) => new oriented_path(instance);

        /// <summary>
        /// Create new instace of oriented_path and returns object of this class to interact with
        /// </summary>
        public static new oriented_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_path"); Debug.Assert(inst != 0); return inst; }

        public path path_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, out inst); return new path(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_surface(SdaiInstance instance) : base(instance) { }
        public oriented_surface() : base(0) { }

        public static implicit operator oriented_surface(SdaiInstance instance) => new oriented_surface(instance);

        /// <summary>
        /// Create new instace of oriented_surface and returns object of this class to interact with
        /// </summary>
        public static new oriented_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of outer_boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class outer_boundary_curve : boundary_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of outer_boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public outer_boundary_curve(SdaiInstance instance) : base(instance) { }
        public outer_boundary_curve() : base(0) { }

        public static implicit operator outer_boundary_curve(SdaiInstance instance) => new outer_boundary_curve(instance);

        /// <summary>
        /// Create new instace of outer_boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new outer_boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "outer_boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "outer_boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parabola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parabola : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parabola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parabola(SdaiInstance instance) : base(instance) { }
        public parabola() : base(0) { }

        public static implicit operator parabola(SdaiInstance instance) => new parabola(instance);

        /// <summary>
        /// Create new instace of parabola and returns object of this class to interact with
        /// </summary>
        public static new parabola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parabola"); Debug.Assert(inst != 0); return inst; }

        public double? focal_dist
            {
            get { return get_double("focal_dist", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "focal_dist", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "parabola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parametric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parametric_representation_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parametric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parametric_representation_context(SdaiInstance instance) : base(instance) { }
        public parametric_representation_context() : base(0) { }

        public static implicit operator parametric_representation_context(SdaiInstance instance) => new parametric_representation_context(instance);

        /// <summary>
        /// Create new instace of parametric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new parametric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parametric_representation_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "parametric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part(SdaiInstance instance) : base(instance) { }
        public part() : base(0) { }

        public static implicit operator part(SdaiInstance instance) => new part(instance);

        /// <summary>
        /// Create new instace of part and returns object of this class to interact with
        /// </summary>
        public static new part Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part"); Debug.Assert(inst != 0); return inst; }

        public fabrication_type? fabrication_method 
            { 
            get { var str = get_string("fabrication_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.fabrication_type_); return EnumValue<fabrication_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<fabrication_type>.FromValue(value.Value, EnumNames.fabrication_type_); ifcengine.sdaiPutAttrBN(m_instance, "fabrication_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue manufacturers_ref
            {
            get { return get_string("manufacturers_ref", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "manufacturers_ref", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? part_number { get { return get_IntValue("part_number", ifcengine.sdaiINTEGER); } }
        public TextValue part_name { get { return get_string("part_name", ifcengine.sdaiSTRING); } }
        public set_of_design_part design_uses { get { return (new set_of_design_partSerializer()).FromAttr(m_instance, "design_uses"); } }
        public set_of_located_part physical_uses { get { return (new set_of_located_partSerializer()).FromAttr(m_instance, "physical_uses"); } }

        protected override TextValue WrapperEntityName() { return "part"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_complex : part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_complex(SdaiInstance instance) : base(instance) { }
        public part_complex() : base(0) { }

        public static implicit operator part_complex(SdaiInstance instance) => new part_complex(instance);

        /// <summary>
        /// Create new instace of part_complex and returns object of this class to interact with
        /// </summary>
        public static new part_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_complex"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units part_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "part_shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "part_shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_derived
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_derived : part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_derived
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_derived(SdaiInstance instance) : base(instance) { }
        public part_derived() : base(0) { }

        public static implicit operator part_derived(SdaiInstance instance) => new part_derived(instance);

        /// <summary>
        /// Create new instace of part_derived and returns object of this class to interact with
        /// </summary>
        public static new part_derived Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_derived"); Debug.Assert(inst != 0); return inst; }

        public part made_from 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "made_from", ifcengine.sdaiINSTANCE, out inst); return new part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "made_from", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_structural_frame_process involved_processes { get { return (new set_of_structural_frame_processSerializer()).FromAttr(m_instance, "involved_processes"); } }
        public void put_involved_processes(IEnumerable<structural_frame_process> lst) { (new set_of_structural_frame_processSerializer()).ToSdaiAggr(lst, m_instance, "involved_processes"); }
        public void put_involved_processes_untyped(IEnumerable lst) { (new set_of_structural_frame_processSerializer()).ToSdaiAggr(lst, m_instance, "involved_processes"); }

        protected override TextValue WrapperEntityName() { return "part_derived"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_map : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_map(SdaiInstance instance) : base(instance) { }
        public part_map() : base(0) { }

        public static implicit operator part_map(SdaiInstance instance) => new part_map(instance);

        /// <summary>
        /// Create new instace of part_map and returns object of this class to interact with
        /// </summary>
        public static new part_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_map"); Debug.Assert(inst != 0); return inst; }

        public part represented_part 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_part", ifcengine.sdaiINSTANCE, out inst); return new part(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "represented_part", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_element representing_elements { get { return (new set_of_elementSerializer()).FromAttr(m_instance, "representing_elements"); } }
        public void put_representing_elements(IEnumerable<element> lst) { (new set_of_elementSerializer()).ToSdaiAggr(lst, m_instance, "representing_elements"); }
        public void put_representing_elements_untyped(IEnumerable lst) { (new set_of_elementSerializer()).ToSdaiAggr(lst, m_instance, "representing_elements"); }

        protected override TextValue WrapperEntityName() { return "part_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic : part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic(SdaiInstance instance) : base(instance) { }
        public part_prismatic() : base(0) { }

        public static implicit operator part_prismatic(SdaiInstance instance) => new part_prismatic(instance);


        protected override TextValue WrapperEntityName() { return "part_prismatic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_complex : part_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_complex(SdaiInstance instance) : base(instance) { }
        public part_prismatic_complex() : base(0) { }

        public static implicit operator part_prismatic_complex(SdaiInstance instance) => new part_prismatic_complex(instance);

        /// <summary>
        /// Create new instace of part_prismatic_complex and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_complex"); Debug.Assert(inst != 0); return inst; }

        public list_of_section_profile cross_sections { get { return (new list_of_section_profileSerializer()).FromAttr(m_instance, "cross_sections"); } }
        public void put_cross_sections(IEnumerable<section_profile> lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public void put_cross_sections_untyped(IEnumerable lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public list_of_point_on_curve points_defining_part_axis { get { return (new list_of_point_on_curveSerializer()).FromAttr(m_instance, "points_defining_part_axis"); } }
        public void put_points_defining_part_axis(IEnumerable<point_on_curve> lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_part_axis"); }
        public void put_points_defining_part_axis_untyped(IEnumerable lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_part_axis"); }
        public list_of_orientation_select section_orientations { get { return (new list_of_orientation_selectSerializer()).FromAttr(m_instance, "section_orientations"); } }
        public void put_section_orientations(IEnumerable<orientation_select> lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "section_orientations"); }
        public void put_section_orientations_untyped(IEnumerable lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "section_orientations"); }
        public IntValue? number_of_sections { get { return get_IntValue("number_of_sections", ifcengine.sdaiINTEGER); } }
        public curve curve_defining_part { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_defining_part", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } }

        protected override TextValue WrapperEntityName() { return "part_prismatic_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_complex_tapered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_complex_tapered : part_prismatic_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_complex_tapered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_complex_tapered(SdaiInstance instance) : base(instance) { }
        public part_prismatic_complex_tapered() : base(0) { }

        public static implicit operator part_prismatic_complex_tapered(SdaiInstance instance) => new part_prismatic_complex_tapered(instance);

        /// <summary>
        /// Create new instace of part_prismatic_complex_tapered and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_complex_tapered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_complex_tapered"); Debug.Assert(inst != 0); return inst; }

        public TextValue taper_description
            {
            get { return get_string("taper_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "taper_description", ifcengine.sdaiSTRING, value); }
            }
        public length_measure_with_unit absolute_taper_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_taper_1", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_taper_1", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit absolute_taper_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_taper_2", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_taper_2", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_taper_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_taper_1", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_taper_1", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_taper_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_taper_2", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_taper_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_complex_tapered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple : part_prismatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple() : base(0) { }

        public static implicit operator part_prismatic_simple(SdaiInstance instance) => new part_prismatic_simple(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple"); Debug.Assert(inst != 0); return inst; }

        public section_profile profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, out inst); return new section_profile(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit cut_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "cut_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "cut_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit stock_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "stock_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "stock_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit x_offset 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "x_offset", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "x_offset", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple_cambered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple_cambered : part_prismatic_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple_cambered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple_cambered(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple_cambered() : base(0) { }

        public static implicit operator part_prismatic_simple_cambered(SdaiInstance instance) => new part_prismatic_simple_cambered(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple_cambered and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple_cambered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple_cambered"); Debug.Assert(inst != 0); return inst; }

        public TextValue camber_description
            {
            get { return get_string("camber_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "camber_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple_cambered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple_cambered_absolute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple_cambered_absolute : part_prismatic_simple_cambered
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple_cambered_absolute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple_cambered_absolute(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple_cambered_absolute() : base(0) { }

        public static implicit operator part_prismatic_simple_cambered_absolute(SdaiInstance instance) => new part_prismatic_simple_cambered_absolute(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple_cambered_absolute and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple_cambered_absolute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple_cambered_absolute"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit absolute_offset_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_position", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_position", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit absolute_offset_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_y", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_y", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit absolute_offset_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "absolute_offset_z", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "absolute_offset_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple_cambered_absolute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple_cambered_relative
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple_cambered_relative : part_prismatic_simple_cambered
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple_cambered_relative
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple_cambered_relative(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple_cambered_relative() : base(0) { }

        public static implicit operator part_prismatic_simple_cambered_relative(SdaiInstance instance) => new part_prismatic_simple_cambered_relative(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple_cambered_relative and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple_cambered_relative Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple_cambered_relative"); Debug.Assert(inst != 0); return inst; }

        public ratio_measure_with_unit relative_offset_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_position", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_position", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_offset_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_y", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_y", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit relative_offset_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relative_offset_z", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relative_offset_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple_cambered_relative"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple_castellated
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple_castellated : part_prismatic_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple_castellated
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple_castellated(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple_castellated() : base(0) { }

        public static implicit operator part_prismatic_simple_castellated(SdaiInstance instance) => new part_prismatic_simple_castellated(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple_castellated and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple_castellated Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple_castellated"); Debug.Assert(inst != 0); return inst; }

        public castellation_type? part_castellation_type 
            { 
            get { var str = get_string("part_castellation_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.castellation_type_); return EnumValue<castellation_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<castellation_type>.FromValue(value.Value, EnumNames.castellation_type_); ifcengine.sdaiPutAttrBN(m_instance, "part_castellation_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit end_post_width_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "end_post_width_1", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "end_post_width_1", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit end_post_width_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "end_post_width_2", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "end_post_width_2", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit castellation_spacing 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "castellation_spacing", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "castellation_spacing", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit castellation_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "castellation_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "castellation_height", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit castellation_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "castellation_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "castellation_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit castellation_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "castellation_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "castellation_depth", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple_castellated"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_prismatic_simple_curved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_prismatic_simple_curved : part_prismatic_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_prismatic_simple_curved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_prismatic_simple_curved(SdaiInstance instance) : base(instance) { }
        public part_prismatic_simple_curved() : base(0) { }

        public static implicit operator part_prismatic_simple_curved(SdaiInstance instance) => new part_prismatic_simple_curved(instance);

        /// <summary>
        /// Create new instace of part_prismatic_simple_curved and returns object of this class to interact with
        /// </summary>
        public static new part_prismatic_simple_curved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_prismatic_simple_curved"); Debug.Assert(inst != 0); return inst; }

        public curve axis_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_definition", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_prismatic_simple_curved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_sheet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_sheet : part
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_sheet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_sheet(SdaiInstance instance) : base(instance) { }
        public part_sheet() : base(0) { }

        public static implicit operator part_sheet(SdaiInstance instance) => new part_sheet(instance);

        /// <summary>
        /// Create new instace of part_sheet and returns object of this class to interact with
        /// </summary>
        public static new part_sheet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_sheet"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit sheet_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sheet_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sheet_thickness", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_sheet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_sheet_bounded
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_sheet_bounded : part_sheet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_sheet_bounded
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_sheet_bounded(SdaiInstance instance) : base(instance) { }
        public part_sheet_bounded() : base(0) { }

        public static implicit operator part_sheet_bounded(SdaiInstance instance) => new part_sheet_bounded(instance);


        protected override TextValue WrapperEntityName() { return "part_sheet_bounded"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_sheet_bounded_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_sheet_bounded_complex : part_sheet_bounded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_sheet_bounded_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_sheet_bounded_complex(SdaiInstance instance) : base(instance) { }
        public part_sheet_bounded_complex() : base(0) { }

        public static implicit operator part_sheet_bounded_complex(SdaiInstance instance) => new part_sheet_bounded_complex(instance);

        /// <summary>
        /// Create new instace of part_sheet_bounded_complex and returns object of this class to interact with
        /// </summary>
        public static new part_sheet_bounded_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_sheet_bounded_complex"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface sheet_boundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sheet_boundary", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sheet_boundary", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_sheet_bounded_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_sheet_bounded_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_sheet_bounded_simple : part_sheet_bounded
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_sheet_bounded_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_sheet_bounded_simple(SdaiInstance instance) : base(instance) { }
        public part_sheet_bounded_simple() : base(0) { }

        public static implicit operator part_sheet_bounded_simple(SdaiInstance instance) => new part_sheet_bounded_simple(instance);

        /// <summary>
        /// Create new instace of part_sheet_bounded_simple and returns object of this class to interact with
        /// </summary>
        public static new part_sheet_bounded_simple Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_sheet_bounded_simple"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit cut_y_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "cut_y_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "cut_y_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit cut_z_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "cut_z_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "cut_z_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit stock_y_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "stock_y_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "stock_y_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit stock_z_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "stock_z_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "stock_z_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit y_offset 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "y_offset", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "y_offset", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit z_offset 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "z_offset", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "z_offset", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_sheet_bounded_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_sheet_profiled
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_sheet_profiled : part_sheet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_sheet_profiled
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_sheet_profiled(SdaiInstance instance) : base(instance) { }
        public part_sheet_profiled() : base(0) { }

        public static implicit operator part_sheet_profiled(SdaiInstance instance) => new part_sheet_profiled(instance);

        /// <summary>
        /// Create new instace of part_sheet_profiled and returns object of this class to interact with
        /// </summary>
        public static new part_sheet_profiled Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_sheet_profiled"); Debug.Assert(inst != 0); return inst; }

        public curve sheet_profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sheet_profile", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sheet_profile", ifcengine.sdaiINSTANCE, i); }
            }
        public section_properties profile_properties 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile_properties", ifcengine.sdaiINSTANCE, out inst); return new section_properties(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "profile_properties", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "part_sheet_profiled"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person(SdaiInstance instance) : base(instance) { }
        public person() : base(0) { }

        public static implicit operator person(SdaiInstance instance) => new person(instance);

        /// <summary>
        /// Create new instace of person and returns object of this class to interact with
        /// </summary>
        public static new person Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue last_name
            {
            get { return get_string("last_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "last_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue first_name
            {
            get { return get_string("first_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "first_name", ifcengine.sdaiSTRING, value); }
            }
        public list_of_label middle_names { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "middle_names"); } }
        public void put_middle_names(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        public void put_middle_names_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        public list_of_label prefix_titles { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "prefix_titles"); } }
        public void put_prefix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        public void put_prefix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        public list_of_label suffix_titles { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "suffix_titles"); } }
        public void put_suffix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }
        public void put_suffix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }

        protected override TextValue WrapperEntityName() { return "person"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization(SdaiInstance instance) : base(instance) { }
        public person_and_organization() : base(0) { }

        public static implicit operator person_and_organization(SdaiInstance instance) => new person_and_organization(instance);

        /// <summary>
        /// Create new instace of person_and_organization and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization"); Debug.Assert(inst != 0); return inst; }

        public person the_person 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, i); }
            }
        public organization the_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "person_and_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_role(SdaiInstance instance) : base(instance) { }
        public person_and_organization_role() : base(0) { }

        public static implicit operator person_and_organization_role(SdaiInstance instance) => new person_and_organization_role(instance);

        /// <summary>
        /// Create new instace of person_and_organization_role and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "person_and_organization_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of personal_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class personal_address : address
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of personal_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public personal_address(SdaiInstance instance) : base(instance) { }
        public personal_address() : base(0) { }

        public static implicit operator personal_address(SdaiInstance instance) => new personal_address(instance);

        /// <summary>
        /// Create new instace of personal_address and returns object of this class to interact with
        /// </summary>
        public static new personal_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "personal_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_person people { get { return (new set_of_personSerializer()).FromAttr(m_instance, "people"); } }
        public void put_people(IEnumerable<person> lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public void put_people_untyped(IEnumerable lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "personal_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action(SdaiInstance instance) : base(instance) { }
        public physical_action() : base(0) { }

        public static implicit operator physical_action(SdaiInstance instance) => new physical_action(instance);

        /// <summary>
        /// Create new instace of physical_action and returns object of this class to interact with
        /// </summary>
        public static new physical_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action"); Debug.Assert(inst != 0); return inst; }

        public static_or_dynamic? action_nature 
            { 
            get { var str = get_string("action_nature", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.static_or_dynamic_); return EnumValue<static_or_dynamic>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<static_or_dynamic>.FromValue(value.Value, EnumNames.static_or_dynamic_); ifcengine.sdaiPutAttrBN(m_instance, "action_nature", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public spatial_variation? action_spatial_variation 
            { 
            get { var str = get_string("action_spatial_variation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.spatial_variation_); return EnumValue<spatial_variation>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<spatial_variation>.FromValue(value.Value, EnumNames.spatial_variation_); ifcengine.sdaiPutAttrBN(m_instance, "action_spatial_variation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public direct_or_indirect_action? action_type 
            { 
            get { var str = get_string("action_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.direct_or_indirect_action_); return EnumValue<direct_or_indirect_action>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<direct_or_indirect_action>.FromValue(value.Value, EnumNames.direct_or_indirect_action_); ifcengine.sdaiPutAttrBN(m_instance, "action_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public measure_with_unit basic_magnitude 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basic_magnitude", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basic_magnitude", ifcengine.sdaiINSTANCE, i); }
            }
        public measure_with_unit derived_magnitude 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "derived_magnitude", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "derived_magnitude", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_double derivation_factors { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "derivation_factors"); } }
        public void put_derivation_factors(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "derivation_factors"); }
        public void put_derivation_factors_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "derivation_factors"); }
        public list_of_label derivation_factor_labels { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "derivation_factor_labels"); } }
        public void put_derivation_factor_labels(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "derivation_factor_labels"); }
        public void put_derivation_factor_labels_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "derivation_factor_labels"); }

        protected override TextValue WrapperEntityName() { return "physical_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_accidental
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_accidental : physical_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_accidental
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_accidental(SdaiInstance instance) : base(instance) { }
        public physical_action_accidental() : base(0) { }

        public static implicit operator physical_action_accidental(SdaiInstance instance) => new physical_action_accidental(instance);

        /// <summary>
        /// Create new instace of physical_action_accidental and returns object of this class to interact with
        /// </summary>
        public static new physical_action_accidental Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_accidental"); Debug.Assert(inst != 0); return inst; }

        public action_source_accidential? action_source 
            { 
            get { var str = get_string("action_source", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.action_source_accidential_); return EnumValue<action_source_accidential>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<action_source_accidential>.FromValue(value.Value, EnumNames.action_source_accidential_); ifcengine.sdaiPutAttrBN(m_instance, "action_source", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "physical_action_accidental"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_permanent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_permanent : physical_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_permanent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_permanent(SdaiInstance instance) : base(instance) { }
        public physical_action_permanent() : base(0) { }

        public static implicit operator physical_action_permanent(SdaiInstance instance) => new physical_action_permanent(instance);

        /// <summary>
        /// Create new instace of physical_action_permanent and returns object of this class to interact with
        /// </summary>
        public static new physical_action_permanent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_permanent"); Debug.Assert(inst != 0); return inst; }

        public action_source_permanent? action_source 
            { 
            get { var str = get_string("action_source", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.action_source_permanent_); return EnumValue<action_source_permanent>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<action_source_permanent>.FromValue(value.Value, EnumNames.action_source_permanent_); ifcengine.sdaiPutAttrBN(m_instance, "action_source", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "physical_action_permanent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_seismic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_seismic : physical_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_seismic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_seismic(SdaiInstance instance) : base(instance) { }
        public physical_action_seismic() : base(0) { }

        public static implicit operator physical_action_seismic(SdaiInstance instance) => new physical_action_seismic(instance);

        /// <summary>
        /// Create new instace of physical_action_seismic and returns object of this class to interact with
        /// </summary>
        public static new physical_action_seismic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_seismic"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "physical_action_seismic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_variable : physical_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_variable(SdaiInstance instance) : base(instance) { }
        public physical_action_variable() : base(0) { }

        public static implicit operator physical_action_variable(SdaiInstance instance) => new physical_action_variable(instance);


        protected override TextValue WrapperEntityName() { return "physical_action_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_variable_long_term
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_variable_long_term : physical_action_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_variable_long_term
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_variable_long_term(SdaiInstance instance) : base(instance) { }
        public physical_action_variable_long_term() : base(0) { }

        public static implicit operator physical_action_variable_long_term(SdaiInstance instance) => new physical_action_variable_long_term(instance);

        /// <summary>
        /// Create new instace of physical_action_variable_long_term and returns object of this class to interact with
        /// </summary>
        public static new physical_action_variable_long_term Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_variable_long_term"); Debug.Assert(inst != 0); return inst; }

        public action_source_variable_long_term? action_source 
            { 
            get { var str = get_string("action_source", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.action_source_variable_long_term_); return EnumValue<action_source_variable_long_term>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<action_source_variable_long_term>.FromValue(value.Value, EnumNames.action_source_variable_long_term_); ifcengine.sdaiPutAttrBN(m_instance, "action_source", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "physical_action_variable_long_term"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_variable_short_term
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_variable_short_term : physical_action_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_variable_short_term
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_variable_short_term(SdaiInstance instance) : base(instance) { }
        public physical_action_variable_short_term() : base(0) { }

        public static implicit operator physical_action_variable_short_term(SdaiInstance instance) => new physical_action_variable_short_term(instance);

        /// <summary>
        /// Create new instace of physical_action_variable_short_term and returns object of this class to interact with
        /// </summary>
        public static new physical_action_variable_short_term Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_variable_short_term"); Debug.Assert(inst != 0); return inst; }

        public action_source_variable_short_term? action_source 
            { 
            get { var str = get_string("action_source", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.action_source_variable_short_term_); return EnumValue<action_source_variable_short_term>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<action_source_variable_short_term>.FromValue(value.Value, EnumNames.action_source_variable_short_term_); ifcengine.sdaiPutAttrBN(m_instance, "action_source", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "physical_action_variable_short_term"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_action_variable_transient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_action_variable_transient : physical_action_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_action_variable_transient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_action_variable_transient(SdaiInstance instance) : base(instance) { }
        public physical_action_variable_transient() : base(0) { }

        public static implicit operator physical_action_variable_transient(SdaiInstance instance) => new physical_action_variable_transient(instance);

        /// <summary>
        /// Create new instace of physical_action_variable_transient and returns object of this class to interact with
        /// </summary>
        public static new physical_action_variable_transient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_action_variable_transient"); Debug.Assert(inst != 0); return inst; }

        public action_source_variable_transient? action_source 
            { 
            get { var str = get_string("action_source", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.action_source_variable_transient_); return EnumValue<action_source_variable_transient>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<action_source_variable_transient>.FromValue(value.Value, EnumNames.action_source_variable_transient_); ifcengine.sdaiPutAttrBN(m_instance, "action_source", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "physical_action_variable_transient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_measure_with_unit() : base(0) { }

        public static implicit operator plane_angle_measure_with_unit(SdaiInstance instance) => new plane_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_unit() : base(0) { }

        public static implicit operator plane_angle_unit(SdaiInstance instance) => new plane_angle_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_in_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_in_volume : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_in_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_in_volume(SdaiInstance instance) : base(instance) { }
        public point_in_volume() : base(0) { }

        public static implicit operator point_in_volume(SdaiInstance instance) => new point_in_volume(instance);

        /// <summary>
        /// Create new instace of point_in_volume and returns object of this class to interact with
        /// </summary>
        public static new point_in_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_in_volume"); Debug.Assert(inst != 0); return inst; }

        public volume basis_volume 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_volume", ifcengine.sdaiINSTANCE, out inst); return new volume(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_volume", ifcengine.sdaiINSTANCE, i); }
            }
        public double? point_parameter_u
            {
            get { return get_double("point_parameter_u", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_u", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? point_parameter_v
            {
            get { return get_double("point_parameter_v", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_v", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? point_parameter_w
            {
            get { return get_double("point_parameter_w", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_w", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_in_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_curve : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_curve(SdaiInstance instance) : base(instance) { }
        public point_on_curve() : base(0) { }

        public static implicit operator point_on_curve(SdaiInstance instance) => new point_on_curve(instance);

        /// <summary>
        /// Create new instace of point_on_curve and returns object of this class to interact with
        /// </summary>
        public static new point_on_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_curve"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? point_parameter
            {
            get { return get_double("point_parameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface(SdaiInstance instance) : base(instance) { }
        public point_on_surface() : base(0) { }

        public static implicit operator point_on_surface(SdaiInstance instance) => new point_on_surface(instance);

        /// <summary>
        /// Create new instace of point_on_surface and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? point_parameter_u
            {
            get { return get_double("point_parameter_u", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_u", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? point_parameter_v
            {
            get { return get_double("point_parameter_v", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_v", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_replica : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_replica(SdaiInstance instance) : base(instance) { }
        public point_replica() : base(0) { }

        public static implicit operator point_replica(SdaiInstance instance) => new point_replica(instance);

        /// <summary>
        /// Create new instace of point_replica and returns object of this class to interact with
        /// </summary>
        public static new point_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_replica"); Debug.Assert(inst != 0); return inst; }

        public point parent_pt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "point_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polar_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polar_point : cartesian_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polar_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polar_point(SdaiInstance instance) : base(instance) { }
        public polar_point() : base(0) { }

        public static implicit operator polar_point(SdaiInstance instance) => new polar_point(instance);

        /// <summary>
        /// Create new instace of polar_point and returns object of this class to interact with
        /// </summary>
        public static new polar_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polar_point"); Debug.Assert(inst != 0); return inst; }

        public double? r
            {
            get { return get_double("r", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "r", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? theta
            {
            get { return get_double("theta", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "theta", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "polar_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of poly_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class poly_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of poly_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public poly_loop(SdaiInstance instance) : base(instance) { }
        public poly_loop() : base(0) { }

        public static implicit operator poly_loop(SdaiInstance instance) => new poly_loop(instance);

        /// <summary>
        /// Create new instace of poly_loop and returns object of this class to interact with
        /// </summary>
        public static new poly_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "poly_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point polygon { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "polygon"); } }
        public void put_polygon(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }
        public void put_polygon_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "poly_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polygonal_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polygonal_area : primitive_2d
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polygonal_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polygonal_area(SdaiInstance instance) : base(instance) { }
        public polygonal_area() : base(0) { }

        public static implicit operator polygonal_area(SdaiInstance instance) => new polygonal_area(instance);

        /// <summary>
        /// Create new instace of polygonal_area and returns object of this class to interact with
        /// </summary>
        public static new polygonal_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polygonal_area"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point bounds { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "bounds"); } }
        public void put_bounds(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }
        public void put_bounds_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }

        protected override TextValue WrapperEntityName() { return "polygonal_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polyline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polyline : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polyline(SdaiInstance instance) : base(instance) { }
        public polyline() : base(0) { }

        public static implicit operator polyline(SdaiInstance instance) => new polyline(instance);

        /// <summary>
        /// Create new instace of polyline and returns object of this class to interact with
        /// </summary>
        public static new polyline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polyline"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point points { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "points"); } }
        public void put_points(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }
        public void put_points_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }

        protected override TextValue WrapperEntityName() { return "polyline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of positive_length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class positive_length_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of positive_length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public positive_length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public positive_length_measure_with_unit() : base(0) { }

        public static implicit operator positive_length_measure_with_unit(SdaiInstance instance) => new positive_length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of positive_length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new positive_length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "positive_length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "positive_length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of precision_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class precision_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of precision_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public precision_qualifier(SdaiInstance instance) : base(instance) { }
        public precision_qualifier() : base(0) { }

        public static implicit operator precision_qualifier(SdaiInstance instance) => new precision_qualifier(instance);

        /// <summary>
        /// Create new instace of precision_qualifier and returns object of this class to interact with
        /// </summary>
        public static new precision_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "precision_qualifier"); Debug.Assert(inst != 0); return inst; }

        public IntValue? precision_value
            {
            get { return get_IntValue("precision_value", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "precision_value", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "precision_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pressure_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pressure_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pressure_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pressure_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public pressure_measure_with_unit() : base(0) { }

        public static implicit operator pressure_measure_with_unit(SdaiInstance instance) => new pressure_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of pressure_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new pressure_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pressure_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pressure_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pressure_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pressure_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pressure_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pressure_unit(SdaiInstance instance) : base(instance) { }
        public pressure_unit() : base(0) { }

        public static implicit operator pressure_unit(SdaiInstance instance) => new pressure_unit(instance);

        /// <summary>
        /// Create new instace of pressure_unit and returns object of this class to interact with
        /// </summary>
        public static new pressure_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pressure_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pressure_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of procure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class procure : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of procure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public procure(SdaiInstance instance) : base(instance) { }
        public procure() : base(0) { }

        public static implicit operator procure(SdaiInstance instance) => new procure(instance);

        /// <summary>
        /// Create new instace of procure and returns object of this class to interact with
        /// </summary>
        public static new procure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "procure"); Debug.Assert(inst != 0); return inst; }

        public person_and_organization vendors 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vendors", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "vendors", ifcengine.sdaiINSTANCE, i); }
            }
        public person_and_organization purchaser 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "purchaser", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "purchaser", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_product_item_select purchased_products { get { return (new list_of_product_item_selectSerializer()).FromAttr(m_instance, "purchased_products"); } }
        public void put_purchased_products(IEnumerable<product_item_select> lst) { (new list_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "purchased_products"); }
        public void put_purchased_products_untyped(IEnumerable lst) { (new list_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "purchased_products"); }
        public contract sales_contract 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sales_contract", ifcengine.sdaiINSTANCE, out inst); return new contract(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sales_contract", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_calendar_date delivery_dates { get { return (new list_of_calendar_dateSerializer()).FromAttr(m_instance, "delivery_dates"); } }
        public void put_delivery_dates(IEnumerable<calendar_date> lst) { (new list_of_calendar_dateSerializer()).ToSdaiAggr(lst, m_instance, "delivery_dates"); }
        public void put_delivery_dates_untyped(IEnumerable lst) { (new list_of_calendar_dateSerializer()).ToSdaiAggr(lst, m_instance, "delivery_dates"); }
        public set_of_structural_frame_item_priced prices { get { return (new set_of_structural_frame_item_pricedSerializer()).FromAttr(m_instance, "prices"); } }

        protected override TextValue WrapperEntityName() { return "procure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project(SdaiInstance instance) : base(instance) { }
        public project() : base(0) { }

        public static implicit operator project(SdaiInstance instance) => new project(instance);

        /// <summary>
        /// Create new instace of project and returns object of this class to interact with
        /// </summary>
        public static new project Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "project"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_data_group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_data_group : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_data_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_data_group(SdaiInstance instance) : base(instance) { }
        public project_data_group() : base(0) { }

        public static implicit operator project_data_group(SdaiInstance instance) => new project_data_group(instance);

        /// <summary>
        /// Create new instace of project_data_group and returns object of this class to interact with
        /// </summary>
        public static new project_data_group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_data_group"); Debug.Assert(inst != 0); return inst; }

        public project parent_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_project", ifcengine.sdaiINSTANCE, out inst); return new project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_project", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "project_data_group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_organization(SdaiInstance instance) : base(instance) { }
        public project_organization() : base(0) { }

        public static implicit operator project_organization(SdaiInstance instance) => new project_organization(instance);

        /// <summary>
        /// Create new instace of project_organization and returns object of this class to interact with
        /// </summary>
        public static new project_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_organization"); Debug.Assert(inst != 0); return inst; }

        public person_and_organization project_participant 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "project_participant", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "project_participant", ifcengine.sdaiINSTANCE, i); }
            }
        public project related_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_project", ifcengine.sdaiINSTANCE, out inst); return new project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_project", ifcengine.sdaiINSTANCE, i); }
            }
        public person_and_organization_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "project_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_plan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_plan : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_plan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_plan(SdaiInstance instance) : base(instance) { }
        public project_plan() : base(0) { }

        public static implicit operator project_plan(SdaiInstance instance) => new project_plan(instance);

        /// <summary>
        /// Create new instace of project_plan and returns object of this class to interact with
        /// </summary>
        public static new project_plan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_plan"); Debug.Assert(inst != 0); return inst; }

        public project_organization project_plan_author 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "project_plan_author", ifcengine.sdaiINSTANCE, out inst); return new project_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "project_plan_author", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time project_plan_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "project_plan_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "project_plan_date", ifcengine.sdaiINSTANCE, i); }
            }
        public project related_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_project", ifcengine.sdaiINSTANCE, out inst); return new project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_project", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_project_plan_item items { get { return (new set_of_project_plan_itemSerializer()).FromAttr(m_instance, "items"); } }

        protected override TextValue WrapperEntityName() { return "project_plan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_plan_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_plan_item : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_plan_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_plan_item(SdaiInstance instance) : base(instance) { }
        public project_plan_item() : base(0) { }

        public static implicit operator project_plan_item(SdaiInstance instance) => new project_plan_item(instance);

        /// <summary>
        /// Create new instace of project_plan_item and returns object of this class to interact with
        /// </summary>
        public static new project_plan_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_plan_item"); Debug.Assert(inst != 0); return inst; }

        public project_plan item_for_plan 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item_for_plan", ifcengine.sdaiINSTANCE, out inst); return new project_plan(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item_for_plan", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time start_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "start_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "start_date", ifcengine.sdaiINSTANCE, i); }
            }
        public date_and_time end_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "end_date", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "end_date", ifcengine.sdaiINSTANCE, i); }
            }
        public time_measure_with_unit item_duration 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item_duration", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item_duration", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_project_organization actors { get { return (new set_of_project_organizationSerializer()).FromAttr(m_instance, "actors"); } }
        public void put_actors(IEnumerable<project_organization> lst) { (new set_of_project_organizationSerializer()).ToSdaiAggr(lst, m_instance, "actors"); }
        public void put_actors_untyped(IEnumerable lst) { (new set_of_project_organizationSerializer()).ToSdaiAggr(lst, m_instance, "actors"); }
        public IntValue? sequence_number
            {
            get { return get_IntValue("sequence_number", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "sequence_number", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue item_status
            {
            get { return get_string("item_status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "item_status", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "project_plan_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_plan_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_plan_item_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_plan_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_plan_item_relationship(SdaiInstance instance) : base(instance) { }
        public project_plan_item_relationship() : base(0) { }

        public static implicit operator project_plan_item_relationship(SdaiInstance instance) => new project_plan_item_relationship(instance);

        /// <summary>
        /// Create new instace of project_plan_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new project_plan_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_plan_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue relationship_name
            {
            get { return get_string("relationship_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue relationship_description
            {
            get { return get_string("relationship_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_description", ifcengine.sdaiSTRING, value); }
            }
        public project_plan_item related_plan_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_plan_item", ifcengine.sdaiINSTANCE, out inst); return new project_plan_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_plan_item", ifcengine.sdaiINSTANCE, i); }
            }
        public project_plan_item relating_plan_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_plan_item", ifcengine.sdaiINSTANCE, out inst); return new project_plan_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_plan_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "project_plan_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of project_process_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class project_process_item : project_plan_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of project_process_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public project_process_item(SdaiInstance instance) : base(instance) { }
        public project_process_item() : base(0) { }

        public static implicit operator project_process_item(SdaiInstance instance) => new project_process_item(instance);

        /// <summary>
        /// Create new instace of project_process_item and returns object of this class to interact with
        /// </summary>
        public static new project_process_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "project_process_item"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_process scheduled_process 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "scheduled_process", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_process(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "scheduled_process", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_product_item_select resulting_product { get { return (new set_of_product_item_selectSerializer()).FromAttr(m_instance, "resulting_product"); } }
        public void put_resulting_product(IEnumerable<product_item_select> lst) { (new set_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "resulting_product"); }
        public void put_resulting_product_untyped(IEnumerable lst) { (new set_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "resulting_product"); }
        public set_of_product_item_select processed_products { get { return (new set_of_product_item_selectSerializer()).FromAttr(m_instance, "processed_products"); } }
        public void put_processed_products(IEnumerable<product_item_select> lst) { (new set_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "processed_products"); }
        public void put_processed_products_untyped(IEnumerable lst) { (new set_of_product_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "processed_products"); }

        protected override TextValue WrapperEntityName() { return "project_process_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pyramid_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pyramid_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pyramid_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pyramid_volume(SdaiInstance instance) : base(instance) { }
        public pyramid_volume() : base(0) { }

        public static implicit operator pyramid_volume(SdaiInstance instance) => new pyramid_volume(instance);

        /// <summary>
        /// Create new instace of pyramid_volume and returns object of this class to interact with
        /// </summary>
        public static new pyramid_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pyramid_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? xlength
            {
            get { return get_double("xlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "xlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ylength
            {
            get { return get_double("ylength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ylength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "pyramid_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_qualifier(SdaiInstance instance) : base(instance) { }
        public uncertainty_qualifier() : base(0) { }

        public static implicit operator uncertainty_qualifier(SdaiInstance instance) => new uncertainty_qualifier(instance);

        /// <summary>
        /// Create new instace of uncertainty_qualifier and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue measure_name
            {
            get { return get_string("measure_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "measure_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "uncertainty_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of qualitative_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class qualitative_uncertainty : uncertainty_qualifier
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of qualitative_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public qualitative_uncertainty(SdaiInstance instance) : base(instance) { }
        public qualitative_uncertainty() : base(0) { }

        public static implicit operator qualitative_uncertainty(SdaiInstance instance) => new qualitative_uncertainty(instance);

        /// <summary>
        /// Create new instace of qualitative_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new qualitative_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "qualitative_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public TextValue uncertainty_value
            {
            get { return get_string("uncertainty_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "qualitative_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_curve(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_curve() : base(0) { }

        public static implicit operator quasi_uniform_curve(SdaiInstance instance) => new quasi_uniform_curve(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "quasi_uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_surface(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_surface() : base(0) { }

        public static implicit operator quasi_uniform_surface(SdaiInstance instance) => new quasi_uniform_surface(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "quasi_uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_volume : b_spline_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_volume(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_volume() : base(0) { }

        public static implicit operator quasi_uniform_volume(SdaiInstance instance) => new quasi_uniform_volume(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_volume and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_volume"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "quasi_uniform_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public ratio_measure_with_unit() : base(0) { }

        public static implicit operator ratio_measure_with_unit(SdaiInstance instance) => new ratio_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of ratio_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ratio_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_unit(SdaiInstance instance) : base(instance) { }
        public ratio_unit() : base(0) { }

        public static implicit operator ratio_unit(SdaiInstance instance) => new ratio_unit(instance);

        /// <summary>
        /// Create new instace of ratio_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ratio_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_curve(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_curve() : base(0) { }

        public static implicit operator rational_b_spline_curve(SdaiInstance instance) => new rational_b_spline_curve(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_double weights_data { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); } }
        public void put_weights_data(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public void put_weights_data_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public array_of_double weights { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "weights"); } }

        protected override TextValue WrapperEntityName() { return "rational_b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_surface(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_surface() : base(0) { }

        public static implicit operator rational_b_spline_surface(SdaiInstance instance) => new rational_b_spline_surface(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_double weights_data { get { return (new list_of_list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); } }
        public void put_weights_data(IEnumerable<list_of_double> lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public void put_weights_data_untyped(IEnumerable lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public array_of_array_of_double weights { get { return (new array_of_array_of_doubleSerializer()).FromAttr(m_instance, "weights"); } }

        protected override TextValue WrapperEntityName() { return "rational_b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_volume : b_spline_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_volume(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_volume() : base(0) { }

        public static implicit operator rational_b_spline_volume(SdaiInstance instance) => new rational_b_spline_volume(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_volume and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_volume"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_list_of_double weights_data { get { return (new list_of_list_of_list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); } }
        public void put_weights_data(IEnumerable<list_of_list_of_double> lst) { (new list_of_list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public void put_weights_data_untyped(IEnumerable lst) { (new list_of_list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public array_of_array_of_array_of_double weights { get { return (new array_of_array_of_array_of_doubleSerializer()).FromAttr(m_instance, "weights"); } }

        protected override TextValue WrapperEntityName() { return "rational_b_spline_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction(SdaiInstance instance) : base(instance) { }
        public reaction() : base(0) { }

        public static implicit operator reaction(SdaiInstance instance) => new reaction(instance);


        protected override TextValue WrapperEntityName() { return "reaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_acceleration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_acceleration : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_acceleration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_acceleration(SdaiInstance instance) : base(instance) { }
        public reaction_acceleration() : base(0) { }

        public static implicit operator reaction_acceleration(SdaiInstance instance) => new reaction_acceleration(instance);

        /// <summary>
        /// Create new instace of reaction_acceleration and returns object of this class to interact with
        /// </summary>
        public static new reaction_acceleration Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_acceleration"); Debug.Assert(inst != 0); return inst; }

        public linear_acceleration_measure_with_unit reaction_acceleration_ax 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_ax", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_ax", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_acceleration_measure_with_unit reaction_acceleration_ay 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_ay", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_ay", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_acceleration_measure_with_unit reaction_acceleration_az 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_az", ifcengine.sdaiINSTANCE, out inst); return new linear_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_az", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit reaction_acceleration_arx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_arx", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_arx", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit reaction_acceleration_ary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_ary", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_ary", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_acceleration_measure_with_unit reaction_acceleration_arz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_acceleration_arz", ifcengine.sdaiINSTANCE, out inst); return new rotational_acceleration_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_acceleration_arz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_acceleration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_displacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_displacement : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_displacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_displacement(SdaiInstance instance) : base(instance) { }
        public reaction_displacement() : base(0) { }

        public static implicit operator reaction_displacement(SdaiInstance instance) => new reaction_displacement(instance);

        /// <summary>
        /// Create new instace of reaction_displacement and returns object of this class to interact with
        /// </summary>
        public static new reaction_displacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_displacement"); Debug.Assert(inst != 0); return inst; }

        public length_measure_with_unit reaction_displacement_dx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_dx", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_dx", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit reaction_displacement_dy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_dy", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_dy", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit reaction_displacement_dz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_dz", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_dz", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit reaction_displacement_rx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_rx", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_rx", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit reaction_displacement_ry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_ry", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_ry", ifcengine.sdaiINSTANCE, i); }
            }
        public plane_angle_measure_with_unit reaction_displacement_rz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_displacement_rz", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_displacement_rz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_displacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_dynamic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_dynamic : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_dynamic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_dynamic(SdaiInstance instance) : base(instance) { }
        public reaction_dynamic() : base(0) { }

        public static implicit operator reaction_dynamic(SdaiInstance instance) => new reaction_dynamic(instance);

        /// <summary>
        /// Create new instace of reaction_dynamic and returns object of this class to interact with
        /// </summary>
        public static new reaction_dynamic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_dynamic"); Debug.Assert(inst != 0); return inst; }

        public plane_angle_measure_with_unit phase_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "phase_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "phase_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit response_amplitude 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "response_amplitude", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "response_amplitude", ifcengine.sdaiINSTANCE, i); }
            }
        public frequency_measure_with_unit natural_frequency 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "natural_frequency", ifcengine.sdaiINSTANCE, out inst); return new frequency_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "natural_frequency", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_dynamic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_equilibrium
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_equilibrium : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_equilibrium
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_equilibrium(SdaiInstance instance) : base(instance) { }
        public reaction_equilibrium() : base(0) { }

        public static implicit operator reaction_equilibrium(SdaiInstance instance) => new reaction_equilibrium(instance);

        /// <summary>
        /// Create new instace of reaction_equilibrium and returns object of this class to interact with
        /// </summary>
        public static new reaction_equilibrium Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_equilibrium"); Debug.Assert(inst != 0); return inst; }

        public ratio_measure_with_unit equilibrium_dx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_dx", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_dx", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit equilibrium_dy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_dy", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_dy", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit equilibrium_dz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_dz", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_dz", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit equilibrium_mx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_mx", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_mx", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit equilibrium_my 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_my", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_my", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit equilibrium_mz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equilibrium_mz", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equilibrium_mz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_equilibrium"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_force
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_force : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_force
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_force(SdaiInstance instance) : base(instance) { }
        public reaction_force() : base(0) { }

        public static implicit operator reaction_force(SdaiInstance instance) => new reaction_force(instance);

        /// <summary>
        /// Create new instace of reaction_force and returns object of this class to interact with
        /// </summary>
        public static new reaction_force Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_force"); Debug.Assert(inst != 0); return inst; }

        public force_measure_with_unit reaction_force_fx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_fx", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_fx", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit reaction_force_fy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_fy", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_fy", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit reaction_force_fz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_fz", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_fz", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit reaction_force_mx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_mx", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_mx", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit reaction_force_my 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_my", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_my", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit reaction_force_mz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_force_mz", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_force_mz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_force"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reaction_velocity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reaction_velocity : reaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reaction_velocity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reaction_velocity(SdaiInstance instance) : base(instance) { }
        public reaction_velocity() : base(0) { }

        public static implicit operator reaction_velocity(SdaiInstance instance) => new reaction_velocity(instance);

        /// <summary>
        /// Create new instace of reaction_velocity and returns object of this class to interact with
        /// </summary>
        public static new reaction_velocity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reaction_velocity"); Debug.Assert(inst != 0); return inst; }

        public linear_velocity_measure_with_unit reaction_velocity_vx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vx", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vx", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_velocity_measure_with_unit reaction_velocity_vy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vy", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vy", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_velocity_measure_with_unit reaction_velocity_vz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vz", ifcengine.sdaiINSTANCE, out inst); return new linear_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vz", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit reaction_velocity_vrx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vrx", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vrx", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit reaction_velocity_vry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vry", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vry", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_velocity_measure_with_unit reaction_velocity_vrz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reaction_velocity_vrz", ifcengine.sdaiINSTANCE, out inst); return new rotational_velocity_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reaction_velocity_vrz", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "reaction_velocity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_area : primitive_2d
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_area(SdaiInstance instance) : base(instance) { }
        public rectangular_area() : base(0) { }

        public static implicit operator rectangular_area(SdaiInstance instance) => new rectangular_area(instance);

        /// <summary>
        /// Create new instace of rectangular_area and returns object of this class to interact with
        /// </summary>
        public static new rectangular_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_area"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_2d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_2d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rectangular_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_composite_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_composite_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_composite_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_composite_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_composite_surface() : base(0) { }

        public static implicit operator rectangular_composite_surface(SdaiInstance instance) => new rectangular_composite_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_composite_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_composite_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_composite_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_surface_patch segments { get { return (new list_of_list_of_surface_patchSerializer()).FromAttr(m_instance, "segments"); } }
        public void put_segments(IEnumerable<list_of_surface_patch> lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public void put_segments_untyped(IEnumerable lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public IntValue? n_u { get { return get_IntValue("n_u", ifcengine.sdaiINTEGER); } }
        public IntValue? n_v { get { return get_IntValue("n_v", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "rectangular_composite_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_pyramid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_pyramid : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_pyramid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_pyramid(SdaiInstance instance) : base(instance) { }
        public rectangular_pyramid() : base(0) { }

        public static implicit operator rectangular_pyramid(SdaiInstance instance) => new rectangular_pyramid(instance);

        /// <summary>
        /// Create new instace of rectangular_pyramid and returns object of this class to interact with
        /// </summary>
        public static new rectangular_pyramid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_pyramid"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? xlength
            {
            get { return get_double("xlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "xlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ylength
            {
            get { return get_double("ylength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ylength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rectangular_pyramid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_trimmed_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_trimmed_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_trimmed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_trimmed_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_trimmed_surface() : base(0) { }

        public static implicit operator rectangular_trimmed_surface(SdaiInstance instance) => new rectangular_trimmed_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_trimmed_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_trimmed_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_trimmed_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? u1
            {
            get { return get_double("u1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? u2
            {
            get { return get_double("u2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v1
            {
            get { return get_double("v1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v2
            {
            get { return get_double("v2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? usense
            {
            get { return get_bool("usense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "usense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? vsense
            {
            get { return get_bool("vsense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "vsense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rectangular_trimmed_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of release
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class release : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of release
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public release(SdaiInstance instance) : base(instance) { }
        public release() : base(0) { }

        public static implicit operator release(SdaiInstance instance) => new release(instance);

        public TextValue release_name
            {
            get { return get_string("release_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "release_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue release_description
            {
            get { return get_string("release_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "release_description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_element_node_connectivity release_for_element_nodes { get { return (new set_of_element_node_connectivitySerializer()).FromAttr(m_instance, "release_for_element_nodes"); } }

        protected override TextValue WrapperEntityName() { return "release"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of release_logical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class release_logical : release
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of release_logical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public release_logical(SdaiInstance instance) : base(instance) { }
        public release_logical() : base(0) { }

        public static implicit operator release_logical(SdaiInstance instance) => new release_logical(instance);

        /// <summary>
        /// Create new instace of release_logical and returns object of this class to interact with
        /// </summary>
        public static new release_logical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "release_logical"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? release_axial_force 
            { 
            get { var str = get_string("release_axial_force", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_axial_force", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? release_y_force 
            { 
            get { var str = get_string("release_y_force", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_y_force", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? release_z_force 
            { 
            get { var str = get_string("release_z_force", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_z_force", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? release_torsional_moment 
            { 
            get { var str = get_string("release_torsional_moment", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_torsional_moment", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? release_y_bending_moment 
            { 
            get { var str = get_string("release_y_bending_moment", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_y_bending_moment", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? release_z_bending_moment 
            { 
            get { var str = get_string("release_z_bending_moment", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "release_z_bending_moment", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "release_logical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of release_spring_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class release_spring_linear : release
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of release_spring_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public release_spring_linear(SdaiInstance instance) : base(instance) { }
        public release_spring_linear() : base(0) { }

        public static implicit operator release_spring_linear(SdaiInstance instance) => new release_spring_linear(instance);

        /// <summary>
        /// Create new instace of release_spring_linear and returns object of this class to interact with
        /// </summary>
        public static new release_spring_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "release_spring_linear"); Debug.Assert(inst != 0); return inst; }

        public linear_stiffness_measure_with_unit release_axial_force 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_axial_force", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_axial_force", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit release_y_force 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_y_force", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_y_force", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit release_z_force 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_z_force", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_z_force", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit release_torsional_moment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_torsional_moment", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_torsional_moment", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit release_y_bending_moment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_y_bending_moment", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_y_bending_moment", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit release_z_bending_moment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_z_bending_moment", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_z_bending_moment", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "release_spring_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of release_spring_non_linear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class release_spring_non_linear : release
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of release_spring_non_linear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public release_spring_non_linear(SdaiInstance instance) : base(instance) { }
        public release_spring_non_linear() : base(0) { }

        public static implicit operator release_spring_non_linear(SdaiInstance instance) => new release_spring_non_linear(instance);

        /// <summary>
        /// Create new instace of release_spring_non_linear and returns object of this class to interact with
        /// </summary>
        public static new release_spring_non_linear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "release_spring_non_linear"); Debug.Assert(inst != 0); return inst; }

        public list_of_measure_with_unit change_values { get { return (new list_of_measure_with_unitSerializer()).FromAttr(m_instance, "change_values"); } }
        public void put_change_values(IEnumerable<measure_with_unit> lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "change_values"); }
        public void put_change_values_untyped(IEnumerable lst) { (new list_of_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "change_values"); }
        public list_of_release_spring_linear values { get { return (new list_of_release_spring_linearSerializer()).FromAttr(m_instance, "values"); } }
        public void put_values(IEnumerable<release_spring_linear> lst) { (new list_of_release_spring_linearSerializer()).ToSdaiAggr(lst, m_instance, "values"); }
        public void put_values_untyped(IEnumerable lst) { (new list_of_release_spring_linearSerializer()).ToSdaiAggr(lst, m_instance, "values"); }
        public IntValue? number_of_values { get { return get_IntValue("number_of_values", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "release_spring_non_linear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of release_warping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class release_warping : release_spring_linear
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of release_warping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public release_warping(SdaiInstance instance) : base(instance) { }
        public release_warping() : base(0) { }

        public static implicit operator release_warping(SdaiInstance instance) => new release_warping(instance);

        /// <summary>
        /// Create new instace of release_warping and returns object of this class to interact with
        /// </summary>
        public static new release_warping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "release_warping"); Debug.Assert(inst != 0); return inst; }

        public rotational_stiffness_measure_with_unit release_warping_moment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "release_warping_moment", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "release_warping_moment", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "release_warping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reparametrised_composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reparametrised_composite_curve_segment : composite_curve_segment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reparametrised_composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reparametrised_composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public reparametrised_composite_curve_segment() : base(0) { }

        public static implicit operator reparametrised_composite_curve_segment(SdaiInstance instance) => new reparametrised_composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of reparametrised_composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new reparametrised_composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reparametrised_composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public double? param_length
            {
            get { return get_double("param_length", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "param_length", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "reparametrised_composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_map : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_map(SdaiInstance instance) : base(instance) { }
        public representation_map() : base(0) { }

        public static implicit operator representation_map(SdaiInstance instance) => new representation_map(instance);

        /// <summary>
        /// Create new instace of representation_map and returns object of this class to interact with
        /// </summary>
        public static new representation_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_map"); Debug.Assert(inst != 0); return inst; }

        public representation_item mapping_origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, i); }
            }
        public representation mapped_representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_mapped_item map_usage { get { return (new set_of_mapped_itemSerializer()).FromAttr(m_instance, "map_usage"); } }

        protected override TextValue WrapperEntityName() { return "representation_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship(SdaiInstance instance) : base(instance) { }
        public representation_relationship() : base(0) { }

        public static implicit operator representation_relationship(SdaiInstance instance) => new representation_relationship(instance);

        /// <summary>
        /// Create new instace of representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public representation rep_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, i); }
            }
        public representation rep_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship_with_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship_with_transformation : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship_with_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship_with_transformation(SdaiInstance instance) : base(instance) { }
        public representation_relationship_with_transformation() : base(0) { }

        public static implicit operator representation_relationship_with_transformation(SdaiInstance instance) => new representation_relationship_with_transformation(instance);

        /// <summary>
        /// Create new instace of representation_relationship_with_transformation and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship_with_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship_with_transformation"); Debug.Assert(inst != 0); return inst; }


        public transformation transformation_operator
            {
            get { return new transformation(m_instance, "transformation_operator", 0); }
            }

        protected override TextValue WrapperEntityName() { return "representation_relationship_with_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance(SdaiInstance instance) : base(instance) { }
        public resistance() : base(0) { }

        public static implicit operator resistance(SdaiInstance instance) => new resistance(instance);

        public TextValue resistance_type
            {
            get { return get_string("resistance_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "resistance_type", ifcengine.sdaiSTRING, value); }
            }
        public TextValue resistance_description
            {
            get { return get_string("resistance_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "resistance_description", ifcengine.sdaiSTRING, value); }
            }
        public double? resistance_factor
            {
            get { return get_double("resistance_factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "resistance_factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public elastic_or_plastic_resistance? elastic_or_plastic 
            { 
            get { var str = get_string("elastic_or_plastic", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.elastic_or_plastic_resistance_); return EnumValue<elastic_or_plastic_resistance>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<elastic_or_plastic_resistance>.FromValue(value.Value, EnumNames.elastic_or_plastic_resistance_); ifcengine.sdaiPutAttrBN(m_instance, "elastic_or_plastic", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public global_or_local_resistance? local_or_global 
            { 
            get { var str = get_string("local_or_global", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.global_or_local_resistance_); return EnumValue<global_or_local_resistance>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<global_or_local_resistance>.FromValue(value.Value, EnumNames.global_or_local_resistance_); ifcengine.sdaiPutAttrBN(m_instance, "local_or_global", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_design_result results { get { return (new set_of_design_resultSerializer()).FromAttr(m_instance, "results"); } }

        protected override TextValue WrapperEntityName() { return "resistance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance_axial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance_axial : resistance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance_axial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance_axial(SdaiInstance instance) : base(instance) { }
        public resistance_axial() : base(0) { }

        public static implicit operator resistance_axial(SdaiInstance instance) => new resistance_axial(instance);

        /// <summary>
        /// Create new instace of resistance_axial and returns object of this class to interact with
        /// </summary>
        public static new resistance_axial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resistance_axial"); Debug.Assert(inst != 0); return inst; }

        public force_measure_with_unit tensile_resistance_ptx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "tensile_resistance_ptx", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "tensile_resistance_ptx", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit compressive_resistance_pcx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "compressive_resistance_pcx", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "compressive_resistance_pcx", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "resistance_axial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance_bending
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance_bending : resistance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance_bending
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance_bending(SdaiInstance instance) : base(instance) { }
        public resistance_bending() : base(0) { }

        public static implicit operator resistance_bending(SdaiInstance instance) => new resistance_bending(instance);

        /// <summary>
        /// Create new instace of resistance_bending and returns object of this class to interact with
        /// </summary>
        public static new resistance_bending Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resistance_bending"); Debug.Assert(inst != 0); return inst; }

        public moment_measure_with_unit torsional_resistance_mx 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "torsional_resistance_mx", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "torsional_resistance_mx", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit bending_resistance_my 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bending_resistance_my", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bending_resistance_my", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit bending_resistance_mz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bending_resistance_mz", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bending_resistance_mz", ifcengine.sdaiINSTANCE, i); }
            }
        public moment_measure_with_unit buckling_resistance_mb 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "buckling_resistance_mb", ifcengine.sdaiINSTANCE, out inst); return new moment_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "buckling_resistance_mb", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "resistance_bending"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance_shear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance_shear : resistance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance_shear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance_shear(SdaiInstance instance) : base(instance) { }
        public resistance_shear() : base(0) { }

        public static implicit operator resistance_shear(SdaiInstance instance) => new resistance_shear(instance);

        /// <summary>
        /// Create new instace of resistance_shear and returns object of this class to interact with
        /// </summary>
        public static new resistance_shear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resistance_shear"); Debug.Assert(inst != 0); return inst; }

        public force_measure_with_unit normal_shear_resistance_pv 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "normal_shear_resistance_pv", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "normal_shear_resistance_pv", ifcengine.sdaiINSTANCE, i); }
            }
        public force_measure_with_unit buckling_shear_resistance_pbv 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "buckling_shear_resistance_pbv", ifcengine.sdaiINSTANCE, out inst); return new force_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "buckling_shear_resistance_pbv", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "resistance_shear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of restraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class restraint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of restraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public restraint(SdaiInstance instance) : base(instance) { }
        public restraint() : base(0) { }

        public static implicit operator restraint(SdaiInstance instance) => new restraint(instance);

        public TextValue restraint_name
            {
            get { return get_string("restraint_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "restraint_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue restraint_description
            {
            get { return get_string("restraint_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "restraint_description", ifcengine.sdaiSTRING, value); }
            }
        public point restraint_location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_location", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_location", ifcengine.sdaiINSTANCE, i); }
            }
        public assembly_design_structural_member restrained_mbr 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restrained_mbr", ifcengine.sdaiINSTANCE, out inst); return new assembly_design_structural_member(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restrained_mbr", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "restraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of restraint_logical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class restraint_logical : restraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of restraint_logical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public restraint_logical(SdaiInstance instance) : base(instance) { }
        public restraint_logical() : base(0) { }

        public static implicit operator restraint_logical(SdaiInstance instance) => new restraint_logical(instance);

        /// <summary>
        /// Create new instace of restraint_logical and returns object of this class to interact with
        /// </summary>
        public static new restraint_logical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "restraint_logical"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? restraint_x_displacement 
            { 
            get { var str = get_string("restraint_x_displacement", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_x_displacement", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? restraint_y_displacement 
            { 
            get { var str = get_string("restraint_y_displacement", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_y_displacement", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? restraint_z_displacement 
            { 
            get { var str = get_string("restraint_z_displacement", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_z_displacement", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? restraint_x_rotation 
            { 
            get { var str = get_string("restraint_x_rotation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_x_rotation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? restraint_y_rotation 
            { 
            get { var str = get_string("restraint_y_rotation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_y_rotation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? restraint_z_rotation 
            { 
            get { var str = get_string("restraint_z_rotation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "restraint_z_rotation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "restraint_logical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of restraint_spring
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class restraint_spring : restraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of restraint_spring
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public restraint_spring(SdaiInstance instance) : base(instance) { }
        public restraint_spring() : base(0) { }

        public static implicit operator restraint_spring(SdaiInstance instance) => new restraint_spring(instance);

        /// <summary>
        /// Create new instace of restraint_spring and returns object of this class to interact with
        /// </summary>
        public static new restraint_spring Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "restraint_spring"); Debug.Assert(inst != 0); return inst; }

        public linear_stiffness_measure_with_unit restraint_x_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_x_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_x_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit restraint_y_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_y_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_y_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public linear_stiffness_measure_with_unit restraint_z_displacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_z_displacement", ifcengine.sdaiINSTANCE, out inst); return new linear_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_z_displacement", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit restraint_x_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_x_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_x_rotation", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit restraint_y_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_y_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_y_rotation", ifcengine.sdaiINSTANCE, i); }
            }
        public rotational_stiffness_measure_with_unit restraint_z_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_z_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_z_rotation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "restraint_spring"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of restraint_warping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class restraint_warping : restraint_spring
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of restraint_warping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public restraint_warping(SdaiInstance instance) : base(instance) { }
        public restraint_warping() : base(0) { }

        public static implicit operator restraint_warping(SdaiInstance instance) => new restraint_warping(instance);

        /// <summary>
        /// Create new instace of restraint_warping and returns object of this class to interact with
        /// </summary>
        public static new restraint_warping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "restraint_warping"); Debug.Assert(inst != 0); return inst; }

        public rotational_stiffness_measure_with_unit restraint_w_rotation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "restraint_w_rotation", ifcengine.sdaiINSTANCE, out inst); return new rotational_stiffness_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "restraint_w_rotation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "restraint_warping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_area_solid(SdaiInstance instance) : base(instance) { }
        public revolved_area_solid() : base(0) { }

        public static implicit operator revolved_area_solid(SdaiInstance instance) => new revolved_area_solid(instance);

        /// <summary>
        /// Create new instace of revolved_area_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_area_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? angle
            {
            get { return get_double("angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "revolved_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_face_solid : swept_face_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_face_solid(SdaiInstance instance) : base(instance) { }
        public revolved_face_solid() : base(0) { }

        public static implicit operator revolved_face_solid(SdaiInstance instance) => new revolved_face_solid(instance);

        /// <summary>
        /// Create new instace of revolved_face_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_face_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? angle
            {
            get { return get_double("angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "revolved_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_angular_wedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_angular_wedge : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_angular_wedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_angular_wedge(SdaiInstance instance) : base(instance) { }
        public right_angular_wedge() : base(0) { }

        public static implicit operator right_angular_wedge(SdaiInstance instance) => new right_angular_wedge(instance);

        /// <summary>
        /// Create new instace of right_angular_wedge and returns object of this class to interact with
        /// </summary>
        public static new right_angular_wedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_angular_wedge"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ltx
            {
            get { return get_double("ltx", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ltx", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_angular_wedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cone : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cone(SdaiInstance instance) : base(instance) { }
        public right_circular_cone() : base(0) { }

        public static implicit operator right_circular_cone(SdaiInstance instance) => new right_circular_cone(instance);

        /// <summary>
        /// Create new instace of right_circular_cone and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cone"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_angle
            {
            get { return get_double("semi_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_circular_cone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cylinder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cylinder : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cylinder(SdaiInstance instance) : base(instance) { }
        public right_circular_cylinder() : base(0) { }

        public static implicit operator right_circular_cylinder(SdaiInstance instance) => new right_circular_cylinder(instance);

        /// <summary>
        /// Create new instace of right_circular_cylinder and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cylinder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cylinder"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_circular_cylinder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of role_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class role_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of role_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public role_association(SdaiInstance instance) : base(instance) { }
        public role_association() : base(0) { }

        public static implicit operator role_association(SdaiInstance instance) => new role_association(instance);

        /// <summary>
        /// Create new instace of role_association and returns object of this class to interact with
        /// </summary>
        public static new role_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "role_association"); Debug.Assert(inst != 0); return inst; }

        public object_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        public role_select item_with_role
            {
            get { return new role_select(m_instance, "item_with_role", 0); }
            }

        protected override TextValue WrapperEntityName() { return "role_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_acceleration_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_acceleration_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_acceleration_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_acceleration_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public rotational_acceleration_measure_with_unit() : base(0) { }

        public static implicit operator rotational_acceleration_measure_with_unit(SdaiInstance instance) => new rotational_acceleration_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of rotational_acceleration_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_acceleration_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_acceleration_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_acceleration_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_acceleration_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_acceleration_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_acceleration_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_acceleration_unit(SdaiInstance instance) : base(instance) { }
        public rotational_acceleration_unit() : base(0) { }

        public static implicit operator rotational_acceleration_unit(SdaiInstance instance) => new rotational_acceleration_unit(instance);

        /// <summary>
        /// Create new instace of rotational_acceleration_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_acceleration_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_acceleration_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_acceleration_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_stiffness_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_stiffness_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_stiffness_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_stiffness_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public rotational_stiffness_measure_with_unit() : base(0) { }

        public static implicit operator rotational_stiffness_measure_with_unit(SdaiInstance instance) => new rotational_stiffness_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of rotational_stiffness_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_stiffness_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_stiffness_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_stiffness_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_stiffness_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_stiffness_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_stiffness_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_stiffness_unit(SdaiInstance instance) : base(instance) { }
        public rotational_stiffness_unit() : base(0) { }

        public static implicit operator rotational_stiffness_unit(SdaiInstance instance) => new rotational_stiffness_unit(instance);

        /// <summary>
        /// Create new instace of rotational_stiffness_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_stiffness_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_stiffness_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_stiffness_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_velocity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_velocity_measure_with_unit : derived_measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_velocity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_velocity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public rotational_velocity_measure_with_unit() : base(0) { }

        public static implicit operator rotational_velocity_measure_with_unit(SdaiInstance instance) => new rotational_velocity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of rotational_velocity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_velocity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_velocity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_velocity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotational_velocity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotational_velocity_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotational_velocity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotational_velocity_unit(SdaiInstance instance) : base(instance) { }
        public rotational_velocity_unit() : base(0) { }

        public static implicit operator rotational_velocity_unit(SdaiInstance instance) => new rotational_velocity_unit(instance);

        /// <summary>
        /// Create new instace of rotational_velocity_unit and returns object of this class to interact with
        /// </summary>
        public static new rotational_velocity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotational_velocity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rotational_velocity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of seam_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class seam_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of seam_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public seam_curve(SdaiInstance instance) : base(instance) { }
        public seam_curve() : base(0) { }

        public static implicit operator seam_curve(SdaiInstance instance) => new seam_curve(instance);

        /// <summary>
        /// Create new instace of seam_curve and returns object of this class to interact with
        /// </summary>
        public static new seam_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "seam_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "seam_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile(SdaiInstance instance) : base(instance) { }
        public section_profile() : base(0) { }

        public static implicit operator section_profile(SdaiInstance instance) => new section_profile(instance);

        /// <summary>
        /// Create new instace of section_profile and returns object of this class to interact with
        /// </summary>
        public static new section_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile"); Debug.Assert(inst != 0); return inst; }

        public TextValue section_classification
            {
            get { return get_string("section_classification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "section_classification", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? cardinal_point
            {
            get { return get_IntValue("cardinal_point", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "cardinal_point", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? mirrored 
            { 
            get { var str = get_string("mirrored", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "mirrored", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bag_of_identifier section_ref { get { return (new bag_of_identifierSerializer()).FromAttr(m_instance, "section_ref"); } }

        protected override TextValue WrapperEntityName() { return "section_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_simple
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_simple : section_profile
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_simple
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_simple(SdaiInstance instance) : base(instance) { }
        public section_profile_simple() : base(0) { }

        public static implicit operator section_profile_simple(SdaiInstance instance) => new section_profile_simple(instance);


        protected override TextValue WrapperEntityName() { return "section_profile_simple"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_angle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_angle : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_angle(SdaiInstance instance) : base(instance) { }
        public section_profile_angle() : base(0) { }

        public static implicit operator section_profile_angle(SdaiInstance instance) => new section_profile_angle(instance);

        /// <summary>
        /// Create new instace of section_profile_angle and returns object of this class to interact with
        /// </summary>
        public static new section_profile_angle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_angle"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit internal_fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "internal_fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "internal_fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit edge_fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit leg_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "leg_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "leg_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public double? width_value { get { return get_double("width_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_angle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_complex : section_profile
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_complex(SdaiInstance instance) : base(instance) { }
        public section_profile_complex() : base(0) { }

        public static implicit operator section_profile_complex(SdaiInstance instance) => new section_profile_complex(instance);


        protected override TextValue WrapperEntityName() { return "section_profile_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_centreline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_centreline : section_profile_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_centreline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_centreline(SdaiInstance instance) : base(instance) { }
        public section_profile_centreline() : base(0) { }

        public static implicit operator section_profile_centreline(SdaiInstance instance) => new section_profile_centreline(instance);

        /// <summary>
        /// Create new instace of section_profile_centreline and returns object of this class to interact with
        /// </summary>
        public static new section_profile_centreline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_centreline"); Debug.Assert(inst != 0); return inst; }

        public curve centreline 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "centreline", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "centreline", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "thickness", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "section_profile_centreline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_channel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_channel : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_channel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_channel(SdaiInstance instance) : base(instance) { }
        public section_profile_channel() : base(0) { }

        public static implicit operator section_profile_channel(SdaiInstance instance) => new section_profile_channel(instance);

        /// <summary>
        /// Create new instace of section_profile_channel and returns object of this class to interact with
        /// </summary>
        public static new section_profile_channel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_channel"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit overall_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit web_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit root_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit flange_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public double? overall_depth_value { get { return get_double("overall_depth_value", ifcengine.sdaiREAL); } }
        public double? flange_width_value { get { return get_double("flange_width_value", ifcengine.sdaiREAL); } }
        public double? flange_thickness_value { get { return get_double("flange_thickness_value", ifcengine.sdaiREAL); } }
        public double? web_thickness_value { get { return get_double("web_thickness_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_channel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_circle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_circle : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_circle(SdaiInstance instance) : base(instance) { }
        public section_profile_circle() : base(0) { }

        public static implicit operator section_profile_circle(SdaiInstance instance) => new section_profile_circle(instance);

        /// <summary>
        /// Create new instace of section_profile_circle and returns object of this class to interact with
        /// </summary>
        public static new section_profile_circle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_circle"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit external_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "external_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "external_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "section_profile_circle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_circle_hollow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_circle_hollow : section_profile_circle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_circle_hollow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_circle_hollow(SdaiInstance instance) : base(instance) { }
        public section_profile_circle_hollow() : base(0) { }

        public static implicit operator section_profile_circle_hollow(SdaiInstance instance) => new section_profile_circle_hollow(instance);

        /// <summary>
        /// Create new instace of section_profile_circle_hollow and returns object of this class to interact with
        /// </summary>
        public static new section_profile_circle_hollow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_circle_hollow"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit wall_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "wall_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "wall_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public double? external_radius_value { get { return get_double("external_radius_value", ifcengine.sdaiREAL); } }
        public double? wall_thickness_value { get { return get_double("wall_thickness_value", ifcengine.sdaiREAL); } }
        public double? inside_diameter { get { return get_double("inside_diameter", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_circle_hollow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_compound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_compound : section_profile_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_compound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_compound(SdaiInstance instance) : base(instance) { }
        public section_profile_compound() : base(0) { }

        public static implicit operator section_profile_compound(SdaiInstance instance) => new section_profile_compound(instance);

        /// <summary>
        /// Create new instace of section_profile_compound and returns object of this class to interact with
        /// </summary>
        public static new section_profile_compound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_compound"); Debug.Assert(inst != 0); return inst; }

        public list_of_section_profile component_sections { get { return (new list_of_section_profileSerializer()).FromAttr(m_instance, "component_sections"); } }
        public void put_component_sections(IEnumerable<section_profile> lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "component_sections"); }
        public void put_component_sections_untyped(IEnumerable lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "component_sections"); }
        public list_of_point positions { get { return (new list_of_pointSerializer()).FromAttr(m_instance, "positions"); } }
        public void put_positions(IEnumerable<point> lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "positions"); }
        public void put_positions_untyped(IEnumerable lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "positions"); }
        public list_of_orientation_select orientations { get { return (new list_of_orientation_selectSerializer()).FromAttr(m_instance, "orientations"); } }
        public void put_orientations(IEnumerable<orientation_select> lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "orientations"); }
        public void put_orientations_untyped(IEnumerable lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "orientations"); }
        public IntValue? number_of_sections { get { return get_IntValue("number_of_sections", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "section_profile_compound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_derived
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_derived : section_profile_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_derived
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_derived(SdaiInstance instance) : base(instance) { }
        public section_profile_derived() : base(0) { }

        public static implicit operator section_profile_derived(SdaiInstance instance) => new section_profile_derived(instance);

        /// <summary>
        /// Create new instace of section_profile_derived and returns object of this class to interact with
        /// </summary>
        public static new section_profile_derived Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_derived"); Debug.Assert(inst != 0); return inst; }

        public section_profile original_section 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "original_section", ifcengine.sdaiINSTANCE, out inst); return new section_profile(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "original_section", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "section_profile_derived"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_edge_defined
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_edge_defined : section_profile_complex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_edge_defined
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_edge_defined(SdaiInstance instance) : base(instance) { }
        public section_profile_edge_defined() : base(0) { }

        public static implicit operator section_profile_edge_defined(SdaiInstance instance) => new section_profile_edge_defined(instance);

        /// <summary>
        /// Create new instace of section_profile_edge_defined and returns object of this class to interact with
        /// </summary>
        public static new section_profile_edge_defined Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_edge_defined"); Debug.Assert(inst != 0); return inst; }

        public bounded_curve external_edge 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "external_edge", ifcengine.sdaiINSTANCE, out inst); return new bounded_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "external_edge", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_bounded_curve internal_edges { get { return (new list_of_bounded_curveSerializer()).FromAttr(m_instance, "internal_edges"); } }
        public void put_internal_edges(IEnumerable<bounded_curve> lst) { (new list_of_bounded_curveSerializer()).ToSdaiAggr(lst, m_instance, "internal_edges"); }
        public void put_internal_edges_untyped(IEnumerable lst) { (new list_of_bounded_curveSerializer()).ToSdaiAggr(lst, m_instance, "internal_edges"); }

        protected override TextValue WrapperEntityName() { return "section_profile_edge_defined"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_i_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_i_type : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_i_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_i_type(SdaiInstance instance) : base(instance) { }
        public section_profile_i_type() : base(0) { }

        public static implicit operator section_profile_i_type(SdaiInstance instance) => new section_profile_i_type(instance);

        /// <summary>
        /// Create new instace of section_profile_i_type and returns object of this class to interact with
        /// </summary>
        public static new section_profile_i_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_i_type"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit overall_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit overall_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit web_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit internal_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "internal_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "internal_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit flange_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit root_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit edge_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public double? overall_depth_value { get { return get_double("overall_depth_value", ifcengine.sdaiREAL); } }
        public double? overall_width_value { get { return get_double("overall_width_value", ifcengine.sdaiREAL); } }
        public double? web_thickness_value { get { return get_double("web_thickness_value", ifcengine.sdaiREAL); } }
        public double? flange_thickness_value { get { return get_double("flange_thickness_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_i_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_i_type_asymmetric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_i_type_asymmetric : section_profile_i_type
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_i_type_asymmetric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_i_type_asymmetric(SdaiInstance instance) : base(instance) { }
        public section_profile_i_type_asymmetric() : base(0) { }

        public static implicit operator section_profile_i_type_asymmetric(SdaiInstance instance) => new section_profile_i_type_asymmetric(instance);

        /// <summary>
        /// Create new instace of section_profile_i_type_asymmetric and returns object of this class to interact with
        /// </summary>
        public static new section_profile_i_type_asymmetric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_i_type_asymmetric"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit top_flange_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "top_flange_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "top_flange_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit bottom_flange_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_flange_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_flange_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit bottom_flange_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_flange_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_flange_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit bottom_root_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_root_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_root_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit bottom_flange_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_flange_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_flange_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit bottom_flange_edge_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_flange_edge_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_flange_edge_radius", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "section_profile_i_type_asymmetric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_i_type_rail
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_i_type_rail : section_profile_i_type_asymmetric
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_i_type_rail
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_i_type_rail(SdaiInstance instance) : base(instance) { }
        public section_profile_i_type_rail() : base(0) { }

        public static implicit operator section_profile_i_type_rail(SdaiInstance instance) => new section_profile_i_type_rail(instance);

        /// <summary>
        /// Create new instace of section_profile_i_type_rail and returns object of this class to interact with
        /// </summary>
        public static new section_profile_i_type_rail Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_i_type_rail"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit top_edge_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "top_edge_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "top_edge_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit bottom_edge_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_edge_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_edge_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit top_flange_inner_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "top_flange_inner_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "top_flange_inner_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit bottom_flange_inner_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bottom_flange_inner_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bottom_flange_inner_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit transition_radius_top 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transition_radius_top", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transition_radius_top", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit transition_radius_bottom 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transition_radius_bottom", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transition_radius_bottom", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "section_profile_i_type_rail"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_rectangle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_rectangle : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_rectangle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_rectangle(SdaiInstance instance) : base(instance) { }
        public section_profile_rectangle() : base(0) { }

        public static implicit operator section_profile_rectangle(SdaiInstance instance) => new section_profile_rectangle(instance);

        /// <summary>
        /// Create new instace of section_profile_rectangle and returns object of this class to interact with
        /// </summary>
        public static new section_profile_rectangle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_rectangle"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit overall_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit overall_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit external_fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "external_fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "external_fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public double? overall_depth_value { get { return get_double("overall_depth_value", ifcengine.sdaiREAL); } }
        public double? overall_width_value { get { return get_double("overall_width_value", ifcengine.sdaiREAL); } }
        public double? external_fillet_value { get { return get_double("external_fillet_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_rectangle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_rectangle_hollow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_rectangle_hollow : section_profile_rectangle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_rectangle_hollow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_rectangle_hollow(SdaiInstance instance) : base(instance) { }
        public section_profile_rectangle_hollow() : base(0) { }

        public static implicit operator section_profile_rectangle_hollow(SdaiInstance instance) => new section_profile_rectangle_hollow(instance);

        /// <summary>
        /// Create new instace of section_profile_rectangle_hollow and returns object of this class to interact with
        /// </summary>
        public static new section_profile_rectangle_hollow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_rectangle_hollow"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit wall_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "wall_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "wall_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit internal_fillet_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "internal_fillet_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "internal_fillet_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public double? wall_thickness_value { get { return get_double("wall_thickness_value", ifcengine.sdaiREAL); } }
        public double? internal_radius_value { get { return get_double("internal_radius_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_rectangle_hollow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_profile_t_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_profile_t_type : section_profile_simple
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_profile_t_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_profile_t_type(SdaiInstance instance) : base(instance) { }
        public section_profile_t_type() : base(0) { }

        public static implicit operator section_profile_t_type(SdaiInstance instance) => new section_profile_t_type(instance);

        /// <summary>
        /// Create new instace of section_profile_t_type and returns object of this class to interact with
        /// </summary>
        public static new section_profile_t_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_profile_t_type"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit overall_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "overall_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_width 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_width", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_width", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit flange_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit web_thickness 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "web_thickness", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit root_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "root_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit flange_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "flange_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public ratio_measure_with_unit web_slope 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "web_slope", ifcengine.sdaiINSTANCE, out inst); return new ratio_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "web_slope", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit edge_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public double? overall_depth_value { get { return get_double("overall_depth_value", ifcengine.sdaiREAL); } }
        public double? flange_width_value { get { return get_double("flange_width_value", ifcengine.sdaiREAL); } }
        public double? flange_thickness_value { get { return get_double("flange_thickness_value", ifcengine.sdaiREAL); } }
        public double? web_thickness_value { get { return get_double("web_thickness_value", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_profile_t_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_properties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_properties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_properties(SdaiInstance instance) : base(instance) { }
        public section_properties() : base(0) { }

        public static implicit operator section_properties(SdaiInstance instance) => new section_properties(instance);

        /// <summary>
        /// Create new instace of section_properties and returns object of this class to interact with
        /// </summary>
        public static new section_properties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_properties"); Debug.Assert(inst != 0); return inst; }

        public section_profile profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, out inst); return new section_profile(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, i); }
            }
        public array_of_length_measure_with_unit origin_offset { get { return (new array_of_length_measure_with_unitSerializer()).FromAttr(m_instance, "origin_offset"); } }
        public void put_origin_offset(IEnumerable<length_measure_with_unit> lst) { (new array_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "origin_offset"); }
        public void put_origin_offset_untyped(IEnumerable lst) { (new array_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "origin_offset"); }
        public inertia_measure_with_unit torsional_constant_Ix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "torsional_constant_Ix", ifcengine.sdaiINSTANCE, out inst); return new inertia_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "torsional_constant_Ix", ifcengine.sdaiINSTANCE, i); }
            }
        public inertia_measure_with_unit inertia_moment_Iy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "inertia_moment_Iy", ifcengine.sdaiINSTANCE, out inst); return new inertia_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "inertia_moment_Iy", ifcengine.sdaiINSTANCE, i); }
            }
        public inertia_measure_with_unit inertia_moment_Iz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "inertia_moment_Iz", ifcengine.sdaiINSTANCE, out inst); return new inertia_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "inertia_moment_Iz", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit section_area_Ax 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "section_area_Ax", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "section_area_Ax", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit shear_area_Asy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_area_Asy", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_area_Asy", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit shear_area_Asz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_area_Asz", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_area_Asz", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit shear_deformation_area_Ay 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_deformation_area_Ay", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_deformation_area_Ay", ifcengine.sdaiINSTANCE, i); }
            }
        public area_measure_with_unit shear_deformation_area_Az 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shear_deformation_area_Az", ifcengine.sdaiINSTANCE, out inst); return new area_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shear_deformation_area_Az", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit surface_per_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_per_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_per_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit radius_of_gyration_ry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "radius_of_gyration_ry", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "radius_of_gyration_ry", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit radius_of_gyration_rz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "radius_of_gyration_rz", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "radius_of_gyration_rz", ifcengine.sdaiINSTANCE, i); }
            }
        public modulus_measure_with_unit plastic_modulus_Sy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "plastic_modulus_Sy", ifcengine.sdaiINSTANCE, out inst); return new modulus_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "plastic_modulus_Sy", ifcengine.sdaiINSTANCE, i); }
            }
        public modulus_measure_with_unit plastic_modulus_Sz 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "plastic_modulus_Sz", ifcengine.sdaiINSTANCE, out inst); return new modulus_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "plastic_modulus_Sz", ifcengine.sdaiINSTANCE, i); }
            }
        public derived_measure_with_unit warping_constant 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "warping_constant", ifcengine.sdaiINSTANCE, out inst); return new derived_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "warping_constant", ifcengine.sdaiINSTANCE, i); }
            }
        public double? torsional_index
            {
            get { return get_double("torsional_index", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "torsional_index", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? buckling_parameter
            {
            get { return get_double("buckling_parameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "buckling_parameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public mass_per_length_measure_with_unit nominal_mass 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "nominal_mass", ifcengine.sdaiINSTANCE, out inst); return new mass_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "nominal_mass", ifcengine.sdaiINSTANCE, i); }
            }
        public mass_per_length_measure_with_unit actual_mass 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_mass", ifcengine.sdaiINSTANCE, out inst); return new mass_per_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_mass", ifcengine.sdaiINSTANCE, i); }
            }
        public double? y_offset { get { return get_double("y_offset", ifcengine.sdaiREAL); } }
        public double? z_offset { get { return get_double("z_offset", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "section_properties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of section_properties_asymmetric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class section_properties_asymmetric : section_properties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of section_properties_asymmetric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public section_properties_asymmetric(SdaiInstance instance) : base(instance) { }
        public section_properties_asymmetric() : base(0) { }

        public static implicit operator section_properties_asymmetric(SdaiInstance instance) => new section_properties_asymmetric(instance);

        /// <summary>
        /// Create new instace of section_properties_asymmetric and returns object of this class to interact with
        /// </summary>
        public static new section_properties_asymmetric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "section_properties_asymmetric"); Debug.Assert(inst != 0); return inst; }

        public array_of_length_measure_with_unit neutral_axis_shear_centre { get { return (new array_of_length_measure_with_unitSerializer()).FromAttr(m_instance, "neutral_axis_shear_centre"); } }
        public void put_neutral_axis_shear_centre(IEnumerable<length_measure_with_unit> lst) { (new array_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "neutral_axis_shear_centre"); }
        public void put_neutral_axis_shear_centre_untyped(IEnumerable lst) { (new array_of_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "neutral_axis_shear_centre"); }
        public plane_angle_measure_with_unit theta_angle_z_axis_v_axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "theta_angle_z_axis_v_axis", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "theta_angle_z_axis_v_axis", ifcengine.sdaiINSTANCE, i); }
            }
        public inertia_measure_with_unit inertia_moment_Iu 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "inertia_moment_Iu", ifcengine.sdaiINSTANCE, out inst); return new inertia_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "inertia_moment_Iu", ifcengine.sdaiINSTANCE, i); }
            }
        public inertia_measure_with_unit inertia_moment_Iv 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "inertia_moment_Iv", ifcengine.sdaiINSTANCE, out inst); return new inertia_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "inertia_moment_Iv", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit radius_of_gyration_ru 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "radius_of_gyration_ru", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "radius_of_gyration_ru", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit radius_of_gyration_rv 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "radius_of_gyration_rv", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "radius_of_gyration_rv", ifcengine.sdaiINSTANCE, i); }
            }
        public array_of_modulus_measure_with_unit section_modulii { get { return (new array_of_modulus_measure_with_unitSerializer()).FromAttr(m_instance, "section_modulii"); } }
        public void put_section_modulii(IEnumerable<modulus_measure_with_unit> lst) { (new array_of_modulus_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "section_modulii"); }
        public void put_section_modulii_untyped(IEnumerable lst) { (new array_of_modulus_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "section_modulii"); }

        protected override TextValue WrapperEntityName() { return "section_properties_asymmetric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of setting_out_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class setting_out_point : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of setting_out_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public setting_out_point(SdaiInstance instance) : base(instance) { }
        public setting_out_point() : base(0) { }

        public static implicit operator setting_out_point(SdaiInstance instance) => new setting_out_point(instance);

        /// <summary>
        /// Create new instace of setting_out_point and returns object of this class to interact with
        /// </summary>
        public static new setting_out_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "setting_out_point"); Debug.Assert(inst != 0); return inst; }

        public site set_out_site 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "set_out_site", ifcengine.sdaiINSTANCE, out inst); return new site(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "set_out_site", ifcengine.sdaiINSTANCE, i); }
            }
        public geographical_location location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, out inst); return new geographical_location(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "setting_out_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation(SdaiInstance instance) : base(instance) { }
        public shape_representation() : base(0) { }

        public static implicit operator shape_representation(SdaiInstance instance) => new shape_representation(instance);

        /// <summary>
        /// Create new instace of shape_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation_with_units
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation_with_units : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation_with_units
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation_with_units(SdaiInstance instance) : base(instance) { }
        public shape_representation_with_units() : base(0) { }

        public static implicit operator shape_representation_with_units(SdaiInstance instance) => new shape_representation_with_units(instance);

        /// <summary>
        /// Create new instace of shape_representation_with_units and returns object of this class to interact with
        /// </summary>
        public static new shape_representation_with_units Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation_with_units"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_representation_with_units"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_surface_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_surface_model(SdaiInstance instance) : base(instance) { }
        public shell_based_surface_model() : base(0) { }

        public static implicit operator shell_based_surface_model(SdaiInstance instance) => new shell_based_surface_model(instance);

        /// <summary>
        /// Create new instace of shell_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new shell_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_shell sbsm_boundary { get { return (new set_of_shellSerializer()).FromAttr(m_instance, "sbsm_boundary"); } }
        public void put_sbsm_boundary(IEnumerable<shell> lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }
        public void put_sbsm_boundary_untyped(IEnumerable lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }

        protected override TextValue WrapperEntityName() { return "shell_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_wireframe_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_wireframe_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_wireframe_model(SdaiInstance instance) : base(instance) { }
        public shell_based_wireframe_model() : base(0) { }

        public static implicit operator shell_based_wireframe_model(SdaiInstance instance) => new shell_based_wireframe_model(instance);

        /// <summary>
        /// Create new instace of shell_based_wireframe_model and returns object of this class to interact with
        /// </summary>
        public static new shell_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_wireframe_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_shell sbwm_boundary { get { return (new set_of_shellSerializer()).FromAttr(m_instance, "sbwm_boundary"); } }
        public void put_sbwm_boundary(IEnumerable<shell> lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbwm_boundary"); }
        public void put_sbwm_boundary_untyped(IEnumerable lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbwm_boundary"); }

        protected override TextValue WrapperEntityName() { return "shell_based_wireframe_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_unit(SdaiInstance instance) : base(instance) { }
        public si_unit() : base(0) { }

        public static implicit operator si_unit(SdaiInstance instance) => new si_unit(instance);

        /// <summary>
        /// Create new instace of si_unit and returns object of this class to interact with
        /// </summary>
        public static new si_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_unit"); Debug.Assert(inst != 0); return inst; }

        public si_prefix? prefix 
            { 
            get { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<si_prefix>.FromValue(value.Value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public si_unit_name? name 
            { 
            get { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<si_unit_name>.FromValue(value.Value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "si_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of site
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class site : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of site
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public site(SdaiInstance instance) : base(instance) { }
        public site() : base(0) { }

        public static implicit operator site(SdaiInstance instance) => new site(instance);

        /// <summary>
        /// Create new instace of site and returns object of this class to interact with
        /// </summary>
        public static new site Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "site"); Debug.Assert(inst != 0); return inst; }

        public address site_address 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "site_address", ifcengine.sdaiINSTANCE, out inst); return new address(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "site_address", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "site"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of site_with_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class site_with_shape : site
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of site_with_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public site_with_shape(SdaiInstance instance) : base(instance) { }
        public site_with_shape() : base(0) { }

        public static implicit operator site_with_shape(SdaiInstance instance) => new site_with_shape(instance);

        /// <summary>
        /// Create new instace of site_with_shape and returns object of this class to interact with
        /// </summary>
        public static new site_with_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "site_with_shape"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "site_with_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solder : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solder(SdaiInstance instance) : base(instance) { }
        public solder() : base(0) { }

        public static implicit operator solder(SdaiInstance instance) => new solder(instance);

        /// <summary>
        /// Create new instace of solder and returns object of this class to interact with
        /// </summary>
        public static new solder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solder"); Debug.Assert(inst != 0); return inst; }

        public soldering_type? solder_type 
            { 
            get { var str = get_string("solder_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.soldering_type_); return EnumValue<soldering_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<soldering_type>.FromValue(value.Value, EnumNames.soldering_type_); ifcengine.sdaiPutAttrBN(m_instance, "solder_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "solder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_measure_with_unit() : base(0) { }

        public static implicit operator solid_angle_measure_with_unit(SdaiInstance instance) => new solid_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_unit() : base(0) { }

        public static implicit operator solid_angle_unit(SdaiInstance instance) => new solid_angle_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_replica : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_replica(SdaiInstance instance) : base(instance) { }
        public solid_replica() : base(0) { }

        public static implicit operator solid_replica(SdaiInstance instance) => new solid_replica(instance);

        /// <summary>
        /// Create new instace of solid_replica and returns object of this class to interact with
        /// </summary>
        public static new solid_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_replica"); Debug.Assert(inst != 0); return inst; }

        public solid_model parent_solid 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, out inst); return new solid_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator_3d transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "solid_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sphere
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sphere : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sphere(SdaiInstance instance) : base(instance) { }
        public sphere() : base(0) { }

        public static implicit operator sphere(SdaiInstance instance) => new sphere(instance);

        /// <summary>
        /// Create new instace of sphere and returns object of this class to interact with
        /// </summary>
        public static new sphere Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sphere"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public point centre 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "sphere"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_point : cartesian_point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_point(SdaiInstance instance) : base(instance) { }
        public spherical_point() : base(0) { }

        public static implicit operator spherical_point(SdaiInstance instance) => new spherical_point(instance);

        /// <summary>
        /// Create new instace of spherical_point and returns object of this class to interact with
        /// </summary>
        public static new spherical_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_point"); Debug.Assert(inst != 0); return inst; }

        public double? r
            {
            get { return get_double("r", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "r", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? theta
            {
            get { return get_double("theta", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "theta", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? phi
            {
            get { return get_double("phi", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "phi", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "spherical_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_surface(SdaiInstance instance) : base(instance) { }
        public spherical_surface() : base(0) { }

        public static implicit operator spherical_surface(SdaiInstance instance) => new spherical_surface(instance);

        /// <summary>
        /// Create new instace of spherical_surface and returns object of this class to interact with
        /// </summary>
        public static new spherical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "spherical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_volume(SdaiInstance instance) : base(instance) { }
        public spherical_volume() : base(0) { }

        public static implicit operator spherical_volume(SdaiInstance instance) => new spherical_volume(instance);

        /// <summary>
        /// Create new instace of spherical_volume and returns object of this class to interact with
        /// </summary>
        public static new spherical_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "spherical_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of standard_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class standard_uncertainty : uncertainty_qualifier
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of standard_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public standard_uncertainty(SdaiInstance instance) : base(instance) { }
        public standard_uncertainty() : base(0) { }

        public static implicit operator standard_uncertainty(SdaiInstance instance) => new standard_uncertainty(instance);

        /// <summary>
        /// Create new instace of standard_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new standard_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "standard_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public double? uncertainty_value
            {
            get { return get_double("uncertainty_value", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "standard_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of step_file
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class step_file : media_file
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of step_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public step_file(SdaiInstance instance) : base(instance) { }
        public step_file() : base(0) { }

        public static implicit operator step_file(SdaiInstance instance) => new step_file(instance);

        /// <summary>
        /// Create new instace of step_file and returns object of this class to interact with
        /// </summary>
        public static new step_file Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "step_file"); Debug.Assert(inst != 0); return inst; }

        public set_of_group_assignment selected_content { get { return (new set_of_group_assignmentSerializer()).FromAttr(m_instance, "selected_content"); } }

        protected override TextValue WrapperEntityName() { return "step_file"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item_approved
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item_approved : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item_approved
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item_approved(SdaiInstance instance) : base(instance) { }
        public structural_frame_item_approved() : base(0) { }

        public static implicit operator structural_frame_item_approved(SdaiInstance instance) => new structural_frame_item_approved(instance);

        /// <summary>
        /// Create new instace of structural_frame_item_approved and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item_approved Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item_approved"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_item approved_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "approved_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "approved_item", ifcengine.sdaiINSTANCE, i); }
            }
        public approval assigned_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_item_approved"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item_certified
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item_certified : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item_certified
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item_certified(SdaiInstance instance) : base(instance) { }
        public structural_frame_item_certified() : base(0) { }

        public static implicit operator structural_frame_item_certified(SdaiInstance instance) => new structural_frame_item_certified(instance);

        /// <summary>
        /// Create new instace of structural_frame_item_certified and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item_certified Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item_certified"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_item certified_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "certified_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "certified_item", ifcengine.sdaiINSTANCE, i); }
            }
        public certification assigned_certification 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, out inst); return new certification(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_item_certified"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item_documented
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item_documented : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item_documented
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item_documented(SdaiInstance instance) : base(instance) { }
        public structural_frame_item_documented() : base(0) { }

        public static implicit operator structural_frame_item_documented(SdaiInstance instance) => new structural_frame_item_documented(instance);

        /// <summary>
        /// Create new instace of structural_frame_item_documented and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item_documented Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item_documented"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_item documented_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "documented_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "documented_item", ifcengine.sdaiINSTANCE, i); }
            }
        public document_usage_constraint document_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "document_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_item_documented"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item_priced
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item_priced : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item_priced
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item_priced(SdaiInstance instance) : base(instance) { }
        public structural_frame_item_priced() : base(0) { }

        public static implicit operator structural_frame_item_priced(SdaiInstance instance) => new structural_frame_item_priced(instance);

        /// <summary>
        /// Create new instace of structural_frame_item_priced and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item_priced Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item_priced"); Debug.Assert(inst != 0); return inst; }

        public structural_frame_item priced_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "priced_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "priced_item", ifcengine.sdaiINSTANCE, i); }
            }
        public currency_measure_with_unit assigned_price 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_price", ifcengine.sdaiINSTANCE, out inst); return new currency_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_price", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue price_description
            {
            get { return get_string("price_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "price_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_item_priced"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_item_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_item_relationship(SdaiInstance instance) : base(instance) { }
        public structural_frame_item_relationship() : base(0) { }

        public static implicit operator structural_frame_item_relationship(SdaiInstance instance) => new structural_frame_item_relationship(instance);

        /// <summary>
        /// Create new instace of structural_frame_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue relationship_name
            {
            get { return get_string("relationship_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue relationship_description
            {
            get { return get_string("relationship_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "relationship_description", ifcengine.sdaiSTRING, value); }
            }
        public structural_frame_item related_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, i); }
            }
        public structural_frame_item relating_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, out inst); return new structural_frame_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structural_frame_product_with_material
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structural_frame_product_with_material : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structural_frame_product_with_material
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structural_frame_product_with_material(SdaiInstance instance) : base(instance) { }
        public structural_frame_product_with_material() : base(0) { }

        public static implicit operator structural_frame_product_with_material(SdaiInstance instance) => new structural_frame_product_with_material(instance);

        /// <summary>
        /// Create new instace of structural_frame_product_with_material and returns object of this class to interact with
        /// </summary>
        public static new structural_frame_product_with_material Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structural_frame_product_with_material"); Debug.Assert(inst != 0); return inst; }

        public material material_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "material_definition", ifcengine.sdaiINSTANCE, out inst); return new material(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "material_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public mass_measure_with_unit nominal_mass 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "nominal_mass", ifcengine.sdaiINSTANCE, out inst); return new mass_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "nominal_mass", ifcengine.sdaiINSTANCE, i); }
            }
        public mass_measure_with_unit actual_mass 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_mass", ifcengine.sdaiINSTANCE, out inst); return new mass_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_mass", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "structural_frame_product_with_material"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structure : structural_frame_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structure(SdaiInstance instance) : base(instance) { }
        public structure() : base(0) { }

        public static implicit operator structure(SdaiInstance instance) => new structure(instance);

        /// <summary>
        /// Create new instace of structure and returns object of this class to interact with
        /// </summary>
        public static new structure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structure"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "structure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subedge : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subedge(SdaiInstance instance) : base(instance) { }
        public subedge() : base(0) { }

        public static implicit operator subedge(SdaiInstance instance) => new subedge(instance);

        /// <summary>
        /// Create new instace of subedge and returns object of this class to interact with
        /// </summary>
        public static new subedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subedge"); Debug.Assert(inst != 0); return inst; }

        public edge parent_edge 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, out inst); return new edge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "subedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subface : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subface(SdaiInstance instance) : base(instance) { }
        public subface() : base(0) { }

        public static implicit operator subface(SdaiInstance instance) => new subface(instance);

        /// <summary>
        /// Create new instace of subface and returns object of this class to interact with
        /// </summary>
        public static new subface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subface"); Debug.Assert(inst != 0); return inst; }

        public face parent_face 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, out inst); return new face(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "subface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve_swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve_swept_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve_swept_area_solid(SdaiInstance instance) : base(instance) { }
        public surface_curve_swept_area_solid() : base(0) { }

        public static implicit operator surface_curve_swept_area_solid(SdaiInstance instance) => new surface_curve_swept_area_solid(instance);

        /// <summary>
        /// Create new instace of surface_curve_swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new surface_curve_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve_swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? start_param
            {
            get { return get_double("start_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? end_param
            {
            get { return get_double("end_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public surface reference_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_curve_swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve_swept_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve_swept_face_solid : swept_face_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve_swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve_swept_face_solid(SdaiInstance instance) : base(instance) { }
        public surface_curve_swept_face_solid() : base(0) { }

        public static implicit operator surface_curve_swept_face_solid(SdaiInstance instance) => new surface_curve_swept_face_solid(instance);

        /// <summary>
        /// Create new instace of surface_curve_swept_face_solid and returns object of this class to interact with
        /// </summary>
        public static new surface_curve_swept_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve_swept_face_solid"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? start_param
            {
            get { return get_double("start_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? end_param
            {
            get { return get_double("end_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public surface reference_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_curve_swept_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve_swept_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve_swept_surface : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve_swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve_swept_surface(SdaiInstance instance) : base(instance) { }
        public surface_curve_swept_surface() : base(0) { }

        public static implicit operator surface_curve_swept_surface(SdaiInstance instance) => new surface_curve_swept_surface(instance);

        /// <summary>
        /// Create new instace of surface_curve_swept_surface and returns object of this class to interact with
        /// </summary>
        public static new surface_curve_swept_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve_swept_surface"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public surface reference_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_curve_swept_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_linear_extrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_linear_extrusion : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_linear_extrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_linear_extrusion(SdaiInstance instance) : base(instance) { }
        public surface_of_linear_extrusion() : base(0) { }

        public static implicit operator surface_of_linear_extrusion(SdaiInstance instance) => new surface_of_linear_extrusion(instance);

        /// <summary>
        /// Create new instace of surface_of_linear_extrusion and returns object of this class to interact with
        /// </summary>
        public static new surface_of_linear_extrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_linear_extrusion"); Debug.Assert(inst != 0); return inst; }

        public vector extrusion_axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_of_linear_extrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_revolution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_revolution : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_revolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_revolution(SdaiInstance instance) : base(instance) { }
        public surface_of_revolution() : base(0) { }

        public static implicit operator surface_of_revolution(SdaiInstance instance) => new surface_of_revolution(instance);

        /// <summary>
        /// Create new instace of surface_of_revolution and returns object of this class to interact with
        /// </summary>
        public static new surface_of_revolution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_revolution"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, i); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "surface_of_revolution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_patch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_patch : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_patch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_patch(SdaiInstance instance) : base(instance) { }
        public surface_patch() : base(0) { }

        public static implicit operator surface_patch(SdaiInstance instance) => new surface_patch(instance);

        /// <summary>
        /// Create new instace of surface_patch and returns object of this class to interact with
        /// </summary>
        public static new surface_patch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_patch"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface parent_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public transition_code? u_transition 
            { 
            get { var str = get_string("u_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "u_transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public transition_code? v_transition 
            { 
            get { var str = get_string("v_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "v_transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? u_sense
            {
            get { return get_bool("u_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? v_sense
            {
            get { return get_bool("v_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bag_of_rectangular_composite_surface using_surfaces { get { return (new bag_of_rectangular_composite_surfaceSerializer()).FromAttr(m_instance, "using_surfaces"); } }

        protected override TextValue WrapperEntityName() { return "surface_patch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_replica : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_replica(SdaiInstance instance) : base(instance) { }
        public surface_replica() : base(0) { }

        public static implicit operator surface_replica(SdaiInstance instance) => new surface_replica(instance);

        /// <summary>
        /// Create new instace of surface_replica and returns object of this class to interact with
        /// </summary>
        public static new surface_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_replica"); Debug.Assert(inst != 0); return inst; }

        public surface parent_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator_3d transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment(SdaiInstance instance) : base(instance) { }
        public surface_treatment() : base(0) { }

        public static implicit operator surface_treatment(SdaiInstance instance) => new surface_treatment(instance);

        public TextValue surface_finish_specification
            {
            get { return get_string("surface_finish_specification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "surface_finish_specification", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_clean
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_clean : surface_treatment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_clean
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_clean(SdaiInstance instance) : base(instance) { }
        public surface_treatment_clean() : base(0) { }

        public static implicit operator surface_treatment_clean(SdaiInstance instance) => new surface_treatment_clean(instance);

        /// <summary>
        /// Create new instace of surface_treatment_clean and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_clean Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_clean"); Debug.Assert(inst != 0); return inst; }

        public cleaning_method? method 
            { 
            get { var str = get_string("method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.cleaning_method_); return EnumValue<cleaning_method>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<cleaning_method>.FromValue(value.Value, EnumNames.cleaning_method_); ifcengine.sdaiPutAttrBN(m_instance, "method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment_clean"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_coat
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_coat : surface_treatment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_coat
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_coat(SdaiInstance instance) : base(instance) { }
        public surface_treatment_coat() : base(0) { }

        public static implicit operator surface_treatment_coat(SdaiInstance instance) => new surface_treatment_coat(instance);

        /// <summary>
        /// Create new instace of surface_treatment_coat and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_coat Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_coat"); Debug.Assert(inst != 0); return inst; }

        public list_of_coating_method methods { get { return (new list_of_coating_methodSerializer()).FromAttr(m_instance, "methods"); } }
        public void put_methods(IEnumerable<coating_method> lst) { (new list_of_coating_methodSerializer()).ToSdaiAggr(lst, m_instance, "methods"); }
        public void put_methods_untyped(IEnumerable lst) { (new list_of_coating_methodSerializer()).ToSdaiAggr(lst, m_instance, "methods"); }
        public list_of_positive_length_measure_with_unit layer_thicknesses { get { return (new list_of_positive_length_measure_with_unitSerializer()).FromAttr(m_instance, "layer_thicknesses"); } }
        public void put_layer_thicknesses(IEnumerable<positive_length_measure_with_unit> lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "layer_thicknesses"); }
        public void put_layer_thicknesses_untyped(IEnumerable lst) { (new list_of_positive_length_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "layer_thicknesses"); }
        public list_of_coating coating_specifications { get { return (new list_of_coatingSerializer()).FromAttr(m_instance, "coating_specifications"); } }
        public void put_coating_specifications(IEnumerable<coating> lst) { (new list_of_coatingSerializer()).ToSdaiAggr(lst, m_instance, "coating_specifications"); }
        public void put_coating_specifications_untyped(IEnumerable lst) { (new list_of_coatingSerializer()).ToSdaiAggr(lst, m_instance, "coating_specifications"); }
        public IntValue? number_of_layers { get { return get_IntValue("number_of_layers", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "surface_treatment_coat"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_grind
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_grind : surface_treatment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_grind
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_grind(SdaiInstance instance) : base(instance) { }
        public surface_treatment_grind() : base(0) { }

        public static implicit operator surface_treatment_grind(SdaiInstance instance) => new surface_treatment_grind(instance);

        /// <summary>
        /// Create new instace of surface_treatment_grind and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_grind Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_grind"); Debug.Assert(inst != 0); return inst; }

        public length_measure_with_unit finished_surface_irregularity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "finished_surface_irregularity", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "finished_surface_irregularity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment_grind"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_hard_stamp
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_hard_stamp : surface_treatment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_hard_stamp
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_hard_stamp(SdaiInstance instance) : base(instance) { }
        public surface_treatment_hard_stamp() : base(0) { }

        public static implicit operator surface_treatment_hard_stamp(SdaiInstance instance) => new surface_treatment_hard_stamp(instance);

        /// <summary>
        /// Create new instace of surface_treatment_hard_stamp and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_hard_stamp Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_hard_stamp"); Debug.Assert(inst != 0); return inst; }

        public cutting_type? stamp_method 
            { 
            get { var str = get_string("stamp_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.cutting_type_); return EnumValue<cutting_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<cutting_type>.FromValue(value.Value, EnumNames.cutting_type_); ifcengine.sdaiPutAttrBN(m_instance, "stamp_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment_hard_stamp"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_thermal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_thermal : surface_treatment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_thermal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_thermal(SdaiInstance instance) : base(instance) { }
        public surface_treatment_thermal() : base(0) { }

        public static implicit operator surface_treatment_thermal(SdaiInstance instance) => new surface_treatment_thermal(instance);

        /// <summary>
        /// Create new instace of surface_treatment_thermal and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_thermal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_thermal"); Debug.Assert(inst != 0); return inst; }

        public thermodynamic_temperature_measure_with_unit initial_temperature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "initial_temperature", ifcengine.sdaiINSTANCE, out inst); return new thermodynamic_temperature_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "initial_temperature", ifcengine.sdaiINSTANCE, i); }
            }
        public thermodynamic_temperature_measure_with_unit final_temperature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "final_temperature", ifcengine.sdaiINSTANCE, out inst); return new thermodynamic_temperature_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "final_temperature", ifcengine.sdaiINSTANCE, i); }
            }
        public thermodynamic_temperature_measure_with_unit maximum_temperature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "maximum_temperature", ifcengine.sdaiINSTANCE, out inst); return new thermodynamic_temperature_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "maximum_temperature", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment_thermal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_treatment_thermal_timed
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_treatment_thermal_timed : surface_treatment_thermal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_treatment_thermal_timed
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_treatment_thermal_timed(SdaiInstance instance) : base(instance) { }
        public surface_treatment_thermal_timed() : base(0) { }

        public static implicit operator surface_treatment_thermal_timed(SdaiInstance instance) => new surface_treatment_thermal_timed(instance);

        /// <summary>
        /// Create new instace of surface_treatment_thermal_timed and returns object of this class to interact with
        /// </summary>
        public static new surface_treatment_thermal_timed Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_treatment_thermal_timed"); Debug.Assert(inst != 0); return inst; }

        public time_measure_with_unit time_to_maximum 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_to_maximum", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_to_maximum", ifcengine.sdaiINSTANCE, i); }
            }
        public time_measure_with_unit time_at_maximum 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_at_maximum", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_at_maximum", ifcengine.sdaiINSTANCE, i); }
            }
        public time_measure_with_unit time_to_final 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_to_final", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_to_final", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_treatment_thermal_timed"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tetrahedron
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tetrahedron : faceted_primitive
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tetrahedron
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tetrahedron(SdaiInstance instance) : base(instance) { }
        public tetrahedron() : base(0) { }

        public static implicit operator tetrahedron(SdaiInstance instance) => new tetrahedron(instance);

        /// <summary>
        /// Create new instace of tetrahedron and returns object of this class to interact with
        /// </summary>
        public static new tetrahedron Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tetrahedron"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "tetrahedron"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tetrahedron_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tetrahedron_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tetrahedron_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tetrahedron_volume(SdaiInstance instance) : base(instance) { }
        public tetrahedron_volume() : base(0) { }

        public static implicit operator tetrahedron_volume(SdaiInstance instance) => new tetrahedron_volume(instance);

        /// <summary>
        /// Create new instace of tetrahedron_volume and returns object of this class to interact with
        /// </summary>
        public static new tetrahedron_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tetrahedron_volume"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point point_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_1", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "point_1", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point point_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_2", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "point_2", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point point_3 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_3", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "point_3", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point point_4 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_4", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "point_4", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "tetrahedron_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_measure_with_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_measure_with_unit(SdaiInstance instance) => new thermodynamic_temperature_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "thermodynamic_temperature_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_unit(SdaiInstance instance) => new thermodynamic_temperature_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "thermodynamic_temperature_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public time_measure_with_unit() : base(0) { }

        public static implicit operator time_measure_with_unit(SdaiInstance instance) => new time_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of time_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new time_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "time_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_unit(SdaiInstance instance) : base(instance) { }
        public time_unit() : base(0) { }

        public static implicit operator time_unit(SdaiInstance instance) => new time_unit(instance);

        /// <summary>
        /// Create new instace of time_unit and returns object of this class to interact with
        /// </summary>
        public static new time_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "time_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of toroidal_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class toroidal_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of toroidal_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public toroidal_volume(SdaiInstance instance) : base(instance) { }
        public toroidal_volume() : base(0) { }

        public static implicit operator toroidal_volume(SdaiInstance instance) => new toroidal_volume(instance);

        /// <summary>
        /// Create new instace of toroidal_volume and returns object of this class to interact with
        /// </summary>
        public static new toroidal_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "toroidal_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? major_radius
            {
            get { return get_double("major_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? minor_radius
            {
            get { return get_double("minor_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "toroidal_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of torus
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class torus : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of torus
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public torus(SdaiInstance instance) : base(instance) { }
        public torus() : base(0) { }

        public static implicit operator torus(SdaiInstance instance) => new torus(instance);

        /// <summary>
        /// Create new instace of torus and returns object of this class to interact with
        /// </summary>
        public static new torus Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "torus"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? major_radius
            {
            get { return get_double("major_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? minor_radius
            {
            get { return get_double("minor_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "torus"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of trimmed_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class trimmed_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of trimmed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public trimmed_curve(SdaiInstance instance) : base(instance) { }
        public trimmed_curve() : base(0) { }

        public static implicit operator trimmed_curve(SdaiInstance instance) => new trimmed_curve(instance);

        /// <summary>
        /// Create new instace of trimmed_curve and returns object of this class to interact with
        /// </summary>
        public static new trimmed_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "trimmed_curve"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_trimming_select trim_1 { get { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_1"); } }
        public void put_trim_1(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        public void put_trim_1_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        public set_of_trimming_select trim_2 { get { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_2"); } }
        public void put_trim_2(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        public void put_trim_2_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        public bool? sense_agreement
            {
            get { return get_bool("sense_agreement", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "sense_agreement", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public trimming_preference? master_representation 
            { 
            get { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.trimming_preference_); return EnumValue<trimming_preference>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<trimming_preference>.FromValue(value.Value, EnumNames.trimming_preference_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "trimmed_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of trimmed_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class trimmed_volume : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of trimmed_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public trimmed_volume(SdaiInstance instance) : base(instance) { }
        public trimmed_volume() : base(0) { }

        public static implicit operator trimmed_volume(SdaiInstance instance) => new trimmed_volume(instance);

        /// <summary>
        /// Create new instace of trimmed_volume and returns object of this class to interact with
        /// </summary>
        public static new trimmed_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "trimmed_volume"); Debug.Assert(inst != 0); return inst; }

        public volume basis_volume 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_volume", ifcengine.sdaiINSTANCE, out inst); return new volume(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_volume", ifcengine.sdaiINSTANCE, i); }
            }
        public double? u1
            {
            get { return get_double("u1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? u2
            {
            get { return get_double("u2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v1
            {
            get { return get_double("v1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v2
            {
            get { return get_double("v2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? w1
            {
            get { return get_double("w1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "w1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? w2
            {
            get { return get_double("w2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "w2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "trimmed_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of truncated_pyramid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class truncated_pyramid : boolean_result
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of truncated_pyramid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public truncated_pyramid(SdaiInstance instance) : base(instance) { }
        public truncated_pyramid() : base(0) { }

        public static implicit operator truncated_pyramid(SdaiInstance instance) => new truncated_pyramid(instance);

        /// <summary>
        /// Create new instace of truncated_pyramid and returns object of this class to interact with
        /// </summary>
        public static new truncated_pyramid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "truncated_pyramid"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "truncated_pyramid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of type_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class type_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of type_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public type_qualifier(SdaiInstance instance) : base(instance) { }
        public type_qualifier() : base(0) { }

        public static implicit operator type_qualifier(SdaiInstance instance) => new type_qualifier(instance);

        /// <summary>
        /// Create new instace of type_qualifier and returns object of this class to interact with
        /// </summary>
        public static new type_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "type_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "type_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public uncertainty_measure_with_unit() : base(0) { }

        public static implicit operator uncertainty_measure_with_unit(SdaiInstance instance) => new uncertainty_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of uncertainty_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_measure_with_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "uncertainty_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_curve(SdaiInstance instance) : base(instance) { }
        public uniform_curve() : base(0) { }

        public static implicit operator uniform_curve(SdaiInstance instance) => new uniform_curve(instance);

        /// <summary>
        /// Create new instace of uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_surface(SdaiInstance instance) : base(instance) { }
        public uniform_surface() : base(0) { }

        public static implicit operator uniform_surface(SdaiInstance instance) => new uniform_surface(instance);

        /// <summary>
        /// Create new instace of uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_volume : b_spline_volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_volume(SdaiInstance instance) : base(instance) { }
        public uniform_volume() : base(0) { }

        public static implicit operator uniform_volume(SdaiInstance instance) => new uniform_volume(instance);

        /// <summary>
        /// Create new instace of uniform_volume and returns object of this class to interact with
        /// </summary>
        public static new uniform_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_volume"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "uniform_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vector : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vector(SdaiInstance instance) : base(instance) { }
        public vector() : base(0) { }

        public static implicit operator vector(SdaiInstance instance) => new vector(instance);

        /// <summary>
        /// Create new instace of vector and returns object of this class to interact with
        /// </summary>
        public static new vector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vector"); Debug.Assert(inst != 0); return inst; }

        public direction orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? magnitude
            {
            get { return get_double("magnitude", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "magnitude", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "vector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of versioned_action_request
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class versioned_action_request : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of versioned_action_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public versioned_action_request(SdaiInstance instance) : base(instance) { }
        public versioned_action_request() : base(0) { }

        public static implicit operator versioned_action_request(SdaiInstance instance) => new versioned_action_request(instance);

        /// <summary>
        /// Create new instace of versioned_action_request and returns object of this class to interact with
        /// </summary>
        public static new versioned_action_request Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "versioned_action_request"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue version
            {
            get { return get_string("version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "version", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "versioned_action_request"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex(SdaiInstance instance) : base(instance) { }
        public vertex() : base(0) { }

        public static implicit operator vertex(SdaiInstance instance) => new vertex(instance);

        /// <summary>
        /// Create new instace of vertex and returns object of this class to interact with
        /// </summary>
        public static new vertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "vertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_loop(SdaiInstance instance) : base(instance) { }
        public vertex_loop() : base(0) { }

        public static implicit operator vertex_loop(SdaiInstance instance) => new vertex_loop(instance);

        /// <summary>
        /// Create new instace of vertex_loop and returns object of this class to interact with
        /// </summary>
        public static new vertex_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_loop"); Debug.Assert(inst != 0); return inst; }

        public vertex loop_vertex 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "vertex_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_point : vertex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_point(SdaiInstance instance) : base(instance) { }
        public vertex_point() : base(0) { }

        public static implicit operator vertex_point(SdaiInstance instance) => new vertex_point(instance);

        /// <summary>
        /// Create new instace of vertex_point and returns object of this class to interact with
        /// </summary>
        public static new vertex_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_point"); Debug.Assert(inst != 0); return inst; }

        public point vertex_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "vertex_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_shell : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_shell(SdaiInstance instance) : base(instance) { }
        public vertex_shell() : base(0) { }

        public static implicit operator vertex_shell(SdaiInstance instance) => new vertex_shell(instance);

        /// <summary>
        /// Create new instace of vertex_shell and returns object of this class to interact with
        /// </summary>
        public static new vertex_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_shell"); Debug.Assert(inst != 0); return inst; }

        public vertex_loop vertex_shell_extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vertex_shell_extent", ifcengine.sdaiINSTANCE, out inst); return new vertex_loop(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "vertex_shell_extent", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "vertex_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public volume_measure_with_unit() : base(0) { }

        public static implicit operator volume_measure_with_unit(SdaiInstance instance) => new volume_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of volume_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "volume_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_unit(SdaiInstance instance) : base(instance) { }
        public volume_unit() : base(0) { }

        public static implicit operator volume_unit(SdaiInstance instance) => new volume_unit(instance);

        /// <summary>
        /// Create new instace of volume_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "volume_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of wedge_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class wedge_volume : volume
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of wedge_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public wedge_volume(SdaiInstance instance) : base(instance) { }
        public wedge_volume() : base(0) { }

        public static implicit operator wedge_volume(SdaiInstance instance) => new wedge_volume(instance);

        /// <summary>
        /// Create new instace of wedge_volume and returns object of this class to interact with
        /// </summary>
        public static new wedge_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "wedge_volume"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ltx
            {
            get { return get_double("ltx", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ltx", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "wedge_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld : structural_frame_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld(SdaiInstance instance) : base(instance) { }
        public weld() : base(0) { }

        public static implicit operator weld(SdaiInstance instance) => new weld(instance);

        /// <summary>
        /// Create new instace of weld and returns object of this class to interact with
        /// </summary>
        public static new weld Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld"); Debug.Assert(inst != 0); return inst; }

        public TextValue electrode_type
            {
            get { return get_string("electrode_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "electrode_type", ifcengine.sdaiSTRING, value); }
            }
        public welding_type? weld_type 
            { 
            get { var str = get_string("weld_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_); return EnumValue<welding_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type>.FromValue(value.Value, EnumNames.welding_type_); ifcengine.sdaiPutAttrBN(m_instance, "weld_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_arc
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_arc : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_arc
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_arc(SdaiInstance instance) : base(instance) { }
        public weld_arc() : base(0) { }

        public static implicit operator weld_arc(SdaiInstance instance) => new weld_arc(instance);

        /// <summary>
        /// Create new instace of weld_arc and returns object of this class to interact with
        /// </summary>
        public static new weld_arc Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_arc"); Debug.Assert(inst != 0); return inst; }

        public welding_type_arc? weld_arc_type 
            { 
            get { var str = get_string("weld_arc_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_arc_); return EnumValue<welding_type_arc>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_arc>.FromValue(value.Value, EnumNames.welding_type_arc_); ifcengine.sdaiPutAttrBN(m_instance, "weld_arc_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_arc"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_beam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_beam : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_beam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_beam(SdaiInstance instance) : base(instance) { }
        public weld_beam() : base(0) { }

        public static implicit operator weld_beam(SdaiInstance instance) => new weld_beam(instance);

        /// <summary>
        /// Create new instace of weld_beam and returns object of this class to interact with
        /// </summary>
        public static new weld_beam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_beam"); Debug.Assert(inst != 0); return inst; }

        public welding_type_beam? weld_beam_type 
            { 
            get { var str = get_string("weld_beam_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_beam_); return EnumValue<welding_type_beam>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_beam>.FromValue(value.Value, EnumNames.welding_type_beam_); ifcengine.sdaiPutAttrBN(m_instance, "weld_beam_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_beam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_gas
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_gas : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_gas
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_gas(SdaiInstance instance) : base(instance) { }
        public weld_gas() : base(0) { }

        public static implicit operator weld_gas(SdaiInstance instance) => new weld_gas(instance);

        /// <summary>
        /// Create new instace of weld_gas and returns object of this class to interact with
        /// </summary>
        public static new weld_gas Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_gas"); Debug.Assert(inst != 0); return inst; }

        public welding_type_gas? weld_gas_type 
            { 
            get { var str = get_string("weld_gas_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_gas_); return EnumValue<welding_type_gas>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_gas>.FromValue(value.Value, EnumNames.welding_type_gas_); ifcengine.sdaiPutAttrBN(m_instance, "weld_gas_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_gas"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism : structural_frame_product
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism(SdaiInstance instance) : base(instance) { }
        public weld_mechanism() : base(0) { }

        public static implicit operator weld_mechanism(SdaiInstance instance) => new weld_mechanism(instance);

        /// <summary>
        /// Create new instace of weld_mechanism and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism"); Debug.Assert(inst != 0); return inst; }

        public weld_type? weld_mechanism_type 
            { 
            get { var str = get_string("weld_mechanism_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_type_); return EnumValue<weld_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_type>.FromValue(value.Value, EnumNames.weld_type_); ifcengine.sdaiPutAttrBN(m_instance, "weld_mechanism_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_penetration? penetration 
            { 
            get { var str = get_string("penetration", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_penetration_); return EnumValue<weld_penetration>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_penetration>.FromValue(value.Value, EnumNames.weld_penetration_); ifcengine.sdaiPutAttrBN(m_instance, "penetration", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit weld_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_dimension", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue weld_dimension_name
            {
            get { return get_string("weld_dimension_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "weld_dimension_name", ifcengine.sdaiSTRING, value); }
            }
        public pressure_measure_with_unit weld_design_strength 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_design_strength", ifcengine.sdaiINSTANCE, out inst); return new pressure_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_design_strength", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_complex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_complex : weld_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_complex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_complex(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_complex() : base(0) { }

        public static implicit operator weld_mechanism_complex(SdaiInstance instance) => new weld_mechanism_complex(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_complex and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_complex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_complex"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_with_units weld_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "weld_shape", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_with_units(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "weld_shape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_complex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_fillet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_fillet : weld_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_fillet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_fillet(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_fillet() : base(0) { }

        public static implicit operator weld_mechanism_fillet(SdaiInstance instance) => new weld_mechanism_fillet(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_fillet and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_fillet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_fillet"); Debug.Assert(inst != 0); return inst; }

        public weld_sidedness? sidedness 
            { 
            get { var str = get_string("sidedness", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_sidedness_); return EnumValue<weld_sidedness>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_sidedness>.FromValue(value.Value, EnumNames.weld_sidedness_); ifcengine.sdaiPutAttrBN(m_instance, "sidedness", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_surface_shape? surface_shape 
            { 
            get { var str = get_string("surface_shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_surface_shape_); return EnumValue<weld_surface_shape>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_surface_shape>.FromValue(value.Value, EnumNames.weld_surface_shape_); ifcengine.sdaiPutAttrBN(m_instance, "surface_shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_configuration? joint_configuration 
            { 
            get { var str = get_string("joint_configuration", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_configuration_); return EnumValue<weld_configuration>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_configuration>.FromValue(value.Value, EnumNames.weld_configuration_); ifcengine.sdaiPutAttrBN(m_instance, "joint_configuration", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit leg_length_y 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "leg_length_y", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "leg_length_y", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit leg_length_z 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "leg_length_z", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "leg_length_z", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_fillet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_fillet_continuous
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_fillet_continuous : weld_mechanism_fillet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_fillet_continuous
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_fillet_continuous(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_fillet_continuous() : base(0) { }

        public static implicit operator weld_mechanism_fillet_continuous(SdaiInstance instance) => new weld_mechanism_fillet_continuous(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_fillet_continuous and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_fillet_continuous Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_fillet_continuous"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "weld_mechanism_fillet_continuous"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_fillet_intermittent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_fillet_intermittent : weld_mechanism_fillet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_fillet_intermittent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_fillet_intermittent(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_fillet_intermittent() : base(0) { }

        public static implicit operator weld_mechanism_fillet_intermittent(SdaiInstance instance) => new weld_mechanism_fillet_intermittent(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_fillet_intermittent and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_fillet_intermittent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_fillet_intermittent"); Debug.Assert(inst != 0); return inst; }

        public weld_intermittent_rule? end_rules 
            { 
            get { var str = get_string("end_rules", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_intermittent_rule_); return EnumValue<weld_intermittent_rule>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_intermittent_rule>.FromValue(value.Value, EnumNames.weld_intermittent_rule_); ifcengine.sdaiPutAttrBN(m_instance, "end_rules", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_intermittent_rule? cutout_rules 
            { 
            get { var str = get_string("cutout_rules", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_intermittent_rule_); return EnumValue<weld_intermittent_rule>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_intermittent_rule>.FromValue(value.Value, EnumNames.weld_intermittent_rule_); ifcengine.sdaiPutAttrBN(m_instance, "cutout_rules", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_intermittent_rule? penetration_rules 
            { 
            get { var str = get_string("penetration_rules", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_intermittent_rule_); return EnumValue<weld_intermittent_rule>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_intermittent_rule>.FromValue(value.Value, EnumNames.weld_intermittent_rule_); ifcengine.sdaiPutAttrBN(m_instance, "penetration_rules", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit fillet_weld_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fillet_weld_length", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fillet_weld_length", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit fillet_weld_spacing 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fillet_weld_spacing", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fillet_weld_spacing", ifcengine.sdaiINSTANCE, i); }
            }
        public weld_alignment? fillet_alignment 
            { 
            get { var str = get_string("fillet_alignment", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_alignment_); return EnumValue<weld_alignment>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_alignment>.FromValue(value.Value, EnumNames.weld_alignment_); ifcengine.sdaiPutAttrBN(m_instance, "fillet_alignment", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_fillet_intermittent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_groove
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_groove : weld_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_groove
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_groove(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_groove() : base(0) { }

        public static implicit operator weld_mechanism_groove(SdaiInstance instance) => new weld_mechanism_groove(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_groove and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_groove Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_groove"); Debug.Assert(inst != 0); return inst; }

        public weld_sidedness? sidedness 
            { 
            get { var str = get_string("sidedness", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_sidedness_); return EnumValue<weld_sidedness>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_sidedness>.FromValue(value.Value, EnumNames.weld_sidedness_); ifcengine.sdaiPutAttrBN(m_instance, "sidedness", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_backing_type? backing_type 
            { 
            get { var str = get_string("backing_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_backing_type_); return EnumValue<weld_backing_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_backing_type>.FromValue(value.Value, EnumNames.weld_backing_type_); ifcengine.sdaiPutAttrBN(m_instance, "backing_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? weld_joint_spacer
            {
            get { return get_bool("weld_joint_spacer", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "weld_joint_spacer", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public weld_surface_shape? surface_shape 
            { 
            get { var str = get_string("surface_shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_surface_shape_); return EnumValue<weld_surface_shape>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_surface_shape>.FromValue(value.Value, EnumNames.weld_surface_shape_); ifcengine.sdaiPutAttrBN(m_instance, "surface_shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public weld_configuration? joint_configuration 
            { 
            get { var str = get_string("joint_configuration", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_configuration_); return EnumValue<weld_configuration>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_configuration>.FromValue(value.Value, EnumNames.weld_configuration_); ifcengine.sdaiPutAttrBN(m_instance, "joint_configuration", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public positive_length_measure_with_unit root_gap 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "root_gap", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "root_gap", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit root_face 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "root_face", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "root_face", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_groove"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_groove_beveled
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_groove_beveled : weld_mechanism_groove
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_groove_beveled
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_groove_beveled(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_groove_beveled() : base(0) { }

        public static implicit operator weld_mechanism_groove_beveled(SdaiInstance instance) => new weld_mechanism_groove_beveled(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_groove_beveled and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_groove_beveled Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_groove_beveled"); Debug.Assert(inst != 0); return inst; }

        public weld_shape_bevel? endcut_shape 
            { 
            get { var str = get_string("endcut_shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_shape_bevel_); return EnumValue<weld_shape_bevel>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_shape_bevel>.FromValue(value.Value, EnumNames.weld_shape_bevel_); ifcengine.sdaiPutAttrBN(m_instance, "endcut_shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public plane_angle_measure_with_unit groove_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "groove_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "groove_angle", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit groove_depth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "groove_depth", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "groove_depth", ifcengine.sdaiINSTANCE, i); }
            }
        public positive_length_measure_with_unit groove_radius 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "groove_radius", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "groove_radius", ifcengine.sdaiINSTANCE, i); }
            }
        public weld_taper_type? taper 
            { 
            get { var str = get_string("taper", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_taper_type_); return EnumValue<weld_taper_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_taper_type>.FromValue(value.Value, EnumNames.weld_taper_type_); ifcengine.sdaiPutAttrBN(m_instance, "taper", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public plane_angle_measure_with_unit taper_angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "taper_angle", ifcengine.sdaiINSTANCE, out inst); return new plane_angle_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "taper_angle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_groove_beveled"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_groove_butt
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_groove_butt : weld_mechanism_groove
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_groove_butt
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_groove_butt(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_groove_butt() : base(0) { }

        public static implicit operator weld_mechanism_groove_butt(SdaiInstance instance) => new weld_mechanism_groove_butt(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_groove_butt and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_groove_butt Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_groove_butt"); Debug.Assert(inst != 0); return inst; }

        public weld_shape_butt? face_shape 
            { 
            get { var str = get_string("face_shape", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_shape_butt_); return EnumValue<weld_shape_butt>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_shape_butt>.FromValue(value.Value, EnumNames.weld_shape_butt_); ifcengine.sdaiPutAttrBN(m_instance, "face_shape", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_groove_butt"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_prismatic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_prismatic : weld_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_prismatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_prismatic(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_prismatic() : base(0) { }

        public static implicit operator weld_mechanism_prismatic(SdaiInstance instance) => new weld_mechanism_prismatic(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_prismatic and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_prismatic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_prismatic"); Debug.Assert(inst != 0); return inst; }

        public list_of_section_profile cross_sections { get { return (new list_of_section_profileSerializer()).FromAttr(m_instance, "cross_sections"); } }
        public void put_cross_sections(IEnumerable<section_profile> lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public void put_cross_sections_untyped(IEnumerable lst) { (new list_of_section_profileSerializer()).ToSdaiAggr(lst, m_instance, "cross_sections"); }
        public list_of_point_on_curve points_defining_weld_path { get { return (new list_of_point_on_curveSerializer()).FromAttr(m_instance, "points_defining_weld_path"); } }
        public void put_points_defining_weld_path(IEnumerable<point_on_curve> lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_weld_path"); }
        public void put_points_defining_weld_path_untyped(IEnumerable lst) { (new list_of_point_on_curveSerializer()).ToSdaiAggr(lst, m_instance, "points_defining_weld_path"); }
        public list_of_orientation_select section_orientations { get { return (new list_of_orientation_selectSerializer()).FromAttr(m_instance, "section_orientations"); } }
        public void put_section_orientations(IEnumerable<orientation_select> lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "section_orientations"); }
        public void put_section_orientations_untyped(IEnumerable lst) { (new list_of_orientation_selectSerializer()).ToSdaiAggr(lst, m_instance, "section_orientations"); }
        public weld_configuration? joint_configuration 
            { 
            get { var str = get_string("joint_configuration", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_configuration_); return EnumValue<weld_configuration>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_configuration>.FromValue(value.Value, EnumNames.weld_configuration_); ifcengine.sdaiPutAttrBN(m_instance, "joint_configuration", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? number_of_sections { get { return get_IntValue("number_of_sections", ifcengine.sdaiINTEGER); } }
        public curve curve_defining_weld { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_defining_weld", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } }
        public set_of_joint_system_welded joints { get { return (new set_of_joint_system_weldedSerializer()).FromAttr(m_instance, "joints"); } }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_prismatic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_mechanism_spot_seam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_mechanism_spot_seam : weld_mechanism
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_mechanism_spot_seam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_mechanism_spot_seam(SdaiInstance instance) : base(instance) { }
        public weld_mechanism_spot_seam() : base(0) { }

        public static implicit operator weld_mechanism_spot_seam(SdaiInstance instance) => new weld_mechanism_spot_seam(instance);

        /// <summary>
        /// Create new instace of weld_mechanism_spot_seam and returns object of this class to interact with
        /// </summary>
        public static new weld_mechanism_spot_seam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_mechanism_spot_seam"); Debug.Assert(inst != 0); return inst; }

        public weld_configuration? joint_configuration 
            { 
            get { var str = get_string("joint_configuration", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.weld_configuration_); return EnumValue<weld_configuration>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<weld_configuration>.FromValue(value.Value, EnumNames.weld_configuration_); ifcengine.sdaiPutAttrBN(m_instance, "joint_configuration", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_mechanism_spot_seam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_other
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_other : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_other
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_other(SdaiInstance instance) : base(instance) { }
        public weld_other() : base(0) { }

        public static implicit operator weld_other(SdaiInstance instance) => new weld_other(instance);

        /// <summary>
        /// Create new instace of weld_other and returns object of this class to interact with
        /// </summary>
        public static new weld_other Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_other"); Debug.Assert(inst != 0); return inst; }

        public welding_type_other? weld_other_type 
            { 
            get { var str = get_string("weld_other_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_other_); return EnumValue<welding_type_other>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_other>.FromValue(value.Value, EnumNames.welding_type_other_); ifcengine.sdaiPutAttrBN(m_instance, "weld_other_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_other"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_pressure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_pressure : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_pressure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_pressure(SdaiInstance instance) : base(instance) { }
        public weld_pressure() : base(0) { }

        public static implicit operator weld_pressure(SdaiInstance instance) => new weld_pressure(instance);

        /// <summary>
        /// Create new instace of weld_pressure and returns object of this class to interact with
        /// </summary>
        public static new weld_pressure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_pressure"); Debug.Assert(inst != 0); return inst; }

        public welding_type_pressure? weld_pressure_type 
            { 
            get { var str = get_string("weld_pressure_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_pressure_); return EnumValue<welding_type_pressure>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_pressure>.FromValue(value.Value, EnumNames.welding_type_pressure_); ifcengine.sdaiPutAttrBN(m_instance, "weld_pressure_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_pressure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_resistance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_resistance : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_resistance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_resistance(SdaiInstance instance) : base(instance) { }
        public weld_resistance() : base(0) { }

        public static implicit operator weld_resistance(SdaiInstance instance) => new weld_resistance(instance);

        /// <summary>
        /// Create new instace of weld_resistance and returns object of this class to interact with
        /// </summary>
        public static new weld_resistance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_resistance"); Debug.Assert(inst != 0); return inst; }

        public welding_type_resistance? weld_resistance_type 
            { 
            get { var str = get_string("weld_resistance_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_resistance_); return EnumValue<welding_type_resistance>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_resistance>.FromValue(value.Value, EnumNames.welding_type_resistance_); ifcengine.sdaiPutAttrBN(m_instance, "weld_resistance_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_resistance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of weld_stud
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class weld_stud : weld
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of weld_stud
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public weld_stud(SdaiInstance instance) : base(instance) { }
        public weld_stud() : base(0) { }

        public static implicit operator weld_stud(SdaiInstance instance) => new weld_stud(instance);

        /// <summary>
        /// Create new instace of weld_stud and returns object of this class to interact with
        /// </summary>
        public static new weld_stud Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "weld_stud"); Debug.Assert(inst != 0); return inst; }

        public welding_type_stud? weld_stud_type 
            { 
            get { var str = get_string("weld_stud_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.welding_type_stud_); return EnumValue<welding_type_stud>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<welding_type_stud>.FromValue(value.Value, EnumNames.welding_type_stud_); ifcengine.sdaiPutAttrBN(m_instance, "weld_stud_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "weld_stud"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of wire_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class wire_shell : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of wire_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public wire_shell(SdaiInstance instance) : base(instance) { }
        public wire_shell() : base(0) { }

        public static implicit operator wire_shell(SdaiInstance instance) => new wire_shell(instance);

        /// <summary>
        /// Create new instace of wire_shell and returns object of this class to interact with
        /// </summary>
        public static new wire_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "wire_shell"); Debug.Assert(inst != 0); return inst; }

        public set_of_loop wire_shell_extent { get { return (new set_of_loopSerializer()).FromAttr(m_instance, "wire_shell_extent"); } }
        public void put_wire_shell_extent(IEnumerable<loop> lst) { (new set_of_loopSerializer()).ToSdaiAggr(lst, m_instance, "wire_shell_extent"); }
        public void put_wire_shell_extent_untyped(IEnumerable lst) { (new set_of_loopSerializer()).ToSdaiAggr(lst, m_instance, "wire_shell_extent"); }

        protected override TextValue WrapperEntityName() { return "wire_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone(SdaiInstance instance) : base(instance) { }
        public zone() : base(0) { }

        public static implicit operator zone(SdaiInstance instance) => new zone(instance);

        public TextValue zone_name
            {
            get { return get_string("zone_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "zone_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue zone_description
            {
            get { return get_string("zone_description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "zone_description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "zone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_bounded
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_bounded : zone
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_bounded
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_bounded(SdaiInstance instance) : base(instance) { }
        public zone_bounded() : base(0) { }

        public static implicit operator zone_bounded(SdaiInstance instance) => new zone_bounded(instance);

        /// <summary>
        /// Create new instace of zone_bounded and returns object of this class to interact with
        /// </summary>
        public static new zone_bounded Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_bounded"); Debug.Assert(inst != 0); return inst; }

        public set_of_gridline bounding_gridlines { get { return (new set_of_gridlineSerializer()).FromAttr(m_instance, "bounding_gridlines"); } }
        public void put_bounding_gridlines(IEnumerable<gridline> lst) { (new set_of_gridlineSerializer()).ToSdaiAggr(lst, m_instance, "bounding_gridlines"); }
        public void put_bounding_gridlines_untyped(IEnumerable lst) { (new set_of_gridlineSerializer()).ToSdaiAggr(lst, m_instance, "bounding_gridlines"); }
        public set_of_grid_level bounding_levels { get { return (new set_of_grid_levelSerializer()).FromAttr(m_instance, "bounding_levels"); } }
        public void put_bounding_levels(IEnumerable<grid_level> lst) { (new set_of_grid_levelSerializer()).ToSdaiAggr(lst, m_instance, "bounding_levels"); }
        public void put_bounding_levels_untyped(IEnumerable lst) { (new set_of_grid_levelSerializer()).ToSdaiAggr(lst, m_instance, "bounding_levels"); }
        public grid bounding_grid { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bounding_grid", ifcengine.sdaiINSTANCE, out inst); return new grid(inst); } }

        protected override TextValue WrapperEntityName() { return "zone_bounded"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_building
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_building : zone
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_building
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_building(SdaiInstance instance) : base(instance) { }
        public zone_of_building() : base(0) { }

        public static implicit operator zone_of_building(SdaiInstance instance) => new zone_of_building(instance);

        /// <summary>
        /// Create new instace of zone_of_building and returns object of this class to interact with
        /// </summary>
        public static new zone_of_building Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_building"); Debug.Assert(inst != 0); return inst; }

        public building zone_for_building 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone_for_building", ifcengine.sdaiINSTANCE, out inst); return new building(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone_for_building", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "zone_of_building"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_building_storey
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_building_storey : zone_of_building
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_building_storey
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_building_storey(SdaiInstance instance) : base(instance) { }
        public zone_of_building_storey() : base(0) { }

        public static implicit operator zone_of_building_storey(SdaiInstance instance) => new zone_of_building_storey(instance);

        /// <summary>
        /// Create new instace of zone_of_building_storey and returns object of this class to interact with
        /// </summary>
        public static new zone_of_building_storey Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_building_storey"); Debug.Assert(inst != 0); return inst; }

        public positive_length_measure_with_unit storey_height 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "storey_height", ifcengine.sdaiINSTANCE, out inst); return new positive_length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "storey_height", ifcengine.sdaiINSTANCE, i); }
            }
        public length_measure_with_unit storey_level 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "storey_level", ifcengine.sdaiINSTANCE, out inst); return new length_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "storey_level", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue datum_name
            {
            get { return get_string("datum_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "datum_name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "zone_of_building_storey"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_project
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_project : zone
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_project(SdaiInstance instance) : base(instance) { }
        public zone_of_project() : base(0) { }

        public static implicit operator zone_of_project(SdaiInstance instance) => new zone_of_project(instance);

        /// <summary>
        /// Create new instace of zone_of_project and returns object of this class to interact with
        /// </summary>
        public static new zone_of_project Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_project"); Debug.Assert(inst != 0); return inst; }

        public project zone_for_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone_for_project", ifcengine.sdaiINSTANCE, out inst); return new project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone_for_project", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "zone_of_project"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_site
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_site : zone
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_site
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_site(SdaiInstance instance) : base(instance) { }
        public zone_of_site() : base(0) { }

        public static implicit operator zone_of_site(SdaiInstance instance) => new zone_of_site(instance);

        /// <summary>
        /// Create new instace of zone_of_site and returns object of this class to interact with
        /// </summary>
        public static new zone_of_site Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_site"); Debug.Assert(inst != 0); return inst; }

        public site zone_for_site 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone_for_site", ifcengine.sdaiINSTANCE, out inst); return new site(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone_for_site", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "zone_of_site"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_structure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_structure : zone
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_structure(SdaiInstance instance) : base(instance) { }
        public zone_of_structure() : base(0) { }

        public static implicit operator zone_of_structure(SdaiInstance instance) => new zone_of_structure(instance);

        /// <summary>
        /// Create new instace of zone_of_structure and returns object of this class to interact with
        /// </summary>
        public static new zone_of_structure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_structure"); Debug.Assert(inst != 0); return inst; }

        public structure zone_for_structure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone_for_structure", ifcengine.sdaiINSTANCE, out inst); return new structure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone_for_structure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "zone_of_structure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_structure_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_structure_sequence : zone_of_structure
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_structure_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_structure_sequence(SdaiInstance instance) : base(instance) { }
        public zone_of_structure_sequence() : base(0) { }

        public static implicit operator zone_of_structure_sequence(SdaiInstance instance) => new zone_of_structure_sequence(instance);

        /// <summary>
        /// Create new instace of zone_of_structure_sequence and returns object of this class to interact with
        /// </summary>
        public static new zone_of_structure_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_structure_sequence"); Debug.Assert(inst != 0); return inst; }

        public zone_of_structure parent_zone 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_zone", ifcengine.sdaiINSTANCE, out inst); return new zone_of_structure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_zone", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_zone_of_structure_sequence_lot lots { get { return (new set_of_zone_of_structure_sequence_lotSerializer()).FromAttr(m_instance, "lots"); } }
        public set_of_located_assembly assemblies { get { return (new set_of_located_assemblySerializer()).FromAttr(m_instance, "assemblies"); } }

        protected override TextValue WrapperEntityName() { return "zone_of_structure_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_of_structure_sequence_lot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_of_structure_sequence_lot : zone_of_structure_sequence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_of_structure_sequence_lot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_of_structure_sequence_lot(SdaiInstance instance) : base(instance) { }
        public zone_of_structure_sequence_lot() : base(0) { }

        public static implicit operator zone_of_structure_sequence_lot(SdaiInstance instance) => new zone_of_structure_sequence_lot(instance);

        /// <summary>
        /// Create new instace of zone_of_structure_sequence_lot and returns object of this class to interact with
        /// </summary>
        public static new zone_of_structure_sequence_lot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_of_structure_sequence_lot"); Debug.Assert(inst != 0); return inst; }

        public zone_of_structure parent_sequence { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_sequence", ifcengine.sdaiINSTANCE, out inst); return new zone_of_structure(inst); } }

        protected override TextValue WrapperEntityName() { return "zone_of_structure_sequence_lot"; }
    };

}

