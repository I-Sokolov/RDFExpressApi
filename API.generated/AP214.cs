//
// Early-binding C# API for SDAI (CE wrappers)
//

#pragma warning disable CS1587
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using RDF;

#if _WIN64
        using int_t = System.Int64;
#else
		using int_t = System.Int32;
#endif

namespace AP214
    {
    using SdaiModel = int_t;
    using SdaiInstance = int_t;
    using SdaiAggr = int_t;

    using IntValue = int_t;
    using TextValue = String;

    /// <summary>
    /// 
    /// </summary>
    class EnumValue<TEnum> where TEnum : struct, Enum
        {
        static public TEnum? FromIndex(int index)
            {
            var values = System.Enum.GetValues<TEnum>();
            if (index >= 0 && index < values.Length)
                {
                return values[index];
                }
            else
                {
                return null;
                }
            }
        }

    class EnumIndex
        {
        static public int FromString(TextValue value, TextValue[] allStrings)
            {
            for (int i = 0; i < allStrings.Length; i++)
                {
                if (value == allStrings[i])
                    return i;
                }
            return -1;
            }
        }

    class EnumString<TEnum> where TEnum : struct, Enum, IComparable
        {
        public static TextValue FromValue(TEnum value, TextValue[] allStrings)
            {
            var values = System.Enum.GetValues<TEnum>();

            for (int i = 0; i < values.Length; i++)
                {
                if (values[i].Equals(value))
                    {
                    if (i < allStrings.Length)
                        {
                        return allStrings[i];
                        }
                    else
                        {
                        Debug.Assert(false);
                        return null;
                        }
                    }
                }

            Debug.Assert(false);
            return null;
            }
        }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    public class Select
        {
        protected SdaiInstance m_instance;
        protected TextValue m_attrName;

        private IntValue m_adb;
        private Select m_outerSelect;

        public IntValue ADB()
            {
            if (m_outerSelect != null)
                {
                return m_outerSelect.ADB();
                }

            if (m_adb == 0 && m_instance != 0 && m_attrName != null)
                {
                if (0 == ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, out m_adb))
                    {
                    ifcengine.sdaiDeleteADB(m_adb);
                    m_adb = 0;
                    }
                }

            return m_adb;
            }

        protected Select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Init(instance, attrName, adb);
            }

        protected Select(Select outer)
            {
            m_instance = 0;
            m_attrName = null;
            m_adb = 0;
            m_outerSelect = outer;
            if (m_outerSelect != null)
                {
                m_instance = m_outerSelect.m_instance;
                }
            }

        public void Init(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Debug.Assert(instance != 0);
            m_instance = instance;
            m_attrName = attrName;
            m_adb = adb;
            m_outerSelect = null;
            }

        protected void SetADB(IntValue adb)
            {
            if (m_outerSelect != null)
                {
                m_outerSelect.SetADB(adb);
                }
            else
                {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance != 0 && m_attrName != null)
                    {
                    ifcengine.sdaiPutAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, m_adb);
                    }
                }
            }

        private bool CheckADBType(IntValue adb, TextValue typeName)
            {
            if (adb == 0)
                {
                return false;
                }

            if (typeName == null)
                {
                return true; //any suitable
                }

            var pPath = ifcengine.sdaiGetADBTypePath(adb, 0);
            var path = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(pPath);

            return path != null && path == typeName;
            }

        public TextValue TypePath
            { get
                {
                var adb = ADB();
                if (adb == 0)
                    {
                    return null;
                    }
                else
                    {
                    return ifcengine.sdaiGetADBTypePathx(adb, 0);
                    }
                }
            }

        //
        //
        protected IntValue? get_IntValue(TextValue typeName, IntValue sdaiType)
            {
            IntValue? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                IntValue val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        protected void put_IntValue(TextValue typeName, IntValue sdaiType, IntValue? value)
            {
            if (value.HasValue)
                {
                IntValue v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected double? get_double(TextValue typeName, IntValue sdaiType)
            {
            double? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                double val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }
        protected bool? get_bool(TextValue typeName, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            bool? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                bool val = false;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void put_double(TextValue typeName, IntValue sdaiType, double? value)
            {
            if (value.HasValue)
                {
                double v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }
        protected void put_bool(TextValue typeName, IntValue sdaiType, bool? value)
            {
            if (value.HasValue)
                {
                bool v = value.Value;
                Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected TextValue getTextValue(TextValue typeName, IntValue sdaiType)
            {
            TextValue ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string val;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(sdaiType, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected int getEnumerationIndex(TextValue typeName, TextValue[] rEnumValues)
            {
            int ret = -1;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string value;
                if (0 != ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiENUM, out value))
                    {
                    ret = EnumIndex.FromString(value, rEnumValues);
                    }
                }
            return ret;
            }

        //
        protected void putEnumerationValue(TextValue typeName, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiENUM, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected SdaiInstance getEntityInstance(TextValue typeName)
            {
            SdaiInstance ret = 0;
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (typeName == null || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        ret = inst;
                        }
                    }
                }
            return ret;
            }

        //
        protected void putEntityInstance(TextValue typeName, SdaiInstance inst)
            {
            if (inst == 0 || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                {
                var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiINSTANCE, inst);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected SdaiAggr getAggrValue(TextValue typeName)
            {
            SdaiAggr ret = 0;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiAGGR, out ret) == 0)
                    {
                    ret = 0;
                    }
                }
            return ret;
            }

        //
        protected void putAggrValue(TextValue typeName, SdaiAggr value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiAGGR, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected bool IsADBType(TextValue typeName)
            {
            var adb = ADB();
            return CheckADBType(adb, typeName);
            }

        protected bool IsADBEntity(TextValue typeName)
            {
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        return true;
                        }
                    }
                }
            return false;
            }
        };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 
    interface IAggrSerializerObj
        {
        public abstract IList FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr);
        public abstract SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName);

        }

    abstract class AggrSerializer<TElem, TList> : IAggrSerializerObj
        where TList : List<TElem>, new()
        {
        //
        public TList FromAttr(SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = 0;
            ifcengine.sdaiGetAttrBN(instance, attrName, ifcengine.sdaiAGGR, out aggr);
            return FromSdaiAggr(instance, aggr);
            }

        //
        public TList FromSdaiAggr(SdaiInstance inst, SdaiAggr aggr)
            {
            var ret = new TList();
            IntValue cnt = ifcengine.sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++)
                {
                TElem elem;
                if (GetAggrElement(inst, aggr, i, out elem))
                    {
                    ret.Add(elem);
                    }
                }
            return ret;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable<TElem> lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, v);
                }
            return aggr;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, (TElem)v);
                }
            return aggr;
            }

        protected abstract bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem);
        protected abstract void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem);

        IList IAggrSerializerObj.FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr)
            {
            return FromSdaiAggr(inst, aggr);
            }
        }

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_IntValue<TElem, TList> : AggrSerializer<IntValue, TList>
        where TList : List<IntValue>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out IntValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINTEGER, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINTEGER, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_double<TElem, TList> : AggrSerializer<double, TList>
        where TList : List<double>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out double elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiREAL, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, double elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiREAL, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_bool<TElem, TList> : AggrSerializer<bool, TList>
        where TList : List<bool>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out bool elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiBOOLEAN, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, bool elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiBOOLEAN, ref elem);
            }
        };

    class AggrSerializerText<TElem, TList> : AggrSerializer<TextValue, TList>
        where TList : List<TextValue>, new()
        {
        private IntValue m_sdaiType;

        public AggrSerializerText(IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiSTRING || sdaiType == ifcengine.sdaiBINARY);
            m_sdaiType = sdaiType;
            }
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TextValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out elem);
            return (elem != null);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TextValue elem)
            {
            ifcengine.sdaiAppend(aggr, m_sdaiType, elem);
            }
        };

    class AggrSerializerInstance<TElem, TList> : AggrSerializer<TElem, TList>
        where TElem : Entity, new()
        where TList : List<TElem>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem)
            {
            SdaiInstance val = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINSTANCE, out val);
            elem = new TElem();
            elem.Set(val);
            return (elem != 0);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem)
            {
            SdaiInstance v = elem;
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINSTANCE, v);
            }
        };

    class AggrSerializerEnum<TEnum, TList> : AggrSerializer<TEnum, TList>
        where TEnum : struct, Enum
        where TList : List<TEnum>, new()
        {
        private IntValue m_sdaiType;
        private TextValue[] m_EnumValues;

        public AggrSerializerEnum(TextValue[] enumValues, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiENUM || sdaiType == ifcengine.sdaiLOGICAL);
            m_EnumValues = enumValues;
            m_sdaiType = sdaiType;
            }

        //
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TEnum elem)
            {
            string value;
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out value);
            var ind = EnumIndex.FromString(value, m_EnumValues);
            var val = EnumValue<TEnum>.FromIndex(ind);
            if (val.HasValue)
                {
                elem = val.Value;
                return true;
                }
            else
                {
                elem = EnumValue<TEnum>.FromIndex(0).Value;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TEnum elem)
            {
            var value = EnumString<TEnum>.FromValue(elem, m_EnumValues);
            ifcengine.sdaiAppend(aggr, m_sdaiType, value);
            }
        }
    /// <summary>
    /// 
    /// </summary>
    class AggrSerializerAggr<TNestedAggr, TNestedSerializer, TList> : AggrSerializer<TNestedAggr, TList>
                    where TNestedAggr : IEnumerable
                    where TNestedSerializer : IAggrSerializerObj, new()
                    where TList : List<TNestedAggr>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TNestedAggr elem)
            {
            SdaiAggr nested = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiAGGR, out nested);
            if (nested != 0)
                {
                var nestedSerializer = new TNestedSerializer();
                elem = (TNestedAggr)nestedSerializer.FromSdaiAggrUntyped(inst, nested);
                return true;
                }
            else
                {
                elem = default(TNestedAggr);
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TNestedAggr elem)
            {
            var nestedSerializer = new TNestedSerializer();
            SdaiAggr nested = nestedSerializer.ToSdaiAggr(elem, inst, null);
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiAGGR, nested);
            }
        };

    class AggrSerializerSelect<TSelect, TList> : AggrSerializer<TSelect, TList>
        where TSelect : Select, new()
        where TList : List<TSelect>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TSelect elem)
            {
            IntValue adb = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiADB, out adb);
            if (adb != 0)
                {
                elem = new TSelect();
                elem.Init(inst, null, adb);
                return true;
                }
            else
                {
                elem = null;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TSelect elem)
            {
            var adb = elem.ADB();
            if (adb != 0)
                {
                ifcengine.sdaiAppend((IntValue)aggr, ifcengine.sdaiADB, adb);
                }
            }
        };

    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    public abstract class Entity : IEquatable<Entity>, IComparable, IComparable<Entity>
        {
        public static Entity Create(SdaiModel model) { System.Diagnostics.Debug.Assert(false); return null; }

        //
        public Int64 StepID { get { return m_instance != 0 ? ifcengine.internalGetP21Line(m_instance) : 0; } }

        public bool IsNull { get { return m_instance == 0; } }

        public string EntityName { get
                {
                if (m_instance != 0)
                    {
                    var type = ifcengine.sdaiGetInstanceType(m_instance);
                    if (type != 0)
                        return ifcengine.engiGetEntityName(type);
                    }
                return null;
                } }

        //
        protected SdaiInstance m_instance = 0;

        public Entity(SdaiInstance instance)
            {
            Set(instance);
            }

        public void Set(SdaiInstance instance)
            {
            m_instance = instance;

            if (m_instance != 0)
                {
                if (ifcengine.sdaiIsKindOfBN(m_instance, WrapperEntityName()) == 0)
                    {
                    m_instance = 0;
                    }
                }
            }

        protected abstract TextValue WrapperEntityName();

        /// <summary>
        /// Conversion to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        public static implicit operator SdaiInstance(Entity instance) => instance.m_instance;

        protected TextValue get_string(TextValue attrName, IntValue sdaiType)
            {
            string value;
            if (0 != ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out value))
                {
                return value;
                }
            else
                {
                return null;
                }
            }
        public double? get_double(TextValue attrName, IntValue sdaiType)
            {
            double val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public IntValue? get_IntValue(TextValue attrName, IntValue sdaiType)
            {
            IntValue val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public bool? get_bool(TextValue attrName, IntValue sdaiType)
            {
            bool val = false;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }

        /// <summary>
        /// 
        /// </summary>
        public static bool operator ==(Entity i1, Entity i2) => (Equals(i1, i2));
        public static bool operator !=(Entity i1, Entity i2) => (!(i1 == i2));
        public override bool Equals(Object obj)
            {
            return Equals(obj as Entity);
            }
        public bool Equals(Entity other)
            {
            return (other == null) ? false : (other.m_instance == m_instance);
            }
        public int CompareTo(object obj)
            {
            return CompareTo(obj as Entity);
            }
        public int CompareTo(Entity other)
            {
            return (other == null) ? 1 : m_instance.CompareTo(other.m_instance);
            }
        public override int GetHashCode()
            {
            return m_instance.GetHashCode();
            }
        }


    //
    // Enumerations
    //
    public enum LOGICAL_VALUE { False = 0, True = 1, Unknown = 2 };

    public enum ahead_or_behind
        {
        ahead = 0,
        exact = 1,
        behind = 2,
        };

    public enum angle_relator
        {
        equal = 0,
        large = 1,
        small = 2,
        };

    public enum approximation_method
        {
        chordal_deviation = 0,
        chordal_length = 1,
        };

    public enum b_spline_curve_form
        {
        polyline_form = 0,
        circular_arc = 1,
        elliptic_arc = 2,
        parabolic_arc = 3,
        hyperbolic_arc = 4,
        unspecified = 5,
        };

    public enum b_spline_surface_form
        {
        plane_surf = 0,
        cylindrical_surf = 1,
        conical_surf = 2,
        spherical_surf = 3,
        toroidal_surf = 4,
        surf_of_revolution = 5,
        ruled_surf = 6,
        generalised_cone = 7,
        quadric_surf = 8,
        surf_of_linear_extrusion = 9,
        unspecified = 10,
        };

    public enum boolean_operator
        {
        union_ = 0,
        intersection = 1,
        difference = 2,
        };

    public enum central_or_parallel
        {
        central = 0,
        parallel = 1,
        };

    public enum dimension_extent_usage
        {
        origin = 0,
        target = 1,
        };

    public enum interpolation_type
        {
        undefined = 0,
        synchronous = 1,
        linear = 2,
        };

    public enum knot_type
        {
        uniform_knots = 0,
        quasi_uniform_knots = 1,
        piecewise_bezier_knots = 2,
        unspecified = 3,
        };

    public enum limit_condition
        {
        maximum_material_condition = 0,
        least_material_condition = 1,
        regardless_of_feature_size = 2,
        };

    public enum marker_type
        {
        dot = 0,
        x = 1,
        plus = 2,
        asterisk = 3,
        ring = 4,
        square = 5,
        triangle = 6,
        };

    public enum null_style
        {
        null_ = 0,
        };

    public enum preferred_surface_curve_representation
        {
        curve_3d = 0,
        pcurve_s1 = 1,
        pcurve_s2 = 2,
        };

    public enum product_or_presentation_space
        {
        product_shape_space = 0,
        presentation_area_space = 1,
        };

    public enum shading_curve_method
        {
        constant_colour = 0,
        linear_colour = 1,
        };

    public enum shading_surface_method
        {
        constant_shading = 0,
        colour_shading = 1,
        dot_shading = 2,
        normal_shading = 3,
        };

    public enum si_prefix
        {
        exa = 0,
        peta = 1,
        tera = 2,
        giga = 3,
        mega = 4,
        kilo = 5,
        hecto = 6,
        deca = 7,
        deci = 8,
        centi = 9,
        milli = 10,
        micro = 11,
        nano = 12,
        pico = 13,
        femto = 14,
        atto = 15,
        };

    public enum si_unit_name
        {
        metre = 0,
        gram = 1,
        second = 2,
        ampere = 3,
        kelvin = 4,
        mole = 5,
        candela = 6,
        radian = 7,
        steradian = 8,
        hertz = 9,
        newton = 10,
        pascal = 11,
        joule = 12,
        watt = 13,
        coulomb = 14,
        volt = 15,
        farad = 16,
        ohm = 17,
        siemens = 18,
        weber = 19,
        tesla = 20,
        henry = 21,
        degree_celsius = 22,
        lumen = 23,
        lux = 24,
        becquerel = 25,
        gray = 26,
        sievert = 27,
        };

    public enum source
        {
        made = 0,
        bought = 1,
        not_known = 2,
        };

    public enum surface_side
        {
        positive = 0,
        negative = 1,
        both = 2,
        };

    public enum text_path
        {
        left = 0,
        right = 1,
        up = 2,
        down = 3,
        };

    public enum transition_code
        {
        discontinuous = 0,
        continuous = 1,
        cont_same_gradient = 2,
        cont_same_gradient_same_curvature = 3,
        };

    public enum trimming_preference
        {
        cartesian = 0,
        parameter = 1,
        unspecified = 2,
        };

    public enum unlimited_range
        {
        unlimited = 0,
        };

    public enum ypr_enumeration
        {
        yaw = 0,
        pitch = 1,
        roll = 2,
        };
    //
    class EnumNames
        {
        public static TextValue[] LOGICAL_VALUE_ = { "F", "T", "U" };
        public static TextValue[] ahead_or_behind_ = { "ahead", "exact", "behind" };
        public static TextValue[] angle_relator_ = { "equal", "large", "small" };
        public static TextValue[] approximation_method_ = { "chordal_deviation", "chordal_length" };
        public static TextValue[] b_spline_curve_form_ = { "polyline_form", "circular_arc", "elliptic_arc", "parabolic_arc", "hyperbolic_arc", "unspecified" };
        public static TextValue[] b_spline_surface_form_ = { "plane_surf", "cylindrical_surf", "conical_surf", "spherical_surf", "toroidal_surf", "surf_of_revolution", "ruled_surf", "generalised_cone", "quadric_surf", "surf_of_linear_extrusion", "unspecified" };
        public static TextValue[] boolean_operator_ = { "union", "intersection", "difference" };
        public static TextValue[] central_or_parallel_ = { "central", "parallel" };
        public static TextValue[] dimension_extent_usage_ = { "origin", "target" };
        public static TextValue[] interpolation_type_ = { "undefined", "synchronous", "linear" };
        public static TextValue[] knot_type_ = { "uniform_knots", "quasi_uniform_knots", "piecewise_bezier_knots", "unspecified" };
        public static TextValue[] limit_condition_ = { "maximum_material_condition", "least_material_condition", "regardless_of_feature_size" };
        public static TextValue[] marker_type_ = { "dot", "x", "plus", "asterisk", "ring", "square", "triangle" };
        public static TextValue[] null_style_ = { "null" };
        public static TextValue[] preferred_surface_curve_representation_ = { "curve_3d", "pcurve_s1", "pcurve_s2" };
        public static TextValue[] product_or_presentation_space_ = { "product_shape_space", "presentation_area_space" };
        public static TextValue[] shading_curve_method_ = { "constant_colour", "linear_colour" };
        public static TextValue[] shading_surface_method_ = { "constant_shading", "colour_shading", "dot_shading", "normal_shading" };
        public static TextValue[] si_prefix_ = { "exa", "peta", "tera", "giga", "mega", "kilo", "hecto", "deca", "deci", "centi", "milli", "micro", "nano", "pico", "femto", "atto" };
        public static TextValue[] si_unit_name_ = { "metre", "gram", "second", "ampere", "kelvin", "mole", "candela", "radian", "steradian", "hertz", "newton", "pascal", "joule", "watt", "coulomb", "volt", "farad", "ohm", "siemens", "weber", "tesla", "henry", "degree_celsius", "lumen", "lux", "becquerel", "gray", "sievert" };
        public static TextValue[] source_ = { "made", "bought", "not_known" };
        public static TextValue[] surface_side_ = { "positive", "negative", "both" };
        public static TextValue[] text_path_ = { "left", "right", "up", "down" };
        public static TextValue[] transition_code_ = { "discontinuous", "continuous", "cont_same_gradient", "cont_same_gradient_same_curvature" };
        public static TextValue[] trimming_preference_ = { "cartesian", "parameter", "unspecified" };
        public static TextValue[] unlimited_range_ = { "unlimited" };
        public static TextValue[] ypr_enumeration_ = { "yaw", "pitch", "roll" };
        }


    //
    // Defined types
    // 
    public class list_of_reversible_topology_item : List<reversible_topology_item> { }
    class list_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, list_of_reversible_topology_item> { }
    public class list_representation_item : List<representation_item> { }
    class list_representation_itemSerializer : AggrSerializerInstance<representation_item, list_representation_item> { }
    public class set_of_reversible_topology_item : List<reversible_topology_item> { }
    class set_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, set_of_reversible_topology_item> { }
    public class set_representation_item : List<representation_item> { }
    class set_representation_itemSerializer : AggrSerializerInstance<representation_item, set_representation_item> { }
    public class ypr_rotation : List<double> { }
    class ypr_rotationSerializer : AggrSerializer_double<double, ypr_rotation> { }

    public class action_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class action_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class action_request_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_request_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_request_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_request_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class action_request_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_request_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_request_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_request_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_plane_element : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_plane_element(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_plane_element(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_plane_element() : base(null) { }

        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            set { putEntityInstance("DRAUGHTING_CALLOUT", value); }
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); } 
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            set { putEntityInstance("STYLED_ITEM", value); }
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_plane_element_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_plane_element_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_plane_element_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_plane_element_get() : base(null) { }

        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); }
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_symbol_occurrence_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_symbol_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_symbol_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_symbol_occurrence_item() : base(null) { }

        public bool is_annotation_symbol { get { return IsADBEntity("annotation_symbol"); } }
        public annotation_symbol annotation_symbol
            {
            set { putEntityInstance("ANNOTATION_SYMBOL", value); }
            get { return new annotation_symbol(getEntityInstance("ANNOTATION_SYMBOL")); } 
            }
        public bool is_defined_symbol { get { return IsADBEntity("defined_symbol"); } }
        public defined_symbol defined_symbol
            {
            set { putEntityInstance("DEFINED_SYMBOL", value); }
            get { return new defined_symbol(getEntityInstance("DEFINED_SYMBOL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_symbol_occurrence_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_symbol_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_symbol_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_symbol_occurrence_item_get() : base(null) { }

        public bool is_annotation_symbol { get { return IsADBEntity("annotation_symbol"); } }
        public annotation_symbol annotation_symbol
            {
            get { return new annotation_symbol(getEntityInstance("ANNOTATION_SYMBOL")); }
            }
        public bool is_defined_symbol { get { return IsADBEntity("defined_symbol"); } }
        public defined_symbol defined_symbol
            {
            get { return new defined_symbol(getEntityInstance("DEFINED_SYMBOL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_text_occurrence_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_text_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_text_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_text_occurrence_item() : base(null) { }

        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            set { putEntityInstance("TEXT_LITERAL", value); }
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); } 
            }
        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            set { putEntityInstance("ANNOTATION_TEXT", value); }
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); } 
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            set { putEntityInstance("ANNOTATION_TEXT_CHARACTER", value); }
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); } 
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            set { putEntityInstance("DEFINED_CHARACTER_GLYPH", value); }
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); } 
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            set { putEntityInstance("COMPOSITE_TEXT", value); }
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class annotation_text_occurrence_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_text_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_text_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_text_occurrence_item_get() : base(null) { }

        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); }
            }
        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); }
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); }
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class approval_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approval_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approval_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approval_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class approval_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approval_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approval_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approval_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class area_or_view : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public area_or_view(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public area_or_view(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public area_or_view() : base(null) { }

        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_presentation_view { get { return IsADBEntity("presentation_view"); } }
        public presentation_view presentation_view
            {
            set { putEntityInstance("PRESENTATION_VIEW", value); }
            get { return new presentation_view(getEntityInstance("PRESENTATION_VIEW")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class area_or_view_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public area_or_view_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public area_or_view_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public area_or_view_get() : base(null) { }

        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_presentation_view { get { return IsADBEntity("presentation_view"); } }
        public presentation_view presentation_view
            {
            get { return new presentation_view(getEntityInstance("PRESENTATION_VIEW")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class attribute_language_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_language_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_language_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_language_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            set { putEntityInstance("APPLICATION_CONTEXT", value); }
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); } 
            }
        public bool is_approval_relationship { get { return IsADBEntity("approval_relationship"); } }
        public approval_relationship approval_relationship
            {
            set { putEntityInstance("APPROVAL_RELATIONSHIP", value); }
            get { return new approval_relationship(getEntityInstance("APPROVAL_RELATIONSHIP")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_attribute_value_assignment { get { return IsADBEntity("attribute_value_assignment"); } }
        public attribute_value_assignment attribute_value_assignment
            {
            set { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", value); }
            get { return new attribute_value_assignment(getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_data_environment { get { return IsADBEntity("data_environment"); } }
        public data_environment data_environment
            {
            set { putEntityInstance("DATA_ENVIRONMENT", value); }
            get { return new data_environment(getEntityInstance("DATA_ENVIRONMENT")); } 
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            set { putEntityInstance("DATE_ROLE", value); }
            get { return new date_role(getEntityInstance("DATE_ROLE")); } 
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            set { putEntityInstance("DATE_TIME_ROLE", value); }
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); } 
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            set { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", value); }
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); } 
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            set { putEntityInstance("DOCUMENT_RELATIONSHIP", value); }
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); } 
            }
        public bool is_draughting_title { get { return IsADBEntity("draughting_title"); } }
        public draughting_title draughting_title
            {
            set { putEntityInstance("DRAUGHTING_TITLE", value); }
            get { return new draughting_title(getEntityInstance("DRAUGHTING_TITLE")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_effectivity_relationship { get { return IsADBEntity("effectivity_relationship"); } }
        public effectivity_relationship effectivity_relationship
            {
            set { putEntityInstance("EFFECTIVITY_RELATIONSHIP", value); }
            get { return new effectivity_relationship(getEntityInstance("EFFECTIVITY_RELATIONSHIP")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            set { putEntityInstance("EXTERNAL_SOURCE", value); }
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_general_property_relationship { get { return IsADBEntity("general_property_relationship"); } }
        public general_property_relationship general_property_relationship
            {
            set { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", value); }
            get { return new general_property_relationship(getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); } 
            }
        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            set { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", value); }
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); } 
            }
        public bool is_geometric_tolerance { get { return IsADBEntity("geometric_tolerance"); } }
        public geometric_tolerance geometric_tolerance
            {
            set { putEntityInstance("GEOMETRIC_TOLERANCE", value); }
            get { return new geometric_tolerance(getEntityInstance("GEOMETRIC_TOLERANCE")); } 
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            set { putEntityInstance("GROUP_RELATIONSHIP", value); }
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); } 
            }
        public bool is_identification_role { get { return IsADBEntity("identification_role"); } }
        public identification_role identification_role
            {
            set { putEntityInstance("IDENTIFICATION_ROLE", value); }
            get { return new identification_role(getEntityInstance("IDENTIFICATION_ROLE")); } 
            }
        public bool is_kinematic_pair { get { return IsADBEntity("kinematic_pair"); } }
        public kinematic_pair kinematic_pair
            {
            set { putEntityInstance("KINEMATIC_PAIR", value); }
            get { return new kinematic_pair(getEntityInstance("KINEMATIC_PAIR")); } 
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            set { putEntityInstance("MAPPED_ITEM", value); }
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); } 
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            set { putEntityInstance("NAME_ASSIGNMENT", value); }
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            set { putEntityInstance("ORGANIZATION_ROLE", value); }
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_organizational_project_relationship { get { return IsADBEntity("organizational_project_relationship"); } }
        public organizational_project_relationship organizational_project_relationship
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", value); }
            get { return new organizational_project_relationship(getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); } 
            }
        public bool is_pair_actuator { get { return IsADBEntity("pair_actuator"); } }
        public pair_actuator pair_actuator
            {
            set { putEntityInstance("PAIR_ACTUATOR", value); }
            get { return new pair_actuator(getEntityInstance("PAIR_ACTUATOR")); } 
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", value); }
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); } 
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            set { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", value); }
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); } 
            }
        public bool is_process_product_association { get { return IsADBEntity("process_product_association"); } }
        public process_product_association process_product_association
            {
            set { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", value); }
            get { return new process_product_association(getEntityInstance("PROCESS_PRODUCT_ASSOCIATION")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_relationship { get { return IsADBEntity("product_concept_relationship"); } }
        public product_concept_relationship product_concept_relationship
            {
            set { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", value); }
            get { return new product_concept_relationship(getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            set { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", value); }
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            set { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", value); }
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            set { putEntityInstance("REPRESENTATION_RELATIONSHIP", value); }
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            set { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", value); }
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            set { putEntityInstance("STYLED_ITEM", value); }
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); } 
            }
        public bool is_time_interval_role { get { return IsADBEntity("time_interval_role"); } }
        public time_interval_role time_interval_role
            {
            set { putEntityInstance("TIME_INTERVAL_ROLE", value); }
            get { return new time_interval_role(getEntityInstance("TIME_INTERVAL_ROLE")); } 
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            set { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", value); }
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); } 
            }
        public bool is_uncertainty_measure_with_unit { get { return IsADBEntity("uncertainty_measure_with_unit"); } }
        public uncertainty_measure_with_unit uncertainty_measure_with_unit
            {
            set { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", value); }
            get { return new uncertainty_measure_with_unit(getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); } 
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            set { putEntityInstance("UNCERTAINTY_QUALIFIER", value); }
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }
        public bool is_versioned_action_request_relationship { get { return IsADBEntity("versioned_action_request_relationship"); } }
        public versioned_action_request_relationship versioned_action_request_relationship
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", value); }
            get { return new versioned_action_request_relationship(getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class attribute_language_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_language_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_language_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_language_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); }
            }
        public bool is_approval_relationship { get { return IsADBEntity("approval_relationship"); } }
        public approval_relationship approval_relationship
            {
            get { return new approval_relationship(getEntityInstance("APPROVAL_RELATIONSHIP")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_attribute_value_assignment { get { return IsADBEntity("attribute_value_assignment"); } }
        public attribute_value_assignment attribute_value_assignment
            {
            get { return new attribute_value_assignment(getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_data_environment { get { return IsADBEntity("data_environment"); } }
        public data_environment data_environment
            {
            get { return new data_environment(getEntityInstance("DATA_ENVIRONMENT")); }
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            get { return new date_role(getEntityInstance("DATE_ROLE")); }
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); }
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); }
            }
        public bool is_draughting_title { get { return IsADBEntity("draughting_title"); } }
        public draughting_title draughting_title
            {
            get { return new draughting_title(getEntityInstance("DRAUGHTING_TITLE")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_effectivity_relationship { get { return IsADBEntity("effectivity_relationship"); } }
        public effectivity_relationship effectivity_relationship
            {
            get { return new effectivity_relationship(getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_general_property_relationship { get { return IsADBEntity("general_property_relationship"); } }
        public general_property_relationship general_property_relationship
            {
            get { return new general_property_relationship(getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
            }
        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
            }
        public bool is_geometric_tolerance { get { return IsADBEntity("geometric_tolerance"); } }
        public geometric_tolerance geometric_tolerance
            {
            get { return new geometric_tolerance(getEntityInstance("GEOMETRIC_TOLERANCE")); }
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); }
            }
        public bool is_identification_role { get { return IsADBEntity("identification_role"); } }
        public identification_role identification_role
            {
            get { return new identification_role(getEntityInstance("IDENTIFICATION_ROLE")); }
            }
        public bool is_kinematic_pair { get { return IsADBEntity("kinematic_pair"); } }
        public kinematic_pair kinematic_pair
            {
            get { return new kinematic_pair(getEntityInstance("KINEMATIC_PAIR")); }
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); }
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_organizational_project_relationship { get { return IsADBEntity("organizational_project_relationship"); } }
        public organizational_project_relationship organizational_project_relationship
            {
            get { return new organizational_project_relationship(getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
            }
        public bool is_pair_actuator { get { return IsADBEntity("pair_actuator"); } }
        public pair_actuator pair_actuator
            {
            get { return new pair_actuator(getEntityInstance("PAIR_ACTUATOR")); }
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
            }
        public bool is_process_product_association { get { return IsADBEntity("process_product_association"); } }
        public process_product_association process_product_association
            {
            get { return new process_product_association(getEntityInstance("PROCESS_PRODUCT_ASSOCIATION")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_relationship { get { return IsADBEntity("product_concept_relationship"); } }
        public product_concept_relationship product_concept_relationship
            {
            get { return new product_concept_relationship(getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); }
            }
        public bool is_time_interval_role { get { return IsADBEntity("time_interval_role"); } }
        public time_interval_role time_interval_role
            {
            get { return new time_interval_role(getEntityInstance("TIME_INTERVAL_ROLE")); }
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
            }
        public bool is_uncertainty_measure_with_unit { get { return IsADBEntity("uncertainty_measure_with_unit"); } }
        public uncertainty_measure_with_unit uncertainty_measure_with_unit
            {
            get { return new uncertainty_measure_with_unit(getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }
        public bool is_versioned_action_request_relationship { get { return IsADBEntity("versioned_action_request_relationship"); } }
        public versioned_action_request_relationship versioned_action_request_relationship
            {
            get { return new versioned_action_request_relationship(getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class attribute_type : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_type(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_type(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_type() : base(null) { }

        public bool is_label { get { return IsADBType("LABEL"); } }
        public TextValue label { 
            set { putTextValue("LABEL", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("LABEL", ifcengine.sdaiSTRING); } 
            }
        public bool is_text { get { return IsADBType("TEXT"); } }
        public TextValue text { 
            set { putTextValue("TEXT", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("TEXT", ifcengine.sdaiSTRING); } 
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class attribute_type_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_type_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_type_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_type_get() : base(null) { }

        public bool is_label { get { return IsADBType("LABEL"); } }
        public TextValue label
            {
            get { return getTextValue("LABEL", ifcengine.sdaiSTRING); }
            }
        public bool is_text { get { return IsADBType("TEXT"); } }
        public TextValue text
            {
            get { return getTextValue("TEXT", ifcengine.sdaiSTRING); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class axis2_placement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement() : base(null) { }

        public bool is_axis2_placement_2d { get { return IsADBEntity("axis2_placement_2d"); } }
        public axis2_placement_2d axis2_placement_2d
            {
            set { putEntityInstance("AXIS2_PLACEMENT_2D", value); }
            get { return new axis2_placement_2d(getEntityInstance("AXIS2_PLACEMENT_2D")); } 
            }
        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            set { putEntityInstance("AXIS2_PLACEMENT_3D", value); }
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class axis2_placement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement_get() : base(null) { }

        public bool is_axis2_placement_2d { get { return IsADBEntity("axis2_placement_2d"); } }
        public axis2_placement_2d axis2_placement_2d
            {
            get { return new axis2_placement_2d(getEntityInstance("AXIS2_PLACEMENT_2D")); }
            }
        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_primitive : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive() : base(null) { }

        public bool is_sphere { get { return IsADBEntity("sphere"); } }
        public sphere sphere
            {
            set { putEntityInstance("SPHERE", value); }
            get { return new sphere(getEntityInstance("SPHERE")); } 
            }
        public bool is_block { get { return IsADBEntity("block"); } }
        public block block
            {
            set { putEntityInstance("BLOCK", value); }
            get { return new block(getEntityInstance("BLOCK")); } 
            }
        public bool is_right_angular_wedge { get { return IsADBEntity("right_angular_wedge"); } }
        public right_angular_wedge right_angular_wedge
            {
            set { putEntityInstance("RIGHT_ANGULAR_WEDGE", value); }
            get { return new right_angular_wedge(getEntityInstance("RIGHT_ANGULAR_WEDGE")); } 
            }
        public bool is_torus { get { return IsADBEntity("torus"); } }
        public torus torus
            {
            set { putEntityInstance("TORUS", value); }
            get { return new torus(getEntityInstance("TORUS")); } 
            }
        public bool is_right_circular_cone { get { return IsADBEntity("right_circular_cone"); } }
        public right_circular_cone right_circular_cone
            {
            set { putEntityInstance("RIGHT_CIRCULAR_CONE", value); }
            get { return new right_circular_cone(getEntityInstance("RIGHT_CIRCULAR_CONE")); } 
            }
        public bool is_right_circular_cylinder { get { return IsADBEntity("right_circular_cylinder"); } }
        public right_circular_cylinder right_circular_cylinder
            {
            set { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", value); }
            get { return new right_circular_cylinder(getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_primitive_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive_get() : base(null) { }

        public bool is_sphere { get { return IsADBEntity("sphere"); } }
        public sphere sphere
            {
            get { return new sphere(getEntityInstance("SPHERE")); }
            }
        public bool is_block { get { return IsADBEntity("block"); } }
        public block block
            {
            get { return new block(getEntityInstance("BLOCK")); }
            }
        public bool is_right_angular_wedge { get { return IsADBEntity("right_angular_wedge"); } }
        public right_angular_wedge right_angular_wedge
            {
            get { return new right_angular_wedge(getEntityInstance("RIGHT_ANGULAR_WEDGE")); }
            }
        public bool is_torus { get { return IsADBEntity("torus"); } }
        public torus torus
            {
            get { return new torus(getEntityInstance("TORUS")); }
            }
        public bool is_right_circular_cone { get { return IsADBEntity("right_circular_cone"); } }
        public right_circular_cone right_circular_cone
            {
            get { return new right_circular_cone(getEntityInstance("RIGHT_CIRCULAR_CONE")); }
            }
        public bool is_right_circular_cylinder { get { return IsADBEntity("right_circular_cylinder"); } }
        public right_circular_cylinder right_circular_cylinder
            {
            get { return new right_circular_cylinder(getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class boolean_operand : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand() : base(null) { }

        public bool is_solid_model { get { return IsADBEntity("solid_model"); } }
        public solid_model solid_model
            {
            set { putEntityInstance("SOLID_MODEL", value); }
            get { return new solid_model(getEntityInstance("SOLID_MODEL")); } 
            }
        public bool is_half_space_solid { get { return IsADBEntity("half_space_solid"); } }
        public half_space_solid half_space_solid
            {
            set { putEntityInstance("HALF_SPACE_SOLID", value); }
            get { return new half_space_solid(getEntityInstance("HALF_SPACE_SOLID")); } 
            }
        public csg_primitive csg_primitive { get { return new csg_primitive(this); } }
        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            set { putEntityInstance("BOOLEAN_RESULT", value); }
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class boolean_operand_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand_get() : base(null) { }

        public bool is_solid_model { get { return IsADBEntity("solid_model"); } }
        public solid_model solid_model
            {
            get { return new solid_model(getEntityInstance("SOLID_MODEL")); }
            }
        public bool is_half_space_solid { get { return IsADBEntity("half_space_solid"); } }
        public half_space_solid half_space_solid
            {
            get { return new half_space_solid(getEntityInstance("HALF_SPACE_SOLID")); }
            }
        public csg_primitive_get csg_primitive { get { return new csg_primitive_get(this); } }
        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class box_characteristic_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public box_characteristic_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public box_characteristic_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public box_characteristic_select() : base(null) { }

        public bool is_box_height { get { return IsADBType("BOX_HEIGHT"); } }
        public double? box_height
            {
            set { put_double("BOX_HEIGHT", ifcengine.sdaiREAL, value); }
            get { return get_double("BOX_HEIGHT", ifcengine.sdaiREAL); }
            }
        public bool is_box_width { get { return IsADBType("BOX_WIDTH"); } }
        public double? box_width
            {
            set { put_double("BOX_WIDTH", ifcengine.sdaiREAL, value); }
            get { return get_double("BOX_WIDTH", ifcengine.sdaiREAL); }
            }
        public bool is_box_slant_angle { get { return IsADBType("BOX_SLANT_ANGLE"); } }
        public double? box_slant_angle
            {
            set { put_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL, value); }
            get { return get_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL); }
            }
        public bool is_box_rotate_angle { get { return IsADBType("BOX_ROTATE_ANGLE"); } }
        public double? box_rotate_angle
            {
            set { put_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL, value); }
            get { return get_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class box_characteristic_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public box_characteristic_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public box_characteristic_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public box_characteristic_select_get() : base(null) { }

        public bool is_box_height { get { return IsADBType("BOX_HEIGHT"); } }
        public double? box_height
            {
            get { return get_double("BOX_HEIGHT", ifcengine.sdaiREAL); }
            }
        public bool is_box_width { get { return IsADBType("BOX_WIDTH"); } }
        public double? box_width
            {
            get { return get_double("BOX_WIDTH", ifcengine.sdaiREAL); }
            }
        public bool is_box_slant_angle { get { return IsADBType("BOX_SLANT_ANGLE"); } }
        public double? box_slant_angle
            {
            get { return get_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL); }
            }
        public bool is_box_rotate_angle { get { return IsADBType("BOX_ROTATE_ANGLE"); } }
        public double? box_rotate_angle
            {
            get { return get_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class category_usage_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public category_usage_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public category_usage_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public category_usage_item() : base(null) { }

        public bool is_product_class { get { return IsADBEntity("product_class"); } }
        public product_class product_class
            {
            set { putEntityInstance("PRODUCT_CLASS", value); }
            get { return new product_class(getEntityInstance("PRODUCT_CLASS")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class category_usage_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public category_usage_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public category_usage_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public category_usage_item_get() : base(null) { }

        public bool is_product_class { get { return IsADBEntity("product_class"); } }
        public product_class product_class
            {
            get { return new product_class(getEntityInstance("PRODUCT_CLASS")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class certification_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certification_item() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class certification_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certification_item_get() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class character_spacing_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_spacing_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_spacing_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_spacing_select() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            set { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            set { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            set { putEntityInstance("MEASURE_WITH_UNIT", value); }
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); } 
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure { 
            set { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class character_spacing_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_spacing_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_spacing_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_spacing_select_get() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure
            {
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class character_style_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_style_select() : base(null) { }

        public bool is_text_style_for_defined_font { get { return IsADBEntity("text_style_for_defined_font"); } }
        public text_style_for_defined_font text_style_for_defined_font
            {
            set { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", value); }
            get { return new text_style_for_defined_font(getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class character_style_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_style_select_get() : base(null) { }

        public bool is_text_style_for_defined_font { get { return IsADBEntity("text_style_for_defined_font"); } }
        public text_style_for_defined_font text_style_for_defined_font
            {
            get { return new text_style_for_defined_font(getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_action_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_action_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_action_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_action_definition() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_method_relationship { get { return IsADBEntity("action_method_relationship"); } }
        public action_method_relationship action_method_relationship
            {
            set { putEntityInstance("ACTION_METHOD_RELATIONSHIP", value); }
            get { return new action_method_relationship(getEntityInstance("ACTION_METHOD_RELATIONSHIP")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_action_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_action_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_action_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_action_definition_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_method_relationship { get { return IsADBEntity("action_method_relationship"); } }
        public action_method_relationship action_method_relationship
            {
            get { return new action_method_relationship(getEntityInstance("ACTION_METHOD_RELATIONSHIP")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_product_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_definition() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_product_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_definition_get() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shape_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shape_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shape_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shape_definition() : base(null) { }

        public bool is_product_definition_shape { get { return IsADBEntity("product_definition_shape"); } }
        public product_definition_shape product_definition_shape
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SHAPE", value); }
            get { return new product_definition_shape(getEntityInstance("PRODUCT_DEFINITION_SHAPE")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shape_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shape_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shape_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shape_definition_get() : base(null) { }

        public bool is_product_definition_shape { get { return IsADBEntity("product_definition_shape"); } }
        public product_definition_shape product_definition_shape
            {
            get { return new product_definition_shape(getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_definition() : base(null) { }

        public bool is_characterized_object { get { return IsADBEntity("characterized_object"); } }
        public characterized_object characterized_object
            {
            set { putEntityInstance("CHARACTERIZED_OBJECT", value); }
            get { return new characterized_object(getEntityInstance("CHARACTERIZED_OBJECT")); } 
            }
        public characterized_product_definition characterized_product_definition { get { return new characterized_product_definition(this); } }
        public shape_definition shape_definition { get { return new shape_definition(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_definition_get() : base(null) { }

        public bool is_characterized_object { get { return IsADBEntity("characterized_object"); } }
        public characterized_object characterized_object
            {
            get { return new characterized_object(getEntityInstance("CHARACTERIZED_OBJECT")); }
            }
        public characterized_product_definition_get characterized_product_definition { get { return new characterized_product_definition_get(this); } }
        public shape_definition_get shape_definition { get { return new shape_definition_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_material_property : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_material_property(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_material_property(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_material_property() : base(null) { }

        public bool is_material_property_representation { get { return IsADBEntity("material_property_representation"); } }
        public material_property_representation material_property_representation
            {
            set { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", value); }
            get { return new material_property_representation(getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_material_property_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_material_property_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_material_property_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_material_property_get() : base(null) { }

        public bool is_material_property_representation { get { return IsADBEntity("material_property_representation"); } }
        public material_property_representation material_property_representation
            {
            get { return new material_property_representation(getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_resource_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_resource_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_resource_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_resource_definition() : base(null) { }

        public bool is_action_resource { get { return IsADBEntity("action_resource"); } }
        public action_resource action_resource
            {
            set { putEntityInstance("ACTION_RESOURCE", value); }
            get { return new action_resource(getEntityInstance("ACTION_RESOURCE")); } 
            }
        public bool is_action_resource_requirement { get { return IsADBEntity("action_resource_requirement"); } }
        public action_resource_requirement action_resource_requirement
            {
            set { putEntityInstance("ACTION_RESOURCE_REQUIREMENT", value); }
            get { return new action_resource_requirement(getEntityInstance("ACTION_RESOURCE_REQUIREMENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class characterized_resource_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_resource_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_resource_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_resource_definition_get() : base(null) { }

        public bool is_action_resource { get { return IsADBEntity("action_resource"); } }
        public action_resource action_resource
            {
            get { return new action_resource(getEntityInstance("ACTION_RESOURCE")); }
            }
        public bool is_action_resource_requirement { get { return IsADBEntity("action_resource_requirement"); } }
        public action_resource_requirement action_resource_requirement
            {
            get { return new action_resource_requirement(getEntityInstance("ACTION_RESOURCE_REQUIREMENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class class_usage_effectivity_context_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public class_usage_effectivity_context_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public class_usage_effectivity_context_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public class_usage_effectivity_context_item() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class class_usage_effectivity_context_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public class_usage_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public class_usage_effectivity_context_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public class_usage_effectivity_context_item_get() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class classification_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classification_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            set { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", value); }
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            set { putEntityInstance("DOCUMENT_TYPE", value); }
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_feature_definition { get { return IsADBEntity("feature_definition"); } }
        public feature_definition feature_definition
            {
            set { putEntityInstance("FEATURE_DEFINITION", value); }
            get { return new feature_definition(getEntityInstance("FEATURE_DEFINITION")); } 
            }
        public bool is_general_feature { get { return IsADBEntity("general_feature"); } }
        public general_feature general_feature
            {
            set { putEntityInstance("GENERAL_FEATURE", value); }
            get { return new general_feature(getEntityInstance("GENERAL_FEATURE")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_plus_minus_tolerance { get { return IsADBEntity("plus_minus_tolerance"); } }
        public plus_minus_tolerance plus_minus_tolerance
            {
            set { putEntityInstance("PLUS_MINUS_TOLERANCE", value); }
            get { return new plus_minus_tolerance(getEntityInstance("PLUS_MINUS_TOLERANCE")); } 
            }
        public bool is_process_operation { get { return IsADBEntity("process_operation"); } }
        public process_operation process_operation
            {
            set { putEntityInstance("PROCESS_OPERATION", value); }
            get { return new process_operation(getEntityInstance("PROCESS_OPERATION")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class classification_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classification_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_feature_definition { get { return IsADBEntity("feature_definition"); } }
        public feature_definition feature_definition
            {
            get { return new feature_definition(getEntityInstance("FEATURE_DEFINITION")); }
            }
        public bool is_general_feature { get { return IsADBEntity("general_feature"); } }
        public general_feature general_feature
            {
            get { return new general_feature(getEntityInstance("GENERAL_FEATURE")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_plus_minus_tolerance { get { return IsADBEntity("plus_minus_tolerance"); } }
        public plus_minus_tolerance plus_minus_tolerance
            {
            get { return new plus_minus_tolerance(getEntityInstance("PLUS_MINUS_TOLERANCE")); }
            }
        public bool is_process_operation { get { return IsADBEntity("process_operation"); } }
        public process_operation process_operation
            {
            get { return new process_operation(getEntityInstance("PROCESS_OPERATION")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class compound_item_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public compound_item_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public compound_item_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public compound_item_definition() : base(null) { }

        public bool is_list_representation_item { get { return IsADBType("LIST_REPRESENTATION_ITEM"); } }
        public list_representation_item list_representation_item { get { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); return (new list_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_list_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }
        public void put_list_representation_item(IEnumerable lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }
        public bool is_set_representation_item { get { return IsADBType("SET_REPRESENTATION_ITEM"); } }
        public set_representation_item set_representation_item { get { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); return (new set_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_set_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        public void put_set_representation_item(IEnumerable lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        };


    public class compound_item_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public compound_item_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public compound_item_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public compound_item_definition_get() : base(null) { }

        public bool is_list_representation_item { get { return IsADBType("LIST_REPRESENTATION_ITEM"); } }
        public list_representation_item list_representation_item { get { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); return (new list_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_set_representation_item { get { return IsADBType("SET_REPRESENTATION_ITEM"); } }
        public set_representation_item set_representation_item { get { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); return (new set_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        };


    public class configuration_design_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configuration_design_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configuration_design_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configuration_design_item() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class configuration_design_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configuration_design_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configuration_design_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configuration_design_item_get() : base(null) { }

        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class configured_effectivity_context_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_context_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_context_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_context_item() : base(null) { }

        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class configured_effectivity_context_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_context_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_context_item_get() : base(null) { }

        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class configured_effectivity_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_item() : base(null) { }

        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_process_plan { get { return IsADBEntity("process_plan"); } }
        public process_plan process_plan
            {
            set { putEntityInstance("PROCESS_PLAN", value); }
            get { return new process_plan(getEntityInstance("PROCESS_PLAN")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_process_plan { get { return IsADBEntity("product_process_plan"); } }
        public product_process_plan product_process_plan
            {
            set { putEntityInstance("PRODUCT_PROCESS_PLAN", value); }
            get { return new product_process_plan(getEntityInstance("PRODUCT_PROCESS_PLAN")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class configured_effectivity_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_item_get() : base(null) { }

        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_process_plan { get { return IsADBEntity("process_plan"); } }
        public process_plan process_plan
            {
            get { return new process_plan(getEntityInstance("PROCESS_PLAN")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_process_plan { get { return IsADBEntity("product_process_plan"); } }
        public product_process_plan product_process_plan
            {
            get { return new product_process_plan(getEntityInstance("PRODUCT_PROCESS_PLAN")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class contract_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contract_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contract_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contract_item() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class contract_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contract_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contract_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contract_item_get() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select() : base(null) { }

        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            set { putEntityInstance("BOOLEAN_RESULT", value); }
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); } 
            }
        public csg_primitive csg_primitive { get { return new csg_primitive(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class csg_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select_get() : base(null) { }

        public bool is_boolean_result { get { return IsADBEntity("boolean_result"); } }
        public boolean_result boolean_result
            {
            get { return new boolean_result(getEntityInstance("BOOLEAN_RESULT")); }
            }
        public csg_primitive_get csg_primitive { get { return new csg_primitive_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_style_font_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_style_font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_style_font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_style_font_select() : base(null) { }

        public bool is_curve_style_font { get { return IsADBEntity("curve_style_font"); } }
        public curve_style_font curve_style_font
            {
            set { putEntityInstance("CURVE_STYLE_FONT", value); }
            get { return new curve_style_font(getEntityInstance("CURVE_STYLE_FONT")); } 
            }
        public bool is_pre_defined_curve_font { get { return IsADBEntity("pre_defined_curve_font"); } }
        public pre_defined_curve_font pre_defined_curve_font
            {
            set { putEntityInstance("PRE_DEFINED_CURVE_FONT", value); }
            get { return new pre_defined_curve_font(getEntityInstance("PRE_DEFINED_CURVE_FONT")); } 
            }
        public bool is_externally_defined_curve_font { get { return IsADBEntity("externally_defined_curve_font"); } }
        public externally_defined_curve_font externally_defined_curve_font
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", value); }
            get { return new externally_defined_curve_font(getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_style_font_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_style_font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_style_font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_style_font_select_get() : base(null) { }

        public bool is_curve_style_font { get { return IsADBEntity("curve_style_font"); } }
        public curve_style_font curve_style_font
            {
            get { return new curve_style_font(getEntityInstance("CURVE_STYLE_FONT")); }
            }
        public bool is_pre_defined_curve_font { get { return IsADBEntity("pre_defined_curve_font"); } }
        public pre_defined_curve_font pre_defined_curve_font
            {
            get { return new pre_defined_curve_font(getEntityInstance("PRE_DEFINED_CURVE_FONT")); }
            }
        public bool is_externally_defined_curve_font { get { return IsADBEntity("externally_defined_curve_font"); } }
        public externally_defined_curve_font externally_defined_curve_font
            {
            get { return new externally_defined_curve_font(getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_font_or_scaled_curve_font_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_font_or_scaled_curve_font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_font_or_scaled_curve_font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_font_or_scaled_curve_font_select() : base(null) { }

        public curve_style_font_select curve_style_font_select { get { return new curve_style_font_select(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_font_or_scaled_curve_font_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_font_or_scaled_curve_font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_font_or_scaled_curve_font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_font_or_scaled_curve_font_select_get() : base(null) { }

        public curve_style_font_select_get curve_style_font_select { get { return new curve_style_font_select_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_on_surface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            set { putEntityInstance("PCURVE", value); }
            get { return new pcurve(getEntityInstance("PCURVE")); } 
            }
        public bool is_surface_curve { get { return IsADBEntity("surface_curve"); } }
        public surface_curve surface_curve
            {
            set { putEntityInstance("SURFACE_CURVE", value); }
            get { return new surface_curve(getEntityInstance("SURFACE_CURVE")); } 
            }
        public bool is_composite_curve_on_surface { get { return IsADBEntity("composite_curve_on_surface"); } }
        public composite_curve_on_surface composite_curve_on_surface
            {
            set { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", value); }
            get { return new composite_curve_on_surface(getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_on_surface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface_get() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            get { return new pcurve(getEntityInstance("PCURVE")); }
            }
        public bool is_surface_curve { get { return IsADBEntity("surface_curve"); } }
        public surface_curve surface_curve
            {
            get { return new surface_curve(getEntityInstance("SURFACE_CURVE")); }
            }
        public bool is_composite_curve_on_surface { get { return IsADBEntity("composite_curve_on_surface"); } }
        public composite_curve_on_surface composite_curve_on_surface
            {
            get { return new composite_curve_on_surface(getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_or_render : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_render(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_render(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_render() : base(null) { }

        public bool is_curve_style { get { return IsADBEntity("curve_style"); } }
        public curve_style curve_style
            {
            set { putEntityInstance("CURVE_STYLE", value); }
            get { return new curve_style(getEntityInstance("CURVE_STYLE")); } 
            }
        public bool is_curve_style_rendering { get { return IsADBEntity("curve_style_rendering"); } }
        public curve_style_rendering curve_style_rendering
            {
            set { putEntityInstance("CURVE_STYLE_RENDERING", value); }
            get { return new curve_style_rendering(getEntityInstance("CURVE_STYLE_RENDERING")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class curve_or_render_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_render_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_render_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_render_get() : base(null) { }

        public bool is_curve_style { get { return IsADBEntity("curve_style"); } }
        public curve_style curve_style
            {
            get { return new curve_style(getEntityInstance("CURVE_STYLE")); }
            }
        public bool is_curve_style_rendering { get { return IsADBEntity("curve_style_rendering"); } }
        public curve_style_rendering curve_style_rendering
            {
            get { return new curve_style_rendering(getEntityInstance("CURVE_STYLE_RENDERING")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_and_time_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_and_time_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_and_time_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_and_time_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            set { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_person_organization { get { return IsADBEntity("approval_person_organization"); } }
        public approval_person_organization approval_person_organization
            {
            set { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", value); }
            get { return new approval_person_organization(getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_and_time_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_and_time_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_and_time_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_and_time_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_person_organization { get { return IsADBEntity("approval_person_organization"); } }
        public approval_person_organization approval_person_organization
            {
            get { return new approval_person_organization(getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            set { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_person_organization { get { return IsADBEntity("approval_person_organization"); } }
        public approval_person_organization approval_person_organization
            {
            set { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", value); }
            get { return new approval_person_organization(getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_person_organization { get { return IsADBEntity("approval_person_organization"); } }
        public approval_person_organization approval_person_organization
            {
            get { return new approval_person_organization(getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_time_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_select() : base(null) { }

        public bool is_date { get { return IsADBEntity("date"); } }
        public date date
            {
            set { putEntityInstance("DATE", value); }
            get { return new date(getEntityInstance("DATE")); } 
            }
        public bool is_date_and_time { get { return IsADBEntity("date_and_time"); } }
        public date_and_time date_and_time
            {
            set { putEntityInstance("DATE_AND_TIME", value); }
            get { return new date_and_time(getEntityInstance("DATE_AND_TIME")); } 
            }
        public bool is_local_time { get { return IsADBEntity("local_time"); } }
        public local_time local_time
            {
            set { putEntityInstance("LOCAL_TIME", value); }
            get { return new local_time(getEntityInstance("LOCAL_TIME")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_time_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_select_get() : base(null) { }

        public bool is_date { get { return IsADBEntity("date"); } }
        public date date
            {
            get { return new date(getEntityInstance("DATE")); }
            }
        public bool is_date_and_time { get { return IsADBEntity("date_and_time"); } }
        public date_and_time date_and_time
            {
            get { return new date_and_time(getEntityInstance("DATE_AND_TIME")); }
            }
        public bool is_local_time { get { return IsADBEntity("local_time"); } }
        public local_time local_time
            {
            get { return new local_time(getEntityInstance("LOCAL_TIME")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_time_or_event_occurrence : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_or_event_occurrence(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_or_event_occurrence(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_or_event_occurrence() : base(null) { }

        public date_time_select date_time_select { get { return new date_time_select(this); } }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class date_time_or_event_occurrence_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_or_event_occurrence_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_or_event_occurrence_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_or_event_occurrence_get() : base(null) { }

        public date_time_select_get date_time_select { get { return new date_time_select_get(this); } }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class defined_glyph_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_glyph_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_glyph_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_glyph_select() : base(null) { }

        public bool is_externally_defined_character_glyph { get { return IsADBEntity("externally_defined_character_glyph"); } }
        public externally_defined_character_glyph externally_defined_character_glyph
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH", value); }
            get { return new externally_defined_character_glyph(getEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class defined_glyph_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_glyph_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_glyph_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_glyph_select_get() : base(null) { }

        public bool is_externally_defined_character_glyph { get { return IsADBEntity("externally_defined_character_glyph"); } }
        public externally_defined_character_glyph externally_defined_character_glyph
            {
            get { return new externally_defined_character_glyph(getEntityInstance("EXTERNALLY_DEFINED_CHARACTER_GLYPH")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class defined_symbol_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_symbol_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_symbol_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_symbol_select() : base(null) { }

        public bool is_pre_defined_symbol { get { return IsADBEntity("pre_defined_symbol"); } }
        public pre_defined_symbol pre_defined_symbol
            {
            set { putEntityInstance("PRE_DEFINED_SYMBOL", value); }
            get { return new pre_defined_symbol(getEntityInstance("PRE_DEFINED_SYMBOL")); } 
            }
        public bool is_externally_defined_symbol { get { return IsADBEntity("externally_defined_symbol"); } }
        public externally_defined_symbol externally_defined_symbol
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", value); }
            get { return new externally_defined_symbol(getEntityInstance("EXTERNALLY_DEFINED_SYMBOL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class defined_symbol_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_symbol_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_symbol_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_symbol_select_get() : base(null) { }

        public bool is_pre_defined_symbol { get { return IsADBEntity("pre_defined_symbol"); } }
        public pre_defined_symbol pre_defined_symbol
            {
            get { return new pre_defined_symbol(getEntityInstance("PRE_DEFINED_SYMBOL")); }
            }
        public bool is_externally_defined_symbol { get { return IsADBEntity("externally_defined_symbol"); } }
        public externally_defined_symbol externally_defined_symbol
            {
            get { return new externally_defined_symbol(getEntityInstance("EXTERNALLY_DEFINED_SYMBOL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class derived_property_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_property_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_property_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_property_select() : base(null) { }

        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class derived_property_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_property_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_property_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_property_select_get() : base(null) { }

        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class description_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select() : base(null) { }

        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            set { putEntityInstance("APPLICATION_CONTEXT", value); }
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); } 
            }
        public bool is_approval_role { get { return IsADBEntity("approval_role"); } }
        public approval_role approval_role
            {
            set { putEntityInstance("APPROVAL_ROLE", value); }
            get { return new approval_role(getEntityInstance("APPROVAL_ROLE")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            set { putEntityInstance("DATE_ROLE", value); }
            get { return new date_role(getEntityInstance("DATE_ROLE")); } 
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            set { putEntityInstance("DATE_TIME_ROLE", value); }
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); } 
            }
        public bool is_context_dependent_shape_representation { get { return IsADBEntity("context_dependent_shape_representation"); } }
        public context_dependent_shape_representation context_dependent_shape_representation
            {
            set { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", value); }
            get { return new context_dependent_shape_representation(getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            set { putEntityInstance("EXTERNAL_SOURCE", value); }
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); } 
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            set { putEntityInstance("ORGANIZATION_ROLE", value); }
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); } 
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", value); }
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_property_definition_representation { get { return IsADBEntity("property_definition_representation"); } }
        public property_definition_representation property_definition_representation
            {
            set { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", value); }
            get { return new property_definition_representation(getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class description_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select_get() : base(null) { }

        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); }
            }
        public bool is_approval_role { get { return IsADBEntity("approval_role"); } }
        public approval_role approval_role
            {
            get { return new approval_role(getEntityInstance("APPROVAL_ROLE")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            get { return new date_role(getEntityInstance("DATE_ROLE")); }
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); }
            }
        public bool is_context_dependent_shape_representation { get { return IsADBEntity("context_dependent_shape_representation"); } }
        public context_dependent_shape_representation context_dependent_shape_representation
            {
            get { return new context_dependent_shape_representation(getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); }
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); }
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_property_definition_representation { get { return IsADBEntity("property_definition_representation"); } }
        public property_definition_representation property_definition_representation
            {
            get { return new property_definition_representation(getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class dimensional_characteristic : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public dimensional_characteristic(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public dimensional_characteristic(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public dimensional_characteristic() : base(null) { }

        public bool is_dimensional_location { get { return IsADBEntity("dimensional_location"); } }
        public dimensional_location dimensional_location
            {
            set { putEntityInstance("DIMENSIONAL_LOCATION", value); }
            get { return new dimensional_location(getEntityInstance("DIMENSIONAL_LOCATION")); } 
            }
        public bool is_dimensional_size { get { return IsADBEntity("dimensional_size"); } }
        public dimensional_size dimensional_size
            {
            set { putEntityInstance("DIMENSIONAL_SIZE", value); }
            get { return new dimensional_size(getEntityInstance("DIMENSIONAL_SIZE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class dimensional_characteristic_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public dimensional_characteristic_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public dimensional_characteristic_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public dimensional_characteristic_get() : base(null) { }

        public bool is_dimensional_location { get { return IsADBEntity("dimensional_location"); } }
        public dimensional_location dimensional_location
            {
            get { return new dimensional_location(getEntityInstance("DIMENSIONAL_LOCATION")); }
            }
        public bool is_dimensional_size { get { return IsADBEntity("dimensional_size"); } }
        public dimensional_size dimensional_size
            {
            get { return new dimensional_size(getEntityInstance("DIMENSIONAL_SIZE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class direction_count_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public direction_count_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public direction_count_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public direction_count_select() : base(null) { }

        public bool is_u_direction_count { get { return IsADBType("U_DIRECTION_COUNT"); } }
        public IntValue? u_direction_count
            {
            set { put_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
            }
        public bool is_v_direction_count { get { return IsADBType("V_DIRECTION_COUNT"); } }
        public IntValue? v_direction_count
            {
            set { put_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
            }

        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class direction_count_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public direction_count_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public direction_count_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public direction_count_select_get() : base(null) { }

        public bool is_u_direction_count { get { return IsADBType("U_DIRECTION_COUNT"); } }
        public IntValue? u_direction_count
            {
            get { return get_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
            }
        public bool is_v_direction_count { get { return IsADBType("V_DIRECTION_COUNT"); } }
        public IntValue? v_direction_count
            {
            get { return get_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
            }

        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class document_reference_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_reference_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_reference_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_reference_item() : base(null) { }

        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            set { putEntityInstance("APPROVAL", value); }
            get { return new approval(getEntityInstance("APPROVAL")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            set { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", value); }
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_externally_defined_dimension_definition { get { return IsADBEntity("externally_defined_dimension_definition"); } }
        public externally_defined_dimension_definition externally_defined_dimension_definition
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", value); }
            get { return new externally_defined_dimension_definition(getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION")); } 
            }
        public bool is_feature_definition { get { return IsADBEntity("feature_definition"); } }
        public feature_definition feature_definition
            {
            set { putEntityInstance("FEATURE_DEFINITION", value); }
            get { return new feature_definition(getEntityInstance("FEATURE_DEFINITION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            set { putEntityInstance("PERSON", value); }
            get { return new person(getEntityInstance("PERSON")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_process_plan { get { return IsADBEntity("process_plan"); } }
        public process_plan process_plan
            {
            set { putEntityInstance("PROCESS_PLAN", value); }
            get { return new process_plan(getEntityInstance("PROCESS_PLAN")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_process { get { return IsADBEntity("product_definition_process"); } }
        public product_definition_process product_definition_process
            {
            set { putEntityInstance("PRODUCT_DEFINITION_PROCESS", value); }
            get { return new product_definition_process(getEntityInstance("PRODUCT_DEFINITION_PROCESS")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            set { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", value); }
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            set { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", value); }
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); } 
            }
        public bool is_retention { get { return IsADBEntity("retention"); } }
        public retention retention
            {
            set { putEntityInstance("RETENTION", value); }
            get { return new retention(getEntityInstance("RETENTION")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class document_reference_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_reference_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_reference_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_reference_item_get() : base(null) { }

        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            get { return new approval(getEntityInstance("APPROVAL")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_externally_defined_dimension_definition { get { return IsADBEntity("externally_defined_dimension_definition"); } }
        public externally_defined_dimension_definition externally_defined_dimension_definition
            {
            get { return new externally_defined_dimension_definition(getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION")); }
            }
        public bool is_feature_definition { get { return IsADBEntity("feature_definition"); } }
        public feature_definition feature_definition
            {
            get { return new feature_definition(getEntityInstance("FEATURE_DEFINITION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            get { return new person(getEntityInstance("PERSON")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_process_plan { get { return IsADBEntity("process_plan"); } }
        public process_plan process_plan
            {
            get { return new process_plan(getEntityInstance("PROCESS_PLAN")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_process { get { return IsADBEntity("product_definition_process"); } }
        public product_definition_process product_definition_process
            {
            get { return new product_definition_process(getEntityInstance("PRODUCT_DEFINITION_PROCESS")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); }
            }
        public bool is_retention { get { return IsADBEntity("retention"); } }
        public retention retention
            {
            get { return new retention(getEntityInstance("RETENTION")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_callout_element : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_callout_element(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_callout_element(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_callout_element() : base(null) { }

        public bool is_annotation_text_occurrence { get { return IsADBEntity("annotation_text_occurrence"); } }
        public annotation_text_occurrence annotation_text_occurrence
            {
            set { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", value); }
            get { return new annotation_text_occurrence(getEntityInstance("ANNOTATION_TEXT_OCCURRENCE")); } 
            }
        public bool is_annotation_symbol_occurrence { get { return IsADBEntity("annotation_symbol_occurrence"); } }
        public annotation_symbol_occurrence annotation_symbol_occurrence
            {
            set { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", value); }
            get { return new annotation_symbol_occurrence(getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE")); } 
            }
        public bool is_annotation_curve_occurrence { get { return IsADBEntity("annotation_curve_occurrence"); } }
        public annotation_curve_occurrence annotation_curve_occurrence
            {
            set { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", value); }
            get { return new annotation_curve_occurrence(getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_callout_element_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_callout_element_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_callout_element_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_callout_element_get() : base(null) { }

        public bool is_annotation_text_occurrence { get { return IsADBEntity("annotation_text_occurrence"); } }
        public annotation_text_occurrence annotation_text_occurrence
            {
            get { return new annotation_text_occurrence(getEntityInstance("ANNOTATION_TEXT_OCCURRENCE")); }
            }
        public bool is_annotation_symbol_occurrence { get { return IsADBEntity("annotation_symbol_occurrence"); } }
        public annotation_symbol_occurrence annotation_symbol_occurrence
            {
            get { return new annotation_symbol_occurrence(getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE")); }
            }
        public bool is_annotation_curve_occurrence { get { return IsADBEntity("annotation_curve_occurrence"); } }
        public annotation_curve_occurrence annotation_curve_occurrence
            {
            get { return new annotation_curve_occurrence(getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_model_item_association_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_association_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_association_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_association_select() : base(null) { }

        public bool is_annotation_occurrence { get { return IsADBEntity("annotation_occurrence"); } }
        public annotation_occurrence annotation_occurrence
            {
            set { putEntityInstance("ANNOTATION_OCCURRENCE", value); }
            get { return new annotation_occurrence(getEntityInstance("ANNOTATION_OCCURRENCE")); } 
            }
        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            set { putEntityInstance("DRAUGHTING_CALLOUT", value); }
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_model_item_association_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_association_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_association_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_association_select_get() : base(null) { }

        public bool is_annotation_occurrence { get { return IsADBEntity("annotation_occurrence"); } }
        public annotation_occurrence annotation_occurrence
            {
            get { return new annotation_occurrence(getEntityInstance("ANNOTATION_OCCURRENCE")); }
            }
        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_titled_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_titled_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_titled_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_titled_item() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_drawing_sheet_revision { get { return IsADBEntity("drawing_sheet_revision"); } }
        public drawing_sheet_revision drawing_sheet_revision
            {
            set { putEntityInstance("DRAWING_SHEET_REVISION", value); }
            get { return new drawing_sheet_revision(getEntityInstance("DRAWING_SHEET_REVISION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class draughting_titled_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_titled_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_titled_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_titled_item_get() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_drawing_sheet_revision { get { return IsADBEntity("drawing_sheet_revision"); } }
        public drawing_sheet_revision drawing_sheet_revision
            {
            get { return new drawing_sheet_revision(getEntityInstance("DRAWING_SHEET_REVISION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class effectivity_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public effectivity_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public effectivity_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public effectivity_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_method_relationship { get { return IsADBEntity("action_method_relationship"); } }
        public action_method_relationship action_method_relationship
            {
            set { putEntityInstance("ACTION_METHOD_RELATIONSHIP", value); }
            get { return new action_method_relationship(getEntityInstance("ACTION_METHOD_RELATIONSHIP")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class effectivity_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public effectivity_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public effectivity_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public effectivity_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_method_relationship { get { return IsADBEntity("action_method_relationship"); } }
        public action_method_relationship action_method_relationship
            {
            get { return new action_method_relationship(getEntityInstance("ACTION_METHOD_RELATIONSHIP")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class event_occurrence_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public event_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public event_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public event_occurrence_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class event_occurrence_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public event_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public event_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public event_occurrence_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class external_identification_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public external_identification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public external_identification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public external_identification_item() : base(null) { }

        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_externally_defined_class { get { return IsADBEntity("externally_defined_class"); } }
        public externally_defined_class externally_defined_class
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_CLASS", value); }
            get { return new externally_defined_class(getEntityInstance("EXTERNALLY_DEFINED_CLASS")); } 
            }
        public bool is_externally_defined_general_property { get { return IsADBEntity("externally_defined_general_property"); } }
        public externally_defined_general_property externally_defined_general_property
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", value); }
            get { return new externally_defined_general_property(getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class external_identification_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public external_identification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public external_identification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public external_identification_item_get() : base(null) { }

        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_externally_defined_class { get { return IsADBEntity("externally_defined_class"); } }
        public externally_defined_class externally_defined_class
            {
            get { return new externally_defined_class(getEntityInstance("EXTERNALLY_DEFINED_CLASS")); }
            }
        public bool is_externally_defined_general_property { get { return IsADBEntity("externally_defined_general_property"); } }
        public externally_defined_general_property externally_defined_general_property
            {
            get { return new externally_defined_general_property(getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class fill_area_style_tile_shape_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_area_style_tile_shape_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_area_style_tile_shape_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_area_style_tile_shape_select() : base(null) { }

        public bool is_fill_area_style_tile_symbol_with_style { get { return IsADBEntity("fill_area_style_tile_symbol_with_style"); } }
        public fill_area_style_tile_symbol_with_style fill_area_style_tile_symbol_with_style
            {
            set { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", value); }
            get { return new fill_area_style_tile_symbol_with_style(getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class fill_area_style_tile_shape_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_area_style_tile_shape_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_area_style_tile_shape_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_area_style_tile_shape_select_get() : base(null) { }

        public bool is_fill_area_style_tile_symbol_with_style { get { return IsADBEntity("fill_area_style_tile_symbol_with_style"); } }
        public fill_area_style_tile_symbol_with_style fill_area_style_tile_symbol_with_style
            {
            get { return new fill_area_style_tile_symbol_with_style(getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class fill_style_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_style_select() : base(null) { }

        public bool is_fill_area_style_colour { get { return IsADBEntity("fill_area_style_colour"); } }
        public fill_area_style_colour fill_area_style_colour
            {
            set { putEntityInstance("FILL_AREA_STYLE_COLOUR", value); }
            get { return new fill_area_style_colour(getEntityInstance("FILL_AREA_STYLE_COLOUR")); } 
            }
        public bool is_externally_defined_tile_style { get { return IsADBEntity("externally_defined_tile_style"); } }
        public externally_defined_tile_style externally_defined_tile_style
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", value); }
            get { return new externally_defined_tile_style(getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE")); } 
            }
        public bool is_fill_area_style_tiles { get { return IsADBEntity("fill_area_style_tiles"); } }
        public fill_area_style_tiles fill_area_style_tiles
            {
            set { putEntityInstance("FILL_AREA_STYLE_TILES", value); }
            get { return new fill_area_style_tiles(getEntityInstance("FILL_AREA_STYLE_TILES")); } 
            }
        public bool is_externally_defined_hatch_style { get { return IsADBEntity("externally_defined_hatch_style"); } }
        public externally_defined_hatch_style externally_defined_hatch_style
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", value); }
            get { return new externally_defined_hatch_style(getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE")); } 
            }
        public bool is_fill_area_style_hatching { get { return IsADBEntity("fill_area_style_hatching"); } }
        public fill_area_style_hatching fill_area_style_hatching
            {
            set { putEntityInstance("FILL_AREA_STYLE_HATCHING", value); }
            get { return new fill_area_style_hatching(getEntityInstance("FILL_AREA_STYLE_HATCHING")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class fill_style_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_style_select_get() : base(null) { }

        public bool is_fill_area_style_colour { get { return IsADBEntity("fill_area_style_colour"); } }
        public fill_area_style_colour fill_area_style_colour
            {
            get { return new fill_area_style_colour(getEntityInstance("FILL_AREA_STYLE_COLOUR")); }
            }
        public bool is_externally_defined_tile_style { get { return IsADBEntity("externally_defined_tile_style"); } }
        public externally_defined_tile_style externally_defined_tile_style
            {
            get { return new externally_defined_tile_style(getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE")); }
            }
        public bool is_fill_area_style_tiles { get { return IsADBEntity("fill_area_style_tiles"); } }
        public fill_area_style_tiles fill_area_style_tiles
            {
            get { return new fill_area_style_tiles(getEntityInstance("FILL_AREA_STYLE_TILES")); }
            }
        public bool is_externally_defined_hatch_style { get { return IsADBEntity("externally_defined_hatch_style"); } }
        public externally_defined_hatch_style externally_defined_hatch_style
            {
            get { return new externally_defined_hatch_style(getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE")); }
            }
        public bool is_fill_area_style_hatching { get { return IsADBEntity("fill_area_style_hatching"); } }
        public fill_area_style_hatching fill_area_style_hatching
            {
            get { return new fill_area_style_hatching(getEntityInstance("FILL_AREA_STYLE_HATCHING")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class font_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public font_select() : base(null) { }

        public bool is_pre_defined_text_font { get { return IsADBEntity("pre_defined_text_font"); } }
        public pre_defined_text_font pre_defined_text_font
            {
            set { putEntityInstance("PRE_DEFINED_TEXT_FONT", value); }
            get { return new pre_defined_text_font(getEntityInstance("PRE_DEFINED_TEXT_FONT")); } 
            }
        public bool is_externally_defined_text_font { get { return IsADBEntity("externally_defined_text_font"); } }
        public externally_defined_text_font externally_defined_text_font
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", value); }
            get { return new externally_defined_text_font(getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class font_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public font_select_get() : base(null) { }

        public bool is_pre_defined_text_font { get { return IsADBEntity("pre_defined_text_font"); } }
        public pre_defined_text_font pre_defined_text_font
            {
            get { return new pre_defined_text_font(getEntityInstance("PRE_DEFINED_TEXT_FONT")); }
            }
        public bool is_externally_defined_text_font { get { return IsADBEntity("externally_defined_text_font"); } }
        public externally_defined_text_font externally_defined_text_font
            {
            get { return new externally_defined_text_font(getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class founded_item_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select() : base(null) { }

        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            set { putEntityInstance("FOUNDED_ITEM", value); }
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); } 
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            set { putEntityInstance("REPRESENTATION_ITEM", value); }
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class founded_item_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select_get() : base(null) { }

        public bool is_founded_item { get { return IsADBEntity("founded_item"); } }
        public founded_item founded_item
            {
            get { return new founded_item(getEntityInstance("FOUNDED_ITEM")); }
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class geometric_set_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            set { putEntityInstance("POINT", value); }
            get { return new point(getEntityInstance("POINT")); } 
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            set { putEntityInstance("CURVE", value); }
            get { return new curve(getEntityInstance("CURVE")); } 
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            set { putEntityInstance("SURFACE", value); }
            get { return new surface(getEntityInstance("SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class geometric_set_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select_get() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            get { return new point(getEntityInstance("POINT")); }
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            get { return new curve(getEntityInstance("CURVE")); }
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            get { return new surface(getEntityInstance("SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class group_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public group_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public group_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public group_item() : base(null) { }

        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            set { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", value); }
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); } 
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            set { putEntityInstance("MAPPED_ITEM", value); }
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            set { putEntityInstance("STYLED_ITEM", value); }
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); } 
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            set { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", value); }
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class group_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public group_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public group_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public group_item_get() : base(null) { }

        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); }
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class id_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            set { putEntityInstance("ADDRESS", value); }
            get { return new address(getEntityInstance("ADDRESS")); } 
            }
        public bool is_product_category { get { return IsADBEntity("product_category"); } }
        public product_category product_category
            {
            set { putEntityInstance("PRODUCT_CATEGORY", value); }
            get { return new product_category(getEntityInstance("PRODUCT_CATEGORY")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            set { putEntityInstance("APPLICATION_CONTEXT", value); }
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); } 
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class id_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            get { return new address(getEntityInstance("ADDRESS")); }
            }
        public bool is_product_category { get { return IsADBEntity("product_category"); } }
        public product_category product_category
            {
            get { return new product_category(getEntityInstance("PRODUCT_CATEGORY")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); }
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class identification_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public identification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public identification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public identification_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_applied_identification_assignment { get { return IsADBEntity("applied_identification_assignment"); } }
        public applied_identification_assignment applied_identification_assignment
            {
            set { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", value); }
            get { return new applied_identification_assignment(getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_dimensional_size { get { return IsADBEntity("dimensional_size"); } }
        public dimensional_size dimensional_size
            {
            set { putEntityInstance("DIMENSIONAL_SIZE", value); }
            get { return new dimensional_size(getEntityInstance("DIMENSIONAL_SIZE")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            set { putEntityInstance("DOCUMENT_TYPE", value); }
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_measure_representation_item { get { return IsADBEntity("measure_representation_item"); } }
        public measure_representation_item measure_representation_item
            {
            set { putEntityInstance("MEASURE_REPRESENTATION_ITEM", value); }
            get { return new measure_representation_item(getEntityInstance("MEASURE_REPRESENTATION_ITEM")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            set { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", value); }
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class identification_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public identification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public identification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public identification_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_applied_identification_assignment { get { return IsADBEntity("applied_identification_assignment"); } }
        public applied_identification_assignment applied_identification_assignment
            {
            get { return new applied_identification_assignment(getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_dimensional_size { get { return IsADBEntity("dimensional_size"); } }
        public dimensional_size dimensional_size
            {
            get { return new dimensional_size(getEntityInstance("DIMENSIONAL_SIZE")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_measure_representation_item { get { return IsADBEntity("measure_representation_item"); } }
        public measure_representation_item measure_representation_item
            {
            get { return new measure_representation_item(getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class invisibility_context : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisibility_context(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisibility_context(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisibility_context() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            set { putEntityInstance("PRESENTATION_REPRESENTATION", value); }
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            set { putEntityInstance("PRESENTATION_SET", value); }
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class invisibility_context_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisibility_context_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisibility_context_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisibility_context_get() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); }
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class invisible_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisible_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisible_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisible_item() : base(null) { }

        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            set { putEntityInstance("DRAUGHTING_CALLOUT", value); }
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); } 
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            set { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", value); }
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            set { putEntityInstance("STYLED_ITEM", value); }
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class invisible_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisible_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisible_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisible_item_get() : base(null) { }

        public bool is_draughting_callout { get { return IsADBEntity("draughting_callout"); } }
        public draughting_callout draughting_callout
            {
            get { return new draughting_callout(getEntityInstance("DRAUGHTING_CALLOUT")); }
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_analysis_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_analysis_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_analysis_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_analysis_definition() : base(null) { }

        public bool is_interpolated_configuration_sequence { get { return IsADBEntity("interpolated_configuration_sequence"); } }
        public interpolated_configuration_sequence interpolated_configuration_sequence
            {
            set { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", value); }
            get { return new interpolated_configuration_sequence(getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_analysis_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_analysis_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_analysis_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_analysis_definition_get() : base(null) { }

        public bool is_interpolated_configuration_sequence { get { return IsADBEntity("interpolated_configuration_sequence"); } }
        public interpolated_configuration_sequence interpolated_configuration_sequence
            {
            get { return new interpolated_configuration_sequence(getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_frame_background : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_frame_background(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_frame_background(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_frame_background() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            set { putEntityInstance("POINT", value); }
            get { return new point(getEntityInstance("POINT")); } 
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            set { putEntityInstance("CURVE", value); }
            get { return new curve(getEntityInstance("CURVE")); } 
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            set { putEntityInstance("SURFACE", value); }
            get { return new surface(getEntityInstance("SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_frame_background_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_frame_background_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_frame_background_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_frame_background_get() : base(null) { }

        public bool is_point { get { return IsADBEntity("point"); } }
        public point point
            {
            get { return new point(getEntityInstance("POINT")); }
            }
        public bool is_curve { get { return IsADBEntity("curve"); } }
        public curve curve
            {
            get { return new curve(getEntityInstance("CURVE")); }
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            get { return new surface(getEntityInstance("SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_result : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_result(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_result(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_result() : base(null) { }

        public bool is_interpolated_configuration_sequence { get { return IsADBEntity("interpolated_configuration_sequence"); } }
        public interpolated_configuration_sequence interpolated_configuration_sequence
            {
            set { putEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE", value); }
            get { return new interpolated_configuration_sequence(getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE")); } 
            }
        public bool is_resulting_path { get { return IsADBEntity("resulting_path"); } }
        public resulting_path resulting_path
            {
            set { putEntityInstance("RESULTING_PATH", value); }
            get { return new resulting_path(getEntityInstance("RESULTING_PATH")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class kinematic_result_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public kinematic_result_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public kinematic_result_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public kinematic_result_get() : base(null) { }

        public bool is_interpolated_configuration_sequence { get { return IsADBEntity("interpolated_configuration_sequence"); } }
        public interpolated_configuration_sequence interpolated_configuration_sequence
            {
            get { return new interpolated_configuration_sequence(getEntityInstance("INTERPOLATED_CONFIGURATION_SEQUENCE")); }
            }
        public bool is_resulting_path { get { return IsADBEntity("resulting_path"); } }
        public resulting_path resulting_path
            {
            get { return new resulting_path(getEntityInstance("RESULTING_PATH")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class language_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public language_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public language_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public language_item() : base(null) { }

        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class language_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public language_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public language_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public language_item_get() : base(null) { }

        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class layered_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public layered_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public layered_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public layered_item() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            set { putEntityInstance("PRESENTATION_REPRESENTATION", value); }
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            set { putEntityInstance("REPRESENTATION_ITEM", value); }
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class layered_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public layered_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public layered_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public layered_item_get() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); }
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class marker_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public marker_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public marker_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public marker_select() : base(null) { }

        public bool is_marker_type { get { return IsADBType("MARKER_TYPE"); } }
        public marker_type? marker_type 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<marker_type>.FromValue(value.Value, EnumNames.marker_type_); putEnumerationValue("MARKER_TYPE", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("MARKER_TYPE", EnumNames.marker_type_); 
                return EnumValue<marker_type>.FromIndex(ind); 
                } 
            }
        public bool is_pre_defined_marker { get { return IsADBEntity("pre_defined_marker"); } }
        public pre_defined_marker pre_defined_marker
            {
            set { putEntityInstance("PRE_DEFINED_MARKER", value); }
            get { return new pre_defined_marker(getEntityInstance("PRE_DEFINED_MARKER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class marker_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public marker_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public marker_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public marker_select_get() : base(null) { }

        public bool is_marker_type { get { return IsADBType("MARKER_TYPE"); } }
        public marker_type? marker_type
            {
            get
                {
                int ind = getEnumerationIndex("MARKER_TYPE", EnumNames.marker_type_);
                return EnumValue<marker_type>.FromIndex(ind);
                }
            }
        public bool is_pre_defined_marker { get { return IsADBEntity("pre_defined_marker"); } }
        public pre_defined_marker pre_defined_marker
            {
            get { return new pre_defined_marker(getEntityInstance("PRE_DEFINED_MARKER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class measure_value : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value() : base(null) { }

        public bool is_amount_of_substance_measure { get { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); } }
        public double? amount_of_substance_measure
            {
            set { put_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_area_measure { get { return IsADBType("AREA_MEASURE"); } }
        public double? area_measure
            {
            set { put_double("AREA_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_celsius_temperature_measure { get { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); } }
        public double? celsius_temperature_measure
            {
            set { put_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_context_dependent_measure { get { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); } }
        public double? context_dependent_measure
            {
            set { put_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_count_measure { get { return IsADBType("COUNT_MEASURE"); } }
        public double? count_measure
            {
            set { put_double("COUNT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure { 
            set { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_electric_current_measure { get { return IsADBType("ELECTRIC_CURRENT_MEASURE"); } }
        public double? electric_current_measure
            {
            set { put_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            set { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_luminous_intensity_measure { get { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); } }
        public double? luminous_intensity_measure
            {
            set { put_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_measure { get { return IsADBType("MASS_MEASURE"); } }
        public double? mass_measure
            {
            set { put_double("MASS_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_numeric_measure { get { return IsADBType("NUMERIC_MEASURE"); } }
        public double? numeric_measure
            {
            set { put_double("NUMERIC_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_non_negative_length_measure { get { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); } }
        public double? non_negative_length_measure
            {
            set { put_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            set { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            set { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            set { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_plane_angle_measure { get { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); } }
        public double? positive_plane_angle_measure
            {
            set { put_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_ratio_measure { get { return IsADBType("POSITIVE_RATIO_MEASURE"); } }
        public double? positive_ratio_measure
            {
            set { put_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            set { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_solid_angle_measure { get { return IsADBType("SOLID_ANGLE_MEASURE"); } }
        public double? solid_angle_measure
            {
            set { put_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_thermodynamic_temperature_measure { get { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); } }
        public double? thermodynamic_temperature_measure
            {
            set { put_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_time_measure { get { return IsADBType("TIME_MEASURE"); } }
        public double? time_measure
            {
            set { put_double("TIME_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_volume_measure { get { return IsADBType("VOLUME_MEASURE"); } }
        public double? volume_measure
            {
            set { put_double("VOLUME_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class measure_value_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value_get() : base(null) { }

        public bool is_amount_of_substance_measure { get { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); } }
        public double? amount_of_substance_measure
            {
            get { return get_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_area_measure { get { return IsADBType("AREA_MEASURE"); } }
        public double? area_measure
            {
            get { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_celsius_temperature_measure { get { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); } }
        public double? celsius_temperature_measure
            {
            get { return get_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_context_dependent_measure { get { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); } }
        public double? context_dependent_measure
            {
            get { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_count_measure { get { return IsADBType("COUNT_MEASURE"); } }
        public double? count_measure
            {
            get { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure
            {
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_electric_current_measure { get { return IsADBType("ELECTRIC_CURRENT_MEASURE"); } }
        public double? electric_current_measure
            {
            get { return get_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_luminous_intensity_measure { get { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); } }
        public double? luminous_intensity_measure
            {
            get { return get_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_mass_measure { get { return IsADBType("MASS_MEASURE"); } }
        public double? mass_measure
            {
            get { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_numeric_measure { get { return IsADBType("NUMERIC_MEASURE"); } }
        public double? numeric_measure
            {
            get { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_non_negative_length_measure { get { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); } }
        public double? non_negative_length_measure
            {
            get { return get_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_plane_angle_measure { get { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); } }
        public double? positive_plane_angle_measure
            {
            get { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_positive_ratio_measure { get { return IsADBType("POSITIVE_RATIO_MEASURE"); } }
        public double? positive_ratio_measure
            {
            get { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_ratio_measure { get { return IsADBType("RATIO_MEASURE"); } }
        public double? ratio_measure
            {
            get { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_solid_angle_measure { get { return IsADBType("SOLID_ANGLE_MEASURE"); } }
        public double? solid_angle_measure
            {
            get { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_thermodynamic_temperature_measure { get { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); } }
        public double? thermodynamic_temperature_measure
            {
            get { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_time_measure { get { return IsADBType("TIME_MEASURE"); } }
        public double? time_measure
            {
            get { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_volume_measure { get { return IsADBType("VOLUME_MEASURE"); } }
        public double? volume_measure
            {
            get { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class motion_parameter_measure : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public motion_parameter_measure(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public motion_parameter_measure(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public motion_parameter_measure() : base(null) { }

        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            set { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            set { putEntityInstance("MEASURE_WITH_UNIT", value); }
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class motion_parameter_measure_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public motion_parameter_measure_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public motion_parameter_measure_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public motion_parameter_measure_get() : base(null) { }

        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class multi_language_attribute_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public multi_language_attribute_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public multi_language_attribute_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public multi_language_attribute_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            set { putEntityInstance("APPLICATION_CONTEXT", value); }
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); } 
            }
        public bool is_approval_relationship { get { return IsADBEntity("approval_relationship"); } }
        public approval_relationship approval_relationship
            {
            set { putEntityInstance("APPROVAL_RELATIONSHIP", value); }
            get { return new approval_relationship(getEntityInstance("APPROVAL_RELATIONSHIP")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_data_environment { get { return IsADBEntity("data_environment"); } }
        public data_environment data_environment
            {
            set { putEntityInstance("DATA_ENVIRONMENT", value); }
            get { return new data_environment(getEntityInstance("DATA_ENVIRONMENT")); } 
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            set { putEntityInstance("DATE_ROLE", value); }
            get { return new date_role(getEntityInstance("DATE_ROLE")); } 
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            set { putEntityInstance("DATE_TIME_ROLE", value); }
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); } 
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            set { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", value); }
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); } 
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            set { putEntityInstance("DOCUMENT_RELATIONSHIP", value); }
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); } 
            }
        public bool is_draughting_title { get { return IsADBEntity("draughting_title"); } }
        public draughting_title draughting_title
            {
            set { putEntityInstance("DRAUGHTING_TITLE", value); }
            get { return new draughting_title(getEntityInstance("DRAUGHTING_TITLE")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_effectivity_relationship { get { return IsADBEntity("effectivity_relationship"); } }
        public effectivity_relationship effectivity_relationship
            {
            set { putEntityInstance("EFFECTIVITY_RELATIONSHIP", value); }
            get { return new effectivity_relationship(getEntityInstance("EFFECTIVITY_RELATIONSHIP")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            set { putEntityInstance("EXTERNAL_SOURCE", value); }
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_general_property_relationship { get { return IsADBEntity("general_property_relationship"); } }
        public general_property_relationship general_property_relationship
            {
            set { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", value); }
            get { return new general_property_relationship(getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); } 
            }
        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            set { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", value); }
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); } 
            }
        public bool is_geometric_tolerance { get { return IsADBEntity("geometric_tolerance"); } }
        public geometric_tolerance geometric_tolerance
            {
            set { putEntityInstance("GEOMETRIC_TOLERANCE", value); }
            get { return new geometric_tolerance(getEntityInstance("GEOMETRIC_TOLERANCE")); } 
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            set { putEntityInstance("GROUP_RELATIONSHIP", value); }
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); } 
            }
        public bool is_identification_role { get { return IsADBEntity("identification_role"); } }
        public identification_role identification_role
            {
            set { putEntityInstance("IDENTIFICATION_ROLE", value); }
            get { return new identification_role(getEntityInstance("IDENTIFICATION_ROLE")); } 
            }
        public bool is_kinematic_pair { get { return IsADBEntity("kinematic_pair"); } }
        public kinematic_pair kinematic_pair
            {
            set { putEntityInstance("KINEMATIC_PAIR", value); }
            get { return new kinematic_pair(getEntityInstance("KINEMATIC_PAIR")); } 
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            set { putEntityInstance("MAPPED_ITEM", value); }
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); } 
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            set { putEntityInstance("NAME_ASSIGNMENT", value); }
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            set { putEntityInstance("ORGANIZATION_ROLE", value); }
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_organizational_project_relationship { get { return IsADBEntity("organizational_project_relationship"); } }
        public organizational_project_relationship organizational_project_relationship
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", value); }
            get { return new organizational_project_relationship(getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); } 
            }
        public bool is_pair_actuator { get { return IsADBEntity("pair_actuator"); } }
        public pair_actuator pair_actuator
            {
            set { putEntityInstance("PAIR_ACTUATOR", value); }
            get { return new pair_actuator(getEntityInstance("PAIR_ACTUATOR")); } 
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", value); }
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); } 
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            set { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", value); }
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); } 
            }
        public bool is_process_product_association { get { return IsADBEntity("process_product_association"); } }
        public process_product_association process_product_association
            {
            set { putEntityInstance("PROCESS_PRODUCT_ASSOCIATION", value); }
            get { return new process_product_association(getEntityInstance("PROCESS_PRODUCT_ASSOCIATION")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_relationship { get { return IsADBEntity("product_concept_relationship"); } }
        public product_concept_relationship product_concept_relationship
            {
            set { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", value); }
            get { return new product_concept_relationship(getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            set { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", value); }
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            set { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", value); }
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            set { putEntityInstance("REPRESENTATION_RELATIONSHIP", value); }
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            set { putEntityInstance("RESOURCE_REQUIREMENT_TYPE", value); }
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            set { putEntityInstance("STYLED_ITEM", value); }
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); } 
            }
        public bool is_time_interval_role { get { return IsADBEntity("time_interval_role"); } }
        public time_interval_role time_interval_role
            {
            set { putEntityInstance("TIME_INTERVAL_ROLE", value); }
            get { return new time_interval_role(getEntityInstance("TIME_INTERVAL_ROLE")); } 
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            set { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", value); }
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); } 
            }
        public bool is_uncertainty_measure_with_unit { get { return IsADBEntity("uncertainty_measure_with_unit"); } }
        public uncertainty_measure_with_unit uncertainty_measure_with_unit
            {
            set { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", value); }
            get { return new uncertainty_measure_with_unit(getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); } 
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            set { putEntityInstance("UNCERTAINTY_QUALIFIER", value); }
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }
        public bool is_versioned_action_request_relationship { get { return IsADBEntity("versioned_action_request_relationship"); } }
        public versioned_action_request_relationship versioned_action_request_relationship
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP", value); }
            get { return new versioned_action_request_relationship(getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class multi_language_attribute_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public multi_language_attribute_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public multi_language_attribute_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public multi_language_attribute_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_application_context { get { return IsADBEntity("application_context"); } }
        public application_context application_context
            {
            get { return new application_context(getEntityInstance("APPLICATION_CONTEXT")); }
            }
        public bool is_approval_relationship { get { return IsADBEntity("approval_relationship"); } }
        public approval_relationship approval_relationship
            {
            get { return new approval_relationship(getEntityInstance("APPROVAL_RELATIONSHIP")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_data_environment { get { return IsADBEntity("data_environment"); } }
        public data_environment data_environment
            {
            get { return new data_environment(getEntityInstance("DATA_ENVIRONMENT")); }
            }
        public bool is_date_role { get { return IsADBEntity("date_role"); } }
        public date_role date_role
            {
            get { return new date_role(getEntityInstance("DATE_ROLE")); }
            }
        public bool is_date_time_role { get { return IsADBEntity("date_time_role"); } }
        public date_time_role date_time_role
            {
            get { return new date_time_role(getEntityInstance("DATE_TIME_ROLE")); }
            }
        public bool is_descriptive_representation_item { get { return IsADBEntity("descriptive_representation_item"); } }
        public descriptive_representation_item descriptive_representation_item
            {
            get { return new descriptive_representation_item(getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
            }
        public bool is_document_relationship { get { return IsADBEntity("document_relationship"); } }
        public document_relationship document_relationship
            {
            get { return new document_relationship(getEntityInstance("DOCUMENT_RELATIONSHIP")); }
            }
        public bool is_draughting_title { get { return IsADBEntity("draughting_title"); } }
        public draughting_title draughting_title
            {
            get { return new draughting_title(getEntityInstance("DRAUGHTING_TITLE")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_effectivity_relationship { get { return IsADBEntity("effectivity_relationship"); } }
        public effectivity_relationship effectivity_relationship
            {
            get { return new effectivity_relationship(getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_external_source { get { return IsADBEntity("external_source"); } }
        public external_source external_source
            {
            get { return new external_source(getEntityInstance("EXTERNAL_SOURCE")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_general_property_relationship { get { return IsADBEntity("general_property_relationship"); } }
        public general_property_relationship general_property_relationship
            {
            get { return new general_property_relationship(getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
            }
        public bool is_geometric_representation_item { get { return IsADBEntity("geometric_representation_item"); } }
        public geometric_representation_item geometric_representation_item
            {
            get { return new geometric_representation_item(getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
            }
        public bool is_geometric_tolerance { get { return IsADBEntity("geometric_tolerance"); } }
        public geometric_tolerance geometric_tolerance
            {
            get { return new geometric_tolerance(getEntityInstance("GEOMETRIC_TOLERANCE")); }
            }
        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_group_relationship { get { return IsADBEntity("group_relationship"); } }
        public group_relationship group_relationship
            {
            get { return new group_relationship(getEntityInstance("GROUP_RELATIONSHIP")); }
            }
        public bool is_identification_role { get { return IsADBEntity("identification_role"); } }
        public identification_role identification_role
            {
            get { return new identification_role(getEntityInstance("IDENTIFICATION_ROLE")); }
            }
        public bool is_kinematic_pair { get { return IsADBEntity("kinematic_pair"); } }
        public kinematic_pair kinematic_pair
            {
            get { return new kinematic_pair(getEntityInstance("KINEMATIC_PAIR")); }
            }
        public bool is_mapped_item { get { return IsADBEntity("mapped_item"); } }
        public mapped_item mapped_item
            {
            get { return new mapped_item(getEntityInstance("MAPPED_ITEM")); }
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organization_role { get { return IsADBEntity("organization_role"); } }
        public organization_role organization_role
            {
            get { return new organization_role(getEntityInstance("ORGANIZATION_ROLE")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_organizational_project_relationship { get { return IsADBEntity("organizational_project_relationship"); } }
        public organizational_project_relationship organizational_project_relationship
            {
            get { return new organizational_project_relationship(getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
            }
        public bool is_pair_actuator { get { return IsADBEntity("pair_actuator"); } }
        public pair_actuator pair_actuator
            {
            get { return new pair_actuator(getEntityInstance("PAIR_ACTUATOR")); }
            }
        public bool is_person_and_organization_role { get { return IsADBEntity("person_and_organization_role"); } }
        public person_and_organization_role person_and_organization_role
            {
            get { return new person_and_organization_role(getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
            }
        public bool is_process_product_association { get { return IsADBEntity("process_product_association"); } }
        public process_product_association process_product_association
            {
            get { return new process_product_association(getEntityInstance("PROCESS_PRODUCT_ASSOCIATION")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_relationship { get { return IsADBEntity("product_concept_relationship"); } }
        public product_concept_relationship product_concept_relationship
            {
            get { return new product_concept_relationship(getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_product_related_product_category { get { return IsADBEntity("product_related_product_category"); } }
        public product_related_product_category product_related_product_category
            {
            get { return new product_related_product_category(getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_representation_relationship { get { return IsADBEntity("representation_relationship"); } }
        public representation_relationship representation_relationship
            {
            get { return new representation_relationship(getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_resource_requirement_type { get { return IsADBEntity("resource_requirement_type"); } }
        public resource_requirement_type resource_requirement_type
            {
            get { return new resource_requirement_type(getEntityInstance("RESOURCE_REQUIREMENT_TYPE")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }
        public bool is_styled_item { get { return IsADBEntity("styled_item"); } }
        public styled_item styled_item
            {
            get { return new styled_item(getEntityInstance("STYLED_ITEM")); }
            }
        public bool is_time_interval_role { get { return IsADBEntity("time_interval_role"); } }
        public time_interval_role time_interval_role
            {
            get { return new time_interval_role(getEntityInstance("TIME_INTERVAL_ROLE")); }
            }
        public bool is_topological_representation_item { get { return IsADBEntity("topological_representation_item"); } }
        public topological_representation_item topological_representation_item
            {
            get { return new topological_representation_item(getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
            }
        public bool is_uncertainty_measure_with_unit { get { return IsADBEntity("uncertainty_measure_with_unit"); } }
        public uncertainty_measure_with_unit uncertainty_measure_with_unit
            {
            get { return new uncertainty_measure_with_unit(getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }
        public bool is_versioned_action_request_relationship { get { return IsADBEntity("versioned_action_request_relationship"); } }
        public versioned_action_request_relationship versioned_action_request_relationship
            {
            get { return new versioned_action_request_relationship(getEntityInstance("VERSIONED_ACTION_REQUEST_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class name_attribute_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select() : base(null) { }

        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            set { putEntityInstance("ADDRESS", value); }
            get { return new address(getEntityInstance("ADDRESS")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_context_dependent_shape_representation { get { return IsADBEntity("context_dependent_shape_representation"); } }
        public context_dependent_shape_representation context_dependent_shape_representation
            {
            set { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", value); }
            get { return new context_dependent_shape_representation(getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); } 
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            set { putEntityInstance("DERIVED_UNIT", value); }
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition_representation { get { return IsADBEntity("property_definition_representation"); } }
        public property_definition_representation property_definition_representation
            {
            set { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", value); }
            get { return new property_definition_representation(getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class name_attribute_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select_get() : base(null) { }

        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_address { get { return IsADBEntity("address"); } }
        public address address
            {
            get { return new address(getEntityInstance("ADDRESS")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_context_dependent_shape_representation { get { return IsADBEntity("context_dependent_shape_representation"); } }
        public context_dependent_shape_representation context_dependent_shape_representation
            {
            get { return new context_dependent_shape_representation(getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
            }
        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition_representation { get { return IsADBEntity("property_definition_representation"); } }
        public property_definition_representation property_definition_representation
            {
            get { return new property_definition_representation(getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class name_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_item() : base(null) { }

        public bool is_kinematic_joint { get { return IsADBEntity("kinematic_joint"); } }
        public kinematic_joint kinematic_joint
            {
            set { putEntityInstance("KINEMATIC_JOINT", value); }
            get { return new kinematic_joint(getEntityInstance("KINEMATIC_JOINT")); } 
            }
        public bool is_kinematic_link { get { return IsADBEntity("kinematic_link"); } }
        public kinematic_link kinematic_link
            {
            set { putEntityInstance("KINEMATIC_LINK", value); }
            get { return new kinematic_link(getEntityInstance("KINEMATIC_LINK")); } 
            }
        public bool is_kinematic_structure { get { return IsADBEntity("kinematic_structure"); } }
        public kinematic_structure kinematic_structure
            {
            set { putEntityInstance("KINEMATIC_STRUCTURE", value); }
            get { return new kinematic_structure(getEntityInstance("KINEMATIC_STRUCTURE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class name_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_item_get() : base(null) { }

        public bool is_kinematic_joint { get { return IsADBEntity("kinematic_joint"); } }
        public kinematic_joint kinematic_joint
            {
            get { return new kinematic_joint(getEntityInstance("KINEMATIC_JOINT")); }
            }
        public bool is_kinematic_link { get { return IsADBEntity("kinematic_link"); } }
        public kinematic_link kinematic_link
            {
            get { return new kinematic_link(getEntityInstance("KINEMATIC_LINK")); }
            }
        public bool is_kinematic_structure { get { return IsADBEntity("kinematic_structure"); } }
        public kinematic_structure kinematic_structure
            {
            get { return new kinematic_structure(getEntityInstance("KINEMATIC_STRUCTURE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class organization_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organization_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organization_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organization_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_identification_assignment { get { return IsADBEntity("applied_identification_assignment"); } }
        public applied_identification_assignment applied_identification_assignment
            {
            set { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", value); }
            get { return new applied_identification_assignment(getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            set { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            set { putEntityInstance("APPROVAL", value); }
            get { return new approval(getEntityInstance("APPROVAL")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            set { putEntityInstance("DOCUMENT_TYPE", value); }
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            set { putEntityInstance("EFFECTIVITY", value); }
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class organization_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organization_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organization_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organization_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_identification_assignment { get { return IsADBEntity("applied_identification_assignment"); } }
        public applied_identification_assignment applied_identification_assignment
            {
            get { return new applied_identification_assignment(getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval { get { return IsADBEntity("approval"); } }
        public approval approval
            {
            get { return new approval(getEntityInstance("APPROVAL")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_effectivity { get { return IsADBEntity("effectivity"); } }
        public effectivity effectivity
            {
            get { return new effectivity(getEntityInstance("EFFECTIVITY")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class organizational_project_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organizational_project_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organizational_project_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organizational_project_item() : base(null) { }

        public bool is_assembly_component_usage { get { return IsADBEntity("assembly_component_usage"); } }
        public assembly_component_usage assembly_component_usage
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", value); }
            get { return new assembly_component_usage(getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class organizational_project_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organizational_project_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organizational_project_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organizational_project_item_get() : base(null) { }

        public bool is_assembly_component_usage { get { return IsADBEntity("assembly_component_usage"); } }
        public assembly_component_usage assembly_component_usage
            {
            get { return new assembly_component_usage(getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class pcurve_or_surface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            set { putEntityInstance("PCURVE", value); }
            get { return new pcurve(getEntityInstance("PCURVE")); } 
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            set { putEntityInstance("SURFACE", value); }
            get { return new surface(getEntityInstance("SURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class pcurve_or_surface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface_get() : base(null) { }

        public bool is_pcurve { get { return IsADBEntity("pcurve"); } }
        public pcurve pcurve
            {
            get { return new pcurve(getEntityInstance("PCURVE")); }
            }
        public bool is_surface { get { return IsADBEntity("surface"); } }
        public surface surface
            {
            get { return new surface(getEntityInstance("SURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class person_and_organization_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_and_organization_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_and_organization_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_and_organization_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            set { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            set { putEntityInstance("DOCUMENT_TYPE", value); }
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            set { putEntityInstance("EVENT_OCCURRENCE", value); }
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class person_and_organization_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_and_organization_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_and_organization_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_and_organization_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_organization_assignment { get { return IsADBEntity("applied_organization_assignment"); } }
        public applied_organization_assignment applied_organization_assignment
            {
            get { return new applied_organization_assignment(getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_document_type { get { return IsADBEntity("document_type"); } }
        public document_type document_type
            {
            get { return new document_type(getEntityInstance("DOCUMENT_TYPE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_event_occurrence { get { return IsADBEntity("event_occurrence"); } }
        public event_occurrence event_occurrence
            {
            get { return new event_occurrence(getEntityInstance("EVENT_OCCURRENCE")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class person_organization_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_organization_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_organization_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_organization_select() : base(null) { }

        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            set { putEntityInstance("PERSON", value); }
            get { return new person(getEntityInstance("PERSON")); } 
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            set { putEntityInstance("ORGANIZATION", value); }
            get { return new organization(getEntityInstance("ORGANIZATION")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class person_organization_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_organization_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_organization_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_organization_select_get() : base(null) { }

        public bool is_person { get { return IsADBEntity("person"); } }
        public person person
            {
            get { return new person(getEntityInstance("PERSON")); }
            }
        public bool is_organization { get { return IsADBEntity("organization"); } }
        public organization organization
            {
            get { return new organization(getEntityInstance("ORGANIZATION")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class plane_or_planar_box : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public plane_or_planar_box(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public plane_or_planar_box(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public plane_or_planar_box() : base(null) { }

        public bool is_plane { get { return IsADBEntity("plane"); } }
        public plane plane
            {
            set { putEntityInstance("PLANE", value); }
            get { return new plane(getEntityInstance("PLANE")); } 
            }
        public bool is_planar_box { get { return IsADBEntity("planar_box"); } }
        public planar_box planar_box
            {
            set { putEntityInstance("PLANAR_BOX", value); }
            get { return new planar_box(getEntityInstance("PLANAR_BOX")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class plane_or_planar_box_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public plane_or_planar_box_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public plane_or_planar_box_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public plane_or_planar_box_get() : base(null) { }

        public bool is_plane { get { return IsADBEntity("plane"); } }
        public plane plane
            {
            get { return new plane(getEntityInstance("PLANE")); }
            }
        public bool is_planar_box { get { return IsADBEntity("planar_box"); } }
        public planar_box planar_box
            {
            get { return new planar_box(getEntityInstance("PLANAR_BOX")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_representation_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_representation_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_representation_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_representation_select() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            set { putEntityInstance("PRESENTATION_REPRESENTATION", value); }
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            set { putEntityInstance("PRESENTATION_SET", value); }
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_representation_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_representation_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_representation_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_representation_select_get() : base(null) { }

        public bool is_presentation_representation { get { return IsADBEntity("presentation_representation"); } }
        public presentation_representation presentation_representation
            {
            get { return new presentation_representation(getEntityInstance("PRESENTATION_REPRESENTATION")); }
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_size_assignment_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_size_assignment_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_size_assignment_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_size_assignment_select() : base(null) { }

        public bool is_presentation_view { get { return IsADBEntity("presentation_view"); } }
        public presentation_view presentation_view
            {
            set { putEntityInstance("PRESENTATION_VIEW", value); }
            get { return new presentation_view(getEntityInstance("PRESENTATION_VIEW")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_area_in_set { get { return IsADBEntity("area_in_set"); } }
        public area_in_set area_in_set
            {
            set { putEntityInstance("AREA_IN_SET", value); }
            get { return new area_in_set(getEntityInstance("AREA_IN_SET")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_size_assignment_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_size_assignment_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_size_assignment_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_size_assignment_select_get() : base(null) { }

        public bool is_presentation_view { get { return IsADBEntity("presentation_view"); } }
        public presentation_view presentation_view
            {
            get { return new presentation_view(getEntityInstance("PRESENTATION_VIEW")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_area_in_set { get { return IsADBEntity("area_in_set"); } }
        public area_in_set area_in_set
            {
            get { return new area_in_set(getEntityInstance("AREA_IN_SET")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_style_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_style_select() : base(null) { }

        public bool is_pre_defined_presentation_style { get { return IsADBEntity("pre_defined_presentation_style"); } }
        public pre_defined_presentation_style pre_defined_presentation_style
            {
            set { putEntityInstance("PRE_DEFINED_PRESENTATION_STYLE", value); }
            get { return new pre_defined_presentation_style(getEntityInstance("PRE_DEFINED_PRESENTATION_STYLE")); } 
            }
        public bool is_point_style { get { return IsADBEntity("point_style"); } }
        public point_style point_style
            {
            set { putEntityInstance("POINT_STYLE", value); }
            get { return new point_style(getEntityInstance("POINT_STYLE")); } 
            }
        public bool is_curve_style { get { return IsADBEntity("curve_style"); } }
        public curve_style curve_style
            {
            set { putEntityInstance("CURVE_STYLE", value); }
            get { return new curve_style(getEntityInstance("CURVE_STYLE")); } 
            }
        public bool is_surface_style_usage { get { return IsADBEntity("surface_style_usage"); } }
        public surface_style_usage surface_style_usage
            {
            set { putEntityInstance("SURFACE_STYLE_USAGE", value); }
            get { return new surface_style_usage(getEntityInstance("SURFACE_STYLE_USAGE")); } 
            }
        public bool is_symbol_style { get { return IsADBEntity("symbol_style"); } }
        public symbol_style symbol_style
            {
            set { putEntityInstance("SYMBOL_STYLE", value); }
            get { return new symbol_style(getEntityInstance("SYMBOL_STYLE")); } 
            }
        public bool is_fill_area_style { get { return IsADBEntity("fill_area_style"); } }
        public fill_area_style fill_area_style
            {
            set { putEntityInstance("FILL_AREA_STYLE", value); }
            get { return new fill_area_style(getEntityInstance("FILL_AREA_STYLE")); } 
            }
        public bool is_text_style { get { return IsADBEntity("text_style"); } }
        public text_style text_style
            {
            set { putEntityInstance("TEXT_STYLE", value); }
            get { return new text_style(getEntityInstance("TEXT_STYLE")); } 
            }
        public bool is_approximation_tolerance { get { return IsADBEntity("approximation_tolerance"); } }
        public approximation_tolerance approximation_tolerance
            {
            set { putEntityInstance("APPROXIMATION_TOLERANCE", value); }
            get { return new approximation_tolerance(getEntityInstance("APPROXIMATION_TOLERANCE")); } 
            }
        public bool is_externally_defined_style { get { return IsADBEntity("externally_defined_style"); } }
        public externally_defined_style externally_defined_style
            {
            set { putEntityInstance("EXTERNALLY_DEFINED_STYLE", value); }
            get { return new externally_defined_style(getEntityInstance("EXTERNALLY_DEFINED_STYLE")); } 
            }
        public bool is_null_style { get { return IsADBType("NULL_STYLE"); } }
        public null_style? null_style 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<null_style>.FromValue(value.Value, EnumNames.null_style_); putEnumerationValue("NULL_STYLE", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("NULL_STYLE", EnumNames.null_style_); 
                return EnumValue<null_style>.FromIndex(ind); 
                } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presentation_style_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_style_select_get() : base(null) { }

        public bool is_pre_defined_presentation_style { get { return IsADBEntity("pre_defined_presentation_style"); } }
        public pre_defined_presentation_style pre_defined_presentation_style
            {
            get { return new pre_defined_presentation_style(getEntityInstance("PRE_DEFINED_PRESENTATION_STYLE")); }
            }
        public bool is_point_style { get { return IsADBEntity("point_style"); } }
        public point_style point_style
            {
            get { return new point_style(getEntityInstance("POINT_STYLE")); }
            }
        public bool is_curve_style { get { return IsADBEntity("curve_style"); } }
        public curve_style curve_style
            {
            get { return new curve_style(getEntityInstance("CURVE_STYLE")); }
            }
        public bool is_surface_style_usage { get { return IsADBEntity("surface_style_usage"); } }
        public surface_style_usage surface_style_usage
            {
            get { return new surface_style_usage(getEntityInstance("SURFACE_STYLE_USAGE")); }
            }
        public bool is_symbol_style { get { return IsADBEntity("symbol_style"); } }
        public symbol_style symbol_style
            {
            get { return new symbol_style(getEntityInstance("SYMBOL_STYLE")); }
            }
        public bool is_fill_area_style { get { return IsADBEntity("fill_area_style"); } }
        public fill_area_style fill_area_style
            {
            get { return new fill_area_style(getEntityInstance("FILL_AREA_STYLE")); }
            }
        public bool is_text_style { get { return IsADBEntity("text_style"); } }
        public text_style text_style
            {
            get { return new text_style(getEntityInstance("TEXT_STYLE")); }
            }
        public bool is_approximation_tolerance { get { return IsADBEntity("approximation_tolerance"); } }
        public approximation_tolerance approximation_tolerance
            {
            get { return new approximation_tolerance(getEntityInstance("APPROXIMATION_TOLERANCE")); }
            }
        public bool is_externally_defined_style { get { return IsADBEntity("externally_defined_style"); } }
        public externally_defined_style externally_defined_style
            {
            get { return new externally_defined_style(getEntityInstance("EXTERNALLY_DEFINED_STYLE")); }
            }
        public bool is_null_style { get { return IsADBType("NULL_STYLE"); } }
        public null_style? null_style
            {
            get
                {
                int ind = getEnumerationIndex("NULL_STYLE", EnumNames.null_style_);
                return EnumValue<null_style>.FromIndex(ind);
                }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presented_item_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presented_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presented_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presented_item_select() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class presented_item_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presented_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presented_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presented_item_select_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class product_or_formation_or_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_or_formation_or_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_or_formation_or_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_or_formation_or_definition() : base(null) { }

        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class product_or_formation_or_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_or_formation_or_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_or_formation_or_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_or_formation_or_definition_get() : base(null) { }

        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class property_or_shape_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public property_or_shape_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public property_or_shape_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public property_or_shape_select() : base(null) { }

        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public shape_definition shape_definition { get { return new shape_definition(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class property_or_shape_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public property_or_shape_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public property_or_shape_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public property_or_shape_select_get() : base(null) { }

        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public shape_definition_get shape_definition { get { return new shape_definition_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class rendering_properties_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rendering_properties_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rendering_properties_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rendering_properties_select() : base(null) { }

        public bool is_surface_style_reflectance_ambient { get { return IsADBEntity("surface_style_reflectance_ambient"); } }
        public surface_style_reflectance_ambient surface_style_reflectance_ambient
            {
            set { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", value); }
            get { return new surface_style_reflectance_ambient(getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT")); } 
            }
        public bool is_surface_style_transparent { get { return IsADBEntity("surface_style_transparent"); } }
        public surface_style_transparent surface_style_transparent
            {
            set { putEntityInstance("SURFACE_STYLE_TRANSPARENT", value); }
            get { return new surface_style_transparent(getEntityInstance("SURFACE_STYLE_TRANSPARENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class rendering_properties_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rendering_properties_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rendering_properties_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rendering_properties_select_get() : base(null) { }

        public bool is_surface_style_reflectance_ambient { get { return IsADBEntity("surface_style_reflectance_ambient"); } }
        public surface_style_reflectance_ambient surface_style_reflectance_ambient
            {
            get { return new surface_style_reflectance_ambient(getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT")); }
            }
        public bool is_surface_style_transparent { get { return IsADBEntity("surface_style_transparent"); } }
        public surface_style_transparent surface_style_transparent
            {
            get { return new surface_style_transparent(getEntityInstance("SURFACE_STYLE_TRANSPARENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class represented_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public represented_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public represented_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public represented_definition() : base(null) { }

        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            set { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", value); }
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            set { putEntityInstance("SHAPE_ASPECT", value); }
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); } 
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            set { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", value); }
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class represented_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public represented_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public represented_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public represented_definition_get() : base(null) { }

        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_property_definition_relationship { get { return IsADBEntity("property_definition_relationship"); } }
        public property_definition_relationship property_definition_relationship
            {
            get { return new property_definition_relationship(getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_shape_aspect { get { return IsADBEntity("shape_aspect"); } }
        public shape_aspect shape_aspect
            {
            get { return new shape_aspect(getEntityInstance("SHAPE_ASPECT")); }
            }
        public bool is_shape_aspect_relationship { get { return IsADBEntity("shape_aspect_relationship"); } }
        public shape_aspect_relationship shape_aspect_relationship
            {
            get { return new shape_aspect_relationship(getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item() : base(null) { }

        public bool is_edge { get { return IsADBEntity("edge"); } }
        public edge edge
            {
            set { putEntityInstance("EDGE", value); }
            get { return new edge(getEntityInstance("EDGE")); } 
            }
        public bool is_path { get { return IsADBEntity("path"); } }
        public path path
            {
            set { putEntityInstance("PATH", value); }
            get { return new path(getEntityInstance("PATH")); } 
            }
        public bool is_face { get { return IsADBEntity("face"); } }
        public face face
            {
            set { putEntityInstance("FACE", value); }
            get { return new face(getEntityInstance("FACE")); } 
            }
        public bool is_face_bound { get { return IsADBEntity("face_bound"); } }
        public face_bound face_bound
            {
            set { putEntityInstance("FACE_BOUND", value); }
            get { return new face_bound(getEntityInstance("FACE_BOUND")); } 
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            set { putEntityInstance("CLOSED_SHELL", value); }
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); } 
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            set { putEntityInstance("OPEN_SHELL", value); }
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item_get() : base(null) { }

        public bool is_edge { get { return IsADBEntity("edge"); } }
        public edge edge
            {
            get { return new edge(getEntityInstance("EDGE")); }
            }
        public bool is_path { get { return IsADBEntity("path"); } }
        public path path
            {
            get { return new path(getEntityInstance("PATH")); }
            }
        public bool is_face { get { return IsADBEntity("face"); } }
        public face face
            {
            get { return new face(getEntityInstance("FACE")); }
            }
        public bool is_face_bound { get { return IsADBEntity("face_bound"); } }
        public face_bound face_bound
            {
            get { return new face_bound(getEntityInstance("FACE_BOUND")); }
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); }
            }
        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology() : base(null) { }

        public reversible_topology_item reversible_topology_item { get { return new reversible_topology_item(this); } }
        public bool is_list_of_reversible_topology_item { get { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public list_of_reversible_topology_item list_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_list_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public void put_list_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public bool is_set_of_reversible_topology_item { get { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public set_of_reversible_topology_item set_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_set_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public void put_set_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class reversible_topology_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_get() : base(null) { }

        public reversible_topology_item_get reversible_topology_item { get { return new reversible_topology_item_get(this); } }
        public bool is_list_of_reversible_topology_item { get { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public list_of_reversible_topology_item list_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_set_of_reversible_topology_item { get { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); } }
        public set_of_reversible_topology_item set_of_reversible_topology_item { get { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class rigid_placement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rigid_placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rigid_placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rigid_placement() : base(null) { }

        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            set { putEntityInstance("AXIS2_PLACEMENT_3D", value); }
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class rigid_placement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rigid_placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rigid_placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rigid_placement_get() : base(null) { }

        public bool is_axis2_placement_3d { get { return IsADBEntity("axis2_placement_3d"); } }
        public axis2_placement_3d axis2_placement_3d
            {
            get { return new axis2_placement_3d(getEntityInstance("AXIS2_PLACEMENT_3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class role_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select() : base(null) { }

        public bool is_action_assignment { get { return IsADBEntity("action_assignment"); } }
        public action_assignment action_assignment
            {
            set { putEntityInstance("ACTION_ASSIGNMENT", value); }
            get { return new action_assignment(getEntityInstance("ACTION_ASSIGNMENT")); } 
            }
        public bool is_action_request_assignment { get { return IsADBEntity("action_request_assignment"); } }
        public action_request_assignment action_request_assignment
            {
            set { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", value); }
            get { return new action_request_assignment(getEntityInstance("ACTION_REQUEST_ASSIGNMENT")); } 
            }
        public bool is_approval_assignment { get { return IsADBEntity("approval_assignment"); } }
        public approval_assignment approval_assignment
            {
            set { putEntityInstance("APPROVAL_ASSIGNMENT", value); }
            get { return new approval_assignment(getEntityInstance("APPROVAL_ASSIGNMENT")); } 
            }
        public bool is_approval_date_time { get { return IsADBEntity("approval_date_time"); } }
        public approval_date_time approval_date_time
            {
            set { putEntityInstance("APPROVAL_DATE_TIME", value); }
            get { return new approval_date_time(getEntityInstance("APPROVAL_DATE_TIME")); } 
            }
        public bool is_certification_assignment { get { return IsADBEntity("certification_assignment"); } }
        public certification_assignment certification_assignment
            {
            set { putEntityInstance("CERTIFICATION_ASSIGNMENT", value); }
            get { return new certification_assignment(getEntityInstance("CERTIFICATION_ASSIGNMENT")); } 
            }
        public bool is_contract_assignment { get { return IsADBEntity("contract_assignment"); } }
        public contract_assignment contract_assignment
            {
            set { putEntityInstance("CONTRACT_ASSIGNMENT", value); }
            get { return new contract_assignment(getEntityInstance("CONTRACT_ASSIGNMENT")); } 
            }
        public bool is_document_reference { get { return IsADBEntity("document_reference"); } }
        public document_reference document_reference
            {
            set { putEntityInstance("DOCUMENT_REFERENCE", value); }
            get { return new document_reference(getEntityInstance("DOCUMENT_REFERENCE")); } 
            }
        public bool is_effectivity_assignment { get { return IsADBEntity("effectivity_assignment"); } }
        public effectivity_assignment effectivity_assignment
            {
            set { putEntityInstance("EFFECTIVITY_ASSIGNMENT", value); }
            get { return new effectivity_assignment(getEntityInstance("EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            set { putEntityInstance("GROUP_ASSIGNMENT", value); }
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); } 
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            set { putEntityInstance("NAME_ASSIGNMENT", value); }
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); } 
            }
        public bool is_security_classification_assignment { get { return IsADBEntity("security_classification_assignment"); } }
        public security_classification_assignment security_classification_assignment
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new security_classification_assignment(getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class role_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select_get() : base(null) { }

        public bool is_action_assignment { get { return IsADBEntity("action_assignment"); } }
        public action_assignment action_assignment
            {
            get { return new action_assignment(getEntityInstance("ACTION_ASSIGNMENT")); }
            }
        public bool is_action_request_assignment { get { return IsADBEntity("action_request_assignment"); } }
        public action_request_assignment action_request_assignment
            {
            get { return new action_request_assignment(getEntityInstance("ACTION_REQUEST_ASSIGNMENT")); }
            }
        public bool is_approval_assignment { get { return IsADBEntity("approval_assignment"); } }
        public approval_assignment approval_assignment
            {
            get { return new approval_assignment(getEntityInstance("APPROVAL_ASSIGNMENT")); }
            }
        public bool is_approval_date_time { get { return IsADBEntity("approval_date_time"); } }
        public approval_date_time approval_date_time
            {
            get { return new approval_date_time(getEntityInstance("APPROVAL_DATE_TIME")); }
            }
        public bool is_certification_assignment { get { return IsADBEntity("certification_assignment"); } }
        public certification_assignment certification_assignment
            {
            get { return new certification_assignment(getEntityInstance("CERTIFICATION_ASSIGNMENT")); }
            }
        public bool is_contract_assignment { get { return IsADBEntity("contract_assignment"); } }
        public contract_assignment contract_assignment
            {
            get { return new contract_assignment(getEntityInstance("CONTRACT_ASSIGNMENT")); }
            }
        public bool is_document_reference { get { return IsADBEntity("document_reference"); } }
        public document_reference document_reference
            {
            get { return new document_reference(getEntityInstance("DOCUMENT_REFERENCE")); }
            }
        public bool is_effectivity_assignment { get { return IsADBEntity("effectivity_assignment"); } }
        public effectivity_assignment effectivity_assignment
            {
            get { return new effectivity_assignment(getEntityInstance("EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_group_assignment { get { return IsADBEntity("group_assignment"); } }
        public group_assignment group_assignment
            {
            get { return new group_assignment(getEntityInstance("GROUP_ASSIGNMENT")); }
            }
        public bool is_name_assignment { get { return IsADBEntity("name_assignment"); } }
        public name_assignment name_assignment
            {
            get { return new name_assignment(getEntityInstance("NAME_ASSIGNMENT")); }
            }
        public bool is_security_classification_assignment { get { return IsADBEntity("security_classification_assignment"); } }
        public security_classification_assignment security_classification_assignment
            {
            get { return new security_classification_assignment(getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class rotational_range_measure : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rotational_range_measure(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rotational_range_measure(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rotational_range_measure() : base(null) { }

        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            set { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_unlimited_range { get { return IsADBType("UNLIMITED_RANGE"); } }
        public unlimited_range? unlimited_range 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<unlimited_range>.FromValue(value.Value, EnumNames.unlimited_range_); putEnumerationValue("UNLIMITED_RANGE", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("UNLIMITED_RANGE", EnumNames.unlimited_range_); 
                return EnumValue<unlimited_range>.FromIndex(ind); 
                } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class rotational_range_measure_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rotational_range_measure_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rotational_range_measure_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rotational_range_measure_get() : base(null) { }

        public bool is_plane_angle_measure { get { return IsADBType("PLANE_ANGLE_MEASURE"); } }
        public double? plane_angle_measure
            {
            get { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_unlimited_range { get { return IsADBType("UNLIMITED_RANGE"); } }
        public unlimited_range? unlimited_range
            {
            get
                {
                int ind = getEnumerationIndex("UNLIMITED_RANGE", EnumNames.unlimited_range_);
                return EnumValue<unlimited_range>.FromIndex(ind);
                }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class security_classification_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public security_classification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public security_classification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public security_classification_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class security_classification_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public security_classification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public security_classification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public security_classification_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shell : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell() : base(null) { }

        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            set { putEntityInstance("OPEN_SHELL", value); }
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); } 
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            set { putEntityInstance("CLOSED_SHELL", value); }
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class shell_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell_get() : base(null) { }

        public bool is_open_shell { get { return IsADBEntity("open_shell"); } }
        public open_shell open_shell
            {
            get { return new open_shell(getEntityInstance("OPEN_SHELL")); }
            }
        public bool is_closed_shell { get { return IsADBEntity("closed_shell"); } }
        public closed_shell closed_shell
            {
            get { return new closed_shell(getEntityInstance("CLOSED_SHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class size_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public size_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public size_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public size_select() : base(null) { }

        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            set { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            set { putEntityInstance("MEASURE_WITH_UNIT", value); }
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); } 
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure { 
            set { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class size_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public size_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public size_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public size_select_get() : base(null) { }

        public bool is_positive_length_measure { get { return IsADBType("POSITIVE_LENGTH_MEASURE"); } }
        public double? positive_length_measure
            {
            get { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_measure_with_unit { get { return IsADBEntity("measure_with_unit"); } }
        public measure_with_unit measure_with_unit
            {
            get { return new measure_with_unit(getEntityInstance("MEASURE_WITH_UNIT")); }
            }
        public bool is_descriptive_measure { get { return IsADBType("DESCRIPTIVE_MEASURE"); } }
        public TextValue descriptive_measure
            {
            get { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class source_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public source_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public source_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public source_item() : base(null) { }

        public bool is_identifier { get { return IsADBType("IDENTIFIER"); } }
        public TextValue identifier { 
            set { putTextValue("IDENTIFIER", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IDENTIFIER", ifcengine.sdaiSTRING); } 
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class source_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public source_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public source_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public source_item_get() : base(null) { }

        public bool is_identifier { get { return IsADBType("IDENTIFIER"); } }
        public TextValue identifier
            {
            get { return getTextValue("IDENTIFIER", ifcengine.sdaiSTRING); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class spatial_rotation : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public spatial_rotation(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public spatial_rotation(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public spatial_rotation() : base(null) { }

        public bool is_ypr_rotation { get { return IsADBType("YPR_ROTATION"); } }
        public ypr_rotation ypr_rotation { get { SdaiAggr aggr = getAggrValue("YPR_ROTATION"); return (new ypr_rotationSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_ypr_rotation(IEnumerable<double> lst) { SdaiAggr aggr = (new ypr_rotationSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("YPR_ROTATION", aggr); }
        public void put_ypr_rotation(IEnumerable lst) { SdaiAggr aggr = (new ypr_rotationSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("YPR_ROTATION", aggr); }
        public bool is_rotation_about_direction { get { return IsADBEntity("rotation_about_direction"); } }
        public rotation_about_direction rotation_about_direction
            {
            set { putEntityInstance("ROTATION_ABOUT_DIRECTION", value); }
            get { return new rotation_about_direction(getEntityInstance("ROTATION_ABOUT_DIRECTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class spatial_rotation_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public spatial_rotation_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public spatial_rotation_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public spatial_rotation_get() : base(null) { }

        public bool is_ypr_rotation { get { return IsADBType("YPR_ROTATION"); } }
        public ypr_rotation ypr_rotation { get { SdaiAggr aggr = getAggrValue("YPR_ROTATION"); return (new ypr_rotationSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_rotation_about_direction { get { return IsADBEntity("rotation_about_direction"); } }
        public rotation_about_direction rotation_about_direction
            {
            get { return new rotation_about_direction(getEntityInstance("ROTATION_ABOUT_DIRECTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class specified_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public specified_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public specified_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public specified_item() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class specified_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public specified_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public specified_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public specified_item_get() : base(null) { }

        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class style_context_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public style_context_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public style_context_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public style_context_select() : base(null) { }

        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            set { putEntityInstance("GROUP", value); }
            get { return new group(getEntityInstance("GROUP")); } 
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            set { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", value); }
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); } 
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            set { putEntityInstance("PRESENTATION_SET", value); }
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); } 
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            set { putEntityInstance("REPRESENTATION", value); }
            get { return new representation(getEntityInstance("REPRESENTATION")); } 
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            set { putEntityInstance("REPRESENTATION_ITEM", value); }
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); } 
            }
        public bool is_shape_representation_relationship { get { return IsADBEntity("shape_representation_relationship"); } }
        public shape_representation_relationship shape_representation_relationship
            {
            set { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", value); }
            get { return new shape_representation_relationship(getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class style_context_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public style_context_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public style_context_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public style_context_select_get() : base(null) { }

        public bool is_group { get { return IsADBEntity("group"); } }
        public group group
            {
            get { return new group(getEntityInstance("GROUP")); }
            }
        public bool is_presentation_layer_assignment { get { return IsADBEntity("presentation_layer_assignment"); } }
        public presentation_layer_assignment presentation_layer_assignment
            {
            get { return new presentation_layer_assignment(getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
            }
        public bool is_presentation_set { get { return IsADBEntity("presentation_set"); } }
        public presentation_set presentation_set
            {
            get { return new presentation_set(getEntityInstance("PRESENTATION_SET")); }
            }
        public bool is_representation { get { return IsADBEntity("representation"); } }
        public representation representation
            {
            get { return new representation(getEntityInstance("REPRESENTATION")); }
            }
        public bool is_representation_item { get { return IsADBEntity("representation_item"); } }
        public representation_item representation_item_
            {
            get { return new representation_item(getEntityInstance("REPRESENTATION_ITEM")); }
            }
        public bool is_shape_representation_relationship { get { return IsADBEntity("shape_representation_relationship"); } }
        public shape_representation_relationship shape_representation_relationship
            {
            get { return new shape_representation_relationship(getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class supported_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public supported_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public supported_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public supported_item() : base(null) { }

        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class supported_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public supported_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public supported_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public supported_item_get() : base(null) { }

        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_side_style_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_side_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_side_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_side_style_select() : base(null) { }

        public bool is_surface_side_style { get { return IsADBEntity("surface_side_style"); } }
        public surface_side_style surface_side_style
            {
            set { putEntityInstance("SURFACE_SIDE_STYLE", value); }
            get { return new surface_side_style(getEntityInstance("SURFACE_SIDE_STYLE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_side_style_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_side_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_side_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_side_style_select_get() : base(null) { }

        public bool is_surface_side_style { get { return IsADBEntity("surface_side_style"); } }
        public surface_side_style surface_side_style
            {
            get { return new surface_side_style(getEntityInstance("SURFACE_SIDE_STYLE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_style_element_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_style_element_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_style_element_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_style_element_select() : base(null) { }

        public bool is_surface_style_fill_area { get { return IsADBEntity("surface_style_fill_area"); } }
        public surface_style_fill_area surface_style_fill_area
            {
            set { putEntityInstance("SURFACE_STYLE_FILL_AREA", value); }
            get { return new surface_style_fill_area(getEntityInstance("SURFACE_STYLE_FILL_AREA")); } 
            }
        public bool is_surface_style_boundary { get { return IsADBEntity("surface_style_boundary"); } }
        public surface_style_boundary surface_style_boundary
            {
            set { putEntityInstance("SURFACE_STYLE_BOUNDARY", value); }
            get { return new surface_style_boundary(getEntityInstance("SURFACE_STYLE_BOUNDARY")); } 
            }
        public bool is_surface_style_silhouette { get { return IsADBEntity("surface_style_silhouette"); } }
        public surface_style_silhouette surface_style_silhouette
            {
            set { putEntityInstance("SURFACE_STYLE_SILHOUETTE", value); }
            get { return new surface_style_silhouette(getEntityInstance("SURFACE_STYLE_SILHOUETTE")); } 
            }
        public bool is_surface_style_segmentation_curve { get { return IsADBEntity("surface_style_segmentation_curve"); } }
        public surface_style_segmentation_curve surface_style_segmentation_curve
            {
            set { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", value); }
            get { return new surface_style_segmentation_curve(getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE")); } 
            }
        public bool is_surface_style_control_grid { get { return IsADBEntity("surface_style_control_grid"); } }
        public surface_style_control_grid surface_style_control_grid
            {
            set { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", value); }
            get { return new surface_style_control_grid(getEntityInstance("SURFACE_STYLE_CONTROL_GRID")); } 
            }
        public bool is_surface_style_parameter_line { get { return IsADBEntity("surface_style_parameter_line"); } }
        public surface_style_parameter_line surface_style_parameter_line
            {
            set { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", value); }
            get { return new surface_style_parameter_line(getEntityInstance("SURFACE_STYLE_PARAMETER_LINE")); } 
            }
        public bool is_surface_style_rendering { get { return IsADBEntity("surface_style_rendering"); } }
        public surface_style_rendering surface_style_rendering
            {
            set { putEntityInstance("SURFACE_STYLE_RENDERING", value); }
            get { return new surface_style_rendering(getEntityInstance("SURFACE_STYLE_RENDERING")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class surface_style_element_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_style_element_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_style_element_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_style_element_select_get() : base(null) { }

        public bool is_surface_style_fill_area { get { return IsADBEntity("surface_style_fill_area"); } }
        public surface_style_fill_area surface_style_fill_area
            {
            get { return new surface_style_fill_area(getEntityInstance("SURFACE_STYLE_FILL_AREA")); }
            }
        public bool is_surface_style_boundary { get { return IsADBEntity("surface_style_boundary"); } }
        public surface_style_boundary surface_style_boundary
            {
            get { return new surface_style_boundary(getEntityInstance("SURFACE_STYLE_BOUNDARY")); }
            }
        public bool is_surface_style_silhouette { get { return IsADBEntity("surface_style_silhouette"); } }
        public surface_style_silhouette surface_style_silhouette
            {
            get { return new surface_style_silhouette(getEntityInstance("SURFACE_STYLE_SILHOUETTE")); }
            }
        public bool is_surface_style_segmentation_curve { get { return IsADBEntity("surface_style_segmentation_curve"); } }
        public surface_style_segmentation_curve surface_style_segmentation_curve
            {
            get { return new surface_style_segmentation_curve(getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE")); }
            }
        public bool is_surface_style_control_grid { get { return IsADBEntity("surface_style_control_grid"); } }
        public surface_style_control_grid surface_style_control_grid
            {
            get { return new surface_style_control_grid(getEntityInstance("SURFACE_STYLE_CONTROL_GRID")); }
            }
        public bool is_surface_style_parameter_line { get { return IsADBEntity("surface_style_parameter_line"); } }
        public surface_style_parameter_line surface_style_parameter_line
            {
            get { return new surface_style_parameter_line(getEntityInstance("SURFACE_STYLE_PARAMETER_LINE")); }
            }
        public bool is_surface_style_rendering { get { return IsADBEntity("surface_style_rendering"); } }
        public surface_style_rendering surface_style_rendering
            {
            get { return new surface_style_rendering(getEntityInstance("SURFACE_STYLE_RENDERING")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class symbol_style_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public symbol_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public symbol_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public symbol_style_select() : base(null) { }

        public bool is_symbol_colour { get { return IsADBEntity("symbol_colour"); } }
        public symbol_colour symbol_colour
            {
            set { putEntityInstance("SYMBOL_COLOUR", value); }
            get { return new symbol_colour(getEntityInstance("SYMBOL_COLOUR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class symbol_style_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public symbol_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public symbol_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public symbol_style_select_get() : base(null) { }

        public bool is_symbol_colour { get { return IsADBEntity("symbol_colour"); } }
        public symbol_colour symbol_colour
            {
            get { return new symbol_colour(getEntityInstance("SYMBOL_COLOUR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class text_or_character : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_or_character(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_or_character(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_or_character() : base(null) { }

        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            set { putEntityInstance("ANNOTATION_TEXT", value); }
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); } 
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            set { putEntityInstance("ANNOTATION_TEXT_CHARACTER", value); }
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); } 
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            set { putEntityInstance("DEFINED_CHARACTER_GLYPH", value); }
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); } 
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            set { putEntityInstance("COMPOSITE_TEXT", value); }
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); } 
            }
        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            set { putEntityInstance("TEXT_LITERAL", value); }
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class text_or_character_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_or_character_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_or_character_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_or_character_get() : base(null) { }

        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); }
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); }
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); }
            }
        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class text_string_representation_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_string_representation_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_string_representation_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_string_representation_item() : base(null) { }

        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            set { putEntityInstance("TEXT_LITERAL", value); }
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); } 
            }
        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            set { putEntityInstance("ANNOTATION_TEXT", value); }
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); } 
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            set { putEntityInstance("ANNOTATION_TEXT_CHARACTER", value); }
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); } 
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            set { putEntityInstance("DEFINED_CHARACTER_GLYPH", value); }
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); } 
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            set { putEntityInstance("COMPOSITE_TEXT", value); }
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); } 
            }
        public axis2_placement axis2_placement { get { return new axis2_placement(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class text_string_representation_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_string_representation_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_string_representation_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_string_representation_item_get() : base(null) { }

        public bool is_text_literal { get { return IsADBEntity("text_literal"); } }
        public text_literal text_literal
            {
            get { return new text_literal(getEntityInstance("TEXT_LITERAL")); }
            }
        public bool is_annotation_text { get { return IsADBEntity("annotation_text"); } }
        public annotation_text annotation_text
            {
            get { return new annotation_text(getEntityInstance("ANNOTATION_TEXT")); }
            }
        public bool is_annotation_text_character { get { return IsADBEntity("annotation_text_character"); } }
        public annotation_text_character annotation_text_character
            {
            get { return new annotation_text_character(getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
            }
        public bool is_defined_character_glyph { get { return IsADBEntity("defined_character_glyph"); } }
        public defined_character_glyph defined_character_glyph
            {
            get { return new defined_character_glyph(getEntityInstance("DEFINED_CHARACTER_GLYPH")); }
            }
        public bool is_composite_text { get { return IsADBEntity("composite_text"); } }
        public composite_text composite_text
            {
            get { return new composite_text(getEntityInstance("COMPOSITE_TEXT")); }
            }
        public axis2_placement_get axis2_placement { get { return new axis2_placement_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class time_interval_item : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public time_interval_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public time_interval_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public time_interval_item() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            set { putEntityInstance("ACTION", value); }
            get { return new action(getEntityInstance("ACTION")); } 
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            set { putEntityInstance("ACTION_DIRECTIVE", value); }
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); } 
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            set { putEntityInstance("ACTION_METHOD", value); }
            get { return new action_method(getEntityInstance("ACTION_METHOD")); } 
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            set { putEntityInstance("ACTION_PROPERTY", value); }
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); } 
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            set { putEntityInstance("ACTION_RELATIONSHIP", value); }
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); } 
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            set { putEntityInstance("ACTION_REQUEST_SOLUTION", value); }
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); } 
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            set { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", value); }
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); } 
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            set { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", value); }
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); } 
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            set { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", value); }
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); } 
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            set { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", value); }
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); } 
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            set { putEntityInstance("APPROVAL_STATUS", value); }
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); } 
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            set { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", value); }
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); } 
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            set { putEntityInstance("CERTIFICATION", value); }
            get { return new certification(getEntityInstance("CERTIFICATION")); } 
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            set { putEntityInstance("CLASS", value); }
            get { return new class_(getEntityInstance("CLASS")); } 
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            set { putEntityInstance("CLASS_SYSTEM", value); }
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); } 
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            set { putEntityInstance("CONFIGURATION_DESIGN", value); }
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); } 
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            set { putEntityInstance("CONFIGURATION_EFFECTIVITY", value); }
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); } 
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            set { putEntityInstance("CONFIGURATION_ITEM", value); }
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); } 
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            set { putEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT", value); }
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); } 
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            set { putEntityInstance("CONTRACT", value); }
            get { return new contract(getEntityInstance("CONTRACT")); } 
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            set { putEntityInstance("DOCUMENT_FILE", value); }
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); } 
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            set { putEntityInstance("DRAUGHTING_MODEL", value); }
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); } 
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            set { putEntityInstance("DRAWING_REVISION", value); }
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); } 
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            set { putEntityInstance("EXECUTED_ACTION", value); }
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); } 
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            set { putEntityInstance("GENERAL_PROPERTY", value); }
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); } 
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            set { putEntityInstance("MATERIAL_DESIGNATION", value); }
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); } 
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            set { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", value); }
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); } 
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            set { putEntityInstance("ORGANIZATION_RELATIONSHIP", value); }
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); } 
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            set { putEntityInstance("ORGANIZATIONAL_PROJECT", value); }
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); } 
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            set { putEntityInstance("PERSON_AND_ORGANIZATION", value); }
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); } 
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            set { putEntityInstance("PRESENTATION_AREA", value); }
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); } 
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            set { putEntityInstance("PRODUCT", value); }
            get { return new product(getEntityInstance("PRODUCT")); } 
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            set { putEntityInstance("PRODUCT_CONCEPT", value); }
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); } 
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE", value); }
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); } 
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", value); }
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); } 
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", value); }
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); } 
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            set { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE", value); }
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); } 
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            set { putEntityInstance("PRODUCT_DEFINITION", value); }
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); } 
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION", value); }
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); } 
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", value); }
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            set { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", value); }
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); } 
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            set { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", value); }
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); } 
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            set { putEntityInstance("PROPERTY_DEFINITION", value); }
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); } 
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            set { putEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE", value); }
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); } 
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            set { putEntityInstance("RESOURCE_PROPERTY", value); }
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); } 
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION", value); }
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); } 
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            set { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", value); }
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); } 
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            set { putEntityInstance("SHAPE_REPRESENTATION", value); }
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); } 
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            set { putEntityInstance("VERSIONED_ACTION_REQUEST", value); }
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class time_interval_item_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public time_interval_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public time_interval_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public time_interval_item_get() : base(null) { }

        public bool is_action { get { return IsADBEntity("action"); } }
        public action action
            {
            get { return new action(getEntityInstance("ACTION")); }
            }
        public bool is_action_directive { get { return IsADBEntity("action_directive"); } }
        public action_directive action_directive
            {
            get { return new action_directive(getEntityInstance("ACTION_DIRECTIVE")); }
            }
        public bool is_action_method { get { return IsADBEntity("action_method"); } }
        public action_method action_method
            {
            get { return new action_method(getEntityInstance("ACTION_METHOD")); }
            }
        public bool is_action_property { get { return IsADBEntity("action_property"); } }
        public action_property action_property
            {
            get { return new action_property(getEntityInstance("ACTION_PROPERTY")); }
            }
        public bool is_action_relationship { get { return IsADBEntity("action_relationship"); } }
        public action_relationship action_relationship
            {
            get { return new action_relationship(getEntityInstance("ACTION_RELATIONSHIP")); }
            }
        public bool is_action_request_solution { get { return IsADBEntity("action_request_solution"); } }
        public action_request_solution action_request_solution
            {
            get { return new action_request_solution(getEntityInstance("ACTION_REQUEST_SOLUTION")); }
            }
        public bool is_alternate_product_relationship { get { return IsADBEntity("alternate_product_relationship"); } }
        public alternate_product_relationship alternate_product_relationship
            {
            get { return new alternate_product_relationship(getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
            }
        public bool is_applied_action_assignment { get { return IsADBEntity("applied_action_assignment"); } }
        public applied_action_assignment applied_action_assignment
            {
            get { return new applied_action_assignment(getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
            }
        public bool is_applied_classification_assignment { get { return IsADBEntity("applied_classification_assignment"); } }
        public applied_classification_assignment applied_classification_assignment
            {
            get { return new applied_classification_assignment(getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
            }
        public bool is_applied_person_and_organization_assignment { get { return IsADBEntity("applied_person_and_organization_assignment"); } }
        public applied_person_and_organization_assignment applied_person_and_organization_assignment
            {
            get { return new applied_person_and_organization_assignment(getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
            }
        public bool is_approval_status { get { return IsADBEntity("approval_status"); } }
        public approval_status approval_status
            {
            get { return new approval_status(getEntityInstance("APPROVAL_STATUS")); }
            }
        public bool is_assembly_component_usage_substitute { get { return IsADBEntity("assembly_component_usage_substitute"); } }
        public assembly_component_usage_substitute assembly_component_usage_substitute
            {
            get { return new assembly_component_usage_substitute(getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
            }
        public bool is_certification { get { return IsADBEntity("certification"); } }
        public certification certification
            {
            get { return new certification(getEntityInstance("CERTIFICATION")); }
            }
        public bool is_class_ { get { return IsADBEntity("class_"); } }
        public class_ class_
            {
            get { return new class_(getEntityInstance("CLASS")); }
            }
        public bool is_class_system { get { return IsADBEntity("class_system"); } }
        public class_system class_system
            {
            get { return new class_system(getEntityInstance("CLASS_SYSTEM")); }
            }
        public bool is_configuration_design { get { return IsADBEntity("configuration_design"); } }
        public configuration_design configuration_design
            {
            get { return new configuration_design(getEntityInstance("CONFIGURATION_DESIGN")); }
            }
        public bool is_configuration_effectivity { get { return IsADBEntity("configuration_effectivity"); } }
        public configuration_effectivity configuration_effectivity
            {
            get { return new configuration_effectivity(getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
            }
        public bool is_configuration_item { get { return IsADBEntity("configuration_item"); } }
        public configuration_item configuration_item
            {
            get { return new configuration_item(getEntityInstance("CONFIGURATION_ITEM")); }
            }
        public bool is_configured_effectivity_assignment { get { return IsADBEntity("configured_effectivity_assignment"); } }
        public configured_effectivity_assignment configured_effectivity_assignment
            {
            get { return new configured_effectivity_assignment(getEntityInstance("CONFIGURED_EFFECTIVITY_ASSIGNMENT")); }
            }
        public bool is_contract { get { return IsADBEntity("contract"); } }
        public contract contract
            {
            get { return new contract(getEntityInstance("CONTRACT")); }
            }
        public bool is_document_file { get { return IsADBEntity("document_file"); } }
        public document_file document_file
            {
            get { return new document_file(getEntityInstance("DOCUMENT_FILE")); }
            }
        public bool is_draughting_model { get { return IsADBEntity("draughting_model"); } }
        public draughting_model draughting_model
            {
            get { return new draughting_model(getEntityInstance("DRAUGHTING_MODEL")); }
            }
        public bool is_drawing_revision { get { return IsADBEntity("drawing_revision"); } }
        public drawing_revision drawing_revision
            {
            get { return new drawing_revision(getEntityInstance("DRAWING_REVISION")); }
            }
        public bool is_executed_action { get { return IsADBEntity("executed_action"); } }
        public executed_action executed_action
            {
            get { return new executed_action(getEntityInstance("EXECUTED_ACTION")); }
            }
        public bool is_general_property { get { return IsADBEntity("general_property"); } }
        public general_property general_property
            {
            get { return new general_property(getEntityInstance("GENERAL_PROPERTY")); }
            }
        public bool is_material_designation { get { return IsADBEntity("material_designation"); } }
        public material_designation material_designation
            {
            get { return new material_designation(getEntityInstance("MATERIAL_DESIGNATION")); }
            }
        public bool is_mechanical_design_geometric_presentation_representation { get { return IsADBEntity("mechanical_design_geometric_presentation_representation"); } }
        public mechanical_design_geometric_presentation_representation mechanical_design_geometric_presentation_representation
            {
            get { return new mechanical_design_geometric_presentation_representation(getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
            }
        public bool is_organization_relationship { get { return IsADBEntity("organization_relationship"); } }
        public organization_relationship organization_relationship
            {
            get { return new organization_relationship(getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
            }
        public bool is_organizational_project { get { return IsADBEntity("organizational_project"); } }
        public organizational_project organizational_project
            {
            get { return new organizational_project(getEntityInstance("ORGANIZATIONAL_PROJECT")); }
            }
        public bool is_person_and_organization { get { return IsADBEntity("person_and_organization"); } }
        public person_and_organization person_and_organization
            {
            get { return new person_and_organization(getEntityInstance("PERSON_AND_ORGANIZATION")); }
            }
        public bool is_presentation_area { get { return IsADBEntity("presentation_area"); } }
        public presentation_area presentation_area
            {
            get { return new presentation_area(getEntityInstance("PRESENTATION_AREA")); }
            }
        public bool is_product { get { return IsADBEntity("product"); } }
        public product product
            {
            get { return new product(getEntityInstance("PRODUCT")); }
            }
        public bool is_product_concept { get { return IsADBEntity("product_concept"); } }
        public product_concept product_concept
            {
            get { return new product_concept(getEntityInstance("PRODUCT_CONCEPT")); }
            }
        public bool is_product_concept_feature { get { return IsADBEntity("product_concept_feature"); } }
        public product_concept_feature product_concept_feature
            {
            get { return new product_concept_feature(getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
            }
        public bool is_product_concept_feature_association { get { return IsADBEntity("product_concept_feature_association"); } }
        public product_concept_feature_association product_concept_feature_association
            {
            get { return new product_concept_feature_association(getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
            }
        public bool is_product_concept_feature_category { get { return IsADBEntity("product_concept_feature_category"); } }
        public product_concept_feature_category product_concept_feature_category
            {
            get { return new product_concept_feature_category(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
            }
        public bool is_product_concept_feature_category_usage { get { return IsADBEntity("product_concept_feature_category_usage"); } }
        public product_concept_feature_category_usage product_concept_feature_category_usage
            {
            get { return new product_concept_feature_category_usage(getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")); }
            }
        public bool is_product_definition { get { return IsADBEntity("product_definition"); } }
        public product_definition product_definition
            {
            get { return new product_definition(getEntityInstance("PRODUCT_DEFINITION")); }
            }
        public bool is_product_definition_formation { get { return IsADBEntity("product_definition_formation"); } }
        public product_definition_formation product_definition_formation
            {
            get { return new product_definition_formation(getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
            }
        public bool is_product_definition_formation_relationship { get { return IsADBEntity("product_definition_formation_relationship"); } }
        public product_definition_formation_relationship product_definition_formation_relationship
            {
            get { return new product_definition_formation_relationship(getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
            }
        public bool is_product_definition_relationship { get { return IsADBEntity("product_definition_relationship"); } }
        public product_definition_relationship product_definition_relationship
            {
            get { return new product_definition_relationship(getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
            }
        public bool is_product_definition_substitute { get { return IsADBEntity("product_definition_substitute"); } }
        public product_definition_substitute product_definition_substitute
            {
            get { return new product_definition_substitute(getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
            }
        public bool is_property_definition { get { return IsADBEntity("property_definition"); } }
        public property_definition property_definition
            {
            get { return new property_definition(getEntityInstance("PROPERTY_DEFINITION")); }
            }
        public bool is_requirement_for_action_resource { get { return IsADBEntity("requirement_for_action_resource"); } }
        public requirement_for_action_resource requirement_for_action_resource
            {
            get { return new requirement_for_action_resource(getEntityInstance("REQUIREMENT_FOR_ACTION_RESOURCE")); }
            }
        public bool is_resource_property { get { return IsADBEntity("resource_property"); } }
        public resource_property resource_property
            {
            get { return new resource_property(getEntityInstance("RESOURCE_PROPERTY")); }
            }
        public bool is_security_classification { get { return IsADBEntity("security_classification"); } }
        public security_classification security_classification
            {
            get { return new security_classification(getEntityInstance("SECURITY_CLASSIFICATION")); }
            }
        public bool is_security_classification_level { get { return IsADBEntity("security_classification_level"); } }
        public security_classification_level security_classification_level
            {
            get { return new security_classification_level(getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
            }
        public bool is_shape_representation { get { return IsADBEntity("shape_representation"); } }
        public shape_representation shape_representation
            {
            get { return new shape_representation(getEntityInstance("SHAPE_REPRESENTATION")); }
            }
        public bool is_versioned_action_request { get { return IsADBEntity("versioned_action_request"); } }
        public versioned_action_request versioned_action_request
            {
            get { return new versioned_action_request(getEntityInstance("VERSIONED_ACTION_REQUEST")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class tolerance_deviation_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_deviation_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_deviation_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_deviation_select() : base(null) { }

        public bool is_curve_tolerance_deviation { get { return IsADBType("CURVE_TOLERANCE_DEVIATION"); } }
        public double? curve_tolerance_deviation
            {
            set { put_double("CURVE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL, value); }
            get { return get_double("CURVE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL); }
            }
        public bool is_surface_tolerance_deviation { get { return IsADBType("SURFACE_TOLERANCE_DEVIATION"); } }
        public double? surface_tolerance_deviation
            {
            set { put_double("SURFACE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL, value); }
            get { return get_double("SURFACE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class tolerance_deviation_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_deviation_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_deviation_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_deviation_select_get() : base(null) { }

        public bool is_curve_tolerance_deviation { get { return IsADBType("CURVE_TOLERANCE_DEVIATION"); } }
        public double? curve_tolerance_deviation
            {
            get { return get_double("CURVE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL); }
            }
        public bool is_surface_tolerance_deviation { get { return IsADBType("SURFACE_TOLERANCE_DEVIATION"); } }
        public double? surface_tolerance_deviation
            {
            get { return get_double("SURFACE_TOLERANCE_DEVIATION", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class tolerance_method_definition : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_method_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_method_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_method_definition() : base(null) { }

        public bool is_tolerance_value { get { return IsADBEntity("tolerance_value"); } }
        public tolerance_value tolerance_value
            {
            set { putEntityInstance("TOLERANCE_VALUE", value); }
            get { return new tolerance_value(getEntityInstance("TOLERANCE_VALUE")); } 
            }
        public bool is_limits_and_fits { get { return IsADBEntity("limits_and_fits"); } }
        public limits_and_fits limits_and_fits
            {
            set { putEntityInstance("LIMITS_AND_FITS", value); }
            get { return new limits_and_fits(getEntityInstance("LIMITS_AND_FITS")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class tolerance_method_definition_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_method_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_method_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_method_definition_get() : base(null) { }

        public bool is_tolerance_value { get { return IsADBEntity("tolerance_value"); } }
        public tolerance_value tolerance_value
            {
            get { return new tolerance_value(getEntityInstance("TOLERANCE_VALUE")); }
            }
        public bool is_limits_and_fits { get { return IsADBEntity("limits_and_fits"); } }
        public limits_and_fits limits_and_fits
            {
            get { return new limits_and_fits(getEntityInstance("LIMITS_AND_FITS")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class tolerance_parameter_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_parameter_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_parameter_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_parameter_select() : base(null) { }

        public bool is_curve_tolerance_parameter { get { return IsADBType("CURVE_TOLERANCE_PARAMETER"); } }
        public double? curve_tolerance_parameter
            {
            set { put_double("CURVE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL, value); }
            get { return get_double("CURVE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL); }
            }
        public bool is_surface_tolerance_parameter { get { return IsADBType("SURFACE_TOLERANCE_PARAMETER"); } }
        public double? surface_tolerance_parameter
            {
            set { put_double("SURFACE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL, value); }
            get { return get_double("SURFACE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class tolerance_parameter_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_parameter_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_parameter_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_parameter_select_get() : base(null) { }

        public bool is_curve_tolerance_parameter { get { return IsADBType("CURVE_TOLERANCE_PARAMETER"); } }
        public double? curve_tolerance_parameter
            {
            get { return get_double("CURVE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL); }
            }
        public bool is_surface_tolerance_parameter { get { return IsADBType("SURFACE_TOLERANCE_PARAMETER"); } }
        public double? surface_tolerance_parameter
            {
            get { return get_double("SURFACE_TOLERANCE_PARAMETER", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class tolerance_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_select() : base(null) { }

        public bool is_approximation_tolerance_deviation { get { return IsADBEntity("approximation_tolerance_deviation"); } }
        public approximation_tolerance_deviation approximation_tolerance_deviation
            {
            set { putEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION", value); }
            get { return new approximation_tolerance_deviation(getEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION")); } 
            }
        public bool is_approximation_tolerance_parameter { get { return IsADBEntity("approximation_tolerance_parameter"); } }
        public approximation_tolerance_parameter approximation_tolerance_parameter
            {
            set { putEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER", value); }
            get { return new approximation_tolerance_parameter(getEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class tolerance_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_select_get() : base(null) { }

        public bool is_approximation_tolerance_deviation { get { return IsADBEntity("approximation_tolerance_deviation"); } }
        public approximation_tolerance_deviation approximation_tolerance_deviation
            {
            get { return new approximation_tolerance_deviation(getEntityInstance("APPROXIMATION_TOLERANCE_DEVIATION")); }
            }
        public bool is_approximation_tolerance_parameter { get { return IsADBEntity("approximation_tolerance_parameter"); } }
        public approximation_tolerance_parameter approximation_tolerance_parameter
            {
            get { return new approximation_tolerance_parameter(getEntityInstance("APPROXIMATION_TOLERANCE_PARAMETER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class transformation : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation() : base(null) { }

        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            set { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", value); }
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); } 
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            set { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", value); }
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class transformation_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation_get() : base(null) { }

        public bool is_item_defined_transformation { get { return IsADBEntity("item_defined_transformation"); } }
        public item_defined_transformation item_defined_transformation_
            {
            get { return new item_defined_transformation(getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); }
            }
        public bool is_functionally_defined_transformation { get { return IsADBEntity("functionally_defined_transformation"); } }
        public functionally_defined_transformation functionally_defined_transformation
            {
            get { return new functionally_defined_transformation(getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class translational_range_measure : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public translational_range_measure(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public translational_range_measure(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public translational_range_measure() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            set { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_unlimited_range { get { return IsADBType("UNLIMITED_RANGE"); } }
        public unlimited_range? unlimited_range 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<unlimited_range>.FromValue(value.Value, EnumNames.unlimited_range_); putEnumerationValue("UNLIMITED_RANGE", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("UNLIMITED_RANGE", EnumNames.unlimited_range_); 
                return EnumValue<unlimited_range>.FromIndex(ind); 
                } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class translational_range_measure_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public translational_range_measure_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public translational_range_measure_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public translational_range_measure_get() : base(null) { }

        public bool is_length_measure { get { return IsADBType("LENGTH_MEASURE"); } }
        public double? length_measure
            {
            get { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_unlimited_range { get { return IsADBType("UNLIMITED_RANGE"); } }
        public unlimited_range? unlimited_range
            {
            get
                {
                int ind = getEnumerationIndex("UNLIMITED_RANGE", EnumNames.unlimited_range_);
                return EnumValue<unlimited_range>.FromIndex(ind);
                }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class trimming_select : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select() : base(null) { }

        public bool is_cartesian_point { get { return IsADBEntity("cartesian_point"); } }
        public cartesian_point cartesian_point
            {
            set { putEntityInstance("CARTESIAN_POINT", value); }
            get { return new cartesian_point(getEntityInstance("CARTESIAN_POINT")); } 
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            set { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class trimming_select_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select_get() : base(null) { }

        public bool is_cartesian_point { get { return IsADBEntity("cartesian_point"); } }
        public cartesian_point cartesian_point
            {
            get { return new cartesian_point(getEntityInstance("CARTESIAN_POINT")); }
            }
        public bool is_parameter_value { get { return IsADBType("PARAMETER_VALUE"); } }
        public double? parameter_value
            {
            get { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class unit : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit() : base(null) { }

        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            set { putEntityInstance("DERIVED_UNIT", value); }
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); } 
            }
        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            set { putEntityInstance("NAMED_UNIT", value); }
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class unit_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit_get() : base(null) { }

        public bool is_derived_unit { get { return IsADBEntity("derived_unit"); } }
        public derived_unit derived_unit
            {
            get { return new derived_unit(getEntityInstance("DERIVED_UNIT")); }
            }
        public bool is_named_unit { get { return IsADBEntity("named_unit"); } }
        public named_unit named_unit
            {
            get { return new named_unit(getEntityInstance("NAMED_UNIT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class value_qualifier : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier() : base(null) { }

        public bool is_precision_qualifier { get { return IsADBEntity("precision_qualifier"); } }
        public precision_qualifier precision_qualifier
            {
            set { putEntityInstance("PRECISION_QUALIFIER", value); }
            get { return new precision_qualifier(getEntityInstance("PRECISION_QUALIFIER")); } 
            }
        public bool is_type_qualifier { get { return IsADBEntity("type_qualifier"); } }
        public type_qualifier type_qualifier
            {
            set { putEntityInstance("TYPE_QUALIFIER", value); }
            get { return new type_qualifier(getEntityInstance("TYPE_QUALIFIER")); } 
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            set { putEntityInstance("UNCERTAINTY_QUALIFIER", value); }
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class value_qualifier_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier_get() : base(null) { }

        public bool is_precision_qualifier { get { return IsADBEntity("precision_qualifier"); } }
        public precision_qualifier precision_qualifier
            {
            get { return new precision_qualifier(getEntityInstance("PRECISION_QUALIFIER")); }
            }
        public bool is_type_qualifier { get { return IsADBEntity("type_qualifier"); } }
        public type_qualifier type_qualifier
            {
            get { return new type_qualifier(getEntityInstance("TYPE_QUALIFIER")); }
            }
        public bool is_uncertainty_qualifier { get { return IsADBEntity("uncertainty_qualifier"); } }
        public uncertainty_qualifier uncertainty_qualifier
            {
            get { return new uncertainty_qualifier(getEntityInstance("UNCERTAINTY_QUALIFIER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class vector_or_direction : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction() : base(null) { }

        public bool is_vector { get { return IsADBEntity("vector"); } }
        public vector vector
            {
            set { putEntityInstance("VECTOR", value); }
            get { return new vector(getEntityInstance("VECTOR")); } 
            }
        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            set { putEntityInstance("DIRECTION", value); }
            get { return new direction(getEntityInstance("DIRECTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class vector_or_direction_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction_get() : base(null) { }

        public bool is_vector { get { return IsADBEntity("vector"); } }
        public vector vector
            {
            get { return new vector(getEntityInstance("VECTOR")); }
            }
        public bool is_direction { get { return IsADBEntity("direction"); } }
        public direction direction
            {
            get { return new direction(getEntityInstance("DIRECTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };

    //
    // Unnamed aggregations
    //
    public class set_of_versioned_action_request : List<versioned_action_request> { }
    class set_of_versioned_action_requestSerializer : AggrSerializerInstance<versioned_action_request, set_of_versioned_action_request> { }
    public class set_of_supported_item : List<supported_item> { }
    class set_of_supported_itemSerializer : AggrSerializerSelect<supported_item, set_of_supported_item> { }
    public class set_of_characterized_action_definition : List<characterized_action_definition> { }
    class set_of_characterized_action_definitionSerializer : AggrSerializerSelect<characterized_action_definition, set_of_characterized_action_definition> { }
    public class set_of_representation_item : List<representation_item> { }
    class set_of_representation_itemSerializer : AggrSerializerInstance<representation_item, set_of_representation_item> { }
    public class set_of_face_bound : List<face_bound> { }
    class set_of_face_boundSerializer : AggrSerializerInstance<face_bound, set_of_face_bound> { }
    public class list_of_generic_expression : List<generic_expression> { }
    class list_of_generic_expressionSerializer : AggrSerializerInstance<generic_expression, list_of_generic_expression> { }
    public class set_of_draughting_callout_element : List<draughting_callout_element> { }
    class set_of_draughting_callout_elementSerializer : AggrSerializerSelect<draughting_callout_element, set_of_draughting_callout_element> { }
    public class set_of_datum_reference : List<datum_reference> { }
    class set_of_datum_referenceSerializer : AggrSerializerInstance<datum_reference, set_of_datum_reference> { }
    public class set_of_presentation_style_assignment : List<presentation_style_assignment> { }
    class set_of_presentation_style_assignmentSerializer : AggrSerializerInstance<presentation_style_assignment, set_of_presentation_style_assignment> { }
    public class set_of_curve : List<curve> { }
    class set_of_curveSerializer : AggrSerializerInstance<curve, set_of_curve> { }
    public class set_of_annotation_plane_element : List<annotation_plane_element> { }
    class set_of_annotation_plane_elementSerializer : AggrSerializerSelect<annotation_plane_element, set_of_annotation_plane_element> { }
    public class set_of_shape_aspect_relationship : List<shape_aspect_relationship> { }
    class set_of_shape_aspect_relationshipSerializer : AggrSerializerInstance<shape_aspect_relationship, set_of_shape_aspect_relationship> { }
    public class set_of_application_context_element : List<application_context_element> { }
    class set_of_application_context_elementSerializer : AggrSerializerInstance<application_context_element, set_of_application_context_element> { }
    public class set_of_action_item : List<action_item> { }
    class set_of_action_itemSerializer : AggrSerializerSelect<action_item, set_of_action_item> { }
    public class set_of_action_request_item : List<action_request_item> { }
    class set_of_action_request_itemSerializer : AggrSerializerSelect<action_request_item, set_of_action_request_item> { }
    public class set_of_approval_item : List<approval_item> { }
    class set_of_approval_itemSerializer : AggrSerializerSelect<approval_item, set_of_approval_item> { }
    public class set_of_certification_item : List<certification_item> { }
    class set_of_certification_itemSerializer : AggrSerializerSelect<certification_item, set_of_certification_item> { }
    public class set_of_classification_item : List<classification_item> { }
    class set_of_classification_itemSerializer : AggrSerializerSelect<classification_item, set_of_classification_item> { }
    public class set_of_contract_item : List<contract_item> { }
    class set_of_contract_itemSerializer : AggrSerializerSelect<contract_item, set_of_contract_item> { }
    public class set_of_date_and_time_item : List<date_and_time_item> { }
    class set_of_date_and_time_itemSerializer : AggrSerializerSelect<date_and_time_item, set_of_date_and_time_item> { }
    public class set_of_date_item : List<date_item> { }
    class set_of_date_itemSerializer : AggrSerializerSelect<date_item, set_of_date_item> { }
    public class set_of_document_reference_item : List<document_reference_item> { }
    class set_of_document_reference_itemSerializer : AggrSerializerSelect<document_reference_item, set_of_document_reference_item> { }
    public class set_of_effectivity_item : List<effectivity_item> { }
    class set_of_effectivity_itemSerializer : AggrSerializerSelect<effectivity_item, set_of_effectivity_item> { }
    public class set_of_event_occurrence_item : List<event_occurrence_item> { }
    class set_of_event_occurrence_itemSerializer : AggrSerializerSelect<event_occurrence_item, set_of_event_occurrence_item> { }
    public class set_of_external_identification_item : List<external_identification_item> { }
    class set_of_external_identification_itemSerializer : AggrSerializerSelect<external_identification_item, set_of_external_identification_item> { }
    public class set_of_group_item : List<group_item> { }
    class set_of_group_itemSerializer : AggrSerializerSelect<group_item, set_of_group_item> { }
    public class set_of_identification_item : List<identification_item> { }
    class set_of_identification_itemSerializer : AggrSerializerSelect<identification_item, set_of_identification_item> { }
    public class set_of_name_item : List<name_item> { }
    class set_of_name_itemSerializer : AggrSerializerSelect<name_item, set_of_name_item> { }
    public class set_of_organization_item : List<organization_item> { }
    class set_of_organization_itemSerializer : AggrSerializerSelect<organization_item, set_of_organization_item> { }
    public class set_of_organizational_project_item : List<organizational_project_item> { }
    class set_of_organizational_project_itemSerializer : AggrSerializerSelect<organizational_project_item, set_of_organizational_project_item> { }
    public class set_of_person_and_organization_item : List<person_and_organization_item> { }
    class set_of_person_and_organization_itemSerializer : AggrSerializerSelect<person_and_organization_item, set_of_person_and_organization_item> { }
    public class set_of_presented_item_select : List<presented_item_select> { }
    class set_of_presented_item_selectSerializer : AggrSerializerSelect<presented_item_select, set_of_presented_item_select> { }
    public class set_of_security_classification_item : List<security_classification_item> { }
    class set_of_security_classification_itemSerializer : AggrSerializerSelect<security_classification_item, set_of_security_classification_item> { }
    public class set_of_time_interval_item : List<time_interval_item> { }
    class set_of_time_interval_itemSerializer : AggrSerializerSelect<time_interval_item, set_of_time_interval_item> { }
    public class set_of_founded_item_select : List<founded_item_select> { }
    class set_of_founded_item_selectSerializer : AggrSerializerSelect<founded_item_select, set_of_founded_item_select> { }
    public class set_of_tolerance_deviation_select : List<tolerance_deviation_select> { }
    class set_of_tolerance_deviation_selectSerializer : AggrSerializerSelect<tolerance_deviation_select, set_of_tolerance_deviation_select> { }
    public class set_of_tolerance_parameter_select : List<tolerance_parameter_select> { }
    class set_of_tolerance_parameter_selectSerializer : AggrSerializerSelect<tolerance_parameter_select, set_of_tolerance_parameter_select> { }
    public class set_of_derived_unit_element : List<derived_unit_element> { }
    class set_of_derived_unit_elementSerializer : AggrSerializerInstance<derived_unit_element, set_of_derived_unit_element> { }
    public class set_of_attribute_language_item : List<attribute_language_item> { }
    class set_of_attribute_language_itemSerializer : AggrSerializerSelect<attribute_language_item, set_of_attribute_language_item> { }
    public class list_of_direction : List<direction> { }
    class list_of_directionSerializer : AggrSerializerInstance<direction, list_of_direction> { }
    public class list_of_cartesian_point : List<cartesian_point> { }
    class list_of_cartesian_pointSerializer : AggrSerializerInstance<cartesian_point, list_of_cartesian_point> { }
    public class array_of_cartesian_point : List<cartesian_point> { }
    class array_of_cartesian_pointSerializer : AggrSerializerInstance<cartesian_point, array_of_cartesian_point> { }
    public class ListOfIntValue : List<IntValue> { }
    class ListOfIntValueSerializer : AggrSerializer_IntValue<IntValue, ListOfIntValue> { }
    public class list_of_parameter_value : List<double> { }
    class list_of_parameter_valueSerializer : AggrSerializer_double<double, list_of_parameter_value> { }
    public class list_of_list_of_cartesian_point : List<list_of_cartesian_point> { }
    class list_of_list_of_cartesian_pointSerializer : AggrSerializerAggr<list_of_cartesian_point, list_of_cartesian_pointSerializer, list_of_list_of_cartesian_point> { }
    public class array_of_array_of_cartesian_point : List<array_of_cartesian_point> { }
    class array_of_array_of_cartesian_pointSerializer : AggrSerializerAggr<array_of_cartesian_point, array_of_cartesian_pointSerializer, array_of_array_of_cartesian_point> { }
    public class list_of_composite_curve_segment : List<composite_curve_segment> { }
    class list_of_composite_curve_segmentSerializer : AggrSerializerInstance<composite_curve_segment, list_of_composite_curve_segment> { }
    public class set_of_surface : List<surface> { }
    class set_of_surfaceSerializer : AggrSerializerInstance<surface, set_of_surface> { }
    public class list_of_pcurve_or_surface : List<pcurve_or_surface> { }
    class list_of_pcurve_or_surfaceSerializer : AggrSerializerSelect<pcurve_or_surface, list_of_pcurve_or_surface> { }
    public class set_of_oriented_closed_shell : List<oriented_closed_shell> { }
    class set_of_oriented_closed_shellSerializer : AggrSerializerInstance<oriented_closed_shell, set_of_oriented_closed_shell> { }
    public class set_of_mapped_item : List<mapped_item> { }
    class set_of_mapped_itemSerializer : AggrSerializerInstance<mapped_item, set_of_mapped_item> { }
    public class list_of_length_measure : List<double> { }
    class list_of_length_measureSerializer : AggrSerializer_double<double, list_of_length_measure> { }
    public class set_of_class_usage_effectivity_context_item : List<class_usage_effectivity_context_item> { }
    class set_of_class_usage_effectivity_context_itemSerializer : AggrSerializerSelect<class_usage_effectivity_context_item, set_of_class_usage_effectivity_context_item> { }
    public class set_of_face : List<face> { }
    class set_of_faceSerializer : AggrSerializerInstance<face, set_of_face> { }
    public class bag_of_composite_curve : List<composite_curve> { }
    class bag_of_composite_curveSerializer : AggrSerializerInstance<composite_curve, bag_of_composite_curve> { }
    public class set_of_text_or_character : List<text_or_character> { }
    class set_of_text_or_characterSerializer : AggrSerializerSelect<text_or_character, set_of_text_or_character> { }
    public class set_of_product_concept_feature_association : List<product_concept_feature_association> { }
    class set_of_product_concept_feature_associationSerializer : AggrSerializerInstance<product_concept_feature_association, set_of_product_concept_feature_association> { }
    public class set_of_pair_value : List<pair_value> { }
    class set_of_pair_valueSerializer : AggrSerializerInstance<pair_value, set_of_pair_value> { }
    public class set_of_configured_effectivity_item : List<configured_effectivity_item> { }
    class set_of_configured_effectivity_itemSerializer : AggrSerializerSelect<configured_effectivity_item, set_of_configured_effectivity_item> { }
    public class set_of_configured_effectivity_context_item : List<configured_effectivity_context_item> { }
    class set_of_configured_effectivity_context_itemSerializer : AggrSerializerSelect<configured_effectivity_context_item, set_of_configured_effectivity_context_item> { }
    public class set_of_edge : List<edge> { }
    class set_of_edgeSerializer : AggrSerializerInstance<edge, set_of_edge> { }
    public class set_of_invisible_item : List<invisible_item> { }
    class set_of_invisible_itemSerializer : AggrSerializerSelect<invisible_item, set_of_invisible_item> { }
    public class list_of_style_context_select : List<style_context_select> { }
    class list_of_style_context_selectSerializer : AggrSerializerSelect<style_context_select, list_of_style_context_select> { }
    public class set_of_boundary_curve : List<boundary_curve> { }
    class set_of_boundary_curveSerializer : AggrSerializerInstance<boundary_curve, set_of_boundary_curve> { }
    public class list_of_curve_style_font_pattern : List<curve_style_font_pattern> { }
    class list_of_curve_style_font_patternSerializer : AggrSerializerInstance<curve_style_font_pattern, list_of_curve_style_font_pattern> { }
    public class set_of_property_definition_representation : List<property_definition_representation> { }
    class set_of_property_definition_representationSerializer : AggrSerializerInstance<property_definition_representation, set_of_property_definition_representation> { }
    public class list_of_double : List<double> { }
    class list_of_doubleSerializer : AggrSerializer_double<double, list_of_double> { }
    public class set_of_document_representation_type : List<document_representation_type> { }
    class set_of_document_representation_typeSerializer : AggrSerializerInstance<document_representation_type, set_of_document_representation_type> { }
    public class set_of_specified_item : List<specified_item> { }
    class set_of_specified_itemSerializer : AggrSerializerSelect<specified_item, set_of_specified_item> { }
    public class set_of_draughting_titled_item : List<draughting_titled_item> { }
    class set_of_draughting_titled_itemSerializer : AggrSerializerSelect<draughting_titled_item, set_of_draughting_titled_item> { }
    public class set_of_area_in_set : List<area_in_set> { }
    class set_of_area_in_setSerializer : AggrSerializerInstance<area_in_set, set_of_area_in_set> { }
    public class set_of_connected_edge_set : List<connected_edge_set> { }
    class set_of_connected_edge_setSerializer : AggrSerializerInstance<connected_edge_set, set_of_connected_edge_set> { }
    public class list_of_oriented_edge : List<oriented_edge> { }
    class list_of_oriented_edgeSerializer : AggrSerializerInstance<oriented_edge, list_of_oriented_edge> { }
    public class set_of_connected_face_set : List<connected_face_set> { }
    class set_of_connected_face_setSerializer : AggrSerializerInstance<connected_face_set, set_of_connected_face_set> { }
    public class set_of_fill_style_select : List<fill_style_select> { }
    class set_of_fill_style_selectSerializer : AggrSerializerSelect<fill_style_select, set_of_fill_style_select> { }
    public class set_of_fill_area_style_tile_shape_select : List<fill_area_style_tile_shape_select> { }
    class set_of_fill_area_style_tile_shape_selectSerializer : AggrSerializerSelect<fill_area_style_tile_shape_select, set_of_fill_area_style_tile_shape_select> { }
    public class set_of_kinematic_path : List<kinematic_path> { }
    class set_of_kinematic_pathSerializer : AggrSerializerInstance<kinematic_path, set_of_kinematic_path> { }
    public class set_of_geometric_set_select : List<geometric_set_select> { }
    class set_of_geometric_set_selectSerializer : AggrSerializerSelect<geometric_set_select, set_of_geometric_set_select> { }
    public class set_of_representation : List<representation> { }
    class set_of_representationSerializer : AggrSerializerInstance<representation, set_of_representation> { }
    public class set_of_uncertainty_measure_with_unit : List<uncertainty_measure_with_unit> { }
    class set_of_uncertainty_measure_with_unitSerializer : AggrSerializerInstance<uncertainty_measure_with_unit, set_of_uncertainty_measure_with_unit> { }
    public class set_of_unit : List<unit> { }
    class set_of_unitSerializer : AggrSerializerSelect<unit, set_of_unit> { }
    public class set_of_configuration_interpolation : List<configuration_interpolation> { }
    class set_of_configuration_interpolationSerializer : AggrSerializerInstance<configuration_interpolation, set_of_configuration_interpolation> { }
    public class set_of_kinematic_result : List<kinematic_result> { }
    class set_of_kinematic_resultSerializer : AggrSerializerSelect<kinematic_result, set_of_kinematic_result> { }
    public class set_of_kinematic_analysis_definition : List<kinematic_analysis_definition> { }
    class set_of_kinematic_analysis_definitionSerializer : AggrSerializerSelect<kinematic_analysis_definition, set_of_kinematic_analysis_definition> { }
    public class set_of_kinematic_joint : List<kinematic_joint> { }
    class set_of_kinematic_jointSerializer : AggrSerializerInstance<kinematic_joint, set_of_kinematic_joint> { }
    public class set_of_language_item : List<language_item> { }
    class set_of_language_itemSerializer : AggrSerializerSelect<language_item, set_of_language_item> { }
    public class set_of_characterized_definition : List<characterized_definition> { }
    class set_of_characterized_definitionSerializer : AggrSerializerSelect<characterized_definition, set_of_characterized_definition> { }
    public class set_of_value_qualifier : List<value_qualifier> { }
    class set_of_value_qualifierSerializer : AggrSerializerSelect<value_qualifier, set_of_value_qualifier> { }
    public class set_of_multi_language_attribute_item : List<multi_language_attribute_item> { }
    class set_of_multi_language_attribute_itemSerializer : AggrSerializerSelect<multi_language_attribute_item, set_of_multi_language_attribute_item> { }
    public class set_of_organization : List<organization> { }
    class set_of_organizationSerializer : AggrSerializerInstance<organization, set_of_organization> { }
    public class list_of_label : List<TextValue> { }
    class list_of_labelSerializer : AggrSerializerText<TextValue, list_of_label> { public list_of_labelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class set_of_person : List<person> { }
    class set_of_personSerializer : AggrSerializerInstance<person, set_of_person> { }
    public class set_of_document : List<document> { }
    class set_of_documentSerializer : AggrSerializerInstance<document, set_of_document> { }
    public class set_of_layered_item : List<layered_item> { }
    class set_of_layered_itemSerializer : AggrSerializerSelect<layered_item, set_of_layered_item> { }
    public class set_of_presentation_style_select : List<presentation_style_select> { }
    class set_of_presentation_style_selectSerializer : AggrSerializerSelect<presentation_style_select, set_of_presentation_style_select> { }
    public class set_of_product_context : List<product_context> { }
    class set_of_product_contextSerializer : AggrSerializerInstance<product_context, set_of_product_context> { }
    public class set_of_category_usage_item : List<category_usage_item> { }
    class set_of_category_usage_itemSerializer : AggrSerializerSelect<category_usage_item, set_of_category_usage_item> { }
    public class set_of_process_product_association : List<process_product_association> { }
    class set_of_process_product_associationSerializer : AggrSerializerInstance<process_product_association, set_of_process_product_association> { }
    public class set_of_product : List<product> { }
    class set_of_productSerializer : AggrSerializerInstance<product, set_of_product> { }
    public class set_of_shape_aspect : List<shape_aspect> { }
    class set_of_shape_aspectSerializer : AggrSerializerInstance<shape_aspect, set_of_shape_aspect> { }
    public class set_of_process_property_association : List<process_property_association> { }
    class set_of_process_property_associationSerializer : AggrSerializerInstance<process_property_association, set_of_process_property_association> { }
    public class array_of_double : List<double> { }
    class array_of_doubleSerializer : AggrSerializer_double<double, array_of_double> { }
    public class list_of_list_of_double : List<list_of_double> { }
    class list_of_list_of_doubleSerializer : AggrSerializerAggr<list_of_double, list_of_doubleSerializer, list_of_list_of_double> { }
    public class array_of_array_of_double : List<array_of_double> { }
    class array_of_array_of_doubleSerializer : AggrSerializerAggr<array_of_double, array_of_doubleSerializer, array_of_array_of_double> { }
    public class list_of_surface_patch : List<surface_patch> { }
    class list_of_surface_patchSerializer : AggrSerializerInstance<surface_patch, list_of_surface_patch> { }
    public class list_of_list_of_surface_patch : List<list_of_surface_patch> { }
    class list_of_list_of_surface_patchSerializer : AggrSerializerAggr<list_of_surface_patch, list_of_surface_patchSerializer, list_of_list_of_surface_patch> { }
    public class set_of_action_resource : List<action_resource> { }
    class set_of_action_resourceSerializer : AggrSerializerInstance<action_resource, set_of_action_resource> { }
    public class set_of_shell : List<shell> { }
    class set_of_shellSerializer : AggrSerializerSelect<shell, set_of_shell> { }
    public class bag_of_rectangular_composite_surface : List<rectangular_composite_surface> { }
    class bag_of_rectangular_composite_surfaceSerializer : AggrSerializerInstance<rectangular_composite_surface, bag_of_rectangular_composite_surface> { }
    public class set_of_surface_style_element_select : List<surface_style_element_select> { }
    class set_of_surface_style_element_selectSerializer : AggrSerializerSelect<surface_style_element_select, set_of_surface_style_element_select> { }
    public class set_of_direction_count_select : List<direction_count_select> { }
    class set_of_direction_count_selectSerializer : AggrSerializerSelect<direction_count_select, set_of_direction_count_select> { }
    public class set_of_rendering_properties_select : List<rendering_properties_select> { }
    class set_of_rendering_properties_selectSerializer : AggrSerializerSelect<rendering_properties_select, set_of_rendering_properties_select> { }
    public class set_of_box_characteristic_select : List<box_characteristic_select> { }
    class set_of_box_characteristic_selectSerializer : AggrSerializerSelect<box_characteristic_select, set_of_box_characteristic_select> { }
    public class set_of_geometric_tolerance : List<geometric_tolerance> { }
    class set_of_geometric_toleranceSerializer : AggrSerializerInstance<geometric_tolerance, set_of_geometric_tolerance> { }
    public class set_of_trimming_select : List<trimming_select> { }
    class set_of_trimming_selectSerializer : AggrSerializerSelect<trimming_select, set_of_trimming_select> { }

    //
    // Entities
    // 


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_expression : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_expression(SdaiInstance instance) : base(instance) { }
        public generic_expression() : base(0) { }

        public static implicit operator generic_expression(SdaiInstance instance) => new generic_expression(instance);


        protected override TextValue WrapperEntityName() { return "generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class expression : generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public expression(SdaiInstance instance) : base(instance) { }
        public expression() : base(0) { }

        public static implicit operator expression(SdaiInstance instance) => new expression(instance);


        protected override TextValue WrapperEntityName() { return "expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class numeric_expression : expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public numeric_expression(SdaiInstance instance) : base(instance) { }
        public numeric_expression() : base(0) { }

        public static implicit operator numeric_expression(SdaiInstance instance) => new numeric_expression(instance);

        public bool? is_int { get { return get_bool("is_int", ifcengine.sdaiBOOLEAN); } }
        public bool? sql_mappable { get { return get_bool("sql_mappable", ifcengine.sdaiBOOLEAN); } }

        protected override TextValue WrapperEntityName() { return "numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_numeric_expression : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_numeric_expression(SdaiInstance instance) : base(instance) { }
        public unary_numeric_expression() : base(0) { }

        public static implicit operator unary_numeric_expression(SdaiInstance instance) => new unary_numeric_expression(instance);

        public generic_expression operand 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "unary_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_function_call
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_function_call : unary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_function_call(SdaiInstance instance) : base(instance) { }
        public unary_function_call() : base(0) { }

        public static implicit operator unary_function_call(SdaiInstance instance) => new unary_function_call(instance);


        protected override TextValue WrapperEntityName() { return "unary_function_call"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of abs_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class abs_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of abs_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public abs_function(SdaiInstance instance) : base(instance) { }
        public abs_function() : base(0) { }

        public static implicit operator abs_function(SdaiInstance instance) => new abs_function(instance);

        /// <summary>
        /// Create new instace of abs_function and returns object of this class to interact with
        /// </summary>
        public static new abs_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "abs_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "abs_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of acos_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class acos_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of acos_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public acos_function(SdaiInstance instance) : base(instance) { }
        public acos_function() : base(0) { }

        public static implicit operator acos_function(SdaiInstance instance) => new acos_function(instance);

        /// <summary>
        /// Create new instace of acos_function and returns object of this class to interact with
        /// </summary>
        public static new acos_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "acos_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "acos_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action(SdaiInstance instance) : base(instance) { }
        public action() : base(0) { }

        public static implicit operator action(SdaiInstance instance) => new action(instance);

        /// <summary>
        /// Create new instace of action and returns object of this class to interact with
        /// </summary>
        public static new action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public action_method chosen_method 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, out inst); return new action_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_assignment(SdaiInstance instance) : base(instance) { }
        public action_assignment() : base(0) { }

        public static implicit operator action_assignment(SdaiInstance instance) => new action_assignment(instance);

        public action assigned_action 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, out inst); return new action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "action_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_directive
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_directive : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_directive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_directive(SdaiInstance instance) : base(instance) { }
        public action_directive() : base(0) { }

        public static implicit operator action_directive(SdaiInstance instance) => new action_directive(instance);

        /// <summary>
        /// Create new instace of action_directive and returns object of this class to interact with
        /// </summary>
        public static new action_directive Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_directive"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue analysis
            {
            get { return get_string("analysis", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "analysis", ifcengine.sdaiSTRING, value); }
            }
        public TextValue comment
            {
            get { return get_string("comment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "comment", ifcengine.sdaiSTRING, value); }
            }
        public set_of_versioned_action_request requests { get { return (new set_of_versioned_action_requestSerializer()).FromAttr(m_instance, "requests"); } }
        public void put_requests(IEnumerable<versioned_action_request> lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }
        public void put_requests_untyped(IEnumerable lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }

        protected override TextValue WrapperEntityName() { return "action_directive"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method(SdaiInstance instance) : base(instance) { }
        public action_method() : base(0) { }

        public static implicit operator action_method(SdaiInstance instance) => new action_method(instance);

        /// <summary>
        /// Create new instace of action_method and returns object of this class to interact with
        /// </summary>
        public static new action_method Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue consequence
            {
            get { return get_string("consequence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "consequence", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "action_method"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method_relationship(SdaiInstance instance) : base(instance) { }
        public action_method_relationship() : base(0) { }

        public static implicit operator action_method_relationship(SdaiInstance instance) => new action_method_relationship(instance);

        /// <summary>
        /// Create new instace of action_method_relationship and returns object of this class to interact with
        /// </summary>
        public static new action_method_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public action_method relating_method 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_method", ifcengine.sdaiINSTANCE, out inst); return new action_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_method", ifcengine.sdaiINSTANCE, i); }
            }
        public action_method related_method 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_method", ifcengine.sdaiINSTANCE, out inst); return new action_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_method", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_method_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_property : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_property(SdaiInstance instance) : base(instance) { }
        public action_property() : base(0) { }

        public static implicit operator action_property(SdaiInstance instance) => new action_property(instance);

        /// <summary>
        /// Create new instace of action_property and returns object of this class to interact with
        /// </summary>
        public static new action_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public characterized_action_definition definition
            {
            get { return new characterized_action_definition(m_instance, "definition", 0); }
            }

        protected override TextValue WrapperEntityName() { return "action_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_property_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_property_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_property_representation(SdaiInstance instance) : base(instance) { }
        public action_property_representation() : base(0) { }

        public static implicit operator action_property_representation(SdaiInstance instance) => new action_property_representation(instance);

        /// <summary>
        /// Create new instace of action_property_representation and returns object of this class to interact with
        /// </summary>
        public static new action_property_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_property_representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public action_property property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, out inst); return new action_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, i); }
            }
        public representation representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_property_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_relationship(SdaiInstance instance) : base(instance) { }
        public action_relationship() : base(0) { }

        public static implicit operator action_relationship(SdaiInstance instance) => new action_relationship(instance);

        /// <summary>
        /// Create new instace of action_relationship and returns object of this class to interact with
        /// </summary>
        public static new action_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public action relating_action 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_action", ifcengine.sdaiINSTANCE, out inst); return new action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_action", ifcengine.sdaiINSTANCE, i); }
            }
        public action related_action 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_action", ifcengine.sdaiINSTANCE, out inst); return new action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_action", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_assignment(SdaiInstance instance) : base(instance) { }
        public action_request_assignment() : base(0) { }

        public static implicit operator action_request_assignment(SdaiInstance instance) => new action_request_assignment(instance);

        public versioned_action_request assigned_action_request 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action_request", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "action_request_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_solution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_solution : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_solution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_solution(SdaiInstance instance) : base(instance) { }
        public action_request_solution() : base(0) { }

        public static implicit operator action_request_solution(SdaiInstance instance) => new action_request_solution(instance);

        /// <summary>
        /// Create new instace of action_request_solution and returns object of this class to interact with
        /// </summary>
        public static new action_request_solution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_request_solution"); Debug.Assert(inst != 0); return inst; }

        public action_method method 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "method", ifcengine.sdaiINSTANCE, out inst); return new action_method(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "method", ifcengine.sdaiINSTANCE, i); }
            }
        public versioned_action_request request 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "request", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "action_request_solution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_status : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_status(SdaiInstance instance) : base(instance) { }
        public action_request_status() : base(0) { }

        public static implicit operator action_request_status(SdaiInstance instance) => new action_request_status(instance);

        /// <summary>
        /// Create new instace of action_request_status and returns object of this class to interact with
        /// </summary>
        public static new action_request_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_request_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue status
            {
            get { return get_string("status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
            }
        public versioned_action_request assigned_request 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_request", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_request_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_resource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_resource : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_resource(SdaiInstance instance) : base(instance) { }
        public action_resource() : base(0) { }

        public static implicit operator action_resource(SdaiInstance instance) => new action_resource(instance);

        /// <summary>
        /// Create new instace of action_resource and returns object of this class to interact with
        /// </summary>
        public static new action_resource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_resource"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_supported_item usage { get { return (new set_of_supported_itemSerializer()).FromAttr(m_instance, "usage"); } }
        public void put_usage(IEnumerable<supported_item> lst) { (new set_of_supported_itemSerializer()).ToSdaiAggr(lst, m_instance, "usage"); }
        public void put_usage_untyped(IEnumerable lst) { (new set_of_supported_itemSerializer()).ToSdaiAggr(lst, m_instance, "usage"); }
        public action_resource_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new action_resource_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_resource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_resource_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_resource_requirement : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_resource_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_resource_requirement(SdaiInstance instance) : base(instance) { }
        public action_resource_requirement() : base(0) { }

        public static implicit operator action_resource_requirement(SdaiInstance instance) => new action_resource_requirement(instance);

        /// <summary>
        /// Create new instace of action_resource_requirement and returns object of this class to interact with
        /// </summary>
        public static new action_resource_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_resource_requirement"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public resource_requirement_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new resource_requirement_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_characterized_action_definition OPERATIONS { get { return (new set_of_characterized_action_definitionSerializer()).FromAttr(m_instance, "OPERATIONS"); } }
        public void put_OPERATIONS(IEnumerable<characterized_action_definition> lst) { (new set_of_characterized_action_definitionSerializer()).ToSdaiAggr(lst, m_instance, "OPERATIONS"); }
        public void put_OPERATIONS_untyped(IEnumerable lst) { (new set_of_characterized_action_definitionSerializer()).ToSdaiAggr(lst, m_instance, "OPERATIONS"); }

        protected override TextValue WrapperEntityName() { return "action_resource_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_resource_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_resource_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_resource_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_resource_type(SdaiInstance instance) : base(instance) { }
        public action_resource_type() : base(0) { }

        public static implicit operator action_resource_type(SdaiInstance instance) => new action_resource_type(instance);

        /// <summary>
        /// Create new instace of action_resource_type and returns object of this class to interact with
        /// </summary>
        public static new action_resource_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_resource_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "action_resource_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_status : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_status(SdaiInstance instance) : base(instance) { }
        public action_status() : base(0) { }

        public static implicit operator action_status(SdaiInstance instance) => new action_status(instance);

        /// <summary>
        /// Create new instace of action_status and returns object of this class to interact with
        /// </summary>
        public static new action_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue status
            {
            get { return get_string("status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
            }
        public executed_action assigned_action 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, out inst); return new executed_action(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "action_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class address : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public address(SdaiInstance instance) : base(instance) { }
        public address() : base(0) { }

        public static implicit operator address(SdaiInstance instance) => new address(instance);

        /// <summary>
        /// Create new instace of address and returns object of this class to interact with
        /// </summary>
        public static new address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "address"); Debug.Assert(inst != 0); return inst; }

        public TextValue internal_location
            {
            get { return get_string("internal_location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "internal_location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue street_number
            {
            get { return get_string("street_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "street_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue street
            {
            get { return get_string("street", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "street", ifcengine.sdaiSTRING, value); }
            }
        public TextValue postal_box
            {
            get { return get_string("postal_box", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "postal_box", ifcengine.sdaiSTRING, value); }
            }
        public TextValue town
            {
            get { return get_string("town", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "town", ifcengine.sdaiSTRING, value); }
            }
        public TextValue region
            {
            get { return get_string("region", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "region", ifcengine.sdaiSTRING, value); }
            }
        public TextValue postal_code
            {
            get { return get_string("postal_code", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "postal_code", ifcengine.sdaiSTRING, value); }
            }
        public TextValue country
            {
            get { return get_string("country", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "country", ifcengine.sdaiSTRING, value); }
            }
        public TextValue facsimile_number
            {
            get { return get_string("facsimile_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "facsimile_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue telephone_number
            {
            get { return get_string("telephone_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "telephone_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue electronic_mail_address
            {
            get { return get_string("electronic_mail_address", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "electronic_mail_address", ifcengine.sdaiSTRING, value); }
            }
        public TextValue telex_number
            {
            get { return get_string("telex_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "telex_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue url { get { return get_string("url", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation(SdaiInstance instance) : base(instance) { }
        public representation() : base(0) { }

        public static implicit operator representation(SdaiInstance instance) => new representation(instance);

        /// <summary>
        /// Create new instace of representation and returns object of this class to interact with
        /// </summary>
        public static new representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_representation_item items { get { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context context_of_items 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation(SdaiInstance instance) : base(instance) { }
        public shape_representation() : base(0) { }

        public static implicit operator shape_representation(SdaiInstance instance) => new shape_representation(instance);

        /// <summary>
        /// Create new instace of shape_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of advanced_brep_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class advanced_brep_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of advanced_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public advanced_brep_shape_representation(SdaiInstance instance) : base(instance) { }
        public advanced_brep_shape_representation() : base(0) { }

        public static implicit operator advanced_brep_shape_representation(SdaiInstance instance) => new advanced_brep_shape_representation(instance);

        /// <summary>
        /// Create new instace of advanced_brep_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new advanced_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "advanced_brep_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "advanced_brep_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_item(SdaiInstance instance) : base(instance) { }
        public representation_item() : base(0) { }

        public static implicit operator representation_item(SdaiInstance instance) => new representation_item(instance);

        /// <summary>
        /// Create new instace of representation_item and returns object of this class to interact with
        /// </summary>
        public static new representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of topological_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class topological_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of topological_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public topological_representation_item(SdaiInstance instance) : base(instance) { }
        public topological_representation_item() : base(0) { }

        public static implicit operator topological_representation_item(SdaiInstance instance) => new topological_representation_item(instance);

        /// <summary>
        /// Create new instace of topological_representation_item and returns object of this class to interact with
        /// </summary>
        public static new topological_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "topological_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "topological_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face(SdaiInstance instance) : base(instance) { }
        public face() : base(0) { }

        public static implicit operator face(SdaiInstance instance) => new face(instance);

        /// <summary>
        /// Create new instace of face and returns object of this class to interact with
        /// </summary>
        public static new face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face"); Debug.Assert(inst != 0); return inst; }

        public set_of_face_bound bounds { get { return (new set_of_face_boundSerializer()).FromAttr(m_instance, "bounds"); } }
        public void put_bounds(IEnumerable<face_bound> lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }
        public void put_bounds_untyped(IEnumerable lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }

        protected override TextValue WrapperEntityName() { return "face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_surface : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_surface(SdaiInstance instance) : base(instance) { }
        public face_surface() : base(0) { }

        public static implicit operator face_surface(SdaiInstance instance) => new face_surface(instance);

        /// <summary>
        /// Create new instace of face_surface and returns object of this class to interact with
        /// </summary>
        public static new face_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_surface"); Debug.Assert(inst != 0); return inst; }

        public surface face_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "face_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of advanced_face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class advanced_face : face_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of advanced_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public advanced_face(SdaiInstance instance) : base(instance) { }
        public advanced_face() : base(0) { }

        public static implicit operator advanced_face(SdaiInstance instance) => new advanced_face(instance);

        /// <summary>
        /// Create new instace of advanced_face and returns object of this class to interact with
        /// </summary>
        public static new advanced_face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "advanced_face"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "advanced_face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of alternate_product_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class alternate_product_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of alternate_product_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public alternate_product_relationship(SdaiInstance instance) : base(instance) { }
        public alternate_product_relationship() : base(0) { }

        public static implicit operator alternate_product_relationship(SdaiInstance instance) => new alternate_product_relationship(instance);

        /// <summary>
        /// Create new instace of alternate_product_relationship and returns object of this class to interact with
        /// </summary>
        public static new alternate_product_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "alternate_product_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue definition
            {
            get { return get_string("definition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiSTRING, value); }
            }
        public product alternate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "alternate", ifcengine.sdaiINSTANCE, out inst); return new product(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "alternate", ifcengine.sdaiINSTANCE, i); }
            }
        public product base_ 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, out inst); return new product(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue basis
            {
            get { return get_string("basis", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "basis", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "alternate_product_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_with_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_with_unit(SdaiInstance instance) : base(instance) { }
        public measure_with_unit() : base(0) { }

        public static implicit operator measure_with_unit(SdaiInstance instance) => new measure_with_unit(instance);

        /// <summary>
        /// Create new instace of measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        public measure_value value_component
            {
            get { return new measure_value(m_instance, "value_component", 0); }
            }

        public unit unit_component
            {
            get { return new unit(m_instance, "unit_component", 0); }
            }

        protected override TextValue WrapperEntityName() { return "measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of amount_of_substance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class amount_of_substance_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of amount_of_substance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public amount_of_substance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public amount_of_substance_measure_with_unit() : base(0) { }

        public static implicit operator amount_of_substance_measure_with_unit(SdaiInstance instance) => new amount_of_substance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of amount_of_substance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new amount_of_substance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "amount_of_substance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "amount_of_substance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of named_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class named_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of named_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public named_unit(SdaiInstance instance) : base(instance) { }
        public named_unit() : base(0) { }

        public static implicit operator named_unit(SdaiInstance instance) => new named_unit(instance);

        /// <summary>
        /// Create new instace of named_unit and returns object of this class to interact with
        /// </summary>
        public static new named_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "named_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents dimensions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "named_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of amount_of_substance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class amount_of_substance_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of amount_of_substance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public amount_of_substance_unit(SdaiInstance instance) : base(instance) { }
        public amount_of_substance_unit() : base(0) { }

        public static implicit operator amount_of_substance_unit(SdaiInstance instance) => new amount_of_substance_unit(instance);

        /// <summary>
        /// Create new instace of amount_of_substance_unit and returns object of this class to interact with
        /// </summary>
        public static new amount_of_substance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "amount_of_substance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "amount_of_substance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_expression : expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_expression(SdaiInstance instance) : base(instance) { }
        public boolean_expression() : base(0) { }

        public static implicit operator boolean_expression(SdaiInstance instance) => new boolean_expression(instance);


        protected override TextValue WrapperEntityName() { return "boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_boolean_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_boolean_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_boolean_expression() : base(0) { }

        public static implicit operator multiple_arity_boolean_expression(SdaiInstance instance) => new multiple_arity_boolean_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "multiple_arity_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of and_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class and_expression : multiple_arity_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of and_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public and_expression(SdaiInstance instance) : base(instance) { }
        public and_expression() : base(0) { }

        public static implicit operator and_expression(SdaiInstance instance) => new and_expression(instance);

        /// <summary>
        /// Create new instace of and_expression and returns object of this class to interact with
        /// </summary>
        public static new and_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "and_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "and_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_item(SdaiInstance instance) : base(instance) { }
        public geometric_representation_item() : base(0) { }

        public static implicit operator geometric_representation_item(SdaiInstance instance) => new geometric_representation_item(instance);

        /// <summary>
        /// Create new instace of geometric_representation_item and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_item"); Debug.Assert(inst != 0); return inst; }

        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "geometric_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_callout : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_callout(SdaiInstance instance) : base(instance) { }
        public draughting_callout() : base(0) { }

        public static implicit operator draughting_callout(SdaiInstance instance) => new draughting_callout(instance);

        /// <summary>
        /// Create new instace of draughting_callout and returns object of this class to interact with
        /// </summary>
        public static new draughting_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_callout"); Debug.Assert(inst != 0); return inst; }

        public set_of_draughting_callout_element contents { get { return (new set_of_draughting_callout_elementSerializer()).FromAttr(m_instance, "contents"); } }
        public void put_contents(IEnumerable<draughting_callout_element> lst) { (new set_of_draughting_callout_elementSerializer()).ToSdaiAggr(lst, m_instance, "contents"); }
        public void put_contents_untyped(IEnumerable lst) { (new set_of_draughting_callout_elementSerializer()).ToSdaiAggr(lst, m_instance, "contents"); }

        protected override TextValue WrapperEntityName() { return "draughting_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve_directed_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve_directed_callout(SdaiInstance instance) : base(instance) { }
        public dimension_curve_directed_callout() : base(0) { }

        public static implicit operator dimension_curve_directed_callout(SdaiInstance instance) => new dimension_curve_directed_callout(instance);

        /// <summary>
        /// Create new instace of dimension_curve_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_curve_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_dimension : dimension_curve_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_dimension(SdaiInstance instance) : base(instance) { }
        public angular_dimension() : base(0) { }

        public static implicit operator angular_dimension(SdaiInstance instance) => new angular_dimension(instance);

        /// <summary>
        /// Create new instace of angular_dimension and returns object of this class to interact with
        /// </summary>
        public static new angular_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "angular_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_relationship(SdaiInstance instance) : base(instance) { }
        public shape_aspect_relationship() : base(0) { }

        public static implicit operator shape_aspect_relationship(SdaiInstance instance) => new shape_aspect_relationship(instance);

        /// <summary>
        /// Create new instace of shape_aspect_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public shape_aspect relating_shape_aspect 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_shape_aspect", ifcengine.sdaiINSTANCE, i); }
            }
        public shape_aspect related_shape_aspect 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_shape_aspect", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "shape_aspect_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_location : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_location(SdaiInstance instance) : base(instance) { }
        public dimensional_location() : base(0) { }

        public static implicit operator dimensional_location(SdaiInstance instance) => new dimensional_location(instance);

        /// <summary>
        /// Create new instace of dimensional_location and returns object of this class to interact with
        /// </summary>
        public static new dimensional_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_location"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimensional_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_location : dimensional_location
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_location(SdaiInstance instance) : base(instance) { }
        public angular_location() : base(0) { }

        public static implicit operator angular_location(SdaiInstance instance) => new angular_location(instance);

        /// <summary>
        /// Create new instace of angular_location and returns object of this class to interact with
        /// </summary>
        public static new angular_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_location"); Debug.Assert(inst != 0); return inst; }

        public angle_relator? angle_selection 
            { 
            get { var str = get_string("angle_selection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.angle_relator_); return EnumValue<angle_relator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<angle_relator>.FromValue(value.Value, EnumNames.angle_relator_); ifcengine.sdaiPutAttrBN(m_instance, "angle_selection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "angular_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_size : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_size(SdaiInstance instance) : base(instance) { }
        public dimensional_size() : base(0) { }

        public static implicit operator dimensional_size(SdaiInstance instance) => new dimensional_size(instance);

        /// <summary>
        /// Create new instace of dimensional_size and returns object of this class to interact with
        /// </summary>
        public static new dimensional_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_size"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect applies_to 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applies_to", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applies_to", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_size : dimensional_size
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_size(SdaiInstance instance) : base(instance) { }
        public angular_size() : base(0) { }

        public static implicit operator angular_size(SdaiInstance instance) => new angular_size(instance);

        /// <summary>
        /// Create new instace of angular_size and returns object of this class to interact with
        /// </summary>
        public static new angular_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_size"); Debug.Assert(inst != 0); return inst; }

        public angle_relator? angle_selection 
            { 
            get { var str = get_string("angle_selection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.angle_relator_); return EnumValue<angle_relator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<angle_relator>.FromValue(value.Value, EnumNames.angle_relator_); ifcengine.sdaiPutAttrBN(m_instance, "angle_selection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "angular_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance() : base(0) { }

        public static implicit operator geometric_tolerance(SdaiInstance instance) => new geometric_tolerance(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit magnitude 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "magnitude", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "magnitude", ifcengine.sdaiINSTANCE, i); }
            }
        public shape_aspect toleranced_shape_aspect 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "toleranced_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "toleranced_shape_aspect", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_with_datum_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_with_datum_reference : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_with_datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_with_datum_reference(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_with_datum_reference() : base(0) { }

        public static implicit operator geometric_tolerance_with_datum_reference(SdaiInstance instance) => new geometric_tolerance_with_datum_reference(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_with_datum_reference and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_with_datum_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_with_datum_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_datum_reference datum_system { get { return (new set_of_datum_referenceSerializer()).FromAttr(m_instance, "datum_system"); } }
        public void put_datum_system(IEnumerable<datum_reference> lst) { (new set_of_datum_referenceSerializer()).ToSdaiAggr(lst, m_instance, "datum_system"); }
        public void put_datum_system_untyped(IEnumerable lst) { (new set_of_datum_referenceSerializer()).ToSdaiAggr(lst, m_instance, "datum_system"); }

        protected override TextValue WrapperEntityName() { return "geometric_tolerance_with_datum_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angularity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angularity_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angularity_tolerance(SdaiInstance instance) : base(instance) { }
        public angularity_tolerance() : base(0) { }

        public static implicit operator angularity_tolerance(SdaiInstance instance) => new angularity_tolerance(instance);

        /// <summary>
        /// Create new instace of angularity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new angularity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angularity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "angularity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class styled_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public styled_item(SdaiInstance instance) : base(instance) { }
        public styled_item() : base(0) { }

        public static implicit operator styled_item(SdaiInstance instance) => new styled_item(instance);

        /// <summary>
        /// Create new instace of styled_item and returns object of this class to interact with
        /// </summary>
        public static new styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "styled_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_presentation_style_assignment styles { get { return (new set_of_presentation_style_assignmentSerializer()).FromAttr(m_instance, "styles"); } }
        public void put_styles(IEnumerable<presentation_style_assignment> lst) { (new set_of_presentation_style_assignmentSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        public void put_styles_untyped(IEnumerable lst) { (new set_of_presentation_style_assignmentSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        public representation_item item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence : styled_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence() : base(0) { }

        public static implicit operator annotation_occurrence(SdaiInstance instance) => new annotation_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_curve_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_curve_occurrence : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_curve_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_curve_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_curve_occurrence() : base(0) { }

        public static implicit operator annotation_curve_occurrence(SdaiInstance instance) => new annotation_curve_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_curve_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_curve_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_curve_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_curve_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_fill_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_fill_area : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_fill_area(SdaiInstance instance) : base(instance) { }
        public annotation_fill_area() : base(0) { }

        public static implicit operator annotation_fill_area(SdaiInstance instance) => new annotation_fill_area(instance);

        /// <summary>
        /// Create new instace of annotation_fill_area and returns object of this class to interact with
        /// </summary>
        public static new annotation_fill_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_fill_area"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve boundaries { get { return (new set_of_curveSerializer()).FromAttr(m_instance, "boundaries"); } }
        public void put_boundaries(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public void put_boundaries_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }

        protected override TextValue WrapperEntityName() { return "annotation_fill_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_fill_area_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_fill_area_occurrence : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_fill_area_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_fill_area_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_fill_area_occurrence() : base(0) { }

        public static implicit operator annotation_fill_area_occurrence(SdaiInstance instance) => new annotation_fill_area_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_fill_area_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_fill_area_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_fill_area_occurrence"); Debug.Assert(inst != 0); return inst; }

        public point fill_style_target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_style_target", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fill_style_target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "annotation_fill_area_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence_relationship(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence_relationship() : base(0) { }

        public static implicit operator annotation_occurrence_relationship(SdaiInstance instance) => new annotation_occurrence_relationship(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence_relationship and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public annotation_occurrence relating_annotation_occurrence 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_annotation_occurrence", ifcengine.sdaiINSTANCE, out inst); return new annotation_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_annotation_occurrence", ifcengine.sdaiINSTANCE, i); }
            }
        public annotation_occurrence related_annotation_occurrence 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_annotation_occurrence", ifcengine.sdaiINSTANCE, out inst); return new annotation_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_annotation_occurrence", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "annotation_occurrence_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence_associativity : annotation_occurrence_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence_associativity(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence_associativity() : base(0) { }

        public static implicit operator annotation_occurrence_associativity(SdaiInstance instance) => new annotation_occurrence_associativity(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence_associativity and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence_associativity"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_occurrence_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_plane : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_plane(SdaiInstance instance) : base(instance) { }
        public annotation_plane() : base(0) { }

        public static implicit operator annotation_plane(SdaiInstance instance) => new annotation_plane(instance);

        /// <summary>
        /// Create new instace of annotation_plane and returns object of this class to interact with
        /// </summary>
        public static new annotation_plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_plane"); Debug.Assert(inst != 0); return inst; }

        public set_of_annotation_plane_element elements { get { return (new set_of_annotation_plane_elementSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<annotation_plane_element> lst) { (new set_of_annotation_plane_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_annotation_plane_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "annotation_plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_symbol_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_symbol_occurrence : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_symbol_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_symbol_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_symbol_occurrence() : base(0) { }

        public static implicit operator annotation_symbol_occurrence(SdaiInstance instance) => new annotation_symbol_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_symbol_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_symbol_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_symbol_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_symbol_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_subfigure_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_subfigure_occurrence : annotation_symbol_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_subfigure_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_subfigure_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_subfigure_occurrence() : base(0) { }

        public static implicit operator annotation_subfigure_occurrence(SdaiInstance instance) => new annotation_subfigure_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_subfigure_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_subfigure_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_subfigure_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_subfigure_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mapped_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mapped_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mapped_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mapped_item(SdaiInstance instance) : base(instance) { }
        public mapped_item() : base(0) { }

        public static implicit operator mapped_item(SdaiInstance instance) => new mapped_item(instance);

        /// <summary>
        /// Create new instace of mapped_item and returns object of this class to interact with
        /// </summary>
        public static new mapped_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mapped_item"); Debug.Assert(inst != 0); return inst; }

        public representation_map mapping_source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item mapping_target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "mapped_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_symbol : mapped_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_symbol(SdaiInstance instance) : base(instance) { }
        public annotation_symbol() : base(0) { }

        public static implicit operator annotation_symbol(SdaiInstance instance) => new annotation_symbol(instance);

        /// <summary>
        /// Create new instace of annotation_symbol and returns object of this class to interact with
        /// </summary>
        public static new annotation_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text : mapped_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text(SdaiInstance instance) : base(instance) { }
        public annotation_text() : base(0) { }

        public static implicit operator annotation_text(SdaiInstance instance) => new annotation_text(instance);

        /// <summary>
        /// Create new instace of annotation_text and returns object of this class to interact with
        /// </summary>
        public static new annotation_text Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_text"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text_character
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text_character : mapped_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text_character
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text_character(SdaiInstance instance) : base(instance) { }
        public annotation_text_character() : base(0) { }

        public static implicit operator annotation_text_character(SdaiInstance instance) => new annotation_text_character(instance);

        /// <summary>
        /// Create new instace of annotation_text_character and returns object of this class to interact with
        /// </summary>
        public static new annotation_text_character Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text_character"); Debug.Assert(inst != 0); return inst; }

        public TextValue alignment
            {
            get { return get_string("alignment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "alignment", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "annotation_text_character"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text_occurrence : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_text_occurrence() : base(0) { }

        public static implicit operator annotation_text_occurrence(SdaiInstance instance) => new annotation_text_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_text_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_text_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "annotation_text_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect(SdaiInstance instance) : base(instance) { }
        public shape_aspect() : base(0) { }

        public static implicit operator shape_aspect(SdaiInstance instance) => new shape_aspect(instance);

        /// <summary>
        /// Create new instace of shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition_shape of_shape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "of_shape", ifcengine.sdaiINSTANCE, out inst); return new product_definition_shape(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "of_shape", ifcengine.sdaiINSTANCE, i); }
            }
        public LOGICAL_VALUE? product_definitional 
            { 
            get { var str = get_string("product_definitional", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "product_definitional", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_shape_aspect : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_shape_aspect(SdaiInstance instance) : base(instance) { }
        public derived_shape_aspect() : base(0) { }

        public static implicit operator derived_shape_aspect(SdaiInstance instance) => new derived_shape_aspect(instance);

        /// <summary>
        /// Create new instace of derived_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new derived_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship deriving_relationships { get { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "deriving_relationships"); } }

        protected override TextValue WrapperEntityName() { return "derived_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of apex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class apex : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of apex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public apex(SdaiInstance instance) : base(instance) { }
        public apex() : base(0) { }

        public static implicit operator apex(SdaiInstance instance) => new apex(instance);

        /// <summary>
        /// Create new instace of apex and returns object of this class to interact with
        /// </summary>
        public static new apex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "apex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "apex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_context : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_context(SdaiInstance instance) : base(instance) { }
        public application_context() : base(0) { }

        public static implicit operator application_context(SdaiInstance instance) => new application_context(instance);

        /// <summary>
        /// Create new instace of application_context and returns object of this class to interact with
        /// </summary>
        public static new application_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue application
            {
            get { return get_string("application", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "application", ifcengine.sdaiSTRING, value); }
            }
        public set_of_application_context_element context_elements { get { return (new set_of_application_context_elementSerializer()).FromAttr(m_instance, "context_elements"); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "application_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_context_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_context_element : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_context_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_context_element(SdaiInstance instance) : base(instance) { }
        public application_context_element() : base(0) { }

        public static implicit operator application_context_element(SdaiInstance instance) => new application_context_element(instance);

        /// <summary>
        /// Create new instace of application_context_element and returns object of this class to interact with
        /// </summary>
        public static new application_context_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_context_element"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public application_context frame_of_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new application_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "application_context_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_context_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_context_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_context_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_context_relationship(SdaiInstance instance) : base(instance) { }
        public application_context_relationship() : base(0) { }

        public static implicit operator application_context_relationship(SdaiInstance instance) => new application_context_relationship(instance);

        /// <summary>
        /// Create new instace of application_context_relationship and returns object of this class to interact with
        /// </summary>
        public static new application_context_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_context_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public application_context relating_context 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_context", ifcengine.sdaiINSTANCE, out inst); return new application_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_context", ifcengine.sdaiINSTANCE, i); }
            }
        public application_context related_context 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_context", ifcengine.sdaiINSTANCE, out inst); return new application_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_context", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "application_context_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_protocol_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_protocol_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_protocol_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_protocol_definition(SdaiInstance instance) : base(instance) { }
        public application_protocol_definition() : base(0) { }

        public static implicit operator application_protocol_definition(SdaiInstance instance) => new application_protocol_definition(instance);

        /// <summary>
        /// Create new instace of application_protocol_definition and returns object of this class to interact with
        /// </summary>
        public static new application_protocol_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_protocol_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue status
            {
            get { return get_string("status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue application_interpreted_model_schema_name
            {
            get { return get_string("application_interpreted_model_schema_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "application_interpreted_model_schema_name", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? application_protocol_year
            {
            get { return get_IntValue("application_protocol_year", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "application_protocol_year", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public application_context application 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, out inst); return new application_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "application_protocol_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_action_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_action_assignment : action_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_action_assignment(SdaiInstance instance) : base(instance) { }
        public applied_action_assignment() : base(0) { }

        public static implicit operator applied_action_assignment(SdaiInstance instance) => new applied_action_assignment(instance);

        /// <summary>
        /// Create new instace of applied_action_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_action_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_action_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_item items { get { return (new set_of_action_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<action_item> lst) { (new set_of_action_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_action_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_action_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_action_request_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_action_request_assignment : action_request_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_action_request_assignment(SdaiInstance instance) : base(instance) { }
        public applied_action_request_assignment() : base(0) { }

        public static implicit operator applied_action_request_assignment(SdaiInstance instance) => new applied_action_request_assignment(instance);

        /// <summary>
        /// Create new instace of applied_action_request_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_action_request_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_action_request_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_request_item items { get { return (new set_of_action_request_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<action_request_item> lst) { (new set_of_action_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_action_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_action_request_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_assignment(SdaiInstance instance) : base(instance) { }
        public approval_assignment() : base(0) { }

        public static implicit operator approval_assignment(SdaiInstance instance) => new approval_assignment(instance);

        public approval assigned_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "approval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_approval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_approval_assignment : approval_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_approval_assignment(SdaiInstance instance) : base(instance) { }
        public applied_approval_assignment() : base(0) { }

        public static implicit operator applied_approval_assignment(SdaiInstance instance) => new applied_approval_assignment(instance);

        /// <summary>
        /// Create new instace of applied_approval_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_approval_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_approval_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_approval_item items { get { return (new set_of_approval_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<approval_item> lst) { (new set_of_approval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_approval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_approval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_area : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_area(SdaiInstance instance) : base(instance) { }
        public applied_area() : base(0) { }

        public static implicit operator applied_area(SdaiInstance instance) => new applied_area(instance);

        /// <summary>
        /// Create new instace of applied_area and returns object of this class to interact with
        /// </summary>
        public static new applied_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "applied_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification_assignment(SdaiInstance instance) : base(instance) { }
        public certification_assignment() : base(0) { }

        public static implicit operator certification_assignment(SdaiInstance instance) => new certification_assignment(instance);

        public certification assigned_certification 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, out inst); return new certification(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "certification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_certification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_certification_assignment : certification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_certification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_certification_assignment() : base(0) { }

        public static implicit operator applied_certification_assignment(SdaiInstance instance) => new applied_certification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_certification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_certification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_certification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_certification_item items { get { return (new set_of_certification_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<certification_item> lst) { (new set_of_certification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_certification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_certification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class classification_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public classification_assignment(SdaiInstance instance) : base(instance) { }
        public classification_assignment() : base(0) { }

        public static implicit operator classification_assignment(SdaiInstance instance) => new classification_assignment(instance);

        public group assigned_class 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, i); }
            }
        public classification_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new classification_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_classification_assignment : classification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_classification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_classification_assignment() : base(0) { }

        public static implicit operator applied_classification_assignment(SdaiInstance instance) => new applied_classification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_classification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_classification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_classification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_classification_item items { get { return (new set_of_classification_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<classification_item> lst) { (new set_of_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_assignment(SdaiInstance instance) : base(instance) { }
        public contract_assignment() : base(0) { }

        public static implicit operator contract_assignment(SdaiInstance instance) => new contract_assignment(instance);

        public contract assigned_contract 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, out inst); return new contract(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "contract_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_contract_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_contract_assignment : contract_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_contract_assignment(SdaiInstance instance) : base(instance) { }
        public applied_contract_assignment() : base(0) { }

        public static implicit operator applied_contract_assignment(SdaiInstance instance) => new applied_contract_assignment(instance);

        /// <summary>
        /// Create new instace of applied_contract_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_contract_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_contract_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_contract_item items { get { return (new set_of_contract_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<contract_item> lst) { (new set_of_contract_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_contract_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_contract_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_and_time_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_and_time_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_and_time_assignment(SdaiInstance instance) : base(instance) { }
        public date_and_time_assignment() : base(0) { }

        public static implicit operator date_and_time_assignment(SdaiInstance instance) => new date_and_time_assignment(instance);

        public date_and_time assigned_date_and_time 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_date_and_time", ifcengine.sdaiINSTANCE, out inst); return new date_and_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_date_and_time", ifcengine.sdaiINSTANCE, i); }
            }
        public date_time_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new date_time_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "date_and_time_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_date_and_time_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_date_and_time_assignment : date_and_time_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_date_and_time_assignment(SdaiInstance instance) : base(instance) { }
        public applied_date_and_time_assignment() : base(0) { }

        public static implicit operator applied_date_and_time_assignment(SdaiInstance instance) => new applied_date_and_time_assignment(instance);

        /// <summary>
        /// Create new instace of applied_date_and_time_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_date_and_time_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_date_and_time_item items { get { return (new set_of_date_and_time_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<date_and_time_item> lst) { (new set_of_date_and_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_date_and_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_date_and_time_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_assignment(SdaiInstance instance) : base(instance) { }
        public date_assignment() : base(0) { }

        public static implicit operator date_assignment(SdaiInstance instance) => new date_assignment(instance);

        public date assigned_date 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_date", ifcengine.sdaiINSTANCE, out inst); return new date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_date", ifcengine.sdaiINSTANCE, i); }
            }
        public date_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new date_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "date_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_date_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_date_assignment : date_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_date_assignment(SdaiInstance instance) : base(instance) { }
        public applied_date_assignment() : base(0) { }

        public static implicit operator applied_date_assignment(SdaiInstance instance) => new applied_date_assignment(instance);

        /// <summary>
        /// Create new instace of applied_date_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_date_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_date_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_date_item items { get { return (new set_of_date_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<date_item> lst) { (new set_of_date_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_date_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_date_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_reference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_reference(SdaiInstance instance) : base(instance) { }
        public document_reference() : base(0) { }

        public static implicit operator document_reference(SdaiInstance instance) => new document_reference(instance);

        public document assigned_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_document", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue source
            {
            get { return get_string("source", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiSTRING, value); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "document_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_document_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_document_reference : document_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_document_reference(SdaiInstance instance) : base(instance) { }
        public applied_document_reference() : base(0) { }

        public static implicit operator applied_document_reference(SdaiInstance instance) => new applied_document_reference(instance);

        /// <summary>
        /// Create new instace of applied_document_reference and returns object of this class to interact with
        /// </summary>
        public static new applied_document_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_document_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_reference_item items { get { return (new set_of_document_reference_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<document_reference_item> lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_document_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_constraint_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_constraint_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_constraint_assignment(SdaiInstance instance) : base(instance) { }
        public document_usage_constraint_assignment() : base(0) { }

        public static implicit operator document_usage_constraint_assignment(SdaiInstance instance) => new document_usage_constraint_assignment(instance);

        public document_usage_constraint assigned_document_usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_document_usage", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_document_usage", ifcengine.sdaiINSTANCE, i); }
            }
        public document_usage_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new document_usage_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "document_usage_constraint_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_document_usage_constraint_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_document_usage_constraint_assignment : document_usage_constraint_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_document_usage_constraint_assignment(SdaiInstance instance) : base(instance) { }
        public applied_document_usage_constraint_assignment() : base(0) { }

        public static implicit operator applied_document_usage_constraint_assignment(SdaiInstance instance) => new applied_document_usage_constraint_assignment(instance);

        /// <summary>
        /// Create new instace of applied_document_usage_constraint_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_document_usage_constraint_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_document_usage_constraint_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_reference_item items { get { return (new set_of_document_reference_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<document_reference_item> lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_document_usage_constraint_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public effectivity_assignment() : base(0) { }

        public static implicit operator effectivity_assignment(SdaiInstance instance) => new effectivity_assignment(instance);

        public effectivity assigned_effectivity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_effectivity", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_effectivity_assignment : effectivity_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public applied_effectivity_assignment() : base(0) { }

        public static implicit operator applied_effectivity_assignment(SdaiInstance instance) => new applied_effectivity_assignment(instance);

        /// <summary>
        /// Create new instace of applied_effectivity_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_effectivity_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_effectivity_item items { get { return (new set_of_effectivity_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<effectivity_item> lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_assignment(SdaiInstance instance) : base(instance) { }
        public event_occurrence_assignment() : base(0) { }

        public static implicit operator event_occurrence_assignment(SdaiInstance instance) => new event_occurrence_assignment(instance);

        public event_occurrence assigned_event_occurrence 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_event_occurrence", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_event_occurrence", ifcengine.sdaiINSTANCE, i); }
            }
        public event_occurrence_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "event_occurrence_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_event_occurrence_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_event_occurrence_assignment : event_occurrence_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_event_occurrence_assignment(SdaiInstance instance) : base(instance) { }
        public applied_event_occurrence_assignment() : base(0) { }

        public static implicit operator applied_event_occurrence_assignment(SdaiInstance instance) => new applied_event_occurrence_assignment(instance);

        /// <summary>
        /// Create new instace of applied_event_occurrence_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_event_occurrence_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_event_occurrence_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_event_occurrence_item items { get { return (new set_of_event_occurrence_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<event_occurrence_item> lst) { (new set_of_event_occurrence_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_event_occurrence_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_event_occurrence_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class identification_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public identification_assignment(SdaiInstance instance) : base(instance) { }
        public identification_assignment() : base(0) { }

        public static implicit operator identification_assignment(SdaiInstance instance) => new identification_assignment(instance);

        public TextValue assigned_id
            {
            get { return get_string("assigned_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "assigned_id", ifcengine.sdaiSTRING, value); }
            }
        public identification_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new identification_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_identification_assignment : identification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_identification_assignment(SdaiInstance instance) : base(instance) { }
        public external_identification_assignment() : base(0) { }

        public static implicit operator external_identification_assignment(SdaiInstance instance) => new external_identification_assignment(instance);

        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "external_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_external_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_external_identification_assignment : external_identification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_external_identification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_external_identification_assignment() : base(0) { }

        public static implicit operator applied_external_identification_assignment(SdaiInstance instance) => new applied_external_identification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_external_identification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_external_identification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_external_identification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_external_identification_item items { get { return (new set_of_external_identification_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<external_identification_item> lst) { (new set_of_external_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_external_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_external_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_assignment(SdaiInstance instance) : base(instance) { }
        public group_assignment() : base(0) { }

        public static implicit operator group_assignment(SdaiInstance instance) => new group_assignment(instance);

        public group assigned_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_group_assignment : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_group_assignment(SdaiInstance instance) : base(instance) { }
        public applied_group_assignment() : base(0) { }

        public static implicit operator applied_group_assignment(SdaiInstance instance) => new applied_group_assignment(instance);

        /// <summary>
        /// Create new instace of applied_group_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_group_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_group_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_group_item items { get { return (new set_of_group_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<group_item> lst) { (new set_of_group_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_group_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_identification_assignment : identification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_identification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_identification_assignment() : base(0) { }

        public static implicit operator applied_identification_assignment(SdaiInstance instance) => new applied_identification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_identification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_identification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_identification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_identification_item items { get { return (new set_of_identification_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<identification_item> lst) { (new set_of_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_ineffectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_ineffectivity_assignment : effectivity_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_ineffectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_ineffectivity_assignment(SdaiInstance instance) : base(instance) { }
        public applied_ineffectivity_assignment() : base(0) { }

        public static implicit operator applied_ineffectivity_assignment(SdaiInstance instance) => new applied_ineffectivity_assignment(instance);

        /// <summary>
        /// Create new instace of applied_ineffectivity_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_ineffectivity_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_ineffectivity_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_effectivity_item items { get { return (new set_of_effectivity_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<effectivity_item> lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_ineffectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of name_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class name_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public name_assignment(SdaiInstance instance) : base(instance) { }
        public name_assignment() : base(0) { }

        public static implicit operator name_assignment(SdaiInstance instance) => new name_assignment(instance);

        public TextValue assigned_name
            {
            get { return get_string("assigned_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "assigned_name", ifcengine.sdaiSTRING, value); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "name_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_name_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_name_assignment : name_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_name_assignment(SdaiInstance instance) : base(instance) { }
        public applied_name_assignment() : base(0) { }

        public static implicit operator applied_name_assignment(SdaiInstance instance) => new applied_name_assignment(instance);

        /// <summary>
        /// Create new instace of applied_name_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_name_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_name_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_name_item items { get { return (new set_of_name_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<name_item> lst) { (new set_of_name_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_name_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_name_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_assignment(SdaiInstance instance) : base(instance) { }
        public organization_assignment() : base(0) { }

        public static implicit operator organization_assignment(SdaiInstance instance) => new organization_assignment(instance);

        public organization assigned_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public organization_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new organization_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_organization_assignment : organization_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_organization_assignment(SdaiInstance instance) : base(instance) { }
        public applied_organization_assignment() : base(0) { }

        public static implicit operator applied_organization_assignment(SdaiInstance instance) => new applied_organization_assignment(instance);

        /// <summary>
        /// Create new instace of applied_organization_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_organization_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_organization_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_organization_item items { get { return (new set_of_organization_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<organization_item> lst) { (new set_of_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_assignment(SdaiInstance instance) : base(instance) { }
        public organizational_project_assignment() : base(0) { }

        public static implicit operator organizational_project_assignment(SdaiInstance instance) => new organizational_project_assignment(instance);

        public organizational_project assigned_organizational_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_organizational_project", ifcengine.sdaiINSTANCE, i); }
            }
        public organizational_project_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new organizational_project_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organizational_project_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_organizational_project_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_organizational_project_assignment : organizational_project_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_organizational_project_assignment(SdaiInstance instance) : base(instance) { }
        public applied_organizational_project_assignment() : base(0) { }

        public static implicit operator applied_organizational_project_assignment(SdaiInstance instance) => new applied_organizational_project_assignment(instance);

        /// <summary>
        /// Create new instace of applied_organizational_project_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_organizational_project_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_organizational_project_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_organizational_project_item items { get { return (new set_of_organizational_project_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<organizational_project_item> lst) { (new set_of_organizational_project_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_organizational_project_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_organizational_project_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_assignment(SdaiInstance instance) : base(instance) { }
        public person_and_organization_assignment() : base(0) { }

        public static implicit operator person_and_organization_assignment(SdaiInstance instance) => new person_and_organization_assignment(instance);

        public person_and_organization assigned_person_and_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_person_and_organization", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_person_and_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public person_and_organization_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "person_and_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_person_and_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_person_and_organization_assignment : person_and_organization_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_person_and_organization_assignment(SdaiInstance instance) : base(instance) { }
        public applied_person_and_organization_assignment() : base(0) { }

        public static implicit operator applied_person_and_organization_assignment(SdaiInstance instance) => new applied_person_and_organization_assignment(instance);

        /// <summary>
        /// Create new instace of applied_person_and_organization_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_person_and_organization_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_person_and_organization_item items { get { return (new set_of_person_and_organization_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<person_and_organization_item> lst) { (new set_of_person_and_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_person_and_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_person_and_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presented_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presented_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presented_item(SdaiInstance instance) : base(instance) { }
        public presented_item() : base(0) { }

        public static implicit operator presented_item(SdaiInstance instance) => new presented_item(instance);


        protected override TextValue WrapperEntityName() { return "presented_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_presented_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_presented_item : presented_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_presented_item(SdaiInstance instance) : base(instance) { }
        public applied_presented_item() : base(0) { }

        public static implicit operator applied_presented_item(SdaiInstance instance) => new applied_presented_item(instance);

        /// <summary>
        /// Create new instace of applied_presented_item and returns object of this class to interact with
        /// </summary>
        public static new applied_presented_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_presented_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_presented_item_select items { get { return (new set_of_presented_item_selectSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<presented_item_select> lst) { (new set_of_presented_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_presented_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_presented_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification_assignment(SdaiInstance instance) : base(instance) { }
        public security_classification_assignment() : base(0) { }

        public static implicit operator security_classification_assignment(SdaiInstance instance) => new security_classification_assignment(instance);

        public security_classification assigned_security_classification 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_security_classification", ifcengine.sdaiINSTANCE, out inst); return new security_classification(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_security_classification", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "security_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_security_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_security_classification_assignment : security_classification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_security_classification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_security_classification_assignment() : base(0) { }

        public static implicit operator applied_security_classification_assignment(SdaiInstance instance) => new applied_security_classification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_security_classification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_security_classification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_security_classification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_security_classification_item items { get { return (new set_of_security_classification_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<security_classification_item> lst) { (new set_of_security_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_security_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_security_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_assignment(SdaiInstance instance) : base(instance) { }
        public time_interval_assignment() : base(0) { }

        public static implicit operator time_interval_assignment(SdaiInstance instance) => new time_interval_assignment(instance);

        public time_interval assigned_time_interval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_time_interval", ifcengine.sdaiINSTANCE, out inst); return new time_interval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_time_interval", ifcengine.sdaiINSTANCE, i); }
            }
        public time_interval_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new time_interval_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "time_interval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_time_interval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_time_interval_assignment : time_interval_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_time_interval_assignment(SdaiInstance instance) : base(instance) { }
        public applied_time_interval_assignment() : base(0) { }

        public static implicit operator applied_time_interval_assignment(SdaiInstance instance) => new applied_time_interval_assignment(instance);

        /// <summary>
        /// Create new instace of applied_time_interval_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_time_interval_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_time_interval_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_time_interval_item items { get { return (new set_of_time_interval_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<time_interval_item> lst) { (new set_of_time_interval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_time_interval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "applied_time_interval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval(SdaiInstance instance) : base(instance) { }
        public approval() : base(0) { }

        public static implicit operator approval(SdaiInstance instance) => new approval(instance);

        /// <summary>
        /// Create new instace of approval and returns object of this class to interact with
        /// </summary>
        public static new approval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval"); Debug.Assert(inst != 0); return inst; }

        public approval_status status 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, out inst); return new approval_status(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue level
            {
            get { return get_string("level", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "level", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "approval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_date_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_date_time : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_date_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_date_time(SdaiInstance instance) : base(instance) { }
        public approval_date_time() : base(0) { }

        public static implicit operator approval_date_time(SdaiInstance instance) => new approval_date_time(instance);

        /// <summary>
        /// Create new instace of approval_date_time and returns object of this class to interact with
        /// </summary>
        public static new approval_date_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_date_time"); Debug.Assert(inst != 0); return inst; }


        public date_time_select date_time
            {
            get { return new date_time_select(m_instance, "date_time", 0); }
            }
        public approval dated_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dated_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dated_approval", ifcengine.sdaiINSTANCE, i); }
            }
        public object_role role { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } }

        protected override TextValue WrapperEntityName() { return "approval_date_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_person_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_person_organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_person_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_person_organization(SdaiInstance instance) : base(instance) { }
        public approval_person_organization() : base(0) { }

        public static implicit operator approval_person_organization(SdaiInstance instance) => new approval_person_organization(instance);

        /// <summary>
        /// Create new instace of approval_person_organization and returns object of this class to interact with
        /// </summary>
        public static new approval_person_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_person_organization"); Debug.Assert(inst != 0); return inst; }


        public person_organization_select person_organization
            {
            get { return new person_organization_select(m_instance, "person_organization", 0); }
            }
        public approval authorized_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "authorized_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "authorized_approval", ifcengine.sdaiINSTANCE, i); }
            }
        public approval_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new approval_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "approval_person_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_relationship(SdaiInstance instance) : base(instance) { }
        public approval_relationship() : base(0) { }

        public static implicit operator approval_relationship(SdaiInstance instance) => new approval_relationship(instance);

        /// <summary>
        /// Create new instace of approval_relationship and returns object of this class to interact with
        /// </summary>
        public static new approval_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public approval relating_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_approval", ifcengine.sdaiINSTANCE, i); }
            }
        public approval related_approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_approval", ifcengine.sdaiINSTANCE, out inst); return new approval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_approval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "approval_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_role(SdaiInstance instance) : base(instance) { }
        public approval_role() : base(0) { }

        public static implicit operator approval_role(SdaiInstance instance) => new approval_role(instance);

        /// <summary>
        /// Create new instace of approval_role and returns object of this class to interact with
        /// </summary>
        public static new approval_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue role
            {
            get { return get_string("role", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "approval_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_status : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_status(SdaiInstance instance) : base(instance) { }
        public approval_status() : base(0) { }

        public static implicit operator approval_status(SdaiInstance instance) => new approval_status(instance);

        /// <summary>
        /// Create new instace of approval_status and returns object of this class to interact with
        /// </summary>
        public static new approval_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "approval_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of founded_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class founded_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of founded_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public founded_item(SdaiInstance instance) : base(instance) { }
        public founded_item() : base(0) { }

        public static implicit operator founded_item(SdaiInstance instance) => new founded_item(instance);

        /// <summary>
        /// Create new instace of founded_item and returns object of this class to interact with
        /// </summary>
        public static new founded_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "founded_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_founded_item_select users { get { return (new set_of_founded_item_selectSerializer()).FromAttr(m_instance, "users"); } }

        protected override TextValue WrapperEntityName() { return "founded_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approximation_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approximation_tolerance : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approximation_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approximation_tolerance(SdaiInstance instance) : base(instance) { }
        public approximation_tolerance() : base(0) { }

        public static implicit operator approximation_tolerance(SdaiInstance instance) => new approximation_tolerance(instance);

        /// <summary>
        /// Create new instace of approximation_tolerance and returns object of this class to interact with
        /// </summary>
        public static new approximation_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approximation_tolerance"); Debug.Assert(inst != 0); return inst; }


        public tolerance_select tolerance
            {
            get { return new tolerance_select(m_instance, "tolerance", 0); }
            }

        protected override TextValue WrapperEntityName() { return "approximation_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approximation_tolerance_deviation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approximation_tolerance_deviation : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approximation_tolerance_deviation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approximation_tolerance_deviation(SdaiInstance instance) : base(instance) { }
        public approximation_tolerance_deviation() : base(0) { }

        public static implicit operator approximation_tolerance_deviation(SdaiInstance instance) => new approximation_tolerance_deviation(instance);

        /// <summary>
        /// Create new instace of approximation_tolerance_deviation and returns object of this class to interact with
        /// </summary>
        public static new approximation_tolerance_deviation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approximation_tolerance_deviation"); Debug.Assert(inst != 0); return inst; }

        public approximation_method? tessellation_type 
            { 
            get { var str = get_string("tessellation_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.approximation_method_); return EnumValue<approximation_method>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<approximation_method>.FromValue(value.Value, EnumNames.approximation_method_); ifcengine.sdaiPutAttrBN(m_instance, "tessellation_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_tolerance_deviation_select tolerances { get { return (new set_of_tolerance_deviation_selectSerializer()).FromAttr(m_instance, "tolerances"); } }
        public void put_tolerances(IEnumerable<tolerance_deviation_select> lst) { (new set_of_tolerance_deviation_selectSerializer()).ToSdaiAggr(lst, m_instance, "tolerances"); }
        public void put_tolerances_untyped(IEnumerable lst) { (new set_of_tolerance_deviation_selectSerializer()).ToSdaiAggr(lst, m_instance, "tolerances"); }
        public product_or_presentation_space? definition_space 
            { 
            get { var str = get_string("definition_space", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.product_or_presentation_space_); return EnumValue<product_or_presentation_space>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<product_or_presentation_space>.FromValue(value.Value, EnumNames.product_or_presentation_space_); ifcengine.sdaiPutAttrBN(m_instance, "definition_space", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "approximation_tolerance_deviation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approximation_tolerance_parameter
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approximation_tolerance_parameter : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approximation_tolerance_parameter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approximation_tolerance_parameter(SdaiInstance instance) : base(instance) { }
        public approximation_tolerance_parameter() : base(0) { }

        public static implicit operator approximation_tolerance_parameter(SdaiInstance instance) => new approximation_tolerance_parameter(instance);

        /// <summary>
        /// Create new instace of approximation_tolerance_parameter and returns object of this class to interact with
        /// </summary>
        public static new approximation_tolerance_parameter Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approximation_tolerance_parameter"); Debug.Assert(inst != 0); return inst; }

        public set_of_tolerance_parameter_select tolerances { get { return (new set_of_tolerance_parameter_selectSerializer()).FromAttr(m_instance, "tolerances"); } }
        public void put_tolerances(IEnumerable<tolerance_parameter_select> lst) { (new set_of_tolerance_parameter_selectSerializer()).ToSdaiAggr(lst, m_instance, "tolerances"); }
        public void put_tolerances_untyped(IEnumerable lst) { (new set_of_tolerance_parameter_selectSerializer()).ToSdaiAggr(lst, m_instance, "tolerances"); }

        protected override TextValue WrapperEntityName() { return "approximation_tolerance_parameter"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_in_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_in_set : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_in_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_in_set(SdaiInstance instance) : base(instance) { }
        public area_in_set() : base(0) { }

        public static implicit operator area_in_set(SdaiInstance instance) => new area_in_set(instance);

        /// <summary>
        /// Create new instace of area_in_set and returns object of this class to interact with
        /// </summary>
        public static new area_in_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_in_set"); Debug.Assert(inst != 0); return inst; }

        public presentation_area area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "area", ifcengine.sdaiINSTANCE, out inst); return new presentation_area(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "area", ifcengine.sdaiINSTANCE, i); }
            }
        public presentation_set in_set 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "in_set", ifcengine.sdaiINSTANCE, out inst); return new presentation_set(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "in_set", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "area_in_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public area_measure_with_unit() : base(0) { }

        public static implicit operator area_measure_with_unit(SdaiInstance instance) => new area_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of area_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new area_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "area_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit(SdaiInstance instance) : base(instance) { }
        public derived_unit() : base(0) { }

        public static implicit operator derived_unit(SdaiInstance instance) => new derived_unit(instance);

        /// <summary>
        /// Create new instace of derived_unit and returns object of this class to interact with
        /// </summary>
        public static new derived_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit"); Debug.Assert(inst != 0); return inst; }

        public set_of_derived_unit_element elements { get { return (new set_of_derived_unit_elementSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<derived_unit_element> lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "derived_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_unit(SdaiInstance instance) : base(instance) { }
        public area_unit() : base(0) { }

        public static implicit operator area_unit(SdaiInstance instance) => new area_unit(instance);

        /// <summary>
        /// Create new instace of area_unit and returns object of this class to interact with
        /// </summary>
        public static new area_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "area_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of asin_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class asin_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of asin_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public asin_function(SdaiInstance instance) : base(instance) { }
        public asin_function() : base(0) { }

        public static implicit operator asin_function(SdaiInstance instance) => new asin_function(instance);

        /// <summary>
        /// Create new instace of asin_function and returns object of this class to interact with
        /// </summary>
        public static new asin_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "asin_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "asin_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_relationship() : base(0) { }

        public static implicit operator product_definition_relationship(SdaiInstance instance) => new product_definition_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition relating_product_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition related_product_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_product_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_usage : product_definition_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_usage(SdaiInstance instance) : base(instance) { }
        public product_definition_usage() : base(0) { }

        public static implicit operator product_definition_usage(SdaiInstance instance) => new product_definition_usage(instance);

        /// <summary>
        /// Create new instace of product_definition_usage and returns object of this class to interact with
        /// </summary>
        public static new product_definition_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_definition_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_component_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_component_usage : product_definition_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_component_usage(SdaiInstance instance) : base(instance) { }
        public assembly_component_usage() : base(0) { }

        public static implicit operator assembly_component_usage(SdaiInstance instance) => new assembly_component_usage(instance);

        /// <summary>
        /// Create new instace of assembly_component_usage and returns object of this class to interact with
        /// </summary>
        public static new assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_component_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue reference_designator
            {
            get { return get_string("reference_designator", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "reference_designator", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_component_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_component_usage_substitute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_component_usage_substitute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_component_usage_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_component_usage_substitute(SdaiInstance instance) : base(instance) { }
        public assembly_component_usage_substitute() : base(0) { }

        public static implicit operator assembly_component_usage_substitute(SdaiInstance instance) => new assembly_component_usage_substitute(instance);

        /// <summary>
        /// Create new instace of assembly_component_usage_substitute and returns object of this class to interact with
        /// </summary>
        public static new assembly_component_usage_substitute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_component_usage_substitute"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue definition
            {
            get { return get_string("definition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiSTRING, value); }
            }
        public assembly_component_usage base_ 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, i); }
            }
        public assembly_component_usage substitute 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "substitute", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "substitute", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "assembly_component_usage_substitute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_numeric_expression : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_numeric_expression(SdaiInstance instance) : base(instance) { }
        public binary_numeric_expression() : base(0) { }

        public static implicit operator binary_numeric_expression(SdaiInstance instance) => new binary_numeric_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "binary_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_function_call
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_function_call : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_function_call(SdaiInstance instance) : base(instance) { }
        public binary_function_call() : base(0) { }

        public static implicit operator binary_function_call(SdaiInstance instance) => new binary_function_call(instance);


        protected override TextValue WrapperEntityName() { return "binary_function_call"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of atan_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class atan_function : binary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of atan_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public atan_function(SdaiInstance instance) : base(instance) { }
        public atan_function() : base(0) { }

        public static implicit operator atan_function(SdaiInstance instance) => new atan_function(instance);

        /// <summary>
        /// Create new instace of atan_function and returns object of this class to interact with
        /// </summary>
        public static new atan_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "atan_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "atan_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_classification_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_classification_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_classification_assignment() : base(0) { }

        public static implicit operator attribute_classification_assignment(SdaiInstance instance) => new attribute_classification_assignment(instance);

        public group assigned_class 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue attribute_name
            {
            get { return get_string("attribute_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_name", ifcengine.sdaiSTRING, value); }
            }
        public classification_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new classification_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "attribute_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_language_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_language_assignment : attribute_classification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_language_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_language_assignment() : base(0) { }

        public static implicit operator attribute_language_assignment(SdaiInstance instance) => new attribute_language_assignment(instance);

        /// <summary>
        /// Create new instace of attribute_language_assignment and returns object of this class to interact with
        /// </summary>
        public static new attribute_language_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "attribute_language_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_attribute_language_item items { get { return (new set_of_attribute_language_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<attribute_language_item> lst) { (new set_of_attribute_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_attribute_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public TextValue language { get { return get_string("language", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "attribute_language_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_value_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_value_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_value_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_value_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_value_assignment() : base(0) { }

        public static implicit operator attribute_value_assignment(SdaiInstance instance) => new attribute_value_assignment(instance);

        public TextValue attribute_name
            {
            get { return get_string("attribute_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_name", ifcengine.sdaiSTRING, value); }
            }

        public attribute_type attribute_value
            {
            get { return new attribute_type(m_instance, "attribute_value", 0); }
            }
        public attribute_value_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new attribute_value_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "attribute_value_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_value_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_value_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_value_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_value_role(SdaiInstance instance) : base(instance) { }
        public attribute_value_role() : base(0) { }

        public static implicit operator attribute_value_role(SdaiInstance instance) => new attribute_value_role(instance);

        /// <summary>
        /// Create new instace of attribute_value_role and returns object of this class to interact with
        /// </summary>
        public static new attribute_value_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "attribute_value_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "attribute_value_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placement : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placement(SdaiInstance instance) : base(instance) { }
        public placement() : base(0) { }

        public static implicit operator placement(SdaiInstance instance) => new placement(instance);

        /// <summary>
        /// Create new instace of placement and returns object of this class to interact with
        /// </summary>
        public static new placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placement"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis1_placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis1_placement : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis1_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis1_placement(SdaiInstance instance) : base(instance) { }
        public axis1_placement() : base(0) { }

        public static implicit operator axis1_placement(SdaiInstance instance) => new axis1_placement(instance);

        /// <summary>
        /// Create new instace of axis1_placement and returns object of this class to interact with
        /// </summary>
        public static new axis1_placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis1_placement"); Debug.Assert(inst != 0); return inst; }

        public direction axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public direction z { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "z", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } }

        protected override TextValue WrapperEntityName() { return "axis1_placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_2d : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_2d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_2d() : base(0) { }

        public static implicit operator axis2_placement_2d(SdaiInstance instance) => new axis2_placement_2d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_2d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_2d"); Debug.Assert(inst != 0); return inst; }

        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction p { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "p"); } }

        protected override TextValue WrapperEntityName() { return "axis2_placement_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_3d : placement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_3d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_3d() : base(0) { }

        public static implicit operator axis2_placement_3d(SdaiInstance instance) => new axis2_placement_3d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_3d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_3d"); Debug.Assert(inst != 0); return inst; }

        public direction axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction p { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "p"); } }

        protected override TextValue WrapperEntityName() { return "axis2_placement_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve(SdaiInstance instance) : base(instance) { }
        public curve() : base(0) { }

        public static implicit operator curve(SdaiInstance instance) => new curve(instance);

        /// <summary>
        /// Create new instace of curve and returns object of this class to interact with
        /// </summary>
        public static new curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_curve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_curve(SdaiInstance instance) : base(instance) { }
        public bounded_curve() : base(0) { }

        public static implicit operator bounded_curve(SdaiInstance instance) => new bounded_curve(instance);

        /// <summary>
        /// Create new instace of bounded_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve(SdaiInstance instance) : base(instance) { }
        public b_spline_curve() : base(0) { }

        public static implicit operator b_spline_curve(SdaiInstance instance) => new b_spline_curve(instance);

        /// <summary>
        /// Create new instace of b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public IntValue? degree
            {
            get { return get_IntValue("degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public list_of_cartesian_point control_points_list { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); } }
        public void put_control_points_list(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_curve_form? curve_form 
            { 
            get { var str = get_string("curve_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_curve_form_); return EnumValue<b_spline_curve_form>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<b_spline_curve_form>.FromValue(value.Value, EnumNames.b_spline_curve_form_); ifcengine.sdaiPutAttrBN(m_instance, "curve_form", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? closed_curve 
            { 
            get { var str = get_string("closed_curve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "closed_curve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? upper_index_on_control_points { get { return get_IntValue("upper_index_on_control_points", ifcengine.sdaiINTEGER); } }
        public array_of_cartesian_point control_points { get { return (new array_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points"); } }

        protected override TextValue WrapperEntityName() { return "b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve_with_knots : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_curve_with_knots() : base(0) { }

        public static implicit operator b_spline_curve_with_knots(SdaiInstance instance) => new b_spline_curve_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_curve_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue knot_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "knot_multiplicities"); } }
        public void put_knot_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        public void put_knot_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        public list_of_parameter_value knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "knots"); } }
        public void put_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        public void put_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        public knot_type? knot_spec 
            { 
            get { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<knot_type>.FromValue(value.Value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? upper_index_on_knots { get { return get_IntValue("upper_index_on_knots", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "b_spline_curve_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface(SdaiInstance instance) : base(instance) { }
        public surface() : base(0) { }

        public static implicit operator surface(SdaiInstance instance) => new surface(instance);

        /// <summary>
        /// Create new instace of surface and returns object of this class to interact with
        /// </summary>
        public static new surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface(SdaiInstance instance) : base(instance) { }
        public bounded_surface() : base(0) { }

        public static implicit operator bounded_surface(SdaiInstance instance) => new bounded_surface(instance);

        /// <summary>
        /// Create new instace of bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface(SdaiInstance instance) : base(instance) { }
        public b_spline_surface() : base(0) { }

        public static implicit operator b_spline_surface(SdaiInstance instance) => new b_spline_surface(instance);

        /// <summary>
        /// Create new instace of b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public IntValue? u_degree
            {
            get { return get_IntValue("u_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? v_degree
            {
            get { return get_IntValue("v_degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v_degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public list_of_list_of_cartesian_point control_points_list { get { return (new list_of_list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); } }
        public void put_control_points_list(IEnumerable<list_of_cartesian_point> lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_surface_form? surface_form 
            { 
            get { var str = get_string("surface_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_surface_form_); return EnumValue<b_spline_surface_form>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<b_spline_surface_form>.FromValue(value.Value, EnumNames.b_spline_surface_form_); ifcengine.sdaiPutAttrBN(m_instance, "surface_form", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? u_closed 
            { 
            get { var str = get_string("u_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "u_closed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? v_closed 
            { 
            get { var str = get_string("v_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "v_closed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? u_upper { get { return get_IntValue("u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? v_upper { get { return get_IntValue("v_upper", ifcengine.sdaiINTEGER); } }
        public array_of_array_of_cartesian_point control_points { get { return (new array_of_array_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points"); } }

        protected override TextValue WrapperEntityName() { return "b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface_with_knots : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_surface_with_knots() : base(0) { }

        public static implicit operator b_spline_surface_with_knots(SdaiInstance instance) => new b_spline_surface_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_surface_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue u_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "u_multiplicities"); } }
        public void put_u_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public void put_u_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public ListOfIntValue v_multiplicities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "v_multiplicities"); } }
        public void put_v_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public void put_v_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public list_of_parameter_value u_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "u_knots"); } }
        public void put_u_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public void put_u_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public list_of_parameter_value v_knots { get { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "v_knots"); } }
        public void put_v_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public void put_v_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public knot_type? knot_spec 
            { 
            get { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<knot_type>.FromValue(value.Value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? knot_u_upper { get { return get_IntValue("knot_u_upper", ifcengine.sdaiINTEGER); } }
        public IntValue? knot_v_upper { get { return get_IntValue("knot_v_upper", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "b_spline_surface_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour(SdaiInstance instance) : base(instance) { }
        public colour() : base(0) { }

        public static implicit operator colour(SdaiInstance instance) => new colour(instance);

        /// <summary>
        /// Create new instace of colour and returns object of this class to interact with
        /// </summary>
        public static new colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of background_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class background_colour : colour
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of background_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public background_colour(SdaiInstance instance) : base(instance) { }
        public background_colour() : base(0) { }

        public static implicit operator background_colour(SdaiInstance instance) => new background_colour(instance);

        /// <summary>
        /// Create new instace of background_colour and returns object of this class to interact with
        /// </summary>
        public static new background_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "background_colour"); Debug.Assert(inst != 0); return inst; }


        public area_or_view presentation
            {
            get { return new area_or_view(m_instance, "presentation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "background_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characterized_object
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characterized_object : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characterized_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characterized_object(SdaiInstance instance) : base(instance) { }
        public characterized_object() : base(0) { }

        public static implicit operator characterized_object(SdaiInstance instance) => new characterized_object(instance);

        /// <summary>
        /// Create new instace of characterized_object and returns object of this class to interact with
        /// </summary>
        public static new characterized_object Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characterized_object"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "characterized_object"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_definition : characterized_object
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_definition(SdaiInstance instance) : base(instance) { }
        public feature_definition() : base(0) { }

        public static implicit operator feature_definition(SdaiInstance instance) => new feature_definition(instance);

        /// <summary>
        /// Create new instace of feature_definition and returns object of this class to interact with
        /// </summary>
        public static new feature_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of barring_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class barring_hole : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of barring_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public barring_hole(SdaiInstance instance) : base(instance) { }
        public barring_hole() : base(0) { }

        public static implicit operator barring_hole(SdaiInstance instance) => new barring_hole(instance);

        /// <summary>
        /// Create new instace of barring_hole and returns object of this class to interact with
        /// </summary>
        public static new barring_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "barring_hole"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "barring_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bead
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bead : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bead
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bead(SdaiInstance instance) : base(instance) { }
        public bead() : base(0) { }

        public static implicit operator bead(SdaiInstance instance) => new bead(instance);

        /// <summary>
        /// Create new instace of bead and returns object of this class to interact with
        /// </summary>
        public static new bead Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bead"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bead"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bead_end
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bead_end : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bead_end
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bead_end(SdaiInstance instance) : base(instance) { }
        public bead_end() : base(0) { }

        public static implicit operator bead_end(SdaiInstance instance) => new bead_end(instance);

        /// <summary>
        /// Create new instace of bead_end and returns object of this class to interact with
        /// </summary>
        public static new bead_end Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bead_end"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bead_end"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_curve(SdaiInstance instance) : base(instance) { }
        public bezier_curve() : base(0) { }

        public static implicit operator bezier_curve(SdaiInstance instance) => new bezier_curve(instance);

        /// <summary>
        /// Create new instace of bezier_curve and returns object of this class to interact with
        /// </summary>
        public static new bezier_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bezier_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_surface(SdaiInstance instance) : base(instance) { }
        public bezier_surface() : base(0) { }

        public static implicit operator bezier_surface(SdaiInstance instance) => new bezier_surface(instance);

        /// <summary>
        /// Create new instace of bezier_surface and returns object of this class to interact with
        /// </summary>
        public static new bezier_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bezier_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_boolean_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_boolean_expression(SdaiInstance instance) : base(instance) { }
        public binary_boolean_expression() : base(0) { }

        public static implicit operator binary_boolean_expression(SdaiInstance instance) => new binary_boolean_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "binary_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_generic_expression : generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_generic_expression(SdaiInstance instance) : base(instance) { }
        public binary_generic_expression() : base(0) { }

        public static implicit operator binary_generic_expression(SdaiInstance instance) => new binary_generic_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "binary_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of block
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class block : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public block(SdaiInstance instance) : base(instance) { }
        public block() : base(0) { }

        public static implicit operator block(SdaiInstance instance) => new block(instance);

        /// <summary>
        /// Create new instace of block and returns object of this class to interact with
        /// </summary>
        public static new block Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "block"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "block"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class defined_function : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public defined_function(SdaiInstance instance) : base(instance) { }
        public defined_function() : base(0) { }

        public static implicit operator defined_function(SdaiInstance instance) => new defined_function(instance);


        protected override TextValue WrapperEntityName() { return "defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_defined_function : defined_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_defined_function(SdaiInstance instance) : base(instance) { }
        public boolean_defined_function() : base(0) { }

        public static implicit operator boolean_defined_function(SdaiInstance instance) => new boolean_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "boolean_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_boolean_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_boolean_expression(SdaiInstance instance) : base(instance) { }
        public simple_boolean_expression() : base(0) { }

        public static implicit operator simple_boolean_expression(SdaiInstance instance) => new simple_boolean_expression(instance);


        protected override TextValue WrapperEntityName() { return "simple_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_literal : simple_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_literal(SdaiInstance instance) : base(instance) { }
        public boolean_literal() : base(0) { }

        public static implicit operator boolean_literal(SdaiInstance instance) => new boolean_literal(instance);

        /// <summary>
        /// Create new instace of boolean_literal and returns object of this class to interact with
        /// </summary>
        public static new boolean_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_literal"); Debug.Assert(inst != 0); return inst; }

        public bool? the_value
            {
            get { return get_bool("the_value", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "boolean_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_result : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_result(SdaiInstance instance) : base(instance) { }
        public boolean_result() : base(0) { }

        public static implicit operator boolean_result(SdaiInstance instance) => new boolean_result(instance);

        /// <summary>
        /// Create new instace of boolean_result and returns object of this class to interact with
        /// </summary>
        public static new boolean_result Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_result"); Debug.Assert(inst != 0); return inst; }

        public boolean_operator? operator_ 
            { 
            get { var str = get_string("operator_", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.boolean_operator_); return EnumValue<boolean_operator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<boolean_operator>.FromValue(value.Value, EnumNames.boolean_operator_); ifcengine.sdaiPutAttrBN(m_instance, "operator_", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public boolean_operand first_operand
            {
            get { return new boolean_operand(m_instance, "first_operand", 0); }
            }

        public boolean_operand second_operand
            {
            get { return new boolean_operand(m_instance, "second_operand", 0); }
            }

        protected override TextValue WrapperEntityName() { return "boolean_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_variable : simple_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_variable(SdaiInstance instance) : base(instance) { }
        public boolean_variable() : base(0) { }

        public static implicit operator boolean_variable(SdaiInstance instance) => new boolean_variable(instance);

        /// <summary>
        /// Create new instace of boolean_variable and returns object of this class to interact with
        /// </summary>
        public static new boolean_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_variable"); Debug.Assert(inst != 0); return inst; }

        public environment interpretation { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interpretation", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "boolean_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boss
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boss : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boss
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boss(SdaiInstance instance) : base(instance) { }
        public boss() : base(0) { }

        public static implicit operator boss(SdaiInstance instance) => new boss(instance);

        /// <summary>
        /// Create new instace of boss and returns object of this class to interact with
        /// </summary>
        public static new boss Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boss"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "boss"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boss_top
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boss_top : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boss_top
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boss_top(SdaiInstance instance) : base(instance) { }
        public boss_top() : base(0) { }

        public static implicit operator boss_top(SdaiInstance instance) => new boss_top(instance);

        /// <summary>
        /// Create new instace of boss_top and returns object of this class to interact with
        /// </summary>
        public static new boss_top Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boss_top"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "boss_top"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve(SdaiInstance instance) : base(instance) { }
        public composite_curve() : base(0) { }

        public static implicit operator composite_curve(SdaiInstance instance) => new composite_curve(instance);

        /// <summary>
        /// Create new instace of composite_curve and returns object of this class to interact with
        /// </summary>
        public static new composite_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_composite_curve_segment segments { get { return (new list_of_composite_curve_segmentSerializer()).FromAttr(m_instance, "segments"); } }
        public void put_segments(IEnumerable<composite_curve_segment> lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public void put_segments_untyped(IEnumerable lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? n_segments { get { return get_IntValue("n_segments", ifcengine.sdaiINTEGER); } }
        public LOGICAL_VALUE? closed_curve { get { var str = get_string("closed_curve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } }

        protected override TextValue WrapperEntityName() { return "composite_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_on_surface : composite_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_on_surface(SdaiInstance instance) : base(instance) { }
        public composite_curve_on_surface() : base(0) { }

        public static implicit operator composite_curve_on_surface(SdaiInstance instance) => new composite_curve_on_surface(instance);

        /// <summary>
        /// Create new instace of composite_curve_on_surface and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_on_surface"); Debug.Assert(inst != 0); return inst; }

        public set_of_surface basis_surface { get { return (new set_of_surfaceSerializer()).FromAttr(m_instance, "basis_surface"); } }

        protected override TextValue WrapperEntityName() { return "composite_curve_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_curve : composite_curve_on_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_curve(SdaiInstance instance) : base(instance) { }
        public boundary_curve() : base(0) { }

        public static implicit operator boundary_curve(SdaiInstance instance) => new boundary_curve(instance);

        /// <summary>
        /// Create new instace of boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pcurve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pcurve(SdaiInstance instance) : base(instance) { }
        public pcurve() : base(0) { }

        public static implicit operator pcurve(SdaiInstance instance) => new pcurve(instance);

        /// <summary>
        /// Create new instace of pcurve and returns object of this class to interact with
        /// </summary>
        public static new pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public definitional_representation reference_to_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_pcurve : pcurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_pcurve(SdaiInstance instance) : base(instance) { }
        public bounded_pcurve() : base(0) { }

        public static implicit operator bounded_pcurve(SdaiInstance instance) => new bounded_pcurve(instance);

        /// <summary>
        /// Create new instace of bounded_pcurve and returns object of this class to interact with
        /// </summary>
        public static new bounded_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_pcurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve(SdaiInstance instance) : base(instance) { }
        public surface_curve() : base(0) { }

        public static implicit operator surface_curve(SdaiInstance instance) => new surface_curve(instance);

        /// <summary>
        /// Create new instace of surface_curve and returns object of this class to interact with
        /// </summary>
        public static new surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve"); Debug.Assert(inst != 0); return inst; }

        public curve curve_3d 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_pcurve_or_surface associated_geometry { get { return (new list_of_pcurve_or_surfaceSerializer()).FromAttr(m_instance, "associated_geometry"); } }
        public void put_associated_geometry(IEnumerable<pcurve_or_surface> lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        public void put_associated_geometry_untyped(IEnumerable lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        public preferred_surface_curve_representation? master_representation 
            { 
            get { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.preferred_surface_curve_representation_); return EnumValue<preferred_surface_curve_representation>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<preferred_surface_curve_representation>.FromValue(value.Value, EnumNames.preferred_surface_curve_representation_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public set_of_surface basis_surface { get { return (new set_of_surfaceSerializer()).FromAttr(m_instance, "basis_surface"); } }

        protected override TextValue WrapperEntityName() { return "surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface_curve(SdaiInstance instance) : base(instance) { }
        public bounded_surface_curve() : base(0) { }

        public static implicit operator bounded_surface_curve(SdaiInstance instance) => new bounded_surface_curve(instance);

        /// <summary>
        /// Create new instace of bounded_surface_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "bounded_surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of box_domain
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class box_domain : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of box_domain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public box_domain(SdaiInstance instance) : base(instance) { }
        public box_domain() : base(0) { }

        public static implicit operator box_domain(SdaiInstance instance) => new box_domain(instance);

        /// <summary>
        /// Create new instace of box_domain and returns object of this class to interact with
        /// </summary>
        public static new box_domain Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "box_domain"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point corner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, i); }
            }
        public double? xlength
            {
            get { return get_double("xlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "xlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ylength
            {
            get { return get_double("ylength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ylength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? zlength
            {
            get { return get_double("zlength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "zlength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "box_domain"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of half_space_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class half_space_solid : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of half_space_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public half_space_solid(SdaiInstance instance) : base(instance) { }
        public half_space_solid() : base(0) { }

        public static implicit operator half_space_solid(SdaiInstance instance) => new half_space_solid(instance);

        /// <summary>
        /// Create new instace of half_space_solid and returns object of this class to interact with
        /// </summary>
        public static new half_space_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "half_space_solid"); Debug.Assert(inst != 0); return inst; }

        public surface base_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? agreement_flag
            {
            get { return get_bool("agreement_flag", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "agreement_flag", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "half_space_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boxed_half_space
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boxed_half_space : half_space_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boxed_half_space
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boxed_half_space(SdaiInstance instance) : base(instance) { }
        public boxed_half_space() : base(0) { }

        public static implicit operator boxed_half_space(SdaiInstance instance) => new boxed_half_space(instance);

        /// <summary>
        /// Create new instace of boxed_half_space and returns object of this class to interact with
        /// </summary>
        public static new boxed_half_space Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boxed_half_space"); Debug.Assert(inst != 0); return inst; }

        public box_domain enclosure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, out inst); return new box_domain(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "boxed_half_space"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_model(SdaiInstance instance) : base(instance) { }
        public solid_model() : base(0) { }

        public static implicit operator solid_model(SdaiInstance instance) => new solid_model(instance);

        /// <summary>
        /// Create new instace of solid_model and returns object of this class to interact with
        /// </summary>
        public static new solid_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_model"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_solid_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_solid_brep : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_solid_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_solid_brep(SdaiInstance instance) : base(instance) { }
        public manifold_solid_brep() : base(0) { }

        public static implicit operator manifold_solid_brep(SdaiInstance instance) => new manifold_solid_brep(instance);

        /// <summary>
        /// Create new instace of manifold_solid_brep and returns object of this class to interact with
        /// </summary>
        public static new manifold_solid_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_solid_brep"); Debug.Assert(inst != 0); return inst; }

        public closed_shell outer 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, out inst); return new closed_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "manifold_solid_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of brep_with_voids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class brep_with_voids : manifold_solid_brep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of brep_with_voids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public brep_with_voids(SdaiInstance instance) : base(instance) { }
        public brep_with_voids() : base(0) { }

        public static implicit operator brep_with_voids(SdaiInstance instance) => new brep_with_voids(instance);

        /// <summary>
        /// Create new instace of brep_with_voids and returns object of this class to interact with
        /// </summary>
        public static new brep_with_voids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "brep_with_voids"); Debug.Assert(inst != 0); return inst; }

        public set_of_oriented_closed_shell voids { get { return (new set_of_oriented_closed_shellSerializer()).FromAttr(m_instance, "voids"); } }
        public void put_voids(IEnumerable<oriented_closed_shell> lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }
        public void put_voids_untyped(IEnumerable lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }

        protected override TextValue WrapperEntityName() { return "brep_with_voids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date(SdaiInstance instance) : base(instance) { }
        public date() : base(0) { }

        public static implicit operator date(SdaiInstance instance) => new date(instance);

        /// <summary>
        /// Create new instace of date and returns object of this class to interact with
        /// </summary>
        public static new date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? year_component
            {
            get { return get_IntValue("year_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "year_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of calendar_date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class calendar_date : date
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of calendar_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public calendar_date(SdaiInstance instance) : base(instance) { }
        public calendar_date() : base(0) { }

        public static implicit operator calendar_date(SdaiInstance instance) => new calendar_date(instance);

        /// <summary>
        /// Create new instace of calendar_date and returns object of this class to interact with
        /// </summary>
        public static new calendar_date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "calendar_date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? day_component
            {
            get { return get_IntValue("day_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "day_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? month_component
            {
            get { return get_IntValue("month_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "month_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "calendar_date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_image
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_image : mapped_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_image
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_image(SdaiInstance instance) : base(instance) { }
        public camera_image() : base(0) { }

        public static implicit operator camera_image(SdaiInstance instance) => new camera_image(instance);

        /// <summary>
        /// Create new instace of camera_image and returns object of this class to interact with
        /// </summary>
        public static new camera_image Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_image"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "camera_image"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_image_2d_with_scale
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_image_2d_with_scale : camera_image
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_image_2d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_image_2d_with_scale(SdaiInstance instance) : base(instance) { }
        public camera_image_2d_with_scale() : base(0) { }

        public static implicit operator camera_image_2d_with_scale(SdaiInstance instance) => new camera_image_2d_with_scale(instance);

        /// <summary>
        /// Create new instace of camera_image_2d_with_scale and returns object of this class to interact with
        /// </summary>
        public static new camera_image_2d_with_scale Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_image_2d_with_scale"); Debug.Assert(inst != 0); return inst; }

        public double? scale { get { return get_double("scale", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "camera_image_2d_with_scale"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_image_3d_with_scale
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_image_3d_with_scale : camera_image
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_image_3d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_image_3d_with_scale(SdaiInstance instance) : base(instance) { }
        public camera_image_3d_with_scale() : base(0) { }

        public static implicit operator camera_image_3d_with_scale(SdaiInstance instance) => new camera_image_3d_with_scale(instance);

        /// <summary>
        /// Create new instace of camera_image_3d_with_scale and returns object of this class to interact with
        /// </summary>
        public static new camera_image_3d_with_scale Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_image_3d_with_scale"); Debug.Assert(inst != 0); return inst; }

        public double? scale { get { return get_double("scale", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "camera_image_3d_with_scale"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model(SdaiInstance instance) : base(instance) { }
        public camera_model() : base(0) { }

        public static implicit operator camera_model(SdaiInstance instance) => new camera_model(instance);


        protected override TextValue WrapperEntityName() { return "camera_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d2
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d2 : camera_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d2
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d2(SdaiInstance instance) : base(instance) { }
        public camera_model_d2() : base(0) { }

        public static implicit operator camera_model_d2(SdaiInstance instance) => new camera_model_d2(instance);

        /// <summary>
        /// Create new instace of camera_model_d2 and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d2 Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d2"); Debug.Assert(inst != 0); return inst; }

        public planar_box view_window 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, out inst); return new planar_box(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? view_window_clipping
            {
            get { return get_bool("view_window_clipping", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "view_window_clipping", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "camera_model_d2"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3 : camera_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3(SdaiInstance instance) : base(instance) { }
        public camera_model_d3() : base(0) { }

        public static implicit operator camera_model_d3(SdaiInstance instance) => new camera_model_d3(instance);

        /// <summary>
        /// Create new instace of camera_model_d3 and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3 Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d view_reference_system 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "view_reference_system", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "view_reference_system", ifcengine.sdaiINSTANCE, i); }
            }
        public view_volume perspective_of_volume 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "perspective_of_volume", ifcengine.sdaiINSTANCE, out inst); return new view_volume(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "perspective_of_volume", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "camera_model_d3"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3_with_hlhsr
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3_with_hlhsr : camera_model_d3
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3_with_hlhsr
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3_with_hlhsr(SdaiInstance instance) : base(instance) { }
        public camera_model_d3_with_hlhsr() : base(0) { }

        public static implicit operator camera_model_d3_with_hlhsr(SdaiInstance instance) => new camera_model_d3_with_hlhsr(instance);

        /// <summary>
        /// Create new instace of camera_model_d3_with_hlhsr and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3_with_hlhsr Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3_with_hlhsr"); Debug.Assert(inst != 0); return inst; }

        public bool? hidden_line_surface_removal
            {
            get { return get_bool("hidden_line_surface_removal", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hidden_line_surface_removal", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "camera_model_d3_with_hlhsr"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_map : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_map(SdaiInstance instance) : base(instance) { }
        public representation_map() : base(0) { }

        public static implicit operator representation_map(SdaiInstance instance) => new representation_map(instance);

        /// <summary>
        /// Create new instace of representation_map and returns object of this class to interact with
        /// </summary>
        public static new representation_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_map"); Debug.Assert(inst != 0); return inst; }

        public representation_item mapping_origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, i); }
            }
        public representation mapped_representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_mapped_item map_usage { get { return (new set_of_mapped_itemSerializer()).FromAttr(m_instance, "map_usage"); } }

        protected override TextValue WrapperEntityName() { return "representation_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_usage : representation_map
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_usage(SdaiInstance instance) : base(instance) { }
        public camera_usage() : base(0) { }

        public static implicit operator camera_usage(SdaiInstance instance) => new camera_usage(instance);

        /// <summary>
        /// Create new instace of camera_usage and returns object of this class to interact with
        /// </summary>
        public static new camera_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "camera_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point(SdaiInstance instance) : base(instance) { }
        public point() : base(0) { }

        public static implicit operator point(SdaiInstance instance) => new point(instance);

        /// <summary>
        /// Create new instace of point and returns object of this class to interact with
        /// </summary>
        public static new point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_point : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_point(SdaiInstance instance) : base(instance) { }
        public cartesian_point() : base(0) { }

        public static implicit operator cartesian_point(SdaiInstance instance) => new cartesian_point(instance);

        /// <summary>
        /// Create new instace of cartesian_point and returns object of this class to interact with
        /// </summary>
        public static new cartesian_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_point"); Debug.Assert(inst != 0); return inst; }

        public list_of_length_measure coordinates { get { return (new list_of_length_measureSerializer()).FromAttr(m_instance, "coordinates"); } }
        public void put_coordinates(IEnumerable<double> lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }
        public void put_coordinates_untyped(IEnumerable lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }

        protected override TextValue WrapperEntityName() { return "cartesian_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator() : base(0) { }

        public static implicit operator cartesian_transformation_operator(SdaiInstance instance) => new cartesian_transformation_operator(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public direction axis1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, i); }
            }
        public direction axis2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point local_origin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, i); }
            }
        public double? scale
            {
            get { return get_double("scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? scl { get { return get_double("scl", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_2d : cartesian_transformation_operator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_2d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_2d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_2d(SdaiInstance instance) => new cartesian_transformation_operator_2d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_2d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_2d"); Debug.Assert(inst != 0); return inst; }

        public list_of_direction u { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "u"); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_3d : cartesian_transformation_operator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_3d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_3d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_3d(SdaiInstance instance) => new cartesian_transformation_operator_3d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_3d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_3d"); Debug.Assert(inst != 0); return inst; }

        public direction axis3 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, i); }
            }
        public list_of_direction u { get { return (new list_of_directionSerializer()).FromAttr(m_instance, "u"); } }

        protected override TextValue WrapperEntityName() { return "cartesian_transformation_operator_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of celsius_temperature_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class celsius_temperature_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of celsius_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public celsius_temperature_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public celsius_temperature_measure_with_unit() : base(0) { }

        public static implicit operator celsius_temperature_measure_with_unit(SdaiInstance instance) => new celsius_temperature_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of celsius_temperature_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new celsius_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "celsius_temperature_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "celsius_temperature_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of centre_of_symmetry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class centre_of_symmetry : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of centre_of_symmetry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public centre_of_symmetry(SdaiInstance instance) : base(instance) { }
        public centre_of_symmetry() : base(0) { }

        public static implicit operator centre_of_symmetry(SdaiInstance instance) => new centre_of_symmetry(instance);

        /// <summary>
        /// Create new instace of centre_of_symmetry and returns object of this class to interact with
        /// </summary>
        public static new centre_of_symmetry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "centre_of_symmetry"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "centre_of_symmetry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification(SdaiInstance instance) : base(instance) { }
        public certification() : base(0) { }

        public static implicit operator certification(SdaiInstance instance) => new certification(instance);

        /// <summary>
        /// Create new instace of certification and returns object of this class to interact with
        /// </summary>
        public static new certification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public certification_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new certification_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "certification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification_type(SdaiInstance instance) : base(instance) { }
        public certification_type() : base(0) { }

        public static implicit operator certification_type(SdaiInstance instance) => new certification_type(instance);

        /// <summary>
        /// Create new instace of certification_type and returns object of this class to interact with
        /// </summary>
        public static new certification_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "certification_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of transition_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class transition_feature : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of transition_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public transition_feature(SdaiInstance instance) : base(instance) { }
        public transition_feature() : base(0) { }

        public static implicit operator transition_feature(SdaiInstance instance) => new transition_feature(instance);

        /// <summary>
        /// Create new instace of transition_feature and returns object of this class to interact with
        /// </summary>
        public static new transition_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "transition_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "transition_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class chamfer : transition_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public chamfer(SdaiInstance instance) : base(instance) { }
        public chamfer() : base(0) { }

        public static implicit operator chamfer(SdaiInstance instance) => new chamfer(instance);

        /// <summary>
        /// Create new instace of chamfer and returns object of this class to interact with
        /// </summary>
        public static new chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "chamfer"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of chamfer_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class chamfer_offset : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of chamfer_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public chamfer_offset(SdaiInstance instance) : base(instance) { }
        public chamfer_offset() : base(0) { }

        public static implicit operator chamfer_offset(SdaiInstance instance) => new chamfer_offset(instance);

        /// <summary>
        /// Create new instace of chamfer_offset and returns object of this class to interact with
        /// </summary>
        public static new chamfer_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "chamfer_offset"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "chamfer_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_representation(SdaiInstance instance) : base(instance) { }
        public symbol_representation() : base(0) { }

        public static implicit operator symbol_representation(SdaiInstance instance) => new symbol_representation(instance);

        /// <summary>
        /// Create new instace of symbol_representation and returns object of this class to interact with
        /// </summary>
        public static new symbol_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "symbol_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_character_glyph_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_character_glyph_symbol : symbol_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_character_glyph_symbol(SdaiInstance instance) : base(instance) { }
        public generic_character_glyph_symbol() : base(0) { }

        public static implicit operator generic_character_glyph_symbol(SdaiInstance instance) => new generic_character_glyph_symbol(instance);


        protected override TextValue WrapperEntityName() { return "generic_character_glyph_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_symbol : generic_character_glyph_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_symbol(SdaiInstance instance) : base(instance) { }
        public character_glyph_symbol() : base(0) { }

        public static implicit operator character_glyph_symbol(SdaiInstance instance) => new character_glyph_symbol(instance);

        /// <summary>
        /// Create new instace of character_glyph_symbol and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_symbol"); Debug.Assert(inst != 0); return inst; }

        public planar_extent character_box 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "character_box", ifcengine.sdaiINSTANCE, out inst); return new planar_extent(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "character_box", ifcengine.sdaiINSTANCE, i); }
            }
        public double? baseline_ratio
            {
            get { return get_double("baseline_ratio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "baseline_ratio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? box_height { get { return get_double("box_height", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "character_glyph_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characterized_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characterized_class : characterized_object
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characterized_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characterized_class(SdaiInstance instance) : base(instance) { }
        public characterized_class() : base(0) { }

        public static implicit operator characterized_class(SdaiInstance instance) => new characterized_class(instance);

        /// <summary>
        /// Create new instace of characterized_class and returns object of this class to interact with
        /// </summary>
        public static new characterized_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characterized_class"); Debug.Assert(inst != 0); return inst; }

        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "characterized_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conic : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conic(SdaiInstance instance) : base(instance) { }
        public conic() : base(0) { }

        public static implicit operator conic(SdaiInstance instance) => new conic(instance);

        /// <summary>
        /// Create new instace of conic and returns object of this class to interact with
        /// </summary>
        public static new conic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conic"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement position
            {
            get { return new axis2_placement(m_instance, "position", 0); }
            }

        protected override TextValue WrapperEntityName() { return "conic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circle : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circle(SdaiInstance instance) : base(instance) { }
        public circle() : base(0) { }

        public static implicit operator circle(SdaiInstance instance) => new circle(instance);

        /// <summary>
        /// Create new instace of circle and returns object of this class to interact with
        /// </summary>
        public static new circle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circle"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "circle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circular_closed_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circular_closed_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circular_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circular_closed_profile(SdaiInstance instance) : base(instance) { }
        public circular_closed_profile() : base(0) { }

        public static implicit operator circular_closed_profile(SdaiInstance instance) => new circular_closed_profile(instance);

        /// <summary>
        /// Create new instace of circular_closed_profile and returns object of this class to interact with
        /// </summary>
        public static new circular_closed_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circular_closed_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "circular_closed_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of replicate_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class replicate_feature : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of replicate_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public replicate_feature(SdaiInstance instance) : base(instance) { }
        public replicate_feature() : base(0) { }

        public static implicit operator replicate_feature(SdaiInstance instance) => new replicate_feature(instance);

        /// <summary>
        /// Create new instace of replicate_feature and returns object of this class to interact with
        /// </summary>
        public static new replicate_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "replicate_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "replicate_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circular_pattern : replicate_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circular_pattern(SdaiInstance instance) : base(instance) { }
        public circular_pattern() : base(0) { }

        public static implicit operator circular_pattern(SdaiInstance instance) => new circular_pattern(instance);

        /// <summary>
        /// Create new instace of circular_pattern and returns object of this class to interact with
        /// </summary>
        public static new circular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circular_pattern"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "circular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circular_runout_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circular_runout_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circular_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circular_runout_tolerance(SdaiInstance instance) : base(instance) { }
        public circular_runout_tolerance() : base(0) { }

        public static implicit operator circular_runout_tolerance(SdaiInstance instance) => new circular_runout_tolerance(instance);

        /// <summary>
        /// Create new instace of circular_runout_tolerance and returns object of this class to interact with
        /// </summary>
        public static new circular_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circular_runout_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "circular_runout_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group(SdaiInstance instance) : base(instance) { }
        public group() : base(0) { }

        public static implicit operator group(SdaiInstance instance) => new group(instance);

        /// <summary>
        /// Create new instace of group and returns object of this class to interact with
        /// </summary>
        public static new group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_ : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_(SdaiInstance instance) : base(instance) { }
        public class_() : base(0) { }

        public static implicit operator class_(SdaiInstance instance) => new class_(instance);

        /// <summary>
        /// Create new instace of class_ and returns object of this class to interact with
        /// </summary>
        public static new class_ Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "class_"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_system : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_system(SdaiInstance instance) : base(instance) { }
        public class_system() : base(0) { }

        public static implicit operator class_system(SdaiInstance instance) => new class_system(instance);

        /// <summary>
        /// Create new instace of class_system and returns object of this class to interact with
        /// </summary>
        public static new class_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_system"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "class_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_context_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public effectivity_context_assignment() : base(0) { }

        public static implicit operator effectivity_context_assignment(SdaiInstance instance) => new effectivity_context_assignment(instance);

        public effectivity_assignment assigned_effectivity_assignment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_effectivity_assignment", ifcengine.sdaiINSTANCE, out inst); return new effectivity_assignment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_effectivity_assignment", ifcengine.sdaiINSTANCE, i); }
            }
        public effectivity_context_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new effectivity_context_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_usage_effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_usage_effectivity_context_assignment : effectivity_context_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_usage_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_usage_effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public class_usage_effectivity_context_assignment() : base(0) { }

        public static implicit operator class_usage_effectivity_context_assignment(SdaiInstance instance) => new class_usage_effectivity_context_assignment(instance);

        /// <summary>
        /// Create new instace of class_usage_effectivity_context_assignment and returns object of this class to interact with
        /// </summary>
        public static new class_usage_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_usage_effectivity_context_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_class_usage_effectivity_context_item items { get { return (new set_of_class_usage_effectivity_context_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<class_usage_effectivity_context_item> lst) { (new set_of_class_usage_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_class_usage_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "class_usage_effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of classification_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class classification_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of classification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public classification_role(SdaiInstance instance) : base(instance) { }
        public classification_role() : base(0) { }

        public static implicit operator classification_role(SdaiInstance instance) => new classification_role(instance);

        /// <summary>
        /// Create new instace of classification_role and returns object of this class to interact with
        /// </summary>
        public static new classification_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "classification_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "classification_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of closed_path_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class closed_path_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of closed_path_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public closed_path_profile(SdaiInstance instance) : base(instance) { }
        public closed_path_profile() : base(0) { }

        public static implicit operator closed_path_profile(SdaiInstance instance) => new closed_path_profile(instance);

        /// <summary>
        /// Create new instace of closed_path_profile and returns object of this class to interact with
        /// </summary>
        public static new closed_path_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "closed_path_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "closed_path_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_face_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_face_set : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_face_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_face_set(SdaiInstance instance) : base(instance) { }
        public connected_face_set() : base(0) { }

        public static implicit operator connected_face_set(SdaiInstance instance) => new connected_face_set(instance);

        /// <summary>
        /// Create new instace of connected_face_set and returns object of this class to interact with
        /// </summary>
        public static new connected_face_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_face_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_face cfs_faces { get { return (new set_of_faceSerializer()).FromAttr(m_instance, "cfs_faces"); } }
        public void put_cfs_faces(IEnumerable<face> lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }
        public void put_cfs_faces_untyped(IEnumerable lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }

        protected override TextValue WrapperEntityName() { return "connected_face_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class closed_shell : connected_face_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public closed_shell(SdaiInstance instance) : base(instance) { }
        public closed_shell() : base(0) { }

        public static implicit operator closed_shell(SdaiInstance instance) => new closed_shell(instance);

        /// <summary>
        /// Create new instace of closed_shell and returns object of this class to interact with
        /// </summary>
        public static new closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "closed_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coaxiality_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coaxiality_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coaxiality_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coaxiality_tolerance(SdaiInstance instance) : base(instance) { }
        public coaxiality_tolerance() : base(0) { }

        public static implicit operator coaxiality_tolerance(SdaiInstance instance) => new coaxiality_tolerance(instance);

        /// <summary>
        /// Create new instace of coaxiality_tolerance and returns object of this class to interact with
        /// </summary>
        public static new coaxiality_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coaxiality_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "coaxiality_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour_specification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour_specification : colour
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour_specification(SdaiInstance instance) : base(instance) { }
        public colour_specification() : base(0) { }

        public static implicit operator colour_specification(SdaiInstance instance) => new colour_specification(instance);

        /// <summary>
        /// Create new instace of colour_specification and returns object of this class to interact with
        /// </summary>
        public static new colour_specification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour_specification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "colour_specification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour_rgb
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour_rgb : colour_specification
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour_rgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour_rgb(SdaiInstance instance) : base(instance) { }
        public colour_rgb() : base(0) { }

        public static implicit operator colour_rgb(SdaiInstance instance) => new colour_rgb(instance);

        /// <summary>
        /// Create new instace of colour_rgb and returns object of this class to interact with
        /// </summary>
        public static new colour_rgb Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour_rgb"); Debug.Assert(inst != 0); return inst; }

        public double? red
            {
            get { return get_double("red", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "red", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? green
            {
            get { return get_double("green", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "green", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? blue
            {
            get { return get_double("blue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "blue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "colour_rgb"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_shape_aspect : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_shape_aspect(SdaiInstance instance) : base(instance) { }
        public composite_shape_aspect() : base(0) { }

        public static implicit operator composite_shape_aspect(SdaiInstance instance) => new composite_shape_aspect(instance);

        /// <summary>
        /// Create new instace of composite_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new composite_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship component_relationships { get { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "component_relationships"); } }

        protected override TextValue WrapperEntityName() { return "composite_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of common_datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class common_datum : composite_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of common_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public common_datum(SdaiInstance instance) : base(instance) { }
        public common_datum() : base(0) { }

        public static implicit operator common_datum(SdaiInstance instance) => new common_datum(instance);

        /// <summary>
        /// Create new instace of common_datum and returns object of this class to interact with
        /// </summary>
        public static new common_datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "common_datum"); Debug.Assert(inst != 0); return inst; }

        public TextValue identification
            {
            get { return get_string("identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
            }
        public set_of_shape_aspect_relationship established_by_relationships { get { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "established_by_relationships"); } }

        protected override TextValue WrapperEntityName() { return "common_datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_expression(SdaiInstance instance) : base(instance) { }
        public comparison_expression() : base(0) { }

        public static implicit operator comparison_expression(SdaiInstance instance) => new comparison_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "comparison_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_equal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_equal : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_equal(SdaiInstance instance) : base(instance) { }
        public comparison_equal() : base(0) { }

        public static implicit operator comparison_equal(SdaiInstance instance) => new comparison_equal(instance);

        /// <summary>
        /// Create new instace of comparison_equal and returns object of this class to interact with
        /// </summary>
        public static new comparison_equal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_equal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_equal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_greater
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_greater : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_greater
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_greater(SdaiInstance instance) : base(instance) { }
        public comparison_greater() : base(0) { }

        public static implicit operator comparison_greater(SdaiInstance instance) => new comparison_greater(instance);

        /// <summary>
        /// Create new instace of comparison_greater and returns object of this class to interact with
        /// </summary>
        public static new comparison_greater Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_greater"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_greater"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_greater_equal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_greater_equal : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_greater_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_greater_equal(SdaiInstance instance) : base(instance) { }
        public comparison_greater_equal() : base(0) { }

        public static implicit operator comparison_greater_equal(SdaiInstance instance) => new comparison_greater_equal(instance);

        /// <summary>
        /// Create new instace of comparison_greater_equal and returns object of this class to interact with
        /// </summary>
        public static new comparison_greater_equal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_greater_equal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_greater_equal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_less
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_less : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_less
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_less(SdaiInstance instance) : base(instance) { }
        public comparison_less() : base(0) { }

        public static implicit operator comparison_less(SdaiInstance instance) => new comparison_less(instance);

        /// <summary>
        /// Create new instace of comparison_less and returns object of this class to interact with
        /// </summary>
        public static new comparison_less Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_less"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_less"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_less_equal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_less_equal : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_less_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_less_equal(SdaiInstance instance) : base(instance) { }
        public comparison_less_equal() : base(0) { }

        public static implicit operator comparison_less_equal(SdaiInstance instance) => new comparison_less_equal(instance);

        /// <summary>
        /// Create new instace of comparison_less_equal and returns object of this class to interact with
        /// </summary>
        public static new comparison_less_equal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_less_equal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_less_equal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_not_equal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_not_equal : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_not_equal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_not_equal(SdaiInstance instance) : base(instance) { }
        public comparison_not_equal() : base(0) { }

        public static implicit operator comparison_not_equal(SdaiInstance instance) => new comparison_not_equal(instance);

        /// <summary>
        /// Create new instace of comparison_not_equal and returns object of this class to interact with
        /// </summary>
        public static new comparison_not_equal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "comparison_not_equal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "comparison_not_equal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_segment : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public composite_curve_segment() : base(0) { }

        public static implicit operator composite_curve_segment(SdaiInstance instance) => new composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public transition_code? transition 
            { 
            get { var str = get_string("transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public curve parent_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public bag_of_composite_curve using_curves { get { return (new bag_of_composite_curveSerializer()).FromAttr(m_instance, "using_curves"); } }

        protected override TextValue WrapperEntityName() { return "composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of compound_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class compound_feature : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of compound_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public compound_feature(SdaiInstance instance) : base(instance) { }
        public compound_feature() : base(0) { }

        public static implicit operator compound_feature(SdaiInstance instance) => new compound_feature(instance);

        /// <summary>
        /// Create new instace of compound_feature and returns object of this class to interact with
        /// </summary>
        public static new compound_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "compound_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "compound_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_hole : compound_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_hole(SdaiInstance instance) : base(instance) { }
        public composite_hole() : base(0) { }

        public static implicit operator composite_hole(SdaiInstance instance) => new composite_hole(instance);

        /// <summary>
        /// Create new instace of composite_hole and returns object of this class to interact with
        /// </summary>
        public static new composite_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_hole"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "composite_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text(SdaiInstance instance) : base(instance) { }
        public composite_text() : base(0) { }

        public static implicit operator composite_text(SdaiInstance instance) => new composite_text(instance);

        /// <summary>
        /// Create new instace of composite_text and returns object of this class to interact with
        /// </summary>
        public static new composite_text Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text"); Debug.Assert(inst != 0); return inst; }

        public set_of_text_or_character collected_text { get { return (new set_of_text_or_characterSerializer()).FromAttr(m_instance, "collected_text"); } }
        public void put_collected_text(IEnumerable<text_or_character> lst) { (new set_of_text_or_characterSerializer()).ToSdaiAggr(lst, m_instance, "collected_text"); }
        public void put_collected_text_untyped(IEnumerable lst) { (new set_of_text_or_characterSerializer()).ToSdaiAggr(lst, m_instance, "collected_text"); }

        protected override TextValue WrapperEntityName() { return "composite_text"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_associated_curves
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_associated_curves : composite_text
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_associated_curves(SdaiInstance instance) : base(instance) { }
        public composite_text_with_associated_curves() : base(0) { }

        public static implicit operator composite_text_with_associated_curves(SdaiInstance instance) => new composite_text_with_associated_curves(instance);

        /// <summary>
        /// Create new instace of composite_text_with_associated_curves and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_associated_curves"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve associated_curves { get { return (new set_of_curveSerializer()).FromAttr(m_instance, "associated_curves"); } }
        public void put_associated_curves(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }
        public void put_associated_curves_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }

        protected override TextValue WrapperEntityName() { return "composite_text_with_associated_curves"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_blanking_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_blanking_box : composite_text
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_blanking_box(SdaiInstance instance) : base(instance) { }
        public composite_text_with_blanking_box() : base(0) { }

        public static implicit operator composite_text_with_blanking_box(SdaiInstance instance) => new composite_text_with_blanking_box(instance);

        /// <summary>
        /// Create new instace of composite_text_with_blanking_box and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_blanking_box"); Debug.Assert(inst != 0); return inst; }

        public planar_box blanking 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, out inst); return new planar_box(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "composite_text_with_blanking_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_extent : composite_text
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_extent(SdaiInstance instance) : base(instance) { }
        public composite_text_with_extent() : base(0) { }

        public static implicit operator composite_text_with_extent(SdaiInstance instance) => new composite_text_with_extent(instance);

        /// <summary>
        /// Create new instace of composite_text_with_extent and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_extent"); Debug.Assert(inst != 0); return inst; }

        public planar_extent extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, out inst); return new planar_extent(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "composite_text_with_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of compound_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class compound_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of compound_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public compound_representation_item(SdaiInstance instance) : base(instance) { }
        public compound_representation_item() : base(0) { }

        public static implicit operator compound_representation_item(SdaiInstance instance) => new compound_representation_item(instance);

        /// <summary>
        /// Create new instace of compound_representation_item and returns object of this class to interact with
        /// </summary>
        public static new compound_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "compound_representation_item"); Debug.Assert(inst != 0); return inst; }


        public compound_item_definition item_element
            {
            get { return new compound_item_definition(m_instance, "item_element", 0); }
            }

        protected override TextValue WrapperEntityName() { return "compound_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of compound_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class compound_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of compound_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public compound_shape_representation(SdaiInstance instance) : base(instance) { }
        public compound_shape_representation() : base(0) { }

        public static implicit operator compound_shape_representation(SdaiInstance instance) => new compound_shape_representation(instance);

        /// <summary>
        /// Create new instace of compound_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new compound_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "compound_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "compound_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of string_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class string_expression : expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of string_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public string_expression(SdaiInstance instance) : base(instance) { }
        public string_expression() : base(0) { }

        public static implicit operator string_expression(SdaiInstance instance) => new string_expression(instance);


        protected override TextValue WrapperEntityName() { return "string_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concat_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concat_expression : string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concat_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concat_expression(SdaiInstance instance) : base(instance) { }
        public concat_expression() : base(0) { }

        public static implicit operator concat_expression(SdaiInstance instance) => new concat_expression(instance);

        /// <summary>
        /// Create new instace of concat_expression and returns object of this class to interact with
        /// </summary>
        public static new concat_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concat_expression"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "concat_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concentricity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concentricity_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concentricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concentricity_tolerance(SdaiInstance instance) : base(instance) { }
        public concentricity_tolerance() : base(0) { }

        public static implicit operator concentricity_tolerance(SdaiInstance instance) => new concentricity_tolerance(instance);

        /// <summary>
        /// Create new instace of concentricity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new concentricity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concentricity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "concentricity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_operator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_operator : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_operator(SdaiInstance instance) : base(instance) { }
        public concept_feature_operator() : base(0) { }

        public static implicit operator concept_feature_operator(SdaiInstance instance) => new concept_feature_operator(instance);

        /// <summary>
        /// Create new instace of concept_feature_operator and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_operator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_operator"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "concept_feature_operator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_relationship(SdaiInstance instance) : base(instance) { }
        public concept_feature_relationship() : base(0) { }

        public static implicit operator concept_feature_relationship(SdaiInstance instance) => new concept_feature_relationship(instance);

        /// <summary>
        /// Create new instace of concept_feature_relationship and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_concept_feature relating_product_concept_feature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_concept_feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_concept_feature", ifcengine.sdaiINSTANCE, i); }
            }
        public product_concept_feature related_product_concept_feature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_concept_feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_product_concept_feature", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "concept_feature_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_relationship_with_condition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_relationship_with_condition : concept_feature_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_relationship_with_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_relationship_with_condition(SdaiInstance instance) : base(instance) { }
        public concept_feature_relationship_with_condition() : base(0) { }

        public static implicit operator concept_feature_relationship_with_condition(SdaiInstance instance) => new concept_feature_relationship_with_condition(instance);

        /// <summary>
        /// Create new instace of concept_feature_relationship_with_condition and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_relationship_with_condition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_relationship_with_condition"); Debug.Assert(inst != 0); return inst; }

        public concept_feature_operator conditional_operator 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "conditional_operator", ifcengine.sdaiINSTANCE, out inst); return new concept_feature_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "conditional_operator", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "concept_feature_relationship_with_condition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature(SdaiInstance instance) : base(instance) { }
        public product_concept_feature() : base(0) { }

        public static implicit operator product_concept_feature(SdaiInstance instance) => new product_concept_feature(instance);

        /// <summary>
        /// Create new instace of product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conditional_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conditional_concept_feature : product_concept_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conditional_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conditional_concept_feature(SdaiInstance instance) : base(instance) { }
        public conditional_concept_feature() : base(0) { }

        public static implicit operator conditional_concept_feature(SdaiInstance instance) => new conditional_concept_feature(instance);

        /// <summary>
        /// Create new instace of conditional_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new conditional_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conditional_concept_feature"); Debug.Assert(inst != 0); return inst; }

        public concept_feature_relationship_with_condition condition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "condition", ifcengine.sdaiINSTANCE, out inst); return new concept_feature_relationship_with_condition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "condition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "conditional_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_item(SdaiInstance instance) : base(instance) { }
        public configuration_item() : base(0) { }

        public static implicit operator configuration_item(SdaiInstance instance) => new configuration_item(instance);

        /// <summary>
        /// Create new instace of configuration_item and returns object of this class to interact with
        /// </summary>
        public static new configuration_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_concept item_concept 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item_concept", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "configuration_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configurable_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configurable_item : configuration_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configurable_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configurable_item(SdaiInstance instance) : base(instance) { }
        public configurable_item() : base(0) { }

        public static implicit operator configurable_item(SdaiInstance instance) => new configurable_item(instance);

        /// <summary>
        /// Create new instace of configurable_item and returns object of this class to interact with
        /// </summary>
        public static new configurable_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configurable_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_concept_feature_association item_concept_feature { get { return (new set_of_product_concept_feature_associationSerializer()).FromAttr(m_instance, "item_concept_feature"); } }
        public void put_item_concept_feature(IEnumerable<product_concept_feature_association> lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }
        public void put_item_concept_feature_untyped(IEnumerable lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        protected override TextValue WrapperEntityName() { return "configurable_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_definition(SdaiInstance instance) : base(instance) { }
        public configuration_definition() : base(0) { }

        public static implicit operator configuration_definition(SdaiInstance instance) => new configuration_definition(instance);

        /// <summary>
        /// Create new instace of configuration_definition and returns object of this class to interact with
        /// </summary>
        public static new configuration_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_definition"); Debug.Assert(inst != 0); return inst; }

        public set_of_pair_value pair_values { get { return (new set_of_pair_valueSerializer()).FromAttr(m_instance, "pair_values"); } }
        public void put_pair_values(IEnumerable<pair_value> lst) { (new set_of_pair_valueSerializer()).ToSdaiAggr(lst, m_instance, "pair_values"); }
        public void put_pair_values_untyped(IEnumerable lst) { (new set_of_pair_valueSerializer()).ToSdaiAggr(lst, m_instance, "pair_values"); }

        public motion_parameter_measure t_parameter
            {
            get { return new motion_parameter_measure(m_instance, "t_parameter", 0); }
            }

        protected override TextValue WrapperEntityName() { return "configuration_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_design
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_design : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_design
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_design(SdaiInstance instance) : base(instance) { }
        public configuration_design() : base(0) { }

        public static implicit operator configuration_design(SdaiInstance instance) => new configuration_design(instance);

        /// <summary>
        /// Create new instace of configuration_design and returns object of this class to interact with
        /// </summary>
        public static new configuration_design Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_design"); Debug.Assert(inst != 0); return inst; }

        public configuration_item configuration 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, out inst); return new configuration_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, i); }
            }

        public configuration_design_item design
            {
            get { return new configuration_design_item(m_instance, "design", 0); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "configuration_design"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity(SdaiInstance instance) : base(instance) { }
        public effectivity() : base(0) { }

        public static implicit operator effectivity(SdaiInstance instance) => new effectivity(instance);

        /// <summary>
        /// Create new instace of effectivity and returns object of this class to interact with
        /// </summary>
        public static new effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_effectivity : effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_effectivity(SdaiInstance instance) : base(instance) { }
        public product_definition_effectivity() : base(0) { }

        public static implicit operator product_definition_effectivity(SdaiInstance instance) => new product_definition_effectivity(instance);

        /// <summary>
        /// Create new instace of product_definition_effectivity and returns object of this class to interact with
        /// </summary>
        public static new product_definition_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_effectivity"); Debug.Assert(inst != 0); return inst; }

        public product_definition_relationship usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "usage", ifcengine.sdaiINSTANCE, out inst); return new product_definition_relationship(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "usage", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_effectivity : product_definition_effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_effectivity(SdaiInstance instance) : base(instance) { }
        public configuration_effectivity() : base(0) { }

        public static implicit operator configuration_effectivity(SdaiInstance instance) => new configuration_effectivity(instance);

        /// <summary>
        /// Create new instace of configuration_effectivity and returns object of this class to interact with
        /// </summary>
        public static new configuration_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_effectivity"); Debug.Assert(inst != 0); return inst; }

        public configuration_design configuration 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, out inst); return new configuration_design(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "configuration_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_interpolation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_interpolation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_interpolation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_interpolation(SdaiInstance instance) : base(instance) { }
        public configuration_interpolation() : base(0) { }

        public static implicit operator configuration_interpolation(SdaiInstance instance) => new configuration_interpolation(instance);

        /// <summary>
        /// Create new instace of configuration_interpolation and returns object of this class to interact with
        /// </summary>
        public static new configuration_interpolation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_interpolation"); Debug.Assert(inst != 0); return inst; }

        public configuration_definition previous_configuration_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "previous_configuration_definition", ifcengine.sdaiINSTANCE, out inst); return new configuration_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "previous_configuration_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public configuration_definition next_configuration_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "next_configuration_definition", ifcengine.sdaiINSTANCE, out inst); return new configuration_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "next_configuration_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public interpolation_type? interpolation 
            { 
            get { var str = get_string("interpolation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.interpolation_type_); return EnumValue<interpolation_type>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<interpolation_type>.FromValue(value.Value, EnumNames.interpolation_type_); ifcengine.sdaiPutAttrBN(m_instance, "interpolation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "configuration_interpolation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configured_effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configured_effectivity_assignment : effectivity_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configured_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configured_effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public configured_effectivity_assignment() : base(0) { }

        public static implicit operator configured_effectivity_assignment(SdaiInstance instance) => new configured_effectivity_assignment(instance);

        /// <summary>
        /// Create new instace of configured_effectivity_assignment and returns object of this class to interact with
        /// </summary>
        public static new configured_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configured_effectivity_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_configured_effectivity_item items { get { return (new set_of_configured_effectivity_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<configured_effectivity_item> lst) { (new set_of_configured_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_configured_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "configured_effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configured_effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configured_effectivity_context_assignment : effectivity_context_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configured_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configured_effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public configured_effectivity_context_assignment() : base(0) { }

        public static implicit operator configured_effectivity_context_assignment(SdaiInstance instance) => new configured_effectivity_context_assignment(instance);

        /// <summary>
        /// Create new instace of configured_effectivity_context_assignment and returns object of this class to interact with
        /// </summary>
        public static new configured_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configured_effectivity_context_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_configured_effectivity_context_item items { get { return (new set_of_configured_effectivity_context_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<configured_effectivity_context_item> lst) { (new set_of_configured_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_configured_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "configured_effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of elementary_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class elementary_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of elementary_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public elementary_surface(SdaiInstance instance) : base(instance) { }
        public elementary_surface() : base(0) { }

        public static implicit operator elementary_surface(SdaiInstance instance) => new elementary_surface(instance);

        /// <summary>
        /// Create new instace of elementary_surface and returns object of this class to interact with
        /// </summary>
        public static new elementary_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "elementary_surface"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "elementary_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conical_surface(SdaiInstance instance) : base(instance) { }
        public conical_surface() : base(0) { }

        public static implicit operator conical_surface(SdaiInstance instance) => new conical_surface(instance);

        /// <summary>
        /// Create new instace of conical_surface and returns object of this class to interact with
        /// </summary>
        public static new conical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_angle
            {
            get { return get_double("semi_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "conical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_edge_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_edge_set : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_edge_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_edge_set(SdaiInstance instance) : base(instance) { }
        public connected_edge_set() : base(0) { }

        public static implicit operator connected_edge_set(SdaiInstance instance) => new connected_edge_set(instance);

        /// <summary>
        /// Create new instace of connected_edge_set and returns object of this class to interact with
        /// </summary>
        public static new connected_edge_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_edge_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_edge ces_edges { get { return (new set_of_edgeSerializer()).FromAttr(m_instance, "ces_edges"); } }
        public void put_ces_edges(IEnumerable<edge> lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }
        public void put_ces_edges_untyped(IEnumerable lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }

        protected override TextValue WrapperEntityName() { return "connected_edge_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_face_sub_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_face_sub_set : connected_face_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_face_sub_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_face_sub_set(SdaiInstance instance) : base(instance) { }
        public connected_face_sub_set() : base(0) { }

        public static implicit operator connected_face_sub_set(SdaiInstance instance) => new connected_face_sub_set(instance);

        /// <summary>
        /// Create new instace of connected_face_sub_set and returns object of this class to interact with
        /// </summary>
        public static new connected_face_sub_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_face_sub_set"); Debug.Assert(inst != 0); return inst; }

        public connected_face_set parent_face_set 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_face_set", ifcengine.sdaiINSTANCE, out inst); return new connected_face_set(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_face_set", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "connected_face_sub_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of constructive_geometry_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class constructive_geometry_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of constructive_geometry_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public constructive_geometry_representation(SdaiInstance instance) : base(instance) { }
        public constructive_geometry_representation() : base(0) { }

        public static implicit operator constructive_geometry_representation(SdaiInstance instance) => new constructive_geometry_representation(instance);

        /// <summary>
        /// Create new instace of constructive_geometry_representation and returns object of this class to interact with
        /// </summary>
        public static new constructive_geometry_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "constructive_geometry_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "constructive_geometry_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship(SdaiInstance instance) : base(instance) { }
        public representation_relationship() : base(0) { }

        public static implicit operator representation_relationship(SdaiInstance instance) => new representation_relationship(instance);

        /// <summary>
        /// Create new instace of representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public representation rep_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, i); }
            }
        public representation rep_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of constructive_geometry_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class constructive_geometry_representation_relationship : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of constructive_geometry_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public constructive_geometry_representation_relationship(SdaiInstance instance) : base(instance) { }
        public constructive_geometry_representation_relationship() : base(0) { }

        public static implicit operator constructive_geometry_representation_relationship(SdaiInstance instance) => new constructive_geometry_representation_relationship(instance);

        /// <summary>
        /// Create new instace of constructive_geometry_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new constructive_geometry_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "constructive_geometry_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "constructive_geometry_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contact_ratio_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contact_ratio_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contact_ratio_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contact_ratio_representation(SdaiInstance instance) : base(instance) { }
        public contact_ratio_representation() : base(0) { }

        public static implicit operator contact_ratio_representation(SdaiInstance instance) => new contact_ratio_representation(instance);

        /// <summary>
        /// Create new instace of contact_ratio_representation and returns object of this class to interact with
        /// </summary>
        public static new contact_ratio_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contact_ratio_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "contact_ratio_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of invisibility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class invisibility : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public invisibility(SdaiInstance instance) : base(instance) { }
        public invisibility() : base(0) { }

        public static implicit operator invisibility(SdaiInstance instance) => new invisibility(instance);

        /// <summary>
        /// Create new instace of invisibility and returns object of this class to interact with
        /// </summary>
        public static new invisibility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "invisibility"); Debug.Assert(inst != 0); return inst; }

        public set_of_invisible_item invisible_items { get { return (new set_of_invisible_itemSerializer()).FromAttr(m_instance, "invisible_items"); } }
        public void put_invisible_items(IEnumerable<invisible_item> lst) { (new set_of_invisible_itemSerializer()).ToSdaiAggr(lst, m_instance, "invisible_items"); }
        public void put_invisible_items_untyped(IEnumerable lst) { (new set_of_invisible_itemSerializer()).ToSdaiAggr(lst, m_instance, "invisible_items"); }

        protected override TextValue WrapperEntityName() { return "invisibility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_invisibility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_invisibility : invisibility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_invisibility(SdaiInstance instance) : base(instance) { }
        public context_dependent_invisibility() : base(0) { }

        public static implicit operator context_dependent_invisibility(SdaiInstance instance) => new context_dependent_invisibility(instance);

        /// <summary>
        /// Create new instace of context_dependent_invisibility and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_invisibility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_invisibility"); Debug.Assert(inst != 0); return inst; }


        public invisibility_context presentation_context
            {
            get { return new invisibility_context(m_instance, "presentation_context", 0); }
            }

        protected override TextValue WrapperEntityName() { return "context_dependent_invisibility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class over_riding_styled_item : styled_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public over_riding_styled_item() : base(0) { }

        public static implicit operator over_riding_styled_item(SdaiInstance instance) => new over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }

        public styled_item over_ridden_style 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "over_ridden_style", ifcengine.sdaiINSTANCE, out inst); return new styled_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "over_ridden_style", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_over_riding_styled_item : over_riding_styled_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public context_dependent_over_riding_styled_item() : base(0) { }

        public static implicit operator context_dependent_over_riding_styled_item(SdaiInstance instance) => new context_dependent_over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of context_dependent_over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }

        public list_of_style_context_select style_context { get { return (new list_of_style_context_selectSerializer()).FromAttr(m_instance, "style_context"); } }
        public void put_style_context(IEnumerable<style_context_select> lst) { (new list_of_style_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "style_context"); }
        public void put_style_context_untyped(IEnumerable lst) { (new list_of_style_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "style_context"); }

        protected override TextValue WrapperEntityName() { return "context_dependent_over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_shape_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_shape_representation(SdaiInstance instance) : base(instance) { }
        public context_dependent_shape_representation() : base(0) { }

        public static implicit operator context_dependent_shape_representation(SdaiInstance instance) => new context_dependent_shape_representation(instance);

        /// <summary>
        /// Create new instace of context_dependent_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_shape_representation"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_relationship representation_relation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation_relation", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_relationship(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "representation_relation", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_shape represented_product_relation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_product_relation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_shape(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "represented_product_relation", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "context_dependent_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_unit(SdaiInstance instance) : base(instance) { }
        public context_dependent_unit() : base(0) { }

        public static implicit operator context_dependent_unit(SdaiInstance instance) => new context_dependent_unit(instance);

        /// <summary>
        /// Create new instace of context_dependent_unit and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "context_dependent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract(SdaiInstance instance) : base(instance) { }
        public contract() : base(0) { }

        public static implicit operator contract(SdaiInstance instance) => new contract(instance);

        /// <summary>
        /// Create new instace of contract and returns object of this class to interact with
        /// </summary>
        public static new contract Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public contract_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new contract_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "contract"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_type(SdaiInstance instance) : base(instance) { }
        public contract_type() : base(0) { }

        public static implicit operator contract_type(SdaiInstance instance) => new contract_type(instance);

        /// <summary>
        /// Create new instace of contract_type and returns object of this class to interact with
        /// </summary>
        public static new contract_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "contract_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conversion_based_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public conversion_based_unit() : base(0) { }

        public static implicit operator conversion_based_unit(SdaiInstance instance) => new conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conversion_based_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit conversion_factor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coordinated_universal_time_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coordinated_universal_time_offset : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coordinated_universal_time_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coordinated_universal_time_offset(SdaiInstance instance) : base(instance) { }
        public coordinated_universal_time_offset() : base(0) { }

        public static implicit operator coordinated_universal_time_offset(SdaiInstance instance) => new coordinated_universal_time_offset(instance);

        /// <summary>
        /// Create new instace of coordinated_universal_time_offset and returns object of this class to interact with
        /// </summary>
        public static new coordinated_universal_time_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coordinated_universal_time_offset"); Debug.Assert(inst != 0); return inst; }

        public IntValue? hour_offset
            {
            get { return get_IntValue("hour_offset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hour_offset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? minute_offset
            {
            get { return get_IntValue("minute_offset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minute_offset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ahead_or_behind? sense 
            { 
            get { var str = get_string("sense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.ahead_or_behind_); return EnumValue<ahead_or_behind>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<ahead_or_behind>.FromValue(value.Value, EnumNames.ahead_or_behind_); ifcengine.sdaiPutAttrBN(m_instance, "sense", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? actual_minute_offset { get { return get_IntValue("actual_minute_offset", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "coordinated_universal_time_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cos_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cos_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cos_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cos_function(SdaiInstance instance) : base(instance) { }
        public cos_function() : base(0) { }

        public static implicit operator cos_function(SdaiInstance instance) => new cos_function(instance);

        /// <summary>
        /// Create new instace of cos_function and returns object of this class to interact with
        /// </summary>
        public static new cos_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cos_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "cos_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of csg_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class csg_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of csg_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public csg_shape_representation(SdaiInstance instance) : base(instance) { }
        public csg_shape_representation() : base(0) { }

        public static implicit operator csg_shape_representation(SdaiInstance instance) => new csg_shape_representation(instance);

        /// <summary>
        /// Create new instace of csg_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new csg_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "csg_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "csg_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of csg_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class csg_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of csg_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public csg_solid(SdaiInstance instance) : base(instance) { }
        public csg_solid() : base(0) { }

        public static implicit operator csg_solid(SdaiInstance instance) => new csg_solid(instance);

        /// <summary>
        /// Create new instace of csg_solid and returns object of this class to interact with
        /// </summary>
        public static new csg_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "csg_solid"); Debug.Assert(inst != 0); return inst; }


        public csg_select tree_root_expression
            {
            get { return new csg_select(m_instance, "tree_root_expression", 0); }
            }

        protected override TextValue WrapperEntityName() { return "csg_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_bounded_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_bounded_surface(SdaiInstance instance) : base(instance) { }
        public curve_bounded_surface() : base(0) { }

        public static implicit operator curve_bounded_surface(SdaiInstance instance) => new curve_bounded_surface(instance);

        /// <summary>
        /// Create new instace of curve_bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new curve_bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_bounded_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_boundary_curve boundaries { get { return (new set_of_boundary_curveSerializer()).FromAttr(m_instance, "boundaries"); } }
        public void put_boundaries(IEnumerable<boundary_curve> lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public void put_boundaries_untyped(IEnumerable lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public bool? implicit_outer
            {
            get { return get_bool("implicit_outer", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "implicit_outer", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "curve_bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_dimension : dimension_curve_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_dimension(SdaiInstance instance) : base(instance) { }
        public curve_dimension() : base(0) { }

        public static implicit operator curve_dimension(SdaiInstance instance) => new curve_dimension(instance);

        /// <summary>
        /// Create new instace of curve_dimension and returns object of this class to interact with
        /// </summary>
        public static new curve_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "curve_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_replica : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_replica(SdaiInstance instance) : base(instance) { }
        public curve_replica() : base(0) { }

        public static implicit operator curve_replica(SdaiInstance instance) => new curve_replica(instance);

        /// <summary>
        /// Create new instace of curve_replica and returns object of this class to interact with
        /// </summary>
        public static new curve_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_replica"); Debug.Assert(inst != 0); return inst; }

        public curve parent_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "curve_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style(SdaiInstance instance) : base(instance) { }
        public curve_style() : base(0) { }

        public static implicit operator curve_style(SdaiInstance instance) => new curve_style(instance);

        /// <summary>
        /// Create new instace of curve_style and returns object of this class to interact with
        /// </summary>
        public static new curve_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        public curve_font_or_scaled_curve_font_select curve_font
            {
            get { return new curve_font_or_scaled_curve_font_select(m_instance, "curve_font", 0); }
            }

        public size_select curve_width
            {
            get { return new size_select(m_instance, "curve_width", 0); }
            }
        public colour curve_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "curve_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_font : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_font(SdaiInstance instance) : base(instance) { }
        public curve_style_font() : base(0) { }

        public static implicit operator curve_style_font(SdaiInstance instance) => new curve_style_font(instance);

        /// <summary>
        /// Create new instace of curve_style_font and returns object of this class to interact with
        /// </summary>
        public static new curve_style_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_font"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public list_of_curve_style_font_pattern pattern_list { get { return (new list_of_curve_style_font_patternSerializer()).FromAttr(m_instance, "pattern_list"); } }
        public void put_pattern_list(IEnumerable<curve_style_font_pattern> lst) { (new list_of_curve_style_font_patternSerializer()).ToSdaiAggr(lst, m_instance, "pattern_list"); }
        public void put_pattern_list_untyped(IEnumerable lst) { (new list_of_curve_style_font_patternSerializer()).ToSdaiAggr(lst, m_instance, "pattern_list"); }

        protected override TextValue WrapperEntityName() { return "curve_style_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_font_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_font_pattern : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_font_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_font_pattern(SdaiInstance instance) : base(instance) { }
        public curve_style_font_pattern() : base(0) { }

        public static implicit operator curve_style_font_pattern(SdaiInstance instance) => new curve_style_font_pattern(instance);

        /// <summary>
        /// Create new instace of curve_style_font_pattern and returns object of this class to interact with
        /// </summary>
        public static new curve_style_font_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_font_pattern"); Debug.Assert(inst != 0); return inst; }

        public double? visible_segment_length
            {
            get { return get_double("visible_segment_length", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "visible_segment_length", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? invisible_segment_length
            {
            get { return get_double("invisible_segment_length", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "invisible_segment_length", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "curve_style_font_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_rendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_rendering : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_rendering(SdaiInstance instance) : base(instance) { }
        public curve_style_rendering() : base(0) { }

        public static implicit operator curve_style_rendering(SdaiInstance instance) => new curve_style_rendering(instance);

        /// <summary>
        /// Create new instace of curve_style_rendering and returns object of this class to interact with
        /// </summary>
        public static new curve_style_rendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_rendering"); Debug.Assert(inst != 0); return inst; }

        public shading_curve_method? rendering_method 
            { 
            get { var str = get_string("rendering_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shading_curve_method_); return EnumValue<shading_curve_method>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<shading_curve_method>.FromValue(value.Value, EnumNames.shading_curve_method_); ifcengine.sdaiPutAttrBN(m_instance, "rendering_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public surface_rendering_properties rendering_properties 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rendering_properties", ifcengine.sdaiINSTANCE, out inst); return new surface_rendering_properties(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rendering_properties", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "curve_style_rendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_swept_solid_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_swept_solid_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_swept_solid_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_swept_solid_shape_representation(SdaiInstance instance) : base(instance) { }
        public curve_swept_solid_shape_representation() : base(0) { }

        public static implicit operator curve_swept_solid_shape_representation(SdaiInstance instance) => new curve_swept_solid_shape_representation(instance);

        /// <summary>
        /// Create new instace of curve_swept_solid_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new curve_swept_solid_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_swept_solid_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "curve_swept_solid_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_defined_transformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_defined_transformation(SdaiInstance instance) : base(instance) { }
        public item_defined_transformation() : base(0) { }

        public static implicit operator item_defined_transformation(SdaiInstance instance) => new item_defined_transformation(instance);

        /// <summary>
        /// Create new instace of item_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new item_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public representation_item transform_item_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item transform_item_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_pair : item_defined_transformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_pair(SdaiInstance instance) : base(instance) { }
        public kinematic_pair() : base(0) { }

        public static implicit operator kinematic_pair(SdaiInstance instance) => new kinematic_pair(instance);

        /// <summary>
        /// Create new instace of kinematic_pair and returns object of this class to interact with
        /// </summary>
        public static new kinematic_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_pair"); Debug.Assert(inst != 0); return inst; }

        public kinematic_joint joint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "joint", ifcengine.sdaiINSTANCE, out inst); return new kinematic_joint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "joint", ifcengine.sdaiINSTANCE, i); }
            }

        public rigid_placement_get pair_placement_in_first_link_context
            {
            get { return new rigid_placement_get(m_instance, "pair_placement_in_first_link_context", 0); }
            }

        public rigid_placement_get pair_placement_in_second_link_context
            {
            get { return new rigid_placement_get(m_instance, "pair_placement_in_second_link_context", 0); }
            }

        protected override TextValue WrapperEntityName() { return "kinematic_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_pair(SdaiInstance instance) : base(instance) { }
        public cylindrical_pair() : base(0) { }

        public static implicit operator cylindrical_pair(SdaiInstance instance) => new cylindrical_pair(instance);

        /// <summary>
        /// Create new instace of cylindrical_pair and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "cylindrical_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_pair_range : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_pair_range(SdaiInstance instance) : base(instance) { }
        public simple_pair_range() : base(0) { }

        public static implicit operator simple_pair_range(SdaiInstance instance) => new simple_pair_range(instance);

        /// <summary>
        /// Create new instace of simple_pair_range and returns object of this class to interact with
        /// </summary>
        public static new simple_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "simple_pair_range"); Debug.Assert(inst != 0); return inst; }

        public kinematic_pair applies_to_pair 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applies_to_pair", ifcengine.sdaiINSTANCE, out inst); return new kinematic_pair(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applies_to_pair", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "simple_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_pair_range(SdaiInstance instance) : base(instance) { }
        public cylindrical_pair_range() : base(0) { }

        public static implicit operator cylindrical_pair_range(SdaiInstance instance) => new cylindrical_pair_range(instance);

        /// <summary>
        /// Create new instace of cylindrical_pair_range and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_pair_range"); Debug.Assert(inst != 0); return inst; }


        public translational_range_measure lower_limit_actual_translation
            {
            get { return new translational_range_measure(m_instance, "lower_limit_actual_translation", 0); }
            }

        public translational_range_measure upper_limit_actual_translation
            {
            get { return new translational_range_measure(m_instance, "upper_limit_actual_translation", 0); }
            }

        public rotational_range_measure lower_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pair_value : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pair_value(SdaiInstance instance) : base(instance) { }
        public pair_value() : base(0) { }

        public static implicit operator pair_value(SdaiInstance instance) => new pair_value(instance);

        /// <summary>
        /// Create new instace of pair_value and returns object of this class to interact with
        /// </summary>
        public static new pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pair_value"); Debug.Assert(inst != 0); return inst; }

        public kinematic_pair applies_to_pair 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applies_to_pair", ifcengine.sdaiINSTANCE, out inst); return new kinematic_pair(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applies_to_pair", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_pair_value(SdaiInstance instance) : base(instance) { }
        public cylindrical_pair_value() : base(0) { }

        public static implicit operator cylindrical_pair_value(SdaiInstance instance) => new cylindrical_pair_value(instance);

        /// <summary>
        /// Create new instace of cylindrical_pair_value and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_translation
            {
            get { return get_double("actual_translation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_translation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_surface(SdaiInstance instance) : base(instance) { }
        public cylindrical_surface() : base(0) { }

        public static implicit operator cylindrical_surface(SdaiInstance instance) => new cylindrical_surface(instance);

        /// <summary>
        /// Create new instace of cylindrical_surface and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "cylindrical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindricity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindricity_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindricity_tolerance(SdaiInstance instance) : base(instance) { }
        public cylindricity_tolerance() : base(0) { }

        public static implicit operator cylindricity_tolerance(SdaiInstance instance) => new cylindricity_tolerance(instance);

        /// <summary>
        /// Create new instace of cylindricity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new cylindricity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindricity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "cylindricity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of data_environment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class data_environment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of data_environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public data_environment(SdaiInstance instance) : base(instance) { }
        public data_environment() : base(0) { }

        public static implicit operator data_environment(SdaiInstance instance) => new data_environment(instance);

        /// <summary>
        /// Create new instace of data_environment and returns object of this class to interact with
        /// </summary>
        public static new data_environment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "data_environment"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_property_definition_representation elements { get { return (new set_of_property_definition_representationSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<property_definition_representation> lst) { (new set_of_property_definition_representationSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_property_definition_representationSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue WrapperEntityName() { return "data_environment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_and_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_and_time : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_and_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_and_time(SdaiInstance instance) : base(instance) { }
        public date_and_time() : base(0) { }

        public static implicit operator date_and_time(SdaiInstance instance) => new date_and_time(instance);

        /// <summary>
        /// Create new instace of date_and_time and returns object of this class to interact with
        /// </summary>
        public static new date_and_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_and_time"); Debug.Assert(inst != 0); return inst; }

        public date date_component 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, out inst); return new date(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, i); }
            }
        public local_time time_component 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, out inst); return new local_time(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "date_and_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_role(SdaiInstance instance) : base(instance) { }
        public date_role() : base(0) { }

        public static implicit operator date_role(SdaiInstance instance) => new date_role(instance);

        /// <summary>
        /// Create new instace of date_role and returns object of this class to interact with
        /// </summary>
        public static new date_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "date_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_time_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_time_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_time_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_time_role(SdaiInstance instance) : base(instance) { }
        public date_time_role() : base(0) { }

        public static implicit operator date_time_role(SdaiInstance instance) => new date_time_role(instance);

        /// <summary>
        /// Create new instace of date_time_role and returns object of this class to interact with
        /// </summary>
        public static new date_time_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_time_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "date_time_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dated_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dated_effectivity : effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dated_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dated_effectivity(SdaiInstance instance) : base(instance) { }
        public dated_effectivity() : base(0) { }

        public static implicit operator dated_effectivity(SdaiInstance instance) => new dated_effectivity(instance);

        /// <summary>
        /// Create new instace of dated_effectivity and returns object of this class to interact with
        /// </summary>
        public static new dated_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dated_effectivity"); Debug.Assert(inst != 0); return inst; }


        public date_time_or_event_occurrence effectivity_end_date
            {
            get { return new date_time_or_event_occurrence(m_instance, "effectivity_end_date", 0); }
            }

        public date_time_or_event_occurrence effectivity_start_date
            {
            get { return new date_time_or_event_occurrence(m_instance, "effectivity_start_date", 0); }
            }

        protected override TextValue WrapperEntityName() { return "dated_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum(SdaiInstance instance) : base(instance) { }
        public datum() : base(0) { }

        public static implicit operator datum(SdaiInstance instance) => new datum(instance);

        /// <summary>
        /// Create new instace of datum and returns object of this class to interact with
        /// </summary>
        public static new datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum"); Debug.Assert(inst != 0); return inst; }

        public TextValue identification
            {
            get { return get_string("identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
            }
        public set_of_shape_aspect_relationship established_by_relationships { get { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "established_by_relationships"); } }

        protected override TextValue WrapperEntityName() { return "datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_feature : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_feature(SdaiInstance instance) : base(instance) { }
        public datum_feature() : base(0) { }

        public static implicit operator datum_feature(SdaiInstance instance) => new datum_feature(instance);

        /// <summary>
        /// Create new instace of datum_feature and returns object of this class to interact with
        /// </summary>
        public static new datum_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_feature"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect_relationship feature_basis_relationship { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature_basis_relationship", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect_relationship(inst); } }

        protected override TextValue WrapperEntityName() { return "datum_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_feature_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_feature_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_feature_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_feature_callout(SdaiInstance instance) : base(instance) { }
        public datum_feature_callout() : base(0) { }

        public static implicit operator datum_feature_callout(SdaiInstance instance) => new datum_feature_callout(instance);

        /// <summary>
        /// Create new instace of datum_feature_callout and returns object of this class to interact with
        /// </summary>
        public static new datum_feature_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_feature_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "datum_feature_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_reference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_reference(SdaiInstance instance) : base(instance) { }
        public datum_reference() : base(0) { }

        public static implicit operator datum_reference(SdaiInstance instance) => new datum_reference(instance);

        /// <summary>
        /// Create new instace of datum_reference and returns object of this class to interact with
        /// </summary>
        public static new datum_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_reference"); Debug.Assert(inst != 0); return inst; }

        public IntValue? precedence
            {
            get { return get_IntValue("precedence", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "precedence", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public datum referenced_datum 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "referenced_datum", ifcengine.sdaiINSTANCE, out inst); return new datum(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "referenced_datum", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "datum_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_target
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_target : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_target(SdaiInstance instance) : base(instance) { }
        public datum_target() : base(0) { }

        public static implicit operator datum_target(SdaiInstance instance) => new datum_target(instance);

        /// <summary>
        /// Create new instace of datum_target and returns object of this class to interact with
        /// </summary>
        public static new datum_target Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_target"); Debug.Assert(inst != 0); return inst; }

        public TextValue target_id
            {
            get { return get_string("target_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "target_id", ifcengine.sdaiSTRING, value); }
            }
        public shape_aspect_relationship target_basis_relationship { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "target_basis_relationship", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect_relationship(inst); } }

        protected override TextValue WrapperEntityName() { return "datum_target"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_target_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_target_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_target_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_target_callout(SdaiInstance instance) : base(instance) { }
        public datum_target_callout() : base(0) { }

        public static implicit operator datum_target_callout(SdaiInstance instance) => new datum_target_callout(instance);

        /// <summary>
        /// Create new instace of datum_target_callout and returns object of this class to interact with
        /// </summary>
        public static new datum_target_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_target_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "datum_target_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of default_tolerance_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class default_tolerance_table : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of default_tolerance_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public default_tolerance_table(SdaiInstance instance) : base(instance) { }
        public default_tolerance_table() : base(0) { }

        public static implicit operator default_tolerance_table(SdaiInstance instance) => new default_tolerance_table(instance);

        /// <summary>
        /// Create new instace of default_tolerance_table and returns object of this class to interact with
        /// </summary>
        public static new default_tolerance_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "default_tolerance_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "default_tolerance_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of default_tolerance_table_cell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class default_tolerance_table_cell : compound_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of default_tolerance_table_cell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public default_tolerance_table_cell(SdaiInstance instance) : base(instance) { }
        public default_tolerance_table_cell() : base(0) { }

        public static implicit operator default_tolerance_table_cell(SdaiInstance instance) => new default_tolerance_table_cell(instance);

        /// <summary>
        /// Create new instace of default_tolerance_table_cell and returns object of this class to interact with
        /// </summary>
        public static new default_tolerance_table_cell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "default_tolerance_table_cell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "default_tolerance_table_cell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of defined_character_glyph
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class defined_character_glyph : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of defined_character_glyph
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public defined_character_glyph(SdaiInstance instance) : base(instance) { }
        public defined_character_glyph() : base(0) { }

        public static implicit operator defined_character_glyph(SdaiInstance instance) => new defined_character_glyph(instance);

        /// <summary>
        /// Create new instace of defined_character_glyph and returns object of this class to interact with
        /// </summary>
        public static new defined_character_glyph Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "defined_character_glyph"); Debug.Assert(inst != 0); return inst; }


        public defined_glyph_select definition
            {
            get { return new defined_glyph_select(m_instance, "definition", 0); }
            }

        public axis2_placement placement
            {
            get { return new axis2_placement(m_instance, "placement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "defined_character_glyph"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class defined_symbol : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public defined_symbol(SdaiInstance instance) : base(instance) { }
        public defined_symbol() : base(0) { }

        public static implicit operator defined_symbol(SdaiInstance instance) => new defined_symbol(instance);

        /// <summary>
        /// Create new instace of defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "defined_symbol"); Debug.Assert(inst != 0); return inst; }


        public defined_symbol_select definition
            {
            get { return new defined_symbol_select(m_instance, "definition", 0); }
            }
        public symbol_target target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "target", ifcengine.sdaiINSTANCE, out inst); return new symbol_target(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of definitional_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class definitional_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of definitional_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public definitional_representation(SdaiInstance instance) : base(instance) { }
        public definitional_representation() : base(0) { }

        public static implicit operator definitional_representation(SdaiInstance instance) => new definitional_representation(instance);

        /// <summary>
        /// Create new instace of definitional_representation and returns object of this class to interact with
        /// </summary>
        public static new definitional_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "definitional_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "definitional_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_pcurve : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public degenerate_pcurve() : base(0) { }

        public static implicit operator degenerate_pcurve(SdaiInstance instance) => new degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public definitional_representation reference_to_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class toroidal_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public toroidal_surface(SdaiInstance instance) : base(instance) { }
        public toroidal_surface() : base(0) { }

        public static implicit operator toroidal_surface(SdaiInstance instance) => new toroidal_surface(instance);

        /// <summary>
        /// Create new instace of toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public double? major_radius
            {
            get { return get_double("major_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? minor_radius
            {
            get { return get_double("minor_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_toroidal_surface : toroidal_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_toroidal_surface(SdaiInstance instance) : base(instance) { }
        public degenerate_toroidal_surface() : base(0) { }

        public static implicit operator degenerate_toroidal_surface(SdaiInstance instance) => new degenerate_toroidal_surface(instance);

        /// <summary>
        /// Create new instace of degenerate_toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new degenerate_toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? select_outer
            {
            get { return get_bool("select_outer", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "select_outer", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "degenerate_toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit_element : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit_element(SdaiInstance instance) : base(instance) { }
        public derived_unit_element() : base(0) { }

        public static implicit operator derived_unit_element(SdaiInstance instance) => new derived_unit_element(instance);

        /// <summary>
        /// Create new instace of derived_unit_element and returns object of this class to interact with
        /// </summary>
        public static new derived_unit_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit_element"); Debug.Assert(inst != 0); return inst; }

        public named_unit unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, out inst); return new named_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, i); }
            }
        public double? exponent
            {
            get { return get_double("exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "derived_unit_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit_variable : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit_variable(SdaiInstance instance) : base(instance) { }
        public derived_unit_variable() : base(0) { }

        public static implicit operator derived_unit_variable(SdaiInstance instance) => new derived_unit_variable(instance);

        /// <summary>
        /// Create new instace of derived_unit_variable and returns object of this class to interact with
        /// </summary>
        public static new derived_unit_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit_variable"); Debug.Assert(inst != 0); return inst; }

        public environment associated_variable_environment { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "associated_variable_environment", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "derived_unit_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of description_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class description_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of description_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public description_attribute(SdaiInstance instance) : base(instance) { }
        public description_attribute() : base(0) { }

        public static implicit operator description_attribute(SdaiInstance instance) => new description_attribute(instance);

        /// <summary>
        /// Create new instace of description_attribute and returns object of this class to interact with
        /// </summary>
        public static new description_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "description_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public description_attribute_select described_item
            {
            get { return new description_attribute_select(m_instance, "described_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "description_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of descriptive_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class descriptive_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of descriptive_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public descriptive_representation_item(SdaiInstance instance) : base(instance) { }
        public descriptive_representation_item() : base(0) { }

        public static implicit operator descriptive_representation_item(SdaiInstance instance) => new descriptive_representation_item(instance);

        /// <summary>
        /// Create new instace of descriptive_representation_item and returns object of this class to interact with
        /// </summary>
        public static new descriptive_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "descriptive_representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "descriptive_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of diameter_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class diameter_dimension : dimension_curve_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of diameter_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public diameter_dimension(SdaiInstance instance) : base(instance) { }
        public diameter_dimension() : base(0) { }

        public static implicit operator diameter_dimension(SdaiInstance instance) => new diameter_dimension(instance);

        /// <summary>
        /// Create new instace of diameter_dimension and returns object of this class to interact with
        /// </summary>
        public static new diameter_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "diameter_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "diameter_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout(SdaiInstance instance) : base(instance) { }
        public dimension_callout() : base(0) { }

        public static implicit operator dimension_callout(SdaiInstance instance) => new dimension_callout(instance);

        /// <summary>
        /// Create new instace of dimension_callout and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_callout_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_callout_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_callout_relationship(SdaiInstance instance) : base(instance) { }
        public draughting_callout_relationship() : base(0) { }

        public static implicit operator draughting_callout_relationship(SdaiInstance instance) => new draughting_callout_relationship(instance);

        /// <summary>
        /// Create new instace of draughting_callout_relationship and returns object of this class to interact with
        /// </summary>
        public static new draughting_callout_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_callout_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public draughting_callout relating_draughting_callout 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_draughting_callout", ifcengine.sdaiINSTANCE, out inst); return new draughting_callout(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_draughting_callout", ifcengine.sdaiINSTANCE, i); }
            }
        public draughting_callout related_draughting_callout 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_draughting_callout", ifcengine.sdaiINSTANCE, out inst); return new draughting_callout(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_draughting_callout", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "draughting_callout_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout_component_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout_component_relationship : draughting_callout_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout_component_relationship(SdaiInstance instance) : base(instance) { }
        public dimension_callout_component_relationship() : base(0) { }

        public static implicit operator dimension_callout_component_relationship(SdaiInstance instance) => new dimension_callout_component_relationship(instance);

        /// <summary>
        /// Create new instace of dimension_callout_component_relationship and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout_component_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout_component_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_callout_component_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout_relationship : draughting_callout_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout_relationship(SdaiInstance instance) : base(instance) { }
        public dimension_callout_relationship() : base(0) { }

        public static implicit operator dimension_callout_relationship(SdaiInstance instance) => new dimension_callout_relationship(instance);

        /// <summary>
        /// Create new instace of dimension_callout_relationship and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_callout_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve : annotation_curve_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve(SdaiInstance instance) : base(instance) { }
        public dimension_curve() : base(0) { }

        public static implicit operator dimension_curve(SdaiInstance instance) => new dimension_curve(instance);

        /// <summary>
        /// Create new instace of dimension_curve and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class terminator_symbol : annotation_symbol_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public terminator_symbol(SdaiInstance instance) : base(instance) { }
        public terminator_symbol() : base(0) { }

        public static implicit operator terminator_symbol(SdaiInstance instance) => new terminator_symbol(instance);

        /// <summary>
        /// Create new instace of terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "terminator_symbol"); Debug.Assert(inst != 0); return inst; }

        public annotation_curve_occurrence annotated_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "annotated_curve", ifcengine.sdaiINSTANCE, out inst); return new annotation_curve_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "annotated_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve_terminator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve_terminator : terminator_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve_terminator(SdaiInstance instance) : base(instance) { }
        public dimension_curve_terminator() : base(0) { }

        public static implicit operator dimension_curve_terminator(SdaiInstance instance) => new dimension_curve_terminator(instance);

        /// <summary>
        /// Create new instace of dimension_curve_terminator and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve_terminator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve_terminator"); Debug.Assert(inst != 0); return inst; }

        public dimension_extent_usage? role 
            { 
            get { var str = get_string("role", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.dimension_extent_usage_); return EnumValue<dimension_extent_usage>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<dimension_extent_usage>.FromValue(value.Value, EnumNames.dimension_extent_usage_); ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "dimension_curve_terminator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_pair : draughting_callout_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_pair(SdaiInstance instance) : base(instance) { }
        public dimension_pair() : base(0) { }

        public static implicit operator dimension_pair(SdaiInstance instance) => new dimension_pair(instance);

        /// <summary>
        /// Create new instace of dimension_pair and returns object of this class to interact with
        /// </summary>
        public static new dimension_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "dimension_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_related_tolerance_zone_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_related_tolerance_zone_element : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_related_tolerance_zone_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_related_tolerance_zone_element(SdaiInstance instance) : base(instance) { }
        public dimension_related_tolerance_zone_element() : base(0) { }

        public static implicit operator dimension_related_tolerance_zone_element(SdaiInstance instance) => new dimension_related_tolerance_zone_element(instance);

        /// <summary>
        /// Create new instace of dimension_related_tolerance_zone_element and returns object of this class to interact with
        /// </summary>
        public static new dimension_related_tolerance_zone_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_related_tolerance_zone_element"); Debug.Assert(inst != 0); return inst; }

        public dimensional_location related_dimension 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_dimension", ifcengine.sdaiINSTANCE, out inst); return new dimensional_location(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_dimension", ifcengine.sdaiINSTANCE, i); }
            }
        public tolerance_zone_definition related_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_element", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_element", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dimension_related_tolerance_zone_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal(SdaiInstance instance) : base(instance) { }
        public text_literal() : base(0) { }

        public static implicit operator text_literal(SdaiInstance instance) => new text_literal(instance);

        /// <summary>
        /// Create new instace of text_literal and returns object of this class to interact with
        /// </summary>
        public static new text_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal"); Debug.Assert(inst != 0); return inst; }

        public TextValue literal
            {
            get { return get_string("literal", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "literal", ifcengine.sdaiSTRING, value); }
            }

        public axis2_placement placement
            {
            get { return new axis2_placement(m_instance, "placement", 0); }
            }
        public TextValue alignment
            {
            get { return get_string("alignment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "alignment", ifcengine.sdaiSTRING, value); }
            }
        public text_path? path 
            { 
            get { var str = get_string("path", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.text_path_); return EnumValue<text_path>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<text_path>.FromValue(value.Value, EnumNames.text_path_); ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public font_select font
            {
            get { return new font_select(m_instance, "font", 0); }
            }

        protected override TextValue WrapperEntityName() { return "text_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_text_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_text_associativity : text_literal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_text_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_text_associativity(SdaiInstance instance) : base(instance) { }
        public dimension_text_associativity() : base(0) { }

        public static implicit operator dimension_text_associativity(SdaiInstance instance) => new dimension_text_associativity(instance);

        /// <summary>
        /// Create new instace of dimension_text_associativity and returns object of this class to interact with
        /// </summary>
        public static new dimension_text_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_text_associativity"); Debug.Assert(inst != 0); return inst; }

        public representation_map mapping_source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item mapping_target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dimension_text_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_characteristic_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_characteristic_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_characteristic_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_characteristic_representation(SdaiInstance instance) : base(instance) { }
        public dimensional_characteristic_representation() : base(0) { }

        public static implicit operator dimensional_characteristic_representation(SdaiInstance instance) => new dimensional_characteristic_representation(instance);

        /// <summary>
        /// Create new instace of dimensional_characteristic_representation and returns object of this class to interact with
        /// </summary>
        public static new dimensional_characteristic_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_characteristic_representation"); Debug.Assert(inst != 0); return inst; }


        public dimensional_characteristic dimension
            {
            get { return new dimensional_characteristic(m_instance, "dimension", 0); }
            }
        public shape_dimension_representation representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, out inst); return new shape_dimension_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_characteristic_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_exponents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_exponents : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_exponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_exponents(SdaiInstance instance) : base(instance) { }
        public dimensional_exponents() : base(0) { }

        public static implicit operator dimensional_exponents(SdaiInstance instance) => new dimensional_exponents(instance);

        /// <summary>
        /// Create new instace of dimensional_exponents and returns object of this class to interact with
        /// </summary>
        public static new dimensional_exponents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_exponents"); Debug.Assert(inst != 0); return inst; }

        public double? length_exponent
            {
            get { return get_double("length_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "length_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? mass_exponent
            {
            get { return get_double("mass_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "mass_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? time_exponent
            {
            get { return get_double("time_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "time_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? electric_current_exponent
            {
            get { return get_double("electric_current_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "electric_current_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? thermodynamic_temperature_exponent
            {
            get { return get_double("thermodynamic_temperature_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "thermodynamic_temperature_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? amount_of_substance_exponent
            {
            get { return get_double("amount_of_substance_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "amount_of_substance_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? luminous_intensity_exponent
            {
            get { return get_double("luminous_intensity_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "luminous_intensity_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_exponents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_location_with_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_location_with_path : dimensional_location
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_location_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_location_with_path(SdaiInstance instance) : base(instance) { }
        public dimensional_location_with_path() : base(0) { }

        public static implicit operator dimensional_location_with_path(SdaiInstance instance) => new dimensional_location_with_path(instance);

        /// <summary>
        /// Create new instace of dimensional_location_with_path and returns object of this class to interact with
        /// </summary>
        public static new dimensional_location_with_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_location_with_path"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect path 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_location_with_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_size_with_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_size_with_path : dimensional_size
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_size_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_size_with_path(SdaiInstance instance) : base(instance) { }
        public dimensional_size_with_path() : base(0) { }

        public static implicit operator dimensional_size_with_path(SdaiInstance instance) => new dimensional_size_with_path(instance);

        /// <summary>
        /// Create new instace of dimensional_size_with_path and returns object of this class to interact with
        /// </summary>
        public static new dimensional_size_with_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_size_with_path"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect path 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "dimensional_size_with_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of executed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class executed_action : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of executed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public executed_action(SdaiInstance instance) : base(instance) { }
        public executed_action() : base(0) { }

        public static implicit operator executed_action(SdaiInstance instance) => new executed_action(instance);

        /// <summary>
        /// Create new instace of executed_action and returns object of this class to interact with
        /// </summary>
        public static new executed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "executed_action"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "executed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_action : executed_action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_action(SdaiInstance instance) : base(instance) { }
        public directed_action() : base(0) { }

        public static implicit operator directed_action(SdaiInstance instance) => new directed_action(instance);

        /// <summary>
        /// Create new instace of directed_action and returns object of this class to interact with
        /// </summary>
        public static new directed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_action"); Debug.Assert(inst != 0); return inst; }

        public action_directive directive 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, out inst); return new action_directive(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "directed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_angle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_angle : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_angle(SdaiInstance instance) : base(instance) { }
        public directed_angle() : base(0) { }

        public static implicit operator directed_angle(SdaiInstance instance) => new directed_angle(instance);

        /// <summary>
        /// Create new instace of directed_angle and returns object of this class to interact with
        /// </summary>
        public static new directed_angle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_angle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "directed_angle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_dimensional_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_dimensional_location : dimensional_location
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_dimensional_location(SdaiInstance instance) : base(instance) { }
        public directed_dimensional_location() : base(0) { }

        public static implicit operator directed_dimensional_location(SdaiInstance instance) => new directed_dimensional_location(instance);

        /// <summary>
        /// Create new instace of directed_dimensional_location and returns object of this class to interact with
        /// </summary>
        public static new directed_dimensional_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_dimensional_location"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "directed_dimensional_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class direction : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public direction(SdaiInstance instance) : base(instance) { }
        public direction() : base(0) { }

        public static implicit operator direction(SdaiInstance instance) => new direction(instance);

        /// <summary>
        /// Create new instace of direction and returns object of this class to interact with
        /// </summary>
        public static new direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "direction"); Debug.Assert(inst != 0); return inst; }

        public list_of_double direction_ratios { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "direction_ratios"); } }
        public void put_direction_ratios(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }
        public void put_direction_ratios_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }

        protected override TextValue WrapperEntityName() { return "direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of direction_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class direction_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of direction_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public direction_shape_representation(SdaiInstance instance) : base(instance) { }
        public direction_shape_representation() : base(0) { }

        public static implicit operator direction_shape_representation(SdaiInstance instance) => new direction_shape_representation(instance);

        /// <summary>
        /// Create new instace of direction_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new direction_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "direction_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "direction_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of div_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class div_expression : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of div_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public div_expression(SdaiInstance instance) : base(instance) { }
        public div_expression() : base(0) { }

        public static implicit operator div_expression(SdaiInstance instance) => new div_expression(instance);

        /// <summary>
        /// Create new instace of div_expression and returns object of this class to interact with
        /// </summary>
        public static new div_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "div_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "div_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document(SdaiInstance instance) : base(instance) { }
        public document() : base(0) { }

        public static implicit operator document(SdaiInstance instance) => new document(instance);

        /// <summary>
        /// Create new instace of document and returns object of this class to interact with
        /// </summary>
        public static new document Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public document_type kind 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new document_type(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_document_representation_type representation_types { get { return (new set_of_document_representation_typeSerializer()).FromAttr(m_instance, "representation_types"); } }

        protected override TextValue WrapperEntityName() { return "document"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_file
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_file : document
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_file(SdaiInstance instance) : base(instance) { }
        public document_file() : base(0) { }

        public static implicit operator document_file(SdaiInstance instance) => new document_file(instance);

        /// <summary>
        /// Create new instace of document_file and returns object of this class to interact with
        /// </summary>
        public static new document_file Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_file"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "document_file"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_product_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_product_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_product_association(SdaiInstance instance) : base(instance) { }
        public document_product_association() : base(0) { }

        public static implicit operator document_product_association(SdaiInstance instance) => new document_product_association(instance);

        /// <summary>
        /// Create new instace of document_product_association and returns object of this class to interact with
        /// </summary>
        public static new document_product_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_product_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public document relating_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, i); }
            }

        public product_or_formation_or_definition related_product
            {
            get { return new product_or_formation_or_definition(m_instance, "related_product", 0); }
            }

        protected override TextValue WrapperEntityName() { return "document_product_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_product_equivalence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_product_equivalence : document_product_association
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_product_equivalence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_product_equivalence(SdaiInstance instance) : base(instance) { }
        public document_product_equivalence() : base(0) { }

        public static implicit operator document_product_equivalence(SdaiInstance instance) => new document_product_equivalence(instance);

        /// <summary>
        /// Create new instace of document_product_equivalence and returns object of this class to interact with
        /// </summary>
        public static new document_product_equivalence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_product_equivalence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "document_product_equivalence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_relationship(SdaiInstance instance) : base(instance) { }
        public document_relationship() : base(0) { }

        public static implicit operator document_relationship(SdaiInstance instance) => new document_relationship(instance);

        /// <summary>
        /// Create new instace of document_relationship and returns object of this class to interact with
        /// </summary>
        public static new document_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public document relating_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, i); }
            }
        public document related_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "document_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_representation_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_representation_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_representation_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_representation_type(SdaiInstance instance) : base(instance) { }
        public document_representation_type() : base(0) { }

        public static implicit operator document_representation_type(SdaiInstance instance) => new document_representation_type(instance);

        /// <summary>
        /// Create new instace of document_representation_type and returns object of this class to interact with
        /// </summary>
        public static new document_representation_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_representation_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public document represented_document 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "document_representation_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_type(SdaiInstance instance) : base(instance) { }
        public document_type() : base(0) { }

        public static implicit operator document_type(SdaiInstance instance) => new document_type(instance);

        /// <summary>
        /// Create new instace of document_type and returns object of this class to interact with
        /// </summary>
        public static new document_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue product_data_type
            {
            get { return get_string("product_data_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "product_data_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_constraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_constraint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_constraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_constraint(SdaiInstance instance) : base(instance) { }
        public document_usage_constraint() : base(0) { }

        public static implicit operator document_usage_constraint(SdaiInstance instance) => new document_usage_constraint(instance);

        /// <summary>
        /// Create new instace of document_usage_constraint and returns object of this class to interact with
        /// </summary>
        public static new document_usage_constraint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage_constraint"); Debug.Assert(inst != 0); return inst; }

        public document source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new document(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue subject_element
            {
            get { return get_string("subject_element", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "subject_element", ifcengine.sdaiSTRING, value); }
            }
        public TextValue subject_element_value
            {
            get { return get_string("subject_element_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "subject_element_value", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_usage_constraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_role(SdaiInstance instance) : base(instance) { }
        public document_usage_role() : base(0) { }

        public static implicit operator document_usage_role(SdaiInstance instance) => new document_usage_role(instance);

        /// <summary>
        /// Create new instace of document_usage_role and returns object of this class to interact with
        /// </summary>
        public static new document_usage_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "document_usage_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_annotation_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_annotation_occurrence : annotation_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_annotation_occurrence(SdaiInstance instance) : base(instance) { }
        public draughting_annotation_occurrence() : base(0) { }

        public static implicit operator draughting_annotation_occurrence(SdaiInstance instance) => new draughting_annotation_occurrence(instance);

        /// <summary>
        /// Create new instace of draughting_annotation_occurrence and returns object of this class to interact with
        /// </summary>
        public static new draughting_annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_annotation_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_annotation_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_elements : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_elements(SdaiInstance instance) : base(instance) { }
        public draughting_elements() : base(0) { }

        public static implicit operator draughting_elements(SdaiInstance instance) => new draughting_elements(instance);

        /// <summary>
        /// Create new instace of draughting_elements and returns object of this class to interact with
        /// </summary>
        public static new draughting_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_elements"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_model : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_model(SdaiInstance instance) : base(instance) { }
        public draughting_model() : base(0) { }

        public static implicit operator draughting_model(SdaiInstance instance) => new draughting_model(instance);

        /// <summary>
        /// Create new instace of draughting_model and returns object of this class to interact with
        /// </summary>
        public static new draughting_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_model"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_identified_representation_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_identified_representation_usage : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_identified_representation_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_identified_representation_usage(SdaiInstance instance) : base(instance) { }
        public item_identified_representation_usage() : base(0) { }

        public static implicit operator item_identified_representation_usage(SdaiInstance instance) => new item_identified_representation_usage(instance);

        /// <summary>
        /// Create new instace of item_identified_representation_usage and returns object of this class to interact with
        /// </summary>
        public static new item_identified_representation_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_identified_representation_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public represented_definition definition
            {
            get { return new represented_definition(m_instance, "definition", 0); }
            }
        public representation used_representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
            }
        public representation_item identified_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "identified_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "identified_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "item_identified_representation_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_model_item_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_model_item_association : item_identified_representation_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_model_item_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_model_item_association(SdaiInstance instance) : base(instance) { }
        public draughting_model_item_association() : base(0) { }

        public static implicit operator draughting_model_item_association(SdaiInstance instance) => new draughting_model_item_association(instance);

        /// <summary>
        /// Create new instace of draughting_model_item_association and returns object of this class to interact with
        /// </summary>
        public static new draughting_model_item_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_model_item_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_model_item_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_item(SdaiInstance instance) : base(instance) { }
        public pre_defined_item() : base(0) { }

        public static implicit operator pre_defined_item(SdaiInstance instance) => new pre_defined_item(instance);

        /// <summary>
        /// Create new instace of pre_defined_item and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "pre_defined_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_colour : pre_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_colour(SdaiInstance instance) : base(instance) { }
        public pre_defined_colour() : base(0) { }

        public static implicit operator pre_defined_colour(SdaiInstance instance) => new pre_defined_colour(instance);

        /// <summary>
        /// Create new instace of pre_defined_colour and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_colour : pre_defined_colour
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_colour(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_colour() : base(0) { }

        public static implicit operator draughting_pre_defined_colour(SdaiInstance instance) => new draughting_pre_defined_colour(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_colour and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_pre_defined_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_curve_font : pre_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public pre_defined_curve_font() : base(0) { }

        public static implicit operator pre_defined_curve_font(SdaiInstance instance) => new pre_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of pre_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_curve_font : pre_defined_curve_font
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_curve_font() : base(0) { }

        public static implicit operator draughting_pre_defined_curve_font(SdaiInstance instance) => new draughting_pre_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_pre_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_text_font : pre_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_text_font(SdaiInstance instance) : base(instance) { }
        public pre_defined_text_font() : base(0) { }

        public static implicit operator pre_defined_text_font(SdaiInstance instance) => new pre_defined_text_font(instance);

        /// <summary>
        /// Create new instace of pre_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_text_font : pre_defined_text_font
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_text_font(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_text_font() : base(0) { }

        public static implicit operator draughting_pre_defined_text_font(SdaiInstance instance) => new draughting_pre_defined_text_font(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_pre_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_specification_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_specification_reference : document_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_specification_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_specification_reference(SdaiInstance instance) : base(instance) { }
        public draughting_specification_reference() : base(0) { }

        public static implicit operator draughting_specification_reference(SdaiInstance instance) => new draughting_specification_reference(instance);

        /// <summary>
        /// Create new instace of draughting_specification_reference and returns object of this class to interact with
        /// </summary>
        public static new draughting_specification_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_specification_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_specified_item specified_items { get { return (new set_of_specified_itemSerializer()).FromAttr(m_instance, "specified_items"); } }
        public void put_specified_items(IEnumerable<specified_item> lst) { (new set_of_specified_itemSerializer()).ToSdaiAggr(lst, m_instance, "specified_items"); }
        public void put_specified_items_untyped(IEnumerable lst) { (new set_of_specified_itemSerializer()).ToSdaiAggr(lst, m_instance, "specified_items"); }

        protected override TextValue WrapperEntityName() { return "draughting_specification_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_subfigure_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_subfigure_representation : symbol_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_subfigure_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_subfigure_representation(SdaiInstance instance) : base(instance) { }
        public draughting_subfigure_representation() : base(0) { }

        public static implicit operator draughting_subfigure_representation(SdaiInstance instance) => new draughting_subfigure_representation(instance);

        /// <summary>
        /// Create new instace of draughting_subfigure_representation and returns object of this class to interact with
        /// </summary>
        public static new draughting_subfigure_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_subfigure_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_subfigure_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_symbol_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_symbol_representation : symbol_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_symbol_representation(SdaiInstance instance) : base(instance) { }
        public draughting_symbol_representation() : base(0) { }

        public static implicit operator draughting_symbol_representation(SdaiInstance instance) => new draughting_symbol_representation(instance);

        /// <summary>
        /// Create new instace of draughting_symbol_representation and returns object of this class to interact with
        /// </summary>
        public static new draughting_symbol_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_symbol_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_symbol_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_delineation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_delineation : text_literal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_delineation(SdaiInstance instance) : base(instance) { }
        public text_literal_with_delineation() : base(0) { }

        public static implicit operator text_literal_with_delineation(SdaiInstance instance) => new text_literal_with_delineation(instance);

        /// <summary>
        /// Create new instace of text_literal_with_delineation and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_delineation"); Debug.Assert(inst != 0); return inst; }

        public TextValue delineation
            {
            get { return get_string("delineation", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "delineation", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "text_literal_with_delineation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_text_literal_with_delineation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_text_literal_with_delineation : text_literal_with_delineation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_text_literal_with_delineation(SdaiInstance instance) : base(instance) { }
        public draughting_text_literal_with_delineation() : base(0) { }

        public static implicit operator draughting_text_literal_with_delineation(SdaiInstance instance) => new draughting_text_literal_with_delineation(instance);

        /// <summary>
        /// Create new instace of draughting_text_literal_with_delineation and returns object of this class to interact with
        /// </summary>
        public static new draughting_text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_text_literal_with_delineation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "draughting_text_literal_with_delineation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_title
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_title : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_title
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_title(SdaiInstance instance) : base(instance) { }
        public draughting_title() : base(0) { }

        public static implicit operator draughting_title(SdaiInstance instance) => new draughting_title(instance);

        /// <summary>
        /// Create new instace of draughting_title and returns object of this class to interact with
        /// </summary>
        public static new draughting_title Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_title"); Debug.Assert(inst != 0); return inst; }

        public set_of_draughting_titled_item items { get { return (new set_of_draughting_titled_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<draughting_titled_item> lst) { (new set_of_draughting_titled_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_draughting_titled_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public TextValue language
            {
            get { return get_string("language", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "language", ifcengine.sdaiSTRING, value); }
            }
        public TextValue contents
            {
            get { return get_string("contents", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "contents", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "draughting_title"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_definition(SdaiInstance instance) : base(instance) { }
        public drawing_definition() : base(0) { }

        public static implicit operator drawing_definition(SdaiInstance instance) => new drawing_definition(instance);

        /// <summary>
        /// Create new instace of drawing_definition and returns object of this class to interact with
        /// </summary>
        public static new drawing_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue drawing_number
            {
            get { return get_string("drawing_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "drawing_number", ifcengine.sdaiSTRING, value); }
            }
        public TextValue drawing_type
            {
            get { return get_string("drawing_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "drawing_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "drawing_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_set : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_set(SdaiInstance instance) : base(instance) { }
        public presentation_set() : base(0) { }

        public static implicit operator presentation_set(SdaiInstance instance) => new presentation_set(instance);

        /// <summary>
        /// Create new instace of presentation_set and returns object of this class to interact with
        /// </summary>
        public static new presentation_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_area_in_set areas { get { return (new set_of_area_in_setSerializer()).FromAttr(m_instance, "areas"); } }

        protected override TextValue WrapperEntityName() { return "presentation_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_revision
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_revision : presentation_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_revision(SdaiInstance instance) : base(instance) { }
        public drawing_revision() : base(0) { }

        public static implicit operator drawing_revision(SdaiInstance instance) => new drawing_revision(instance);

        /// <summary>
        /// Create new instace of drawing_revision and returns object of this class to interact with
        /// </summary>
        public static new drawing_revision Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_revision"); Debug.Assert(inst != 0); return inst; }

        public TextValue revision_identifier
            {
            get { return get_string("revision_identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "revision_identifier", ifcengine.sdaiSTRING, value); }
            }
        public drawing_definition drawing_identifier 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "drawing_identifier", ifcengine.sdaiINSTANCE, out inst); return new drawing_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "drawing_identifier", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue intended_scale
            {
            get { return get_string("intended_scale", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "intended_scale", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "drawing_revision"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_revision_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_revision_sequence : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_revision_sequence(SdaiInstance instance) : base(instance) { }
        public drawing_revision_sequence() : base(0) { }

        public static implicit operator drawing_revision_sequence(SdaiInstance instance) => new drawing_revision_sequence(instance);

        /// <summary>
        /// Create new instace of drawing_revision_sequence and returns object of this class to interact with
        /// </summary>
        public static new drawing_revision_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_revision_sequence"); Debug.Assert(inst != 0); return inst; }

        public drawing_revision predecessor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "predecessor", ifcengine.sdaiINSTANCE, out inst); return new drawing_revision(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "predecessor", ifcengine.sdaiINSTANCE, i); }
            }
        public drawing_revision successor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "successor", ifcengine.sdaiINSTANCE, out inst); return new drawing_revision(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "successor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "drawing_revision_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_layout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_layout : draughting_symbol_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_layout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_layout(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_layout() : base(0) { }

        public static implicit operator drawing_sheet_layout(SdaiInstance instance) => new drawing_sheet_layout(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_layout and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_layout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_layout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "drawing_sheet_layout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_representation(SdaiInstance instance) : base(instance) { }
        public presentation_representation() : base(0) { }

        public static implicit operator presentation_representation(SdaiInstance instance) => new presentation_representation(instance);

        /// <summary>
        /// Create new instace of presentation_representation and returns object of this class to interact with
        /// </summary>
        public static new presentation_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "presentation_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_area : presentation_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_area(SdaiInstance instance) : base(instance) { }
        public presentation_area() : base(0) { }

        public static implicit operator presentation_area(SdaiInstance instance) => new presentation_area(instance);

        /// <summary>
        /// Create new instace of presentation_area and returns object of this class to interact with
        /// </summary>
        public static new presentation_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "presentation_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_revision
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_revision : presentation_area
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_revision(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_revision() : base(0) { }

        public static implicit operator drawing_sheet_revision(SdaiInstance instance) => new drawing_sheet_revision(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_revision and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_revision Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_revision"); Debug.Assert(inst != 0); return inst; }

        public TextValue revision_identifier
            {
            get { return get_string("revision_identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "revision_identifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "drawing_sheet_revision"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_revision_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_revision_usage : area_in_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_revision_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_revision_usage(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_revision_usage() : base(0) { }

        public static implicit operator drawing_sheet_revision_usage(SdaiInstance instance) => new drawing_sheet_revision_usage(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_revision_usage and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_revision_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_revision_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue sheet_number
            {
            get { return get_string("sheet_number", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "sheet_number", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "drawing_sheet_revision_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge(SdaiInstance instance) : base(instance) { }
        public edge() : base(0) { }

        public static implicit operator edge(SdaiInstance instance) => new edge(instance);

        /// <summary>
        /// Create new instace of edge and returns object of this class to interact with
        /// </summary>
        public static new edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge"); Debug.Assert(inst != 0); return inst; }

        public vertex edge_start 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, i); }
            }
        public vertex edge_end 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_based_wireframe_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_based_wireframe_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_based_wireframe_model(SdaiInstance instance) : base(instance) { }
        public edge_based_wireframe_model() : base(0) { }

        public static implicit operator edge_based_wireframe_model(SdaiInstance instance) => new edge_based_wireframe_model(instance);

        /// <summary>
        /// Create new instace of edge_based_wireframe_model and returns object of this class to interact with
        /// </summary>
        public static new edge_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_based_wireframe_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_edge_set ebwm_boundary { get { return (new set_of_connected_edge_setSerializer()).FromAttr(m_instance, "ebwm_boundary"); } }
        public void put_ebwm_boundary(IEnumerable<connected_edge_set> lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }
        public void put_ebwm_boundary_untyped(IEnumerable lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }

        protected override TextValue WrapperEntityName() { return "edge_based_wireframe_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_based_wireframe_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_based_wireframe_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_based_wireframe_shape_representation(SdaiInstance instance) : base(instance) { }
        public edge_based_wireframe_shape_representation() : base(0) { }

        public static implicit operator edge_based_wireframe_shape_representation(SdaiInstance instance) => new edge_based_wireframe_shape_representation(instance);

        /// <summary>
        /// Create new instace of edge_based_wireframe_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new edge_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_based_wireframe_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "edge_based_wireframe_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_curve : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_curve(SdaiInstance instance) : base(instance) { }
        public edge_curve() : base(0) { }

        public static implicit operator edge_curve(SdaiInstance instance) => new edge_curve(instance);

        /// <summary>
        /// Create new instace of edge_curve and returns object of this class to interact with
        /// </summary>
        public static new edge_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_curve"); Debug.Assert(inst != 0); return inst; }

        public curve edge_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? same_sense
            {
            get { return get_bool("same_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "edge_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loop : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loop(SdaiInstance instance) : base(instance) { }
        public loop() : base(0) { }

        public static implicit operator loop(SdaiInstance instance) => new loop(instance);

        /// <summary>
        /// Create new instace of loop and returns object of this class to interact with
        /// </summary>
        public static new loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loop"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_loop(SdaiInstance instance) : base(instance) { }
        public edge_loop() : base(0) { }

        public static implicit operator edge_loop(SdaiInstance instance) => new edge_loop(instance);

        /// <summary>
        /// Create new instace of edge_loop and returns object of this class to interact with
        /// </summary>
        public static new edge_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge edge_list { get { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public IntValue? ne { get { return get_IntValue("ne", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "edge_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_round
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_round : transition_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_round
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_round(SdaiInstance instance) : base(instance) { }
        public edge_round() : base(0) { }

        public static implicit operator edge_round(SdaiInstance instance) => new edge_round(instance);

        /// <summary>
        /// Create new instace of edge_round and returns object of this class to interact with
        /// </summary>
        public static new edge_round Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_round"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "edge_round"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_context_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_context_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_context_role(SdaiInstance instance) : base(instance) { }
        public effectivity_context_role() : base(0) { }

        public static implicit operator effectivity_context_role(SdaiInstance instance) => new effectivity_context_role(instance);

        /// <summary>
        /// Create new instace of effectivity_context_role and returns object of this class to interact with
        /// </summary>
        public static new effectivity_context_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity_context_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "effectivity_context_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_relationship(SdaiInstance instance) : base(instance) { }
        public effectivity_relationship() : base(0) { }

        public static implicit operator effectivity_relationship(SdaiInstance instance) => new effectivity_relationship(instance);

        /// <summary>
        /// Create new instace of effectivity_relationship and returns object of this class to interact with
        /// </summary>
        public static new effectivity_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public effectivity related_effectivity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_effectivity", ifcengine.sdaiINSTANCE, i); }
            }
        public effectivity relating_effectivity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_effectivity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "effectivity_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_current_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_current_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_current_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_current_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public electric_current_measure_with_unit() : base(0) { }

        public static implicit operator electric_current_measure_with_unit(SdaiInstance instance) => new electric_current_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of electric_current_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_current_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_current_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "electric_current_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_current_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_current_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_current_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_current_unit(SdaiInstance instance) : base(instance) { }
        public electric_current_unit() : base(0) { }

        public static implicit operator electric_current_unit(SdaiInstance instance) => new electric_current_unit(instance);

        /// <summary>
        /// Create new instace of electric_current_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_current_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_current_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "electric_current_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of element_delivery
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class element_delivery : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of element_delivery
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public element_delivery(SdaiInstance instance) : base(instance) { }
        public element_delivery() : base(0) { }

        public static implicit operator element_delivery(SdaiInstance instance) => new element_delivery(instance);

        /// <summary>
        /// Create new instace of element_delivery and returns object of this class to interact with
        /// </summary>
        public static new element_delivery Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "element_delivery"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "element_delivery"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ellipse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ellipse : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ellipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ellipse(SdaiInstance instance) : base(instance) { }
        public ellipse() : base(0) { }

        public static implicit operator ellipse(SdaiInstance instance) => new ellipse(instance);

        /// <summary>
        /// Create new instace of ellipse and returns object of this class to interact with
        /// </summary>
        public static new ellipse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ellipse"); Debug.Assert(inst != 0); return inst; }

        public double? semi_axis_1
            {
            get { return get_double("semi_axis_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_axis_2
            {
            get { return get_double("semi_axis_2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "ellipse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of environment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class environment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public environment(SdaiInstance instance) : base(instance) { }
        public environment() : base(0) { }

        public static implicit operator environment(SdaiInstance instance) => new environment(instance);

        /// <summary>
        /// Create new instace of environment and returns object of this class to interact with
        /// </summary>
        public static new environment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "environment"); Debug.Assert(inst != 0); return inst; }

        public generic_variable syntactic_representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "syntactic_representation", ifcengine.sdaiINSTANCE, out inst); return new generic_variable(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "syntactic_representation", ifcengine.sdaiINSTANCE, i); }
            }
        public variable_semantics semantics 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "semantics", ifcengine.sdaiINSTANCE, out inst); return new variable_semantics(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "semantics", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "environment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of equals_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class equals_expression : binary_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of equals_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public equals_expression(SdaiInstance instance) : base(instance) { }
        public equals_expression() : base(0) { }

        public static implicit operator equals_expression(SdaiInstance instance) => new equals_expression(instance);

        /// <summary>
        /// Create new instace of equals_expression and returns object of this class to interact with
        /// </summary>
        public static new equals_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "equals_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "equals_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of evaluated_degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class evaluated_degenerate_pcurve : degenerate_pcurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of evaluated_degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public evaluated_degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public evaluated_degenerate_pcurve() : base(0) { }

        public static implicit operator evaluated_degenerate_pcurve(SdaiInstance instance) => new evaluated_degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of evaluated_degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new evaluated_degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "evaluated_degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point equivalent_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "evaluated_degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence(SdaiInstance instance) : base(instance) { }
        public event_occurrence() : base(0) { }

        public static implicit operator event_occurrence(SdaiInstance instance) => new event_occurrence(instance);

        /// <summary>
        /// Create new instace of event_occurrence and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "event_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_context_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_context_assignment(SdaiInstance instance) : base(instance) { }
        public event_occurrence_context_assignment() : base(0) { }

        public static implicit operator event_occurrence_context_assignment(SdaiInstance instance) => new event_occurrence_context_assignment(instance);

        public event_occurrence_assignment assigned_event_occurrence_assignment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_event_occurrence_assignment", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence_assignment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "assigned_event_occurrence_assignment", ifcengine.sdaiINSTANCE, i); }
            }
        public event_occurrence_context_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence_context_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "event_occurrence_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_context_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_context_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_context_role(SdaiInstance instance) : base(instance) { }
        public event_occurrence_context_role() : base(0) { }

        public static implicit operator event_occurrence_context_role(SdaiInstance instance) => new event_occurrence_context_role(instance);

        /// <summary>
        /// Create new instace of event_occurrence_context_role and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence_context_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence_context_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "event_occurrence_context_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_role(SdaiInstance instance) : base(instance) { }
        public event_occurrence_role() : base(0) { }

        public static implicit operator event_occurrence_role(SdaiInstance instance) => new event_occurrence_role(instance);

        /// <summary>
        /// Create new instace of event_occurrence_role and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "event_occurrence_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_category : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_category(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_category() : base(0) { }

        public static implicit operator product_concept_feature_category(SdaiInstance instance) => new product_concept_feature_category(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_category and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_category"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_concept_feature_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of exclusive_product_concept_feature_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class exclusive_product_concept_feature_category : product_concept_feature_category
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of exclusive_product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public exclusive_product_concept_feature_category(SdaiInstance instance) : base(instance) { }
        public exclusive_product_concept_feature_category() : base(0) { }

        public static implicit operator exclusive_product_concept_feature_category(SdaiInstance instance) => new exclusive_product_concept_feature_category(instance);

        /// <summary>
        /// Create new instace of exclusive_product_concept_feature_category and returns object of this class to interact with
        /// </summary>
        public static new exclusive_product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "exclusive_product_concept_feature_category"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "exclusive_product_concept_feature_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of exp_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class exp_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of exp_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public exp_function(SdaiInstance instance) : base(instance) { }
        public exp_function() : base(0) { }

        public static implicit operator exp_function(SdaiInstance instance) => new exp_function(instance);

        /// <summary>
        /// Create new instace of exp_function and returns object of this class to interact with
        /// </summary>
        public static new exp_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "exp_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "exp_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of expression_conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class expression_conversion_based_unit : context_dependent_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of expression_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public expression_conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public expression_conversion_based_unit() : base(0) { }

        public static implicit operator expression_conversion_based_unit(SdaiInstance instance) => new expression_conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of expression_conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new expression_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "expression_conversion_based_unit"); Debug.Assert(inst != 0); return inst; }

        public environment associated_variable_environment { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "associated_variable_environment", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "expression_conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extension : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extension(SdaiInstance instance) : base(instance) { }
        public extension() : base(0) { }

        public static implicit operator extension(SdaiInstance instance) => new extension(instance);

        /// <summary>
        /// Create new instace of extension and returns object of this class to interact with
        /// </summary>
        public static new extension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "extension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_source : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_source(SdaiInstance instance) : base(instance) { }
        public external_source() : base(0) { }

        public static implicit operator external_source(SdaiInstance instance) => new external_source(instance);

        /// <summary>
        /// Create new instace of external_source and returns object of this class to interact with
        /// </summary>
        public static new external_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "external_source"); Debug.Assert(inst != 0); return inst; }


        public source_item source_id
            {
            get { return new source_item(m_instance, "source_id", 0); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "external_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_item : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_item(SdaiInstance instance) : base(instance) { }
        public externally_defined_item() : base(0) { }

        public static implicit operator externally_defined_item(SdaiInstance instance) => new externally_defined_item(instance);

        /// <summary>
        /// Create new instace of externally_defined_item and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_item"); Debug.Assert(inst != 0); return inst; }


        public source_item item_id
            {
            get { return new source_item(m_instance, "item_id", 0); }
            }
        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_character_glyph
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_character_glyph : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_character_glyph
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_character_glyph(SdaiInstance instance) : base(instance) { }
        public externally_defined_character_glyph() : base(0) { }

        public static implicit operator externally_defined_character_glyph(SdaiInstance instance) => new externally_defined_character_glyph(instance);

        /// <summary>
        /// Create new instace of externally_defined_character_glyph and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_character_glyph Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_character_glyph"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "externally_defined_character_glyph"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_class : class_
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_class(SdaiInstance instance) : base(instance) { }
        public externally_defined_class() : base(0) { }

        public static implicit operator externally_defined_class(SdaiInstance instance) => new externally_defined_class(instance);

        /// <summary>
        /// Create new instace of externally_defined_class and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_class"); Debug.Assert(inst != 0); return inst; }


        public source_item item_id
            {
            get { return new source_item(m_instance, "item_id", 0); }
            }
        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_curve_font : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public externally_defined_curve_font() : base(0) { }

        public static implicit operator externally_defined_curve_font(SdaiInstance instance) => new externally_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of externally_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "externally_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_dimension_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_dimension_definition : dimensional_size
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_dimension_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_dimension_definition(SdaiInstance instance) : base(instance) { }
        public externally_defined_dimension_definition() : base(0) { }

        public static implicit operator externally_defined_dimension_definition(SdaiInstance instance) => new externally_defined_dimension_definition(instance);

        /// <summary>
        /// Create new instace of externally_defined_dimension_definition and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_dimension_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_dimension_definition"); Debug.Assert(inst != 0); return inst; }


        public source_item item_id
            {
            get { return new source_item(m_instance, "item_id", 0); }
            }
        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_dimension_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_feature_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_feature_definition : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_feature_definition(SdaiInstance instance) : base(instance) { }
        public externally_defined_feature_definition() : base(0) { }

        public static implicit operator externally_defined_feature_definition(SdaiInstance instance) => new externally_defined_feature_definition(instance);

        /// <summary>
        /// Create new instace of externally_defined_feature_definition and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_feature_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_feature_definition"); Debug.Assert(inst != 0); return inst; }


        public source_item item_id
            {
            get { return new source_item(m_instance, "item_id", 0); }
            }
        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_feature_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property(SdaiInstance instance) : base(instance) { }
        public general_property() : base(0) { }

        public static implicit operator general_property(SdaiInstance instance) => new general_property(instance);

        /// <summary>
        /// Create new instace of general_property and returns object of this class to interact with
        /// </summary>
        public static new general_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "general_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_general_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_general_property : general_property
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_general_property(SdaiInstance instance) : base(instance) { }
        public externally_defined_general_property() : base(0) { }

        public static implicit operator externally_defined_general_property(SdaiInstance instance) => new externally_defined_general_property(instance);

        /// <summary>
        /// Create new instace of externally_defined_general_property and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_general_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_general_property"); Debug.Assert(inst != 0); return inst; }


        public source_item item_id
            {
            get { return new source_item(m_instance, "item_id", 0); }
            }
        public external_source source 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_general_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_hatch_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_hatch_style : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_hatch_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_hatch_style(SdaiInstance instance) : base(instance) { }
        public externally_defined_hatch_style() : base(0) { }

        public static implicit operator externally_defined_hatch_style(SdaiInstance instance) => new externally_defined_hatch_style(instance);

        /// <summary>
        /// Create new instace of externally_defined_hatch_style and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_hatch_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_hatch_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "externally_defined_hatch_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_item_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_item_relationship(SdaiInstance instance) : base(instance) { }
        public externally_defined_item_relationship() : base(0) { }

        public static implicit operator externally_defined_item_relationship(SdaiInstance instance) => new externally_defined_item_relationship(instance);

        /// <summary>
        /// Create new instace of externally_defined_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public externally_defined_item relating_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, out inst); return new externally_defined_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, i); }
            }
        public externally_defined_item related_item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, out inst); return new externally_defined_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "externally_defined_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_style : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_style(SdaiInstance instance) : base(instance) { }
        public externally_defined_style() : base(0) { }

        public static implicit operator externally_defined_style(SdaiInstance instance) => new externally_defined_style(instance);

        /// <summary>
        /// Create new instace of externally_defined_style and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_style"); Debug.Assert(inst != 0); return inst; }

        public set_of_founded_item_select users { get { return (new set_of_founded_item_selectSerializer()).FromAttr(m_instance, "users"); } }

        protected override TextValue WrapperEntityName() { return "externally_defined_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_symbol : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_symbol(SdaiInstance instance) : base(instance) { }
        public externally_defined_symbol() : base(0) { }

        public static implicit operator externally_defined_symbol(SdaiInstance instance) => new externally_defined_symbol(instance);

        /// <summary>
        /// Create new instace of externally_defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "externally_defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_text_font : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_text_font(SdaiInstance instance) : base(instance) { }
        public externally_defined_text_font() : base(0) { }

        public static implicit operator externally_defined_text_font(SdaiInstance instance) => new externally_defined_text_font(instance);

        /// <summary>
        /// Create new instace of externally_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "externally_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_tile_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_tile_style : externally_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_tile_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_tile_style(SdaiInstance instance) : base(instance) { }
        public externally_defined_tile_style() : base(0) { }

        public static implicit operator externally_defined_tile_style(SdaiInstance instance) => new externally_defined_tile_style(instance);

        /// <summary>
        /// Create new instace of externally_defined_tile_style and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_tile_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_tile_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "externally_defined_tile_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_area_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_area_solid(SdaiInstance instance) : base(instance) { }
        public swept_area_solid() : base(0) { }

        public static implicit operator swept_area_solid(SdaiInstance instance) => new swept_area_solid(instance);

        /// <summary>
        /// Create new instace of swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve_bounded_surface swept_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, out inst); return new curve_bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_area_solid(SdaiInstance instance) : base(instance) { }
        public extruded_area_solid() : base(0) { }

        public static implicit operator extruded_area_solid(SdaiInstance instance) => new extruded_area_solid(instance);

        /// <summary>
        /// Create new instace of extruded_area_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_area_solid"); Debug.Assert(inst != 0); return inst; }

        public direction extruded_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public double? depth
            {
            get { return get_double("depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "extruded_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_face_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_face_solid(SdaiInstance instance) : base(instance) { }
        public swept_face_solid() : base(0) { }

        public static implicit operator swept_face_solid(SdaiInstance instance) => new swept_face_solid(instance);

        /// <summary>
        /// Create new instace of swept_face_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_face_solid"); Debug.Assert(inst != 0); return inst; }

        public face_surface swept_face 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, out inst); return new face_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid : swept_face_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid() : base(0) { }

        public static implicit operator extruded_face_solid(SdaiInstance instance) => new extruded_face_solid(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid"); Debug.Assert(inst != 0); return inst; }

        public direction extruded_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
            }
        public double? depth
            {
            get { return get_double("depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "extruded_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_based_surface_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_based_surface_model(SdaiInstance instance) : base(instance) { }
        public face_based_surface_model() : base(0) { }

        public static implicit operator face_based_surface_model(SdaiInstance instance) => new face_based_surface_model(instance);

        /// <summary>
        /// Create new instace of face_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new face_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_face_set fbsm_faces { get { return (new set_of_connected_face_setSerializer()).FromAttr(m_instance, "fbsm_faces"); } }
        public void put_fbsm_faces(IEnumerable<connected_face_set> lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }
        public void put_fbsm_faces_untyped(IEnumerable lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }

        protected override TextValue WrapperEntityName() { return "face_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_bound : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_bound(SdaiInstance instance) : base(instance) { }
        public face_bound() : base(0) { }

        public static implicit operator face_bound(SdaiInstance instance) => new face_bound(instance);

        /// <summary>
        /// Create new instace of face_bound and returns object of this class to interact with
        /// </summary>
        public static new face_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_bound"); Debug.Assert(inst != 0); return inst; }

        public loop bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, out inst); return new loop(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "face_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_outer_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_outer_bound : face_bound
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_outer_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_outer_bound(SdaiInstance instance) : base(instance) { }
        public face_outer_bound() : base(0) { }

        public static implicit operator face_outer_bound(SdaiInstance instance) => new face_outer_bound(instance);

        /// <summary>
        /// Create new instace of face_outer_bound and returns object of this class to interact with
        /// </summary>
        public static new face_outer_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_outer_bound"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "face_outer_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_shape_representation(SdaiInstance instance) : base(instance) { }
        public face_shape_representation() : base(0) { }

        public static implicit operator face_shape_representation(SdaiInstance instance) => new face_shape_representation(instance);

        /// <summary>
        /// Create new instace of face_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new face_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "face_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_brep : manifold_solid_brep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_brep(SdaiInstance instance) : base(instance) { }
        public faceted_brep() : base(0) { }

        public static implicit operator faceted_brep(SdaiInstance instance) => new faceted_brep(instance);

        /// <summary>
        /// Create new instace of faceted_brep and returns object of this class to interact with
        /// </summary>
        public static new faceted_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_brep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "faceted_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_brep_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_brep_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_brep_shape_representation(SdaiInstance instance) : base(instance) { }
        public faceted_brep_shape_representation() : base(0) { }

        public static implicit operator faceted_brep_shape_representation(SdaiInstance instance) => new faceted_brep_shape_representation(instance);

        /// <summary>
        /// Create new instace of faceted_brep_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new faceted_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_brep_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "faceted_brep_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_component_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_component_definition : characterized_object
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_component_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_component_definition(SdaiInstance instance) : base(instance) { }
        public feature_component_definition() : base(0) { }

        public static implicit operator feature_component_definition(SdaiInstance instance) => new feature_component_definition(instance);

        /// <summary>
        /// Create new instace of feature_component_definition and returns object of this class to interact with
        /// </summary>
        public static new feature_component_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_component_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_component_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_component_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_component_relationship : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_component_relationship(SdaiInstance instance) : base(instance) { }
        public feature_component_relationship() : base(0) { }

        public static implicit operator feature_component_relationship(SdaiInstance instance) => new feature_component_relationship(instance);

        /// <summary>
        /// Create new instace of feature_component_relationship and returns object of this class to interact with
        /// </summary>
        public static new feature_component_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_component_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_component_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_in_panel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_in_panel : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_in_panel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_in_panel(SdaiInstance instance) : base(instance) { }
        public feature_in_panel() : base(0) { }

        public static implicit operator feature_in_panel(SdaiInstance instance) => new feature_in_panel(instance);

        /// <summary>
        /// Create new instace of feature_in_panel and returns object of this class to interact with
        /// </summary>
        public static new feature_in_panel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_in_panel"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_in_panel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of feature_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class feature_pattern : replicate_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of feature_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public feature_pattern(SdaiInstance instance) : base(instance) { }
        public feature_pattern() : base(0) { }

        public static implicit operator feature_pattern(SdaiInstance instance) => new feature_pattern(instance);

        /// <summary>
        /// Create new instace of feature_pattern and returns object of this class to interact with
        /// </summary>
        public static new feature_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "feature_pattern"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "feature_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition(SdaiInstance instance) : base(instance) { }
        public property_definition() : base(0) { }

        public static implicit operator property_definition(SdaiInstance instance) => new property_definition(instance);

        /// <summary>
        /// Create new instace of property_definition and returns object of this class to interact with
        /// </summary>
        public static new property_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public characterized_definition definition
            {
            get { return new characterized_definition(m_instance, "definition", 0); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "property_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_shape : property_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_shape(SdaiInstance instance) : base(instance) { }
        public product_definition_shape() : base(0) { }

        public static implicit operator product_definition_shape(SdaiInstance instance) => new product_definition_shape(instance);

        /// <summary>
        /// Create new instace of product_definition_shape and returns object of this class to interact with
        /// </summary>
        public static new product_definition_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_shape"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_definition_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of featured_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class featured_shape : product_definition_shape
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of featured_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public featured_shape(SdaiInstance instance) : base(instance) { }
        public featured_shape() : base(0) { }

        public static implicit operator featured_shape(SdaiInstance instance) => new featured_shape(instance);

        /// <summary>
        /// Create new instace of featured_shape and returns object of this class to interact with
        /// </summary>
        public static new featured_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "featured_shape"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "featured_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style(SdaiInstance instance) : base(instance) { }
        public fill_area_style() : base(0) { }

        public static implicit operator fill_area_style(SdaiInstance instance) => new fill_area_style(instance);

        /// <summary>
        /// Create new instace of fill_area_style and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_fill_style_select fill_styles { get { return (new set_of_fill_style_selectSerializer()).FromAttr(m_instance, "fill_styles"); } }
        public void put_fill_styles(IEnumerable<fill_style_select> lst) { (new set_of_fill_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "fill_styles"); }
        public void put_fill_styles_untyped(IEnumerable lst) { (new set_of_fill_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "fill_styles"); }

        protected override TextValue WrapperEntityName() { return "fill_area_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_colour : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_colour(SdaiInstance instance) : base(instance) { }
        public fill_area_style_colour() : base(0) { }

        public static implicit operator fill_area_style_colour(SdaiInstance instance) => new fill_area_style_colour(instance);

        /// <summary>
        /// Create new instace of fill_area_style_colour and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_colour"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public colour fill_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fill_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fill_area_style_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_hatching
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_hatching : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_hatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_hatching(SdaiInstance instance) : base(instance) { }
        public fill_area_style_hatching() : base(0) { }

        public static implicit operator fill_area_style_hatching(SdaiInstance instance) => new fill_area_style_hatching(instance);

        /// <summary>
        /// Create new instace of fill_area_style_hatching and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_hatching Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_hatching"); Debug.Assert(inst != 0); return inst; }

        public curve_style hatch_line_appearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "hatch_line_appearance", ifcengine.sdaiINSTANCE, out inst); return new curve_style(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "hatch_line_appearance", ifcengine.sdaiINSTANCE, i); }
            }
        public one_direction_repeat_factor start_of_next_hatch_line 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "start_of_next_hatch_line", ifcengine.sdaiINSTANCE, out inst); return new one_direction_repeat_factor(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "start_of_next_hatch_line", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point point_of_reference_hatch_line 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_of_reference_hatch_line", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "point_of_reference_hatch_line", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_point pattern_start 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pattern_start", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pattern_start", ifcengine.sdaiINSTANCE, i); }
            }
        public double? hatch_line_angle
            {
            get { return get_double("hatch_line_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hatch_line_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "fill_area_style_hatching"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tile_symbol_with_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tile_symbol_with_style : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tile_symbol_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tile_symbol_with_style(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tile_symbol_with_style() : base(0) { }

        public static implicit operator fill_area_style_tile_symbol_with_style(SdaiInstance instance) => new fill_area_style_tile_symbol_with_style(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tile_symbol_with_style and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tile_symbol_with_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tile_symbol_with_style"); Debug.Assert(inst != 0); return inst; }

        public annotation_symbol_occurrence symbol 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "symbol", ifcengine.sdaiINSTANCE, out inst); return new annotation_symbol_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "symbol", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "fill_area_style_tile_symbol_with_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tiles
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tiles : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tiles(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tiles() : base(0) { }

        public static implicit operator fill_area_style_tiles(SdaiInstance instance) => new fill_area_style_tiles(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tiles and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tiles Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tiles"); Debug.Assert(inst != 0); return inst; }

        public two_direction_repeat_factor tiling_pattern 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "tiling_pattern", ifcengine.sdaiINSTANCE, out inst); return new two_direction_repeat_factor(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "tiling_pattern", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_fill_area_style_tile_shape_select tiles { get { return (new set_of_fill_area_style_tile_shape_selectSerializer()).FromAttr(m_instance, "tiles"); } }
        public void put_tiles(IEnumerable<fill_area_style_tile_shape_select> lst) { (new set_of_fill_area_style_tile_shape_selectSerializer()).ToSdaiAggr(lst, m_instance, "tiles"); }
        public void put_tiles_untyped(IEnumerable lst) { (new set_of_fill_area_style_tile_shape_selectSerializer()).ToSdaiAggr(lst, m_instance, "tiles"); }
        public double? tiling_scale
            {
            get { return get_double("tiling_scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "tiling_scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "fill_area_style_tiles"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fillet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fillet : transition_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fillet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fillet(SdaiInstance instance) : base(instance) { }
        public fillet() : base(0) { }

        public static implicit operator fillet(SdaiInstance instance) => new fillet(instance);

        /// <summary>
        /// Create new instace of fillet and returns object of this class to interact with
        /// </summary>
        public static new fillet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fillet"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "fillet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of flatness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class flatness_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of flatness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public flatness_tolerance(SdaiInstance instance) : base(instance) { }
        public flatness_tolerance() : base(0) { }

        public static implicit operator flatness_tolerance(SdaiInstance instance) => new flatness_tolerance(instance);

        /// <summary>
        /// Create new instace of flatness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new flatness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "flatness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "flatness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of format_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class format_function : string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of format_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public format_function(SdaiInstance instance) : base(instance) { }
        public format_function() : base(0) { }

        public static implicit operator format_function(SdaiInstance instance) => new format_function(instance);

        /// <summary>
        /// Create new instace of format_function and returns object of this class to interact with
        /// </summary>
        public static new format_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "format_function"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public generic_expression value_to_format { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "value_to_format", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression format_string { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "format_string", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }

        protected override TextValue WrapperEntityName() { return "format_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of founded_kinematic_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class founded_kinematic_path : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of founded_kinematic_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public founded_kinematic_path(SdaiInstance instance) : base(instance) { }
        public founded_kinematic_path() : base(0) { }

        public static implicit operator founded_kinematic_path(SdaiInstance instance) => new founded_kinematic_path(instance);

        /// <summary>
        /// Create new instace of founded_kinematic_path and returns object of this class to interact with
        /// </summary>
        public static new founded_kinematic_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "founded_kinematic_path"); Debug.Assert(inst != 0); return inst; }

        public set_of_kinematic_path paths { get { return (new set_of_kinematic_pathSerializer()).FromAttr(m_instance, "paths"); } }
        public geometric_representation_context founding { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "founding", ifcengine.sdaiINSTANCE, out inst); return new geometric_representation_context(inst); } }

        protected override TextValue WrapperEntityName() { return "founded_kinematic_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fully_constrained_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fully_constrained_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fully_constrained_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fully_constrained_pair(SdaiInstance instance) : base(instance) { }
        public fully_constrained_pair() : base(0) { }

        public static implicit operator fully_constrained_pair(SdaiInstance instance) => new fully_constrained_pair(instance);

        /// <summary>
        /// Create new instace of fully_constrained_pair and returns object of this class to interact with
        /// </summary>
        public static new fully_constrained_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fully_constrained_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "fully_constrained_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functionally_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functionally_defined_transformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functionally_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functionally_defined_transformation(SdaiInstance instance) : base(instance) { }
        public functionally_defined_transformation() : base(0) { }

        public static implicit operator functionally_defined_transformation(SdaiInstance instance) => new functionally_defined_transformation(instance);

        /// <summary>
        /// Create new instace of functionally_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new functionally_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functionally_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "functionally_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of gear_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class gear_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of gear_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public gear_pair(SdaiInstance instance) : base(instance) { }
        public gear_pair() : base(0) { }

        public static implicit operator gear_pair(SdaiInstance instance) => new gear_pair(instance);

        /// <summary>
        /// Create new instace of gear_pair and returns object of this class to interact with
        /// </summary>
        public static new gear_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "gear_pair"); Debug.Assert(inst != 0); return inst; }

        public double? radius_first_link
            {
            get { return get_double("radius_first_link", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius_first_link", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius_second_link
            {
            get { return get_double("radius_second_link", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius_second_link", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? bevel
            {
            get { return get_double("bevel", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "bevel", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? helical_angle
            {
            get { return get_double("helical_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "helical_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? gear_ratio
            {
            get { return get_double("gear_ratio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "gear_ratio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "gear_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of gear_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class gear_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of gear_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public gear_pair_range(SdaiInstance instance) : base(instance) { }
        public gear_pair_range() : base(0) { }

        public static implicit operator gear_pair_range(SdaiInstance instance) => new gear_pair_range(instance);

        /// <summary>
        /// Create new instace of gear_pair_range and returns object of this class to interact with
        /// </summary>
        public static new gear_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "gear_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_actual_rotation_1
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation_1", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation_1
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation_1", 0); }
            }

        protected override TextValue WrapperEntityName() { return "gear_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of gear_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class gear_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of gear_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public gear_pair_value(SdaiInstance instance) : base(instance) { }
        public gear_pair_value() : base(0) { }

        public static implicit operator gear_pair_value(SdaiInstance instance) => new gear_pair_value(instance);

        /// <summary>
        /// Create new instace of gear_pair_value and returns object of this class to interact with
        /// </summary>
        public static new gear_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "gear_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_rotation_1
            {
            get { return get_double("actual_rotation_1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation_1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_rotation_2 { get { return get_double("actual_rotation_2", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "gear_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_feature : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_feature(SdaiInstance instance) : base(instance) { }
        public general_feature() : base(0) { }

        public static implicit operator general_feature(SdaiInstance instance) => new general_feature(instance);

        /// <summary>
        /// Create new instace of general_feature and returns object of this class to interact with
        /// </summary>
        public static new general_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "general_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_material_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_material_property : general_property
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_material_property(SdaiInstance instance) : base(instance) { }
        public general_material_property() : base(0) { }

        public static implicit operator general_material_property(SdaiInstance instance) => new general_material_property(instance);

        /// <summary>
        /// Create new instace of general_material_property and returns object of this class to interact with
        /// </summary>
        public static new general_material_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_material_property"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "general_material_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property_association(SdaiInstance instance) : base(instance) { }
        public general_property_association() : base(0) { }

        public static implicit operator general_property_association(SdaiInstance instance) => new general_property_association(instance);

        /// <summary>
        /// Create new instace of general_property_association and returns object of this class to interact with
        /// </summary>
        public static new general_property_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public general_property base_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_definition", ifcengine.sdaiINSTANCE, out inst); return new general_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_definition", ifcengine.sdaiINSTANCE, i); }
            }

        public derived_property_select derived_definition
            {
            get { return new derived_property_select(m_instance, "derived_definition", 0); }
            }

        protected override TextValue WrapperEntityName() { return "general_property_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property_relationship(SdaiInstance instance) : base(instance) { }
        public general_property_relationship() : base(0) { }

        public static implicit operator general_property_relationship(SdaiInstance instance) => new general_property_relationship(instance);

        /// <summary>
        /// Create new instace of general_property_relationship and returns object of this class to interact with
        /// </summary>
        public static new general_property_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public general_property relating_property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_property", ifcengine.sdaiINSTANCE, out inst); return new general_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_property", ifcengine.sdaiINSTANCE, i); }
            }
        public general_property related_property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_property", ifcengine.sdaiINSTANCE, out inst); return new general_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_property", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "general_property_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_generic_expression : generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_generic_expression(SdaiInstance instance) : base(instance) { }
        public simple_generic_expression() : base(0) { }

        public static implicit operator simple_generic_expression(SdaiInstance instance) => new simple_generic_expression(instance);


        protected override TextValue WrapperEntityName() { return "simple_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_literal : simple_generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_literal(SdaiInstance instance) : base(instance) { }
        public generic_literal() : base(0) { }

        public static implicit operator generic_literal(SdaiInstance instance) => new generic_literal(instance);


        protected override TextValue WrapperEntityName() { return "generic_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_variable : simple_generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_variable(SdaiInstance instance) : base(instance) { }
        public generic_variable() : base(0) { }

        public static implicit operator generic_variable(SdaiInstance instance) => new generic_variable(instance);

        public environment interpretation { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interpretation", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "generic_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_alignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_alignment : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_alignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_alignment(SdaiInstance instance) : base(instance) { }
        public geometric_alignment() : base(0) { }

        public static implicit operator geometric_alignment(SdaiInstance instance) => new geometric_alignment(instance);

        /// <summary>
        /// Create new instace of geometric_alignment and returns object of this class to interact with
        /// </summary>
        public static new geometric_alignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_alignment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometric_alignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_set : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_set(SdaiInstance instance) : base(instance) { }
        public geometric_set() : base(0) { }

        public static implicit operator geometric_set(SdaiInstance instance) => new geometric_set(instance);

        /// <summary>
        /// Create new instace of geometric_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_geometric_set_select elements { get { return (new set_of_geometric_set_selectSerializer()).FromAttr(m_instance, "elements"); } }
        public void put_elements(IEnumerable<geometric_set_select> lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public void put_elements_untyped(IEnumerable lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue WrapperEntityName() { return "geometric_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_curve_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_curve_set : geometric_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_curve_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_curve_set(SdaiInstance instance) : base(instance) { }
        public geometric_curve_set() : base(0) { }

        public static implicit operator geometric_curve_set(SdaiInstance instance) => new geometric_curve_set(instance);

        /// <summary>
        /// Create new instace of geometric_curve_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_curve_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_curve_set"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometric_curve_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_intersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_intersection : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_intersection(SdaiInstance instance) : base(instance) { }
        public geometric_intersection() : base(0) { }

        public static implicit operator geometric_intersection(SdaiInstance instance) => new geometric_intersection(instance);

        /// <summary>
        /// Create new instace of geometric_intersection and returns object of this class to interact with
        /// </summary>
        public static new geometric_intersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_intersection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometric_intersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_item_specific_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_item_specific_usage : item_identified_representation_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_item_specific_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_item_specific_usage(SdaiInstance instance) : base(instance) { }
        public geometric_item_specific_usage() : base(0) { }

        public static implicit operator geometric_item_specific_usage(SdaiInstance instance) => new geometric_item_specific_usage(instance);

        /// <summary>
        /// Create new instace of geometric_item_specific_usage and returns object of this class to interact with
        /// </summary>
        public static new geometric_item_specific_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_item_specific_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometric_item_specific_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_context : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_context(SdaiInstance instance) : base(instance) { }
        public representation_context() : base(0) { }

        public static implicit operator representation_context(SdaiInstance instance) => new representation_context(instance);

        /// <summary>
        /// Create new instace of representation_context and returns object of this class to interact with
        /// </summary>
        public static new representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue context_identifier
            {
            get { return get_string("context_identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "context_identifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue context_type
            {
            get { return get_string("context_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "context_type", ifcengine.sdaiSTRING, value); }
            }
        public set_of_representation representations_in_context { get { return (new set_of_representationSerializer()).FromAttr(m_instance, "representations_in_context"); } }

        protected override TextValue WrapperEntityName() { return "representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_context(SdaiInstance instance) : base(instance) { }
        public geometric_representation_context() : base(0) { }

        public static implicit operator geometric_representation_context(SdaiInstance instance) => new geometric_representation_context(instance);

        /// <summary>
        /// Create new instace of geometric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_context"); Debug.Assert(inst != 0); return inst; }

        public IntValue? coordinate_space_dimension
            {
            get { return get_IntValue("coordinate_space_dimension", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "coordinate_space_dimension", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_relationship(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_relationship() : base(0) { }

        public static implicit operator geometric_tolerance_relationship(SdaiInstance instance) => new geometric_tolerance_relationship(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_relationship and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public geometric_tolerance relating_geometric_tolerance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_geometric_tolerance", ifcengine.sdaiINSTANCE, out inst); return new geometric_tolerance(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_geometric_tolerance", ifcengine.sdaiINSTANCE, i); }
            }
        public geometric_tolerance related_geometric_tolerance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_geometric_tolerance", ifcengine.sdaiINSTANCE, out inst); return new geometric_tolerance(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_geometric_tolerance", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_tolerance_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_with_defined_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_with_defined_unit : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_with_defined_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_with_defined_unit(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_with_defined_unit() : base(0) { }

        public static implicit operator geometric_tolerance_with_defined_unit(SdaiInstance instance) => new geometric_tolerance_with_defined_unit(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_with_defined_unit and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_with_defined_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_with_defined_unit"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit unit_size 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit_size", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "unit_size", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "geometric_tolerance_with_defined_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrical_tolerance_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrical_tolerance_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrical_tolerance_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrical_tolerance_callout(SdaiInstance instance) : base(instance) { }
        public geometrical_tolerance_callout() : base(0) { }

        public static implicit operator geometrical_tolerance_callout(SdaiInstance instance) => new geometrical_tolerance_callout(instance);

        /// <summary>
        /// Create new instace of geometrical_tolerance_callout and returns object of this class to interact with
        /// </summary>
        public static new geometrical_tolerance_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrical_tolerance_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometrical_tolerance_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_2d_wireframe_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_2d_wireframe_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_2d_wireframe_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_2d_wireframe_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_2d_wireframe_representation() : base(0) { }

        public static implicit operator geometrically_bounded_2d_wireframe_representation(SdaiInstance instance) => new geometrically_bounded_2d_wireframe_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_2d_wireframe_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_2d_wireframe_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_2d_wireframe_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometrically_bounded_2d_wireframe_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_surface_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_surface_shape_representation() : base(0) { }

        public static implicit operator geometrically_bounded_surface_shape_representation(SdaiInstance instance) => new geometrically_bounded_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometrically_bounded_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_wireframe_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_wireframe_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_wireframe_shape_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_wireframe_shape_representation() : base(0) { }

        public static implicit operator geometrically_bounded_wireframe_shape_representation(SdaiInstance instance) => new geometrically_bounded_wireframe_shape_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_wireframe_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_wireframe_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "geometrically_bounded_wireframe_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_uncertainty_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_uncertainty_assigned_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_uncertainty_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_uncertainty_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_uncertainty_assigned_context() : base(0) { }

        public static implicit operator global_uncertainty_assigned_context(SdaiInstance instance) => new global_uncertainty_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_uncertainty_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_uncertainty_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_uncertainty_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_uncertainty_measure_with_unit uncertainty { get { return (new set_of_uncertainty_measure_with_unitSerializer()).FromAttr(m_instance, "uncertainty"); } }
        public void put_uncertainty(IEnumerable<uncertainty_measure_with_unit> lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }
        public void put_uncertainty_untyped(IEnumerable lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }

        protected override TextValue WrapperEntityName() { return "global_uncertainty_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_unit_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_unit_assigned_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_unit_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_unit_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_unit_assigned_context() : base(0) { }

        public static implicit operator global_unit_assigned_context(SdaiInstance instance) => new global_unit_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_unit_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_unit_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_unit_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_unit units { get { return (new set_of_unitSerializer()).FromAttr(m_instance, "units"); } }
        public void put_units(IEnumerable<unit> lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }
        public void put_units_untyped(IEnumerable lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }

        protected override TextValue WrapperEntityName() { return "global_unit_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_relationship(SdaiInstance instance) : base(instance) { }
        public group_relationship() : base(0) { }

        public static implicit operator group_relationship(SdaiInstance instance) => new group_relationship(instance);

        /// <summary>
        /// Create new instace of group_relationship and returns object of this class to interact with
        /// </summary>
        public static new group_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public group relating_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, i); }
            }
        public group related_group 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, out inst); return new group(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "group_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hardness_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hardness_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hardness_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hardness_representation(SdaiInstance instance) : base(instance) { }
        public hardness_representation() : base(0) { }

        public static implicit operator hardness_representation(SdaiInstance instance) => new hardness_representation(instance);

        /// <summary>
        /// Create new instace of hardness_representation and returns object of this class to interact with
        /// </summary>
        public static new hardness_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hardness_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "hardness_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hidden_element_over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hidden_element_over_riding_styled_item : context_dependent_over_riding_styled_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hidden_element_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hidden_element_over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public hidden_element_over_riding_styled_item() : base(0) { }

        public static implicit operator hidden_element_over_riding_styled_item(SdaiInstance instance) => new hidden_element_over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of hidden_element_over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new hidden_element_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hidden_element_over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "hidden_element_over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hole_bottom
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hole_bottom : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hole_bottom
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hole_bottom(SdaiInstance instance) : base(instance) { }
        public hole_bottom() : base(0) { }

        public static implicit operator hole_bottom(SdaiInstance instance) => new hole_bottom(instance);

        /// <summary>
        /// Create new instace of hole_bottom and returns object of this class to interact with
        /// </summary>
        public static new hole_bottom Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hole_bottom"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "hole_bottom"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hole_in_panel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hole_in_panel : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hole_in_panel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hole_in_panel(SdaiInstance instance) : base(instance) { }
        public hole_in_panel() : base(0) { }

        public static implicit operator hole_in_panel(SdaiInstance instance) => new hole_in_panel(instance);

        /// <summary>
        /// Create new instace of hole_in_panel and returns object of this class to interact with
        /// </summary>
        public static new hole_in_panel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hole_in_panel"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "hole_in_panel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of universal_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class universal_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of universal_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public universal_pair(SdaiInstance instance) : base(instance) { }
        public universal_pair() : base(0) { }

        public static implicit operator universal_pair(SdaiInstance instance) => new universal_pair(instance);

        /// <summary>
        /// Create new instace of universal_pair and returns object of this class to interact with
        /// </summary>
        public static new universal_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "universal_pair"); Debug.Assert(inst != 0); return inst; }

        public double? input_skew_angle
            {
            get { return get_double("input_skew_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "input_skew_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? skew_angle { get { return get_double("skew_angle", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "universal_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of homokinetic_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class homokinetic_pair : universal_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of homokinetic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public homokinetic_pair(SdaiInstance instance) : base(instance) { }
        public homokinetic_pair() : base(0) { }

        public static implicit operator homokinetic_pair(SdaiInstance instance) => new homokinetic_pair(instance);

        /// <summary>
        /// Create new instace of homokinetic_pair and returns object of this class to interact with
        /// </summary>
        public static new homokinetic_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "homokinetic_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "homokinetic_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hyperbola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hyperbola : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hyperbola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hyperbola(SdaiInstance instance) : base(instance) { }
        public hyperbola() : base(0) { }

        public static implicit operator hyperbola(SdaiInstance instance) => new hyperbola(instance);

        /// <summary>
        /// Create new instace of hyperbola and returns object of this class to interact with
        /// </summary>
        public static new hyperbola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hyperbola"); Debug.Assert(inst != 0); return inst; }

        public double? semi_axis
            {
            get { return get_double("semi_axis", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_axis", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_imag_axis
            {
            get { return get_double("semi_imag_axis", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_imag_axis", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "hyperbola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of id_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class id_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of id_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public id_attribute(SdaiInstance instance) : base(instance) { }
        public id_attribute() : base(0) { }

        public static implicit operator id_attribute(SdaiInstance instance) => new id_attribute(instance);

        /// <summary>
        /// Create new instace of id_attribute and returns object of this class to interact with
        /// </summary>
        public static new id_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "id_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public id_attribute_select identified_item
            {
            get { return new id_attribute_select(m_instance, "identified_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "id_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of identification_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class identification_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of identification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public identification_role(SdaiInstance instance) : base(instance) { }
        public identification_role() : base(0) { }

        public static implicit operator identification_role(SdaiInstance instance) => new identification_role(instance);

        /// <summary>
        /// Create new instace of identification_role and returns object of this class to interact with
        /// </summary>
        public static new identification_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "identification_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "identification_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inclusion_product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inclusion_product_concept_feature : conditional_concept_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inclusion_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inclusion_product_concept_feature(SdaiInstance instance) : base(instance) { }
        public inclusion_product_concept_feature() : base(0) { }

        public static implicit operator inclusion_product_concept_feature(SdaiInstance instance) => new inclusion_product_concept_feature(instance);

        /// <summary>
        /// Create new instace of inclusion_product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new inclusion_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inclusion_product_concept_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "inclusion_product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of index_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class index_expression : string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of index_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public index_expression(SdaiInstance instance) : base(instance) { }
        public index_expression() : base(0) { }

        public static implicit operator index_expression(SdaiInstance instance) => new index_expression(instance);

        /// <summary>
        /// Create new instace of index_expression and returns object of this class to interact with
        /// </summary>
        public static new index_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "index_expression"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public generic_expression operand { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression index { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "index", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }

        protected override TextValue WrapperEntityName() { return "index_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of initial_state
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class initial_state : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of initial_state
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public initial_state(SdaiInstance instance) : base(instance) { }
        public initial_state() : base(0) { }

        public static implicit operator initial_state(SdaiInstance instance) => new initial_state(instance);

        /// <summary>
        /// Create new instace of initial_state and returns object of this class to interact with
        /// </summary>
        public static new initial_state Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "initial_state"); Debug.Assert(inst != 0); return inst; }

        public mechanism applies_to_mechanism 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applies_to_mechanism", ifcengine.sdaiINSTANCE, out inst); return new mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "applies_to_mechanism", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_pair_value pair_values { get { return (new set_of_pair_valueSerializer()).FromAttr(m_instance, "pair_values"); } }
        public void put_pair_values(IEnumerable<pair_value> lst) { (new set_of_pair_valueSerializer()).ToSdaiAggr(lst, m_instance, "pair_values"); }
        public void put_pair_values_untyped(IEnumerable lst) { (new set_of_pair_valueSerializer()).ToSdaiAggr(lst, m_instance, "pair_values"); }

        protected override TextValue WrapperEntityName() { return "initial_state"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of instanced_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class instanced_feature : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of instanced_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public instanced_feature(SdaiInstance instance) : base(instance) { }
        public instanced_feature() : base(0) { }

        public static implicit operator instanced_feature(SdaiInstance instance) => new instanced_feature(instance);

        /// <summary>
        /// Create new instace of instanced_feature and returns object of this class to interact with
        /// </summary>
        public static new instanced_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "instanced_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "instanced_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_numeric_expression : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_numeric_expression(SdaiInstance instance) : base(instance) { }
        public simple_numeric_expression() : base(0) { }

        public static implicit operator simple_numeric_expression(SdaiInstance instance) => new simple_numeric_expression(instance);


        protected override TextValue WrapperEntityName() { return "simple_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of literal_number
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class literal_number : simple_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of literal_number
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public literal_number(SdaiInstance instance) : base(instance) { }
        public literal_number() : base(0) { }

        public static implicit operator literal_number(SdaiInstance instance) => new literal_number(instance);

        public double? the_value
            {
            get { return get_double("the_value", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "literal_number"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of int_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class int_literal : literal_number
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of int_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public int_literal(SdaiInstance instance) : base(instance) { }
        public int_literal() : base(0) { }

        public static implicit operator int_literal(SdaiInstance instance) => new int_literal(instance);

        /// <summary>
        /// Create new instace of int_literal and returns object of this class to interact with
        /// </summary>
        public static new int_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "int_literal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "int_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of numeric_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class numeric_variable : simple_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public numeric_variable(SdaiInstance instance) : base(instance) { }
        public numeric_variable() : base(0) { }

        public static implicit operator numeric_variable(SdaiInstance instance) => new numeric_variable(instance);

        /// <summary>
        /// Create new instace of numeric_variable and returns object of this class to interact with
        /// </summary>
        public static new numeric_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "numeric_variable"); Debug.Assert(inst != 0); return inst; }

        public environment interpretation { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interpretation", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "numeric_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of int_numeric_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class int_numeric_variable : numeric_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of int_numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public int_numeric_variable(SdaiInstance instance) : base(instance) { }
        public int_numeric_variable() : base(0) { }

        public static implicit operator int_numeric_variable(SdaiInstance instance) => new int_numeric_variable(instance);

        /// <summary>
        /// Create new instace of int_numeric_variable and returns object of this class to interact with
        /// </summary>
        public static new int_numeric_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "int_numeric_variable"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "int_numeric_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of value_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class value_function : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of value_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public value_function(SdaiInstance instance) : base(instance) { }
        public value_function() : base(0) { }

        public static implicit operator value_function(SdaiInstance instance) => new value_function(instance);

        /// <summary>
        /// Create new instace of value_function and returns object of this class to interact with
        /// </summary>
        public static new value_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "value_function"); Debug.Assert(inst != 0); return inst; }

        public generic_expression operand 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "value_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of int_value_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class int_value_function : value_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of int_value_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public int_value_function(SdaiInstance instance) : base(instance) { }
        public int_value_function() : base(0) { }

        public static implicit operator int_value_function(SdaiInstance instance) => new int_value_function(instance);

        /// <summary>
        /// Create new instace of int_value_function and returns object of this class to interact with
        /// </summary>
        public static new int_value_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "int_value_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "int_value_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of numeric_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class numeric_defined_function : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of numeric_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public numeric_defined_function(SdaiInstance instance) : base(instance) { }
        public numeric_defined_function() : base(0) { }

        public static implicit operator numeric_defined_function(SdaiInstance instance) => new numeric_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "numeric_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of integer_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class integer_defined_function : numeric_defined_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of integer_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public integer_defined_function(SdaiInstance instance) : base(instance) { }
        public integer_defined_function() : base(0) { }

        public static implicit operator integer_defined_function(SdaiInstance instance) => new integer_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "integer_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of interpolated_configuration_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class interpolated_configuration_sequence : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of interpolated_configuration_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public interpolated_configuration_sequence(SdaiInstance instance) : base(instance) { }
        public interpolated_configuration_sequence() : base(0) { }

        public static implicit operator interpolated_configuration_sequence(SdaiInstance instance) => new interpolated_configuration_sequence(instance);

        /// <summary>
        /// Create new instace of interpolated_configuration_sequence and returns object of this class to interact with
        /// </summary>
        public static new interpolated_configuration_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "interpolated_configuration_sequence"); Debug.Assert(inst != 0); return inst; }

        public set_of_configuration_interpolation interpolation { get { return (new set_of_configuration_interpolationSerializer()).FromAttr(m_instance, "interpolation"); } }
        public void put_interpolation(IEnumerable<configuration_interpolation> lst) { (new set_of_configuration_interpolationSerializer()).ToSdaiAggr(lst, m_instance, "interpolation"); }
        public void put_interpolation_untyped(IEnumerable lst) { (new set_of_configuration_interpolationSerializer()).ToSdaiAggr(lst, m_instance, "interpolation"); }

        protected override TextValue WrapperEntityName() { return "interpolated_configuration_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of intersection_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class intersection_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of intersection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public intersection_curve(SdaiInstance instance) : base(instance) { }
        public intersection_curve() : base(0) { }

        public static implicit operator intersection_curve(SdaiInstance instance) => new intersection_curve(instance);

        /// <summary>
        /// Create new instace of intersection_curve and returns object of this class to interact with
        /// </summary>
        public static new intersection_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "intersection_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "intersection_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of interval_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class interval_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of interval_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public interval_expression(SdaiInstance instance) : base(instance) { }
        public interval_expression() : base(0) { }

        public static implicit operator interval_expression(SdaiInstance instance) => new interval_expression(instance);

        /// <summary>
        /// Create new instace of interval_expression and returns object of this class to interact with
        /// </summary>
        public static new interval_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "interval_expression"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public generic_expression interval_low { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interval_low", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression interval_item { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interval_item", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression interval_high { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interval_high", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }

        protected override TextValue WrapperEntityName() { return "interval_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joggle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joggle : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joggle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joggle(SdaiInstance instance) : base(instance) { }
        public joggle() : base(0) { }

        public static implicit operator joggle(SdaiInstance instance) => new joggle(instance);

        /// <summary>
        /// Create new instace of joggle and returns object of this class to interact with
        /// </summary>
        public static new joggle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joggle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "joggle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of joggle_termination
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class joggle_termination : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of joggle_termination
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public joggle_termination(SdaiInstance instance) : base(instance) { }
        public joggle_termination() : base(0) { }

        public static implicit operator joggle_termination(SdaiInstance instance) => new joggle_termination(instance);

        /// <summary>
        /// Create new instace of joggle_termination and returns object of this class to interact with
        /// </summary>
        public static new joggle_termination Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "joggle_termination"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "joggle_termination"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_analysis_consistency
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_analysis_consistency : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_analysis_consistency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_analysis_consistency(SdaiInstance instance) : base(instance) { }
        public kinematic_analysis_consistency() : base(0) { }

        public static implicit operator kinematic_analysis_consistency(SdaiInstance instance) => new kinematic_analysis_consistency(instance);

        /// <summary>
        /// Create new instace of kinematic_analysis_consistency and returns object of this class to interact with
        /// </summary>
        public static new kinematic_analysis_consistency Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_analysis_consistency"); Debug.Assert(inst != 0); return inst; }

        public kinematic_control control 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "control", ifcengine.sdaiINSTANCE, out inst); return new kinematic_control(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "control", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_analysis_result result 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "result", ifcengine.sdaiINSTANCE, out inst); return new kinematic_analysis_result(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "result", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "kinematic_analysis_consistency"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_analysis_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_analysis_result : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_analysis_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_analysis_result(SdaiInstance instance) : base(instance) { }
        public kinematic_analysis_result() : base(0) { }

        public static implicit operator kinematic_analysis_result(SdaiInstance instance) => new kinematic_analysis_result(instance);

        /// <summary>
        /// Create new instace of kinematic_analysis_result and returns object of this class to interact with
        /// </summary>
        public static new kinematic_analysis_result Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_analysis_result"); Debug.Assert(inst != 0); return inst; }

        public mechanism analysed_mechanism 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "analysed_mechanism", ifcengine.sdaiINSTANCE, out inst); return new mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "analysed_mechanism", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_kinematic_result contained_kinematic_results { get { return (new set_of_kinematic_resultSerializer()).FromAttr(m_instance, "contained_kinematic_results"); } }
        public void put_contained_kinematic_results(IEnumerable<kinematic_result> lst) { (new set_of_kinematic_resultSerializer()).ToSdaiAggr(lst, m_instance, "contained_kinematic_results"); }
        public void put_contained_kinematic_results_untyped(IEnumerable lst) { (new set_of_kinematic_resultSerializer()).ToSdaiAggr(lst, m_instance, "contained_kinematic_results"); }

        protected override TextValue WrapperEntityName() { return "kinematic_analysis_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_control
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_control : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_control
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_control(SdaiInstance instance) : base(instance) { }
        public kinematic_control() : base(0) { }

        public static implicit operator kinematic_control(SdaiInstance instance) => new kinematic_control(instance);

        /// <summary>
        /// Create new instace of kinematic_control and returns object of this class to interact with
        /// </summary>
        public static new kinematic_control Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_control"); Debug.Assert(inst != 0); return inst; }

        public mechanism controlled_mechanism 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "controlled_mechanism", ifcengine.sdaiINSTANCE, out inst); return new mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "controlled_mechanism", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_kinematic_analysis_definition contained_kinematic_programs { get { return (new set_of_kinematic_analysis_definitionSerializer()).FromAttr(m_instance, "contained_kinematic_programs"); } }
        public void put_contained_kinematic_programs(IEnumerable<kinematic_analysis_definition> lst) { (new set_of_kinematic_analysis_definitionSerializer()).ToSdaiAggr(lst, m_instance, "contained_kinematic_programs"); }
        public void put_contained_kinematic_programs_untyped(IEnumerable lst) { (new set_of_kinematic_analysis_definitionSerializer()).ToSdaiAggr(lst, m_instance, "contained_kinematic_programs"); }

        protected override TextValue WrapperEntityName() { return "kinematic_control"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_frame_background_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_frame_background_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_frame_background_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_frame_background_representation(SdaiInstance instance) : base(instance) { }
        public kinematic_frame_background_representation() : base(0) { }

        public static implicit operator kinematic_frame_background_representation(SdaiInstance instance) => new kinematic_frame_background_representation(instance);

        /// <summary>
        /// Create new instace of kinematic_frame_background_representation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_frame_background_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_frame_background_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_frame_background_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship_with_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship_with_transformation : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship_with_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship_with_transformation(SdaiInstance instance) : base(instance) { }
        public representation_relationship_with_transformation() : base(0) { }

        public static implicit operator representation_relationship_with_transformation(SdaiInstance instance) => new representation_relationship_with_transformation(instance);

        /// <summary>
        /// Create new instace of representation_relationship_with_transformation and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship_with_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship_with_transformation"); Debug.Assert(inst != 0); return inst; }


        public transformation transformation_operator
            {
            get { return new transformation(m_instance, "transformation_operator", 0); }
            }

        protected override TextValue WrapperEntityName() { return "representation_relationship_with_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_frame_background_representation_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_frame_background_representation_association : representation_relationship_with_transformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_frame_background_representation_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_frame_background_representation_association(SdaiInstance instance) : base(instance) { }
        public kinematic_frame_background_representation_association() : base(0) { }

        public static implicit operator kinematic_frame_background_representation_association(SdaiInstance instance) => new kinematic_frame_background_representation_association(instance);

        /// <summary>
        /// Create new instace of kinematic_frame_background_representation_association and returns object of this class to interact with
        /// </summary>
        public static new kinematic_frame_background_representation_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_frame_background_representation_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_frame_background_representation_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_frame_based_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_frame_based_transformation : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_frame_based_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_frame_based_transformation(SdaiInstance instance) : base(instance) { }
        public kinematic_frame_based_transformation() : base(0) { }

        public static implicit operator kinematic_frame_based_transformation(SdaiInstance instance) => new kinematic_frame_based_transformation(instance);

        /// <summary>
        /// Create new instace of kinematic_frame_based_transformation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_frame_based_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_frame_based_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public rigid_placement transformator
            {
            get { return new rigid_placement(m_instance, "transformator", 0); }
            }

        protected override TextValue WrapperEntityName() { return "kinematic_frame_based_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_ground_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_ground_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_ground_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_ground_representation(SdaiInstance instance) : base(instance) { }
        public kinematic_ground_representation() : base(0) { }

        public static implicit operator kinematic_ground_representation(SdaiInstance instance) => new kinematic_ground_representation(instance);

        /// <summary>
        /// Create new instace of kinematic_ground_representation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_ground_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_ground_representation"); Debug.Assert(inst != 0); return inst; }

        public kinematic_property_representation_relation property { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, out inst); return new kinematic_property_representation_relation(inst); } }

        protected override TextValue WrapperEntityName() { return "kinematic_ground_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_joint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_joint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_joint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_joint(SdaiInstance instance) : base(instance) { }
        public kinematic_joint() : base(0) { }

        public static implicit operator kinematic_joint(SdaiInstance instance) => new kinematic_joint(instance);

        /// <summary>
        /// Create new instace of kinematic_joint and returns object of this class to interact with
        /// </summary>
        public static new kinematic_joint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_joint"); Debug.Assert(inst != 0); return inst; }

        public kinematic_link first_link 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "first_link", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "first_link", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_link second_link 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "second_link", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "second_link", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_structure structure { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "structure", ifcengine.sdaiINSTANCE, out inst); return new kinematic_structure(inst); } }

        protected override TextValue WrapperEntityName() { return "kinematic_joint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_link
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_link : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_link
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_link(SdaiInstance instance) : base(instance) { }
        public kinematic_link() : base(0) { }

        public static implicit operator kinematic_link(SdaiInstance instance) => new kinematic_link(instance);

        /// <summary>
        /// Create new instace of kinematic_link and returns object of this class to interact with
        /// </summary>
        public static new kinematic_link Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_link"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_link"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_link_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_link_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_link_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_link_representation(SdaiInstance instance) : base(instance) { }
        public kinematic_link_representation() : base(0) { }

        public static implicit operator kinematic_link_representation(SdaiInstance instance) => new kinematic_link_representation(instance);

        /// <summary>
        /// Create new instace of kinematic_link_representation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_link_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_link_representation"); Debug.Assert(inst != 0); return inst; }

        public kinematic_link_representation_relation link_representation_relation { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "link_representation_relation", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link_representation_relation(inst); } }
        public geometric_representation_context link_frame { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "link_frame", ifcengine.sdaiINSTANCE, out inst); return new geometric_representation_context(inst); } }

        protected override TextValue WrapperEntityName() { return "kinematic_link_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_link_representation_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_link_representation_association : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_link_representation_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_link_representation_association(SdaiInstance instance) : base(instance) { }
        public kinematic_link_representation_association() : base(0) { }

        public static implicit operator kinematic_link_representation_association(SdaiInstance instance) => new kinematic_link_representation_association(instance);

        /// <summary>
        /// Create new instace of kinematic_link_representation_association and returns object of this class to interact with
        /// </summary>
        public static new kinematic_link_representation_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_link_representation_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_link_representation_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_link_representation_relation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_link_representation_relation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_link_representation_relation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_link_representation_relation(SdaiInstance instance) : base(instance) { }
        public kinematic_link_representation_relation() : base(0) { }

        public static implicit operator kinematic_link_representation_relation(SdaiInstance instance) => new kinematic_link_representation_relation(instance);

        /// <summary>
        /// Create new instace of kinematic_link_representation_relation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_link_representation_relation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_link_representation_relation"); Debug.Assert(inst != 0); return inst; }

        public kinematic_link topological_aspects 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "topological_aspects", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "topological_aspects", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_link_representation geometric_aspects 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "geometric_aspects", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link_representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "geometric_aspects", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "kinematic_link_representation_relation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_path : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_path(SdaiInstance instance) : base(instance) { }
        public kinematic_path() : base(0) { }

        public static implicit operator kinematic_path(SdaiInstance instance) => new kinematic_path(instance);

        /// <summary>
        /// Create new instace of kinematic_path and returns object of this class to interact with
        /// </summary>
        public static new kinematic_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_path"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_property_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_property_definition : property_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_property_definition(SdaiInstance instance) : base(instance) { }
        public kinematic_property_definition() : base(0) { }

        public static implicit operator kinematic_property_definition(SdaiInstance instance) => new kinematic_property_definition(instance);

        /// <summary>
        /// Create new instace of kinematic_property_definition and returns object of this class to interact with
        /// </summary>
        public static new kinematic_property_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_property_definition"); Debug.Assert(inst != 0); return inst; }


        public characterized_definition ground_definition
            {
            get { return new characterized_definition(m_instance, "ground_definition", 0); }
            }

        protected override TextValue WrapperEntityName() { return "kinematic_property_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition_representation(SdaiInstance instance) : base(instance) { }
        public property_definition_representation() : base(0) { }

        public static implicit operator property_definition_representation(SdaiInstance instance) => new property_definition_representation(instance);

        /// <summary>
        /// Create new instace of property_definition_representation and returns object of this class to interact with
        /// </summary>
        public static new property_definition_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition_representation"); Debug.Assert(inst != 0); return inst; }


        public represented_definition definition
            {
            get { return new represented_definition(m_instance, "definition", 0); }
            }
        public representation used_representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "property_definition_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_property_representation_relation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_property_representation_relation : property_definition_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_property_representation_relation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_property_representation_relation(SdaiInstance instance) : base(instance) { }
        public kinematic_property_representation_relation() : base(0) { }

        public static implicit operator kinematic_property_representation_relation(SdaiInstance instance) => new kinematic_property_representation_relation(instance);

        /// <summary>
        /// Create new instace of kinematic_property_representation_relation and returns object of this class to interact with
        /// </summary>
        public static new kinematic_property_representation_relation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_property_representation_relation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "kinematic_property_representation_relation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of kinematic_structure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class kinematic_structure : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of kinematic_structure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public kinematic_structure(SdaiInstance instance) : base(instance) { }
        public kinematic_structure() : base(0) { }

        public static implicit operator kinematic_structure(SdaiInstance instance) => new kinematic_structure(instance);

        /// <summary>
        /// Create new instace of kinematic_structure and returns object of this class to interact with
        /// </summary>
        public static new kinematic_structure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "kinematic_structure"); Debug.Assert(inst != 0); return inst; }

        public set_of_kinematic_joint joints { get { return (new set_of_kinematic_jointSerializer()).FromAttr(m_instance, "joints"); } }
        public void put_joints(IEnumerable<kinematic_joint> lst) { (new set_of_kinematic_jointSerializer()).ToSdaiAggr(lst, m_instance, "joints"); }
        public void put_joints_untyped(IEnumerable lst) { (new set_of_kinematic_jointSerializer()).ToSdaiAggr(lst, m_instance, "joints"); }

        protected override TextValue WrapperEntityName() { return "kinematic_structure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of known_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class known_source : external_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of known_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public known_source(SdaiInstance instance) : base(instance) { }
        public known_source() : base(0) { }

        public static implicit operator known_source(SdaiInstance instance) => new known_source(instance);

        /// <summary>
        /// Create new instace of known_source and returns object of this class to interact with
        /// </summary>
        public static new known_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "known_source"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "known_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of language
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class language : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of language
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public language(SdaiInstance instance) : base(instance) { }
        public language() : base(0) { }

        public static implicit operator language(SdaiInstance instance) => new language(instance);

        /// <summary>
        /// Create new instace of language and returns object of this class to interact with
        /// </summary>
        public static new language Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "language"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "language"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of language_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class language_assignment : classification_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public language_assignment(SdaiInstance instance) : base(instance) { }
        public language_assignment() : base(0) { }

        public static implicit operator language_assignment(SdaiInstance instance) => new language_assignment(instance);

        /// <summary>
        /// Create new instace of language_assignment and returns object of this class to interact with
        /// </summary>
        public static new language_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "language_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_language_item items { get { return (new set_of_language_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<language_item> lst) { (new set_of_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "language_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_curve : annotation_curve_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_curve(SdaiInstance instance) : base(instance) { }
        public leader_curve() : base(0) { }

        public static implicit operator leader_curve(SdaiInstance instance) => new leader_curve(instance);

        /// <summary>
        /// Create new instace of leader_curve and returns object of this class to interact with
        /// </summary>
        public static new leader_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "leader_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_directed_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_directed_callout(SdaiInstance instance) : base(instance) { }
        public leader_directed_callout() : base(0) { }

        public static implicit operator leader_directed_callout(SdaiInstance instance) => new leader_directed_callout(instance);

        /// <summary>
        /// Create new instace of leader_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new leader_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "leader_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_directed_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_directed_dimension : leader_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_directed_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_directed_dimension(SdaiInstance instance) : base(instance) { }
        public leader_directed_dimension() : base(0) { }

        public static implicit operator leader_directed_dimension(SdaiInstance instance) => new leader_directed_dimension(instance);

        /// <summary>
        /// Create new instace of leader_directed_dimension and returns object of this class to interact with
        /// </summary>
        public static new leader_directed_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_directed_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "leader_directed_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_terminator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_terminator : terminator_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_terminator(SdaiInstance instance) : base(instance) { }
        public leader_terminator() : base(0) { }

        public static implicit operator leader_terminator(SdaiInstance instance) => new leader_terminator(instance);

        /// <summary>
        /// Create new instace of leader_terminator and returns object of this class to interact with
        /// </summary>
        public static new leader_terminator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_terminator"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "leader_terminator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_function : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_function(SdaiInstance instance) : base(instance) { }
        public length_function() : base(0) { }

        public static implicit operator length_function(SdaiInstance instance) => new length_function(instance);

        /// <summary>
        /// Create new instace of length_function and returns object of this class to interact with
        /// </summary>
        public static new length_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_function"); Debug.Assert(inst != 0); return inst; }

        public generic_expression operand 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "length_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public length_measure_with_unit() : base(0) { }

        public static implicit operator length_measure_with_unit(SdaiInstance instance) => new length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_unit(SdaiInstance instance) : base(instance) { }
        public length_unit() : base(0) { }

        public static implicit operator length_unit(SdaiInstance instance) => new length_unit(instance);

        /// <summary>
        /// Create new instace of length_unit and returns object of this class to interact with
        /// </summary>
        public static new length_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "length_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source(SdaiInstance instance) : base(instance) { }
        public light_source() : base(0) { }

        public static implicit operator light_source(SdaiInstance instance) => new light_source(instance);

        /// <summary>
        /// Create new instace of light_source and returns object of this class to interact with
        /// </summary>
        public static new light_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source"); Debug.Assert(inst != 0); return inst; }

        public colour light_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "light_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "light_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "light_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_ambient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_ambient : light_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_ambient(SdaiInstance instance) : base(instance) { }
        public light_source_ambient() : base(0) { }

        public static implicit operator light_source_ambient(SdaiInstance instance) => new light_source_ambient(instance);

        /// <summary>
        /// Create new instace of light_source_ambient and returns object of this class to interact with
        /// </summary>
        public static new light_source_ambient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_ambient"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "light_source_ambient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_directional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_directional : light_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_directional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_directional(SdaiInstance instance) : base(instance) { }
        public light_source_directional() : base(0) { }

        public static implicit operator light_source_directional(SdaiInstance instance) => new light_source_directional(instance);

        /// <summary>
        /// Create new instace of light_source_directional and returns object of this class to interact with
        /// </summary>
        public static new light_source_directional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_directional"); Debug.Assert(inst != 0); return inst; }

        public direction orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "light_source_directional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_positional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_positional : light_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_positional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_positional(SdaiInstance instance) : base(instance) { }
        public light_source_positional() : base(0) { }

        public static implicit operator light_source_positional(SdaiInstance instance) => new light_source_positional(instance);

        /// <summary>
        /// Create new instace of light_source_positional and returns object of this class to interact with
        /// </summary>
        public static new light_source_positional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_positional"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? constant_attenuation
            {
            get { return get_double("constant_attenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "constant_attenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? distance_attenuation
            {
            get { return get_double("distance_attenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance_attenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "light_source_positional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_spot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_spot : light_source
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_spot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_spot(SdaiInstance instance) : base(instance) { }
        public light_source_spot() : base(0) { }

        public static implicit operator light_source_spot(SdaiInstance instance) => new light_source_spot(instance);

        /// <summary>
        /// Create new instace of light_source_spot and returns object of this class to interact with
        /// </summary>
        public static new light_source_spot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_spot"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public direction orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? concentration_exponent
            {
            get { return get_double("concentration_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "concentration_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? constant_attenuation
            {
            get { return get_double("constant_attenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "constant_attenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? distance_attenuation
            {
            get { return get_double("distance_attenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance_attenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? spread_angle
            {
            get { return get_double("spread_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "spread_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "light_source_spot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of like_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class like_expression : comparison_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of like_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public like_expression(SdaiInstance instance) : base(instance) { }
        public like_expression() : base(0) { }

        public static implicit operator like_expression(SdaiInstance instance) => new like_expression(instance);

        /// <summary>
        /// Create new instace of like_expression and returns object of this class to interact with
        /// </summary>
        public static new like_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "like_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "like_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of limits_and_fits
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class limits_and_fits : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of limits_and_fits
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public limits_and_fits(SdaiInstance instance) : base(instance) { }
        public limits_and_fits() : base(0) { }

        public static implicit operator limits_and_fits(SdaiInstance instance) => new limits_and_fits(instance);

        /// <summary>
        /// Create new instace of limits_and_fits and returns object of this class to interact with
        /// </summary>
        public static new limits_and_fits Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "limits_and_fits"); Debug.Assert(inst != 0); return inst; }

        public TextValue form_variance
            {
            get { return get_string("form_variance", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "form_variance", ifcengine.sdaiSTRING, value); }
            }
        public TextValue zone_variance
            {
            get { return get_string("zone_variance", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "zone_variance", ifcengine.sdaiSTRING, value); }
            }
        public TextValue grade
            {
            get { return get_string("grade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "grade", ifcengine.sdaiSTRING, value); }
            }
        public TextValue source
            {
            get { return get_string("source", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "limits_and_fits"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class line : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public line(SdaiInstance instance) : base(instance) { }
        public line() : base(0) { }

        public static implicit operator line(SdaiInstance instance) => new line(instance);

        /// <summary>
        /// Create new instace of line and returns object of this class to interact with
        /// </summary>
        public static new line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "line"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point pnt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, i); }
            }
        public vector dir 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of line_profile_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class line_profile_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of line_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public line_profile_tolerance(SdaiInstance instance) : base(instance) { }
        public line_profile_tolerance() : base(0) { }

        public static implicit operator line_profile_tolerance(SdaiInstance instance) => new line_profile_tolerance(instance);

        /// <summary>
        /// Create new instace of line_profile_tolerance and returns object of this class to interact with
        /// </summary>
        public static new line_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "line_profile_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "line_profile_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_dimension : dimension_curve_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_dimension(SdaiInstance instance) : base(instance) { }
        public linear_dimension() : base(0) { }

        public static implicit operator linear_dimension(SdaiInstance instance) => new linear_dimension(instance);

        /// <summary>
        /// Create new instace of linear_dimension and returns object of this class to interact with
        /// </summary>
        public static new linear_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "linear_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of local_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class local_time : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of local_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public local_time(SdaiInstance instance) : base(instance) { }
        public local_time() : base(0) { }

        public static implicit operator local_time(SdaiInstance instance) => new local_time(instance);

        /// <summary>
        /// Create new instace of local_time and returns object of this class to interact with
        /// </summary>
        public static new local_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "local_time"); Debug.Assert(inst != 0); return inst; }

        public IntValue? hour_component
            {
            get { return get_IntValue("hour_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "hour_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? minute_component
            {
            get { return get_IntValue("minute_component", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minute_component", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? second_component
            {
            get { return get_double("second_component", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "second_component", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public coordinated_universal_time_offset zone 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, out inst); return new coordinated_universal_time_offset(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "local_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of location_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class location_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of location_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public location_shape_representation(SdaiInstance instance) : base(instance) { }
        public location_shape_representation() : base(0) { }

        public static implicit operator location_shape_representation(SdaiInstance instance) => new location_shape_representation(instance);

        /// <summary>
        /// Create new instace of location_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new location_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "location_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "location_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of locator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class locator : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of locator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public locator(SdaiInstance instance) : base(instance) { }
        public locator() : base(0) { }

        public static implicit operator locator(SdaiInstance instance) => new locator(instance);

        /// <summary>
        /// Create new instace of locator and returns object of this class to interact with
        /// </summary>
        public static new locator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "locator"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "locator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of log_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class log_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of log_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public log_function(SdaiInstance instance) : base(instance) { }
        public log_function() : base(0) { }

        public static implicit operator log_function(SdaiInstance instance) => new log_function(instance);

        /// <summary>
        /// Create new instace of log_function and returns object of this class to interact with
        /// </summary>
        public static new log_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "log_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "log_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of log10_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class log10_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of log10_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public log10_function(SdaiInstance instance) : base(instance) { }
        public log10_function() : base(0) { }

        public static implicit operator log10_function(SdaiInstance instance) => new log10_function(instance);

        /// <summary>
        /// Create new instace of log10_function and returns object of this class to interact with
        /// </summary>
        public static new log10_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "log10_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "log10_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of log2_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class log2_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of log2_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public log2_function(SdaiInstance instance) : base(instance) { }
        public log2_function() : base(0) { }

        public static implicit operator log2_function(SdaiInstance instance) => new log2_function(instance);

        /// <summary>
        /// Create new instace of log2_function and returns object of this class to interact with
        /// </summary>
        public static new log2_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "log2_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "log2_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of lot_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class lot_effectivity : effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of lot_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public lot_effectivity(SdaiInstance instance) : base(instance) { }
        public lot_effectivity() : base(0) { }

        public static implicit operator lot_effectivity(SdaiInstance instance) => new lot_effectivity(instance);

        /// <summary>
        /// Create new instace of lot_effectivity and returns object of this class to interact with
        /// </summary>
        public static new lot_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "lot_effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue effectivity_lot_id
            {
            get { return get_string("effectivity_lot_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_lot_id", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit effectivity_lot_size 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effectivity_lot_size", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "effectivity_lot_size", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "lot_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_intensity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_intensity_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_intensity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_intensity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public luminous_intensity_measure_with_unit() : base(0) { }

        public static implicit operator luminous_intensity_measure_with_unit(SdaiInstance instance) => new luminous_intensity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of luminous_intensity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_intensity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_intensity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "luminous_intensity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_intensity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_intensity_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_intensity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_intensity_unit(SdaiInstance instance) : base(instance) { }
        public luminous_intensity_unit() : base(0) { }

        public static implicit operator luminous_intensity_unit(SdaiInstance instance) => new luminous_intensity_unit(instance);

        /// <summary>
        /// Create new instace of luminous_intensity_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_intensity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_intensity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "luminous_intensity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of make_from_usage_option
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class make_from_usage_option : product_definition_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of make_from_usage_option
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public make_from_usage_option(SdaiInstance instance) : base(instance) { }
        public make_from_usage_option() : base(0) { }

        public static implicit operator make_from_usage_option(SdaiInstance instance) => new make_from_usage_option(instance);

        /// <summary>
        /// Create new instace of make_from_usage_option and returns object of this class to interact with
        /// </summary>
        public static new make_from_usage_option Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "make_from_usage_option"); Debug.Assert(inst != 0); return inst; }

        public IntValue? ranking
            {
            get { return get_IntValue("ranking", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ranking", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue ranking_rationale
            {
            get { return get_string("ranking_rationale", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ranking_rationale", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit quantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "make_from_usage_option"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_subsurface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_subsurface_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_subsurface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_subsurface_shape_representation(SdaiInstance instance) : base(instance) { }
        public manifold_subsurface_shape_representation() : base(0) { }

        public static implicit operator manifold_subsurface_shape_representation(SdaiInstance instance) => new manifold_subsurface_shape_representation(instance);

        /// <summary>
        /// Create new instace of manifold_subsurface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new manifold_subsurface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_subsurface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "manifold_subsurface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_surface_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public manifold_surface_shape_representation() : base(0) { }

        public static implicit operator manifold_surface_shape_representation(SdaiInstance instance) => new manifold_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of manifold_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "manifold_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public mass_measure_with_unit() : base(0) { }

        public static implicit operator mass_measure_with_unit(SdaiInstance instance) => new mass_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of mass_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_unit(SdaiInstance instance) : base(instance) { }
        public mass_unit() : base(0) { }

        public static implicit operator mass_unit(SdaiInstance instance) => new mass_unit(instance);

        /// <summary>
        /// Create new instace of mass_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mass_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_designation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_designation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_designation(SdaiInstance instance) : base(instance) { }
        public material_designation() : base(0) { }

        public static implicit operator material_designation(SdaiInstance instance) => new material_designation(instance);

        /// <summary>
        /// Create new instace of material_designation and returns object of this class to interact with
        /// </summary>
        public static new material_designation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_designation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_characterized_definition definitions { get { return (new set_of_characterized_definitionSerializer()).FromAttr(m_instance, "definitions"); } }
        public void put_definitions(IEnumerable<characterized_definition> lst) { (new set_of_characterized_definitionSerializer()).ToSdaiAggr(lst, m_instance, "definitions"); }
        public void put_definitions_untyped(IEnumerable lst) { (new set_of_characterized_definitionSerializer()).ToSdaiAggr(lst, m_instance, "definitions"); }

        protected override TextValue WrapperEntityName() { return "material_designation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_designation_characterization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_designation_characterization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_designation_characterization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_designation_characterization(SdaiInstance instance) : base(instance) { }
        public material_designation_characterization() : base(0) { }

        public static implicit operator material_designation_characterization(SdaiInstance instance) => new material_designation_characterization(instance);

        /// <summary>
        /// Create new instace of material_designation_characterization and returns object of this class to interact with
        /// </summary>
        public static new material_designation_characterization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_designation_characterization"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public material_designation designation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "designation", ifcengine.sdaiINSTANCE, out inst); return new material_designation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "designation", ifcengine.sdaiINSTANCE, i); }
            }

        public characterized_material_property property
            {
            get { return new characterized_material_property(m_instance, "property", 0); }
            }

        protected override TextValue WrapperEntityName() { return "material_designation_characterization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property : property_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property(SdaiInstance instance) : base(instance) { }
        public material_property() : base(0) { }

        public static implicit operator material_property(SdaiInstance instance) => new material_property(instance);

        /// <summary>
        /// Create new instace of material_property and returns object of this class to interact with
        /// </summary>
        public static new material_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "material_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_representation : property_definition_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_representation(SdaiInstance instance) : base(instance) { }
        public material_property_representation() : base(0) { }

        public static implicit operator material_property_representation(SdaiInstance instance) => new material_property_representation(instance);

        /// <summary>
        /// Create new instace of material_property_representation and returns object of this class to interact with
        /// </summary>
        public static new material_property_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_representation"); Debug.Assert(inst != 0); return inst; }

        public data_environment dependent_environment 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dependent_environment", ifcengine.sdaiINSTANCE, out inst); return new data_environment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "dependent_environment", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "material_property_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_numeric_expression : numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_numeric_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_numeric_expression() : base(0) { }

        public static implicit operator multiple_arity_numeric_expression(SdaiInstance instance) => new multiple_arity_numeric_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "multiple_arity_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_function_call
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_function_call : multiple_arity_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_function_call
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_function_call(SdaiInstance instance) : base(instance) { }
        public multiple_arity_function_call() : base(0) { }

        public static implicit operator multiple_arity_function_call(SdaiInstance instance) => new multiple_arity_function_call(instance);


        protected override TextValue WrapperEntityName() { return "multiple_arity_function_call"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of maximum_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class maximum_function : multiple_arity_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of maximum_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public maximum_function(SdaiInstance instance) : base(instance) { }
        public maximum_function() : base(0) { }

        public static implicit operator maximum_function(SdaiInstance instance) => new maximum_function(instance);

        /// <summary>
        /// Create new instace of maximum_function and returns object of this class to interact with
        /// </summary>
        public static new maximum_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "maximum_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "maximum_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_qualification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_qualification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_qualification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_qualification(SdaiInstance instance) : base(instance) { }
        public measure_qualification() : base(0) { }

        public static implicit operator measure_qualification(SdaiInstance instance) => new measure_qualification(instance);

        /// <summary>
        /// Create new instace of measure_qualification and returns object of this class to interact with
        /// </summary>
        public static new measure_qualification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_qualification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public measure_with_unit qualified_measure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_value_qualifier qualifiers { get { return (new set_of_value_qualifierSerializer()).FromAttr(m_instance, "qualifiers"); } }
        public void put_qualifiers(IEnumerable<value_qualifier> lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }
        public void put_qualifiers_untyped(IEnumerable lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }

        protected override TextValue WrapperEntityName() { return "measure_qualification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_representation_item(SdaiInstance instance) : base(instance) { }
        public measure_representation_item() : base(0) { }

        public static implicit operator measure_representation_item(SdaiInstance instance) => new measure_representation_item(instance);

        /// <summary>
        /// Create new instace of measure_representation_item and returns object of this class to interact with
        /// </summary>
        public static new measure_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_representation_item"); Debug.Assert(inst != 0); return inst; }


        public measure_value value_component
            {
            get { return new measure_value(m_instance, "value_component", 0); }
            }

        public unit unit_component
            {
            get { return new unit(m_instance, "unit_component", 0); }
            }

        protected override TextValue WrapperEntityName() { return "measure_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_geometric_presentation_area : presentation_area
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_geometric_presentation_area(SdaiInstance instance) : base(instance) { }
        public mechanical_design_geometric_presentation_area() : base(0) { }

        public static implicit operator mechanical_design_geometric_presentation_area(SdaiInstance instance) => new mechanical_design_geometric_presentation_area(instance);

        /// <summary>
        /// Create new instace of mechanical_design_geometric_presentation_area and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_geometric_presentation_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mechanical_design_geometric_presentation_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_geometric_presentation_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_geometric_presentation_representation(SdaiInstance instance) : base(instance) { }
        public mechanical_design_geometric_presentation_representation() : base(0) { }

        public static implicit operator mechanical_design_geometric_presentation_representation(SdaiInstance instance) => new mechanical_design_geometric_presentation_representation(instance);

        /// <summary>
        /// Create new instace of mechanical_design_geometric_presentation_representation and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_geometric_presentation_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mechanical_design_geometric_presentation_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanism
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanism : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanism
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanism(SdaiInstance instance) : base(instance) { }
        public mechanism() : base(0) { }

        public static implicit operator mechanism(SdaiInstance instance) => new mechanism(instance);

        /// <summary>
        /// Create new instace of mechanism and returns object of this class to interact with
        /// </summary>
        public static new mechanism Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanism"); Debug.Assert(inst != 0); return inst; }

        public kinematic_structure structure_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "structure_definition", ifcengine.sdaiINSTANCE, out inst); return new kinematic_structure(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "structure_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_link base_ 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, i); }
            }
        public kinematic_property_definition containing_property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "containing_property", ifcengine.sdaiINSTANCE, out inst); return new kinematic_property_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "containing_property", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "mechanism"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanism_base_placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanism_base_placement : representation_relationship_with_transformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanism_base_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanism_base_placement(SdaiInstance instance) : base(instance) { }
        public mechanism_base_placement() : base(0) { }

        public static implicit operator mechanism_base_placement(SdaiInstance instance) => new mechanism_base_placement(instance);

        /// <summary>
        /// Create new instace of mechanism_base_placement and returns object of this class to interact with
        /// </summary>
        public static new mechanism_base_placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanism_base_placement"); Debug.Assert(inst != 0); return inst; }

        public mechanism base_of_mechanism 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_of_mechanism", ifcengine.sdaiINSTANCE, out inst); return new mechanism(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_of_mechanism", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "mechanism_base_placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of minimum_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class minimum_function : multiple_arity_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of minimum_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public minimum_function(SdaiInstance instance) : base(instance) { }
        public minimum_function() : base(0) { }

        public static implicit operator minimum_function(SdaiInstance instance) => new minimum_function(instance);

        /// <summary>
        /// Create new instace of minimum_function and returns object of this class to interact with
        /// </summary>
        public static new minimum_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "minimum_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "minimum_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of minus_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class minus_expression : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of minus_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public minus_expression(SdaiInstance instance) : base(instance) { }
        public minus_expression() : base(0) { }

        public static implicit operator minus_expression(SdaiInstance instance) => new minus_expression(instance);

        /// <summary>
        /// Create new instace of minus_expression and returns object of this class to interact with
        /// </summary>
        public static new minus_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "minus_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "minus_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of minus_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class minus_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of minus_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public minus_function(SdaiInstance instance) : base(instance) { }
        public minus_function() : base(0) { }

        public static implicit operator minus_function(SdaiInstance instance) => new minus_function(instance);

        /// <summary>
        /// Create new instace of minus_function and returns object of this class to interact with
        /// </summary>
        public static new minus_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "minus_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "minus_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mod_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mod_expression : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mod_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mod_expression(SdaiInstance instance) : base(instance) { }
        public mod_expression() : base(0) { }

        public static implicit operator mod_expression(SdaiInstance instance) => new mod_expression(instance);

        /// <summary>
        /// Create new instace of mod_expression and returns object of this class to interact with
        /// </summary>
        public static new mod_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mod_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mod_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modified_geometric_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modified_geometric_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modified_geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modified_geometric_tolerance(SdaiInstance instance) : base(instance) { }
        public modified_geometric_tolerance() : base(0) { }

        public static implicit operator modified_geometric_tolerance(SdaiInstance instance) => new modified_geometric_tolerance(instance);

        /// <summary>
        /// Create new instace of modified_geometric_tolerance and returns object of this class to interact with
        /// </summary>
        public static new modified_geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "modified_geometric_tolerance"); Debug.Assert(inst != 0); return inst; }

        public limit_condition? modifier 
            { 
            get { var str = get_string("modifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.limit_condition_); return EnumValue<limit_condition>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<limit_condition>.FromValue(value.Value, EnumNames.limit_condition_); ifcengine.sdaiPutAttrBN(m_instance, "modifier", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "modified_geometric_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modified_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modified_pattern : replicate_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modified_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modified_pattern(SdaiInstance instance) : base(instance) { }
        public modified_pattern() : base(0) { }

        public static implicit operator modified_pattern(SdaiInstance instance) => new modified_pattern(instance);

        /// <summary>
        /// Create new instace of modified_pattern and returns object of this class to interact with
        /// </summary>
        public static new modified_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "modified_pattern"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "modified_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of moments_of_inertia_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class moments_of_inertia_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of moments_of_inertia_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public moments_of_inertia_representation(SdaiInstance instance) : base(instance) { }
        public moments_of_inertia_representation() : base(0) { }

        public static implicit operator moments_of_inertia_representation(SdaiInstance instance) => new moments_of_inertia_representation(instance);

        /// <summary>
        /// Create new instace of moments_of_inertia_representation and returns object of this class to interact with
        /// </summary>
        public static new moments_of_inertia_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "moments_of_inertia_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "moments_of_inertia_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of motion_link_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class motion_link_relationship : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of motion_link_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public motion_link_relationship(SdaiInstance instance) : base(instance) { }
        public motion_link_relationship() : base(0) { }

        public static implicit operator motion_link_relationship(SdaiInstance instance) => new motion_link_relationship(instance);

        /// <summary>
        /// Create new instace of motion_link_relationship and returns object of this class to interact with
        /// </summary>
        public static new motion_link_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "motion_link_relationship"); Debug.Assert(inst != 0); return inst; }


        public rigid_placement related_frame
            {
            get { return new rigid_placement(m_instance, "related_frame", 0); }
            }
        public founded_kinematic_path motion { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "motion", ifcengine.sdaiINSTANCE, out inst); return new founded_kinematic_path(inst); } }
        public kinematic_link_representation frame_link { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_link", ifcengine.sdaiINSTANCE, out inst); return new kinematic_link_representation(inst); } }

        protected override TextValue WrapperEntityName() { return "motion_link_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mult_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mult_expression : multiple_arity_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mult_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mult_expression(SdaiInstance instance) : base(instance) { }
        public mult_expression() : base(0) { }

        public static implicit operator mult_expression(SdaiInstance instance) => new mult_expression(instance);

        /// <summary>
        /// Create new instace of mult_expression and returns object of this class to interact with
        /// </summary>
        public static new mult_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mult_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "mult_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multi_language_attribute_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multi_language_attribute_assignment : attribute_value_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multi_language_attribute_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multi_language_attribute_assignment(SdaiInstance instance) : base(instance) { }
        public multi_language_attribute_assignment() : base(0) { }

        public static implicit operator multi_language_attribute_assignment(SdaiInstance instance) => new multi_language_attribute_assignment(instance);

        /// <summary>
        /// Create new instace of multi_language_attribute_assignment and returns object of this class to interact with
        /// </summary>
        public static new multi_language_attribute_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "multi_language_attribute_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_multi_language_attribute_item items { get { return (new set_of_multi_language_attribute_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<multi_language_attribute_item> lst) { (new set_of_multi_language_attribute_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_multi_language_attribute_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public TextValue language { get { return get_string("language", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "multi_language_attribute_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_generic_expression : generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_generic_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_generic_expression() : base(0) { }

        public static implicit operator multiple_arity_generic_expression(SdaiInstance instance) => new multiple_arity_generic_expression(instance);

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue WrapperEntityName() { return "multiple_arity_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of name_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class name_attribute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of name_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public name_attribute(SdaiInstance instance) : base(instance) { }
        public name_attribute() : base(0) { }

        public static implicit operator name_attribute(SdaiInstance instance) => new name_attribute(instance);

        /// <summary>
        /// Create new instace of name_attribute and returns object of this class to interact with
        /// </summary>
        public static new name_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "name_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue attribute_value
            {
            get { return get_string("attribute_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }
            }

        public name_attribute_select named_item
            {
            get { return new name_attribute_select(m_instance, "named_item", 0); }
            }

        protected override TextValue WrapperEntityName() { return "name_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of named_unit_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class named_unit_variable : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of named_unit_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public named_unit_variable(SdaiInstance instance) : base(instance) { }
        public named_unit_variable() : base(0) { }

        public static implicit operator named_unit_variable(SdaiInstance instance) => new named_unit_variable(instance);

        /// <summary>
        /// Create new instace of named_unit_variable and returns object of this class to interact with
        /// </summary>
        public static new named_unit_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "named_unit_variable"); Debug.Assert(inst != 0); return inst; }

        public environment associated_variable_environment { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "associated_variable_environment", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "named_unit_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of next_assembly_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class next_assembly_usage_occurrence : assembly_component_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of next_assembly_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public next_assembly_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public next_assembly_usage_occurrence() : base(0) { }

        public static implicit operator next_assembly_usage_occurrence(SdaiInstance instance) => new next_assembly_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of next_assembly_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new next_assembly_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "next_assembly_usage_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "next_assembly_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ngon_closed_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ngon_closed_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ngon_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ngon_closed_profile(SdaiInstance instance) : base(instance) { }
        public ngon_closed_profile() : base(0) { }

        public static implicit operator ngon_closed_profile(SdaiInstance instance) => new ngon_closed_profile(instance);

        /// <summary>
        /// Create new instace of ngon_closed_profile and returns object of this class to interact with
        /// </summary>
        public static new ngon_closed_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ngon_closed_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ngon_closed_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of non_manifold_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class non_manifold_surface_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of non_manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public non_manifold_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public non_manifold_surface_shape_representation() : base(0) { }

        public static implicit operator non_manifold_surface_shape_representation(SdaiInstance instance) => new non_manifold_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of non_manifold_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new non_manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "non_manifold_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "non_manifold_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_boolean_expression : boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_boolean_expression(SdaiInstance instance) : base(instance) { }
        public unary_boolean_expression() : base(0) { }

        public static implicit operator unary_boolean_expression(SdaiInstance instance) => new unary_boolean_expression(instance);

        public generic_expression operand 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "unary_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of not_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class not_expression : unary_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of not_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public not_expression(SdaiInstance instance) : base(instance) { }
        public not_expression() : base(0) { }

        public static implicit operator not_expression(SdaiInstance instance) => new not_expression(instance);

        /// <summary>
        /// Create new instace of not_expression and returns object of this class to interact with
        /// </summary>
        public static new not_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "not_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "not_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of object_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class object_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of object_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public object_role(SdaiInstance instance) : base(instance) { }
        public object_role() : base(0) { }

        public static implicit operator object_role(SdaiInstance instance) => new object_role(instance);

        /// <summary>
        /// Create new instace of object_role and returns object of this class to interact with
        /// </summary>
        public static new object_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "object_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "object_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of odd_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class odd_function : unary_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of odd_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public odd_function(SdaiInstance instance) : base(instance) { }
        public odd_function() : base(0) { }

        public static implicit operator odd_function(SdaiInstance instance) => new odd_function(instance);

        /// <summary>
        /// Create new instace of odd_function and returns object of this class to interact with
        /// </summary>
        public static new odd_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "odd_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "odd_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_2d : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_2d(SdaiInstance instance) : base(instance) { }
        public offset_curve_2d() : base(0) { }

        public static implicit operator offset_curve_2d(SdaiInstance instance) => new offset_curve_2d(instance);

        /// <summary>
        /// Create new instace of offset_curve_2d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_2d"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "offset_curve_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_3d : curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_3d(SdaiInstance instance) : base(instance) { }
        public offset_curve_3d() : base(0) { }

        public static implicit operator offset_curve_3d(SdaiInstance instance) => new offset_curve_3d(instance);

        /// <summary>
        /// Create new instace of offset_curve_3d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_3d"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public direction ref_direction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "offset_curve_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_surface(SdaiInstance instance) : base(instance) { }
        public offset_surface() : base(0) { }

        public static implicit operator offset_surface(SdaiInstance instance) => new offset_surface(instance);

        /// <summary>
        /// Create new instace of offset_surface and returns object of this class to interact with
        /// </summary>
        public static new offset_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? distance
            {
            get { return get_double("distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? self_intersect 
            { 
            get { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "offset_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of one_direction_repeat_factor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class one_direction_repeat_factor : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of one_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public one_direction_repeat_factor(SdaiInstance instance) : base(instance) { }
        public one_direction_repeat_factor() : base(0) { }

        public static implicit operator one_direction_repeat_factor(SdaiInstance instance) => new one_direction_repeat_factor(instance);

        /// <summary>
        /// Create new instace of one_direction_repeat_factor and returns object of this class to interact with
        /// </summary>
        public static new one_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "one_direction_repeat_factor"); Debug.Assert(inst != 0); return inst; }

        public vector repeat_factor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "repeat_factor", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "repeat_factor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "one_direction_repeat_factor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of open_path_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class open_path_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of open_path_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public open_path_profile(SdaiInstance instance) : base(instance) { }
        public open_path_profile() : base(0) { }

        public static implicit operator open_path_profile(SdaiInstance instance) => new open_path_profile(instance);

        /// <summary>
        /// Create new instace of open_path_profile and returns object of this class to interact with
        /// </summary>
        public static new open_path_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "open_path_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "open_path_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class open_shell : connected_face_set
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public open_shell(SdaiInstance instance) : base(instance) { }
        public open_shell() : base(0) { }

        public static implicit operator open_shell(SdaiInstance instance) => new open_shell(instance);

        /// <summary>
        /// Create new instace of open_shell and returns object of this class to interact with
        /// </summary>
        public static new open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "open_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of or_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class or_expression : multiple_arity_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of or_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public or_expression(SdaiInstance instance) : base(instance) { }
        public or_expression() : base(0) { }

        public static implicit operator or_expression(SdaiInstance instance) => new or_expression(instance);

        /// <summary>
        /// Create new instace of or_expression and returns object of this class to interact with
        /// </summary>
        public static new or_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "or_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "or_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projection_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projection_directed_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projection_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projection_directed_callout(SdaiInstance instance) : base(instance) { }
        public projection_directed_callout() : base(0) { }

        public static implicit operator projection_directed_callout(SdaiInstance instance) => new projection_directed_callout(instance);

        /// <summary>
        /// Create new instace of projection_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new projection_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projection_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "projection_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ordinate_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ordinate_dimension : projection_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ordinate_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ordinate_dimension(SdaiInstance instance) : base(instance) { }
        public ordinate_dimension() : base(0) { }

        public static implicit operator ordinate_dimension(SdaiInstance instance) => new ordinate_dimension(instance);

        /// <summary>
        /// Create new instace of ordinate_dimension and returns object of this class to interact with
        /// </summary>
        public static new ordinate_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ordinate_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ordinate_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization(SdaiInstance instance) : base(instance) { }
        public organization() : base(0) { }

        public static implicit operator organization(SdaiInstance instance) => new organization(instance);

        /// <summary>
        /// Create new instace of organization and returns object of this class to interact with
        /// </summary>
        public static new organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_relationship(SdaiInstance instance) : base(instance) { }
        public organization_relationship() : base(0) { }

        public static implicit operator organization_relationship(SdaiInstance instance) => new organization_relationship(instance);

        /// <summary>
        /// Create new instace of organization_relationship and returns object of this class to interact with
        /// </summary>
        public static new organization_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public organization relating_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public organization related_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organization_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_role(SdaiInstance instance) : base(instance) { }
        public organization_role() : base(0) { }

        public static implicit operator organization_role(SdaiInstance instance) => new organization_role(instance);

        /// <summary>
        /// Create new instace of organization_role and returns object of this class to interact with
        /// </summary>
        public static new organization_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "organization_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_address : address
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_address(SdaiInstance instance) : base(instance) { }
        public organizational_address() : base(0) { }

        public static implicit operator organizational_address(SdaiInstance instance) => new organizational_address(instance);

        /// <summary>
        /// Create new instace of organizational_address and returns object of this class to interact with
        /// </summary>
        public static new organizational_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_organization organizations { get { return (new set_of_organizationSerializer()).FromAttr(m_instance, "organizations"); } }
        public void put_organizations(IEnumerable<organization> lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        public void put_organizations_untyped(IEnumerable lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "organizational_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project(SdaiInstance instance) : base(instance) { }
        public organizational_project() : base(0) { }

        public static implicit operator organizational_project(SdaiInstance instance) => new organizational_project(instance);

        /// <summary>
        /// Create new instace of organizational_project and returns object of this class to interact with
        /// </summary>
        public static new organizational_project Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_organization responsible_organizations { get { return (new set_of_organizationSerializer()).FromAttr(m_instance, "responsible_organizations"); } }
        public void put_responsible_organizations(IEnumerable<organization> lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "responsible_organizations"); }
        public void put_responsible_organizations_untyped(IEnumerable lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "responsible_organizations"); }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "organizational_project"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_relationship(SdaiInstance instance) : base(instance) { }
        public organizational_project_relationship() : base(0) { }

        public static implicit operator organizational_project_relationship(SdaiInstance instance) => new organizational_project_relationship(instance);

        /// <summary>
        /// Create new instace of organizational_project_relationship and returns object of this class to interact with
        /// </summary>
        public static new organizational_project_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public organizational_project relating_organizational_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_organizational_project", ifcengine.sdaiINSTANCE, i); }
            }
        public organizational_project related_organizational_project 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_organizational_project", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "organizational_project_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_role(SdaiInstance instance) : base(instance) { }
        public organizational_project_role() : base(0) { }

        public static implicit operator organizational_project_role(SdaiInstance instance) => new organizational_project_role(instance);

        /// <summary>
        /// Create new instace of organizational_project_role and returns object of this class to interact with
        /// </summary>
        public static new organizational_project_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "organizational_project_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_closed_shell : closed_shell
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_closed_shell(SdaiInstance instance) : base(instance) { }
        public oriented_closed_shell() : base(0) { }

        public static implicit operator oriented_closed_shell(SdaiInstance instance) => new oriented_closed_shell(instance);

        /// <summary>
        /// Create new instace of oriented_closed_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_closed_shell"); Debug.Assert(inst != 0); return inst; }

        public closed_shell closed_shell_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, out inst); return new closed_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_edge : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_edge(SdaiInstance instance) : base(instance) { }
        public oriented_edge() : base(0) { }

        public static implicit operator oriented_edge(SdaiInstance instance) => new oriented_edge(instance);

        /// <summary>
        /// Create new instace of oriented_edge and returns object of this class to interact with
        /// </summary>
        public static new oriented_edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_edge"); Debug.Assert(inst != 0); return inst; }

        public edge edge_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, out inst); return new edge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_face : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_face(SdaiInstance instance) : base(instance) { }
        public oriented_face() : base(0) { }

        public static implicit operator oriented_face(SdaiInstance instance) => new oriented_face(instance);

        /// <summary>
        /// Create new instace of oriented_face and returns object of this class to interact with
        /// </summary>
        public static new oriented_face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_face"); Debug.Assert(inst != 0); return inst; }

        public face face_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, out inst); return new face(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_open_shell : open_shell
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_open_shell(SdaiInstance instance) : base(instance) { }
        public oriented_open_shell() : base(0) { }

        public static implicit operator oriented_open_shell(SdaiInstance instance) => new oriented_open_shell(instance);

        /// <summary>
        /// Create new instace of oriented_open_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_open_shell"); Debug.Assert(inst != 0); return inst; }

        public open_shell open_shell_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, out inst); return new open_shell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class path : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public path(SdaiInstance instance) : base(instance) { }
        public path() : base(0) { }

        public static implicit operator path(SdaiInstance instance) => new path(instance);

        /// <summary>
        /// Create new instace of path and returns object of this class to interact with
        /// </summary>
        public static new path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "path"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge edge_list { get { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }

        protected override TextValue WrapperEntityName() { return "path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_path : path
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_path(SdaiInstance instance) : base(instance) { }
        public oriented_path() : base(0) { }

        public static implicit operator oriented_path(SdaiInstance instance) => new oriented_path(instance);

        /// <summary>
        /// Create new instace of oriented_path and returns object of this class to interact with
        /// </summary>
        public static new oriented_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_path"); Debug.Assert(inst != 0); return inst; }

        public path path_element 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, out inst); return new path(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_surface(SdaiInstance instance) : base(instance) { }
        public oriented_surface() : base(0) { }

        public static implicit operator oriented_surface(SdaiInstance instance) => new oriented_surface(instance);

        /// <summary>
        /// Create new instace of oriented_surface and returns object of this class to interact with
        /// </summary>
        public static new oriented_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "oriented_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of outer_boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class outer_boundary_curve : boundary_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of outer_boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public outer_boundary_curve(SdaiInstance instance) : base(instance) { }
        public outer_boundary_curve() : base(0) { }

        public static implicit operator outer_boundary_curve(SdaiInstance instance) => new outer_boundary_curve(instance);

        /// <summary>
        /// Create new instace of outer_boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new outer_boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "outer_boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "outer_boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of package_product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class package_product_concept_feature : product_concept_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of package_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public package_product_concept_feature(SdaiInstance instance) : base(instance) { }
        public package_product_concept_feature() : base(0) { }

        public static implicit operator package_product_concept_feature(SdaiInstance instance) => new package_product_concept_feature(instance);

        /// <summary>
        /// Create new instace of package_product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new package_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "package_product_concept_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "package_product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pair_actuator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pair_actuator : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pair_actuator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pair_actuator(SdaiInstance instance) : base(instance) { }
        public pair_actuator() : base(0) { }

        public static implicit operator pair_actuator(SdaiInstance instance) => new pair_actuator(instance);

        /// <summary>
        /// Create new instace of pair_actuator and returns object of this class to interact with
        /// </summary>
        public static new pair_actuator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pair_actuator"); Debug.Assert(inst != 0); return inst; }

        public kinematic_pair actuated_pair 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actuated_pair", ifcengine.sdaiINSTANCE, out inst); return new kinematic_pair(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actuated_pair", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "pair_actuator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parabola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parabola : conic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parabola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parabola(SdaiInstance instance) : base(instance) { }
        public parabola() : base(0) { }

        public static implicit operator parabola(SdaiInstance instance) => new parabola(instance);

        /// <summary>
        /// Create new instace of parabola and returns object of this class to interact with
        /// </summary>
        public static new parabola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parabola"); Debug.Assert(inst != 0); return inst; }

        public double? focal_dist
            {
            get { return get_double("focal_dist", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "focal_dist", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "parabola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parallel_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parallel_offset : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parallel_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parallel_offset(SdaiInstance instance) : base(instance) { }
        public parallel_offset() : base(0) { }

        public static implicit operator parallel_offset(SdaiInstance instance) => new parallel_offset(instance);

        /// <summary>
        /// Create new instace of parallel_offset and returns object of this class to interact with
        /// </summary>
        public static new parallel_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parallel_offset"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit offset 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "parallel_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parallelism_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parallelism_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parallelism_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parallelism_tolerance(SdaiInstance instance) : base(instance) { }
        public parallelism_tolerance() : base(0) { }

        public static implicit operator parallelism_tolerance(SdaiInstance instance) => new parallelism_tolerance(instance);

        /// <summary>
        /// Create new instace of parallelism_tolerance and returns object of this class to interact with
        /// </summary>
        public static new parallelism_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parallelism_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "parallelism_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parametric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parametric_representation_context : representation_context
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parametric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parametric_representation_context(SdaiInstance instance) : base(instance) { }
        public parametric_representation_context() : base(0) { }

        public static implicit operator parametric_representation_context(SdaiInstance instance) => new parametric_representation_context(instance);

        /// <summary>
        /// Create new instace of parametric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new parametric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parametric_representation_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "parametric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of partial_circular_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class partial_circular_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of partial_circular_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public partial_circular_profile(SdaiInstance instance) : base(instance) { }
        public partial_circular_profile() : base(0) { }

        public static implicit operator partial_circular_profile(SdaiInstance instance) => new partial_circular_profile(instance);

        /// <summary>
        /// Create new instace of partial_circular_profile and returns object of this class to interact with
        /// </summary>
        public static new partial_circular_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "partial_circular_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "partial_circular_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of path_feature_component
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class path_feature_component : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of path_feature_component
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public path_feature_component(SdaiInstance instance) : base(instance) { }
        public path_feature_component() : base(0) { }

        public static implicit operator path_feature_component(SdaiInstance instance) => new path_feature_component(instance);

        /// <summary>
        /// Create new instace of path_feature_component and returns object of this class to interact with
        /// </summary>
        public static new path_feature_component Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "path_feature_component"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "path_feature_component"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of path_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class path_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of path_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public path_shape_representation(SdaiInstance instance) : base(instance) { }
        public path_shape_representation() : base(0) { }

        public static implicit operator path_shape_representation(SdaiInstance instance) => new path_shape_representation(instance);

        /// <summary>
        /// Create new instace of path_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new path_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "path_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "path_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pattern_offset_membership
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pattern_offset_membership : feature_component_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pattern_offset_membership
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pattern_offset_membership(SdaiInstance instance) : base(instance) { }
        public pattern_offset_membership() : base(0) { }

        public static implicit operator pattern_offset_membership(SdaiInstance instance) => new pattern_offset_membership(instance);

        /// <summary>
        /// Create new instace of pattern_offset_membership and returns object of this class to interact with
        /// </summary>
        public static new pattern_offset_membership Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pattern_offset_membership"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pattern_offset_membership"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pattern_omit_membership
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pattern_omit_membership : feature_component_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pattern_omit_membership
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pattern_omit_membership(SdaiInstance instance) : base(instance) { }
        public pattern_omit_membership() : base(0) { }

        public static implicit operator pattern_omit_membership(SdaiInstance instance) => new pattern_omit_membership(instance);

        /// <summary>
        /// Create new instace of pattern_omit_membership and returns object of this class to interact with
        /// </summary>
        public static new pattern_omit_membership Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pattern_omit_membership"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pattern_omit_membership"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of perpendicular_to
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class perpendicular_to : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of perpendicular_to
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public perpendicular_to(SdaiInstance instance) : base(instance) { }
        public perpendicular_to() : base(0) { }

        public static implicit operator perpendicular_to(SdaiInstance instance) => new perpendicular_to(instance);

        /// <summary>
        /// Create new instace of perpendicular_to and returns object of this class to interact with
        /// </summary>
        public static new perpendicular_to Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "perpendicular_to"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "perpendicular_to"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of perpendicularity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class perpendicularity_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of perpendicularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public perpendicularity_tolerance(SdaiInstance instance) : base(instance) { }
        public perpendicularity_tolerance() : base(0) { }

        public static implicit operator perpendicularity_tolerance(SdaiInstance instance) => new perpendicularity_tolerance(instance);

        /// <summary>
        /// Create new instace of perpendicularity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new perpendicularity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "perpendicularity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "perpendicularity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person(SdaiInstance instance) : base(instance) { }
        public person() : base(0) { }

        public static implicit operator person(SdaiInstance instance) => new person(instance);

        /// <summary>
        /// Create new instace of person and returns object of this class to interact with
        /// </summary>
        public static new person Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue last_name
            {
            get { return get_string("last_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "last_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue first_name
            {
            get { return get_string("first_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "first_name", ifcengine.sdaiSTRING, value); }
            }
        public list_of_label middle_names { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "middle_names"); } }
        public void put_middle_names(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        public void put_middle_names_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        public list_of_label prefix_titles { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "prefix_titles"); } }
        public void put_prefix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        public void put_prefix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        public list_of_label suffix_titles { get { return (new list_of_labelSerializer()).FromAttr(m_instance, "suffix_titles"); } }
        public void put_suffix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }
        public void put_suffix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }

        protected override TextValue WrapperEntityName() { return "person"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization(SdaiInstance instance) : base(instance) { }
        public person_and_organization() : base(0) { }

        public static implicit operator person_and_organization(SdaiInstance instance) => new person_and_organization(instance);

        /// <summary>
        /// Create new instace of person_and_organization and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization"); Debug.Assert(inst != 0); return inst; }

        public person the_person 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, out inst); return new person(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, i); }
            }
        public organization the_organization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, out inst); return new organization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "person_and_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_address : organizational_address
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_address(SdaiInstance instance) : base(instance) { }
        public person_and_organization_address() : base(0) { }

        public static implicit operator person_and_organization_address(SdaiInstance instance) => new person_and_organization_address(instance);

        /// <summary>
        /// Create new instace of person_and_organization_address and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_person people { get { return (new set_of_personSerializer()).FromAttr(m_instance, "people"); } }
        public void put_people(IEnumerable<person> lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public void put_people_untyped(IEnumerable lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }

        protected override TextValue WrapperEntityName() { return "person_and_organization_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_role(SdaiInstance instance) : base(instance) { }
        public person_and_organization_role() : base(0) { }

        public static implicit operator person_and_organization_role(SdaiInstance instance) => new person_and_organization_role(instance);

        /// <summary>
        /// Create new instace of person_and_organization_role and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description { get { return get_string("description", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "person_and_organization_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of personal_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class personal_address : address
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of personal_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public personal_address(SdaiInstance instance) : base(instance) { }
        public personal_address() : base(0) { }

        public static implicit operator personal_address(SdaiInstance instance) => new personal_address(instance);

        /// <summary>
        /// Create new instace of personal_address and returns object of this class to interact with
        /// </summary>
        public static new personal_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "personal_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_person people { get { return (new set_of_personSerializer()).FromAttr(m_instance, "people"); } }
        public void put_people(IEnumerable<person> lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public void put_people_untyped(IEnumerable lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "personal_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition(SdaiInstance instance) : base(instance) { }
        public product_definition() : base(0) { }

        public static implicit operator product_definition(SdaiInstance instance) => new product_definition(instance);

        /// <summary>
        /// Create new instace of product_definition and returns object of this class to interact with
        /// </summary>
        public static new product_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition_formation formation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_context frame_of_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "product_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_with_associated_documents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_with_associated_documents : product_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_with_associated_documents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_with_associated_documents(SdaiInstance instance) : base(instance) { }
        public product_definition_with_associated_documents() : base(0) { }

        public static implicit operator product_definition_with_associated_documents(SdaiInstance instance) => new product_definition_with_associated_documents(instance);

        /// <summary>
        /// Create new instace of product_definition_with_associated_documents and returns object of this class to interact with
        /// </summary>
        public static new product_definition_with_associated_documents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_with_associated_documents"); Debug.Assert(inst != 0); return inst; }

        public set_of_document documentation_ids { get { return (new set_of_documentSerializer()).FromAttr(m_instance, "documentation_ids"); } }
        public void put_documentation_ids(IEnumerable<document> lst) { (new set_of_documentSerializer()).ToSdaiAggr(lst, m_instance, "documentation_ids"); }
        public void put_documentation_ids_untyped(IEnumerable lst) { (new set_of_documentSerializer()).ToSdaiAggr(lst, m_instance, "documentation_ids"); }

        protected override TextValue WrapperEntityName() { return "product_definition_with_associated_documents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physically_modelled_product_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physically_modelled_product_definition : product_definition_with_associated_documents
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physically_modelled_product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physically_modelled_product_definition(SdaiInstance instance) : base(instance) { }
        public physically_modelled_product_definition() : base(0) { }

        public static implicit operator physically_modelled_product_definition(SdaiInstance instance) => new physically_modelled_product_definition(instance);

        /// <summary>
        /// Create new instace of physically_modelled_product_definition and returns object of this class to interact with
        /// </summary>
        public static new physically_modelled_product_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physically_modelled_product_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "physically_modelled_product_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placed_datum_target_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placed_datum_target_feature : datum_target
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placed_datum_target_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placed_datum_target_feature(SdaiInstance instance) : base(instance) { }
        public placed_datum_target_feature() : base(0) { }

        public static implicit operator placed_datum_target_feature(SdaiInstance instance) => new placed_datum_target_feature(instance);

        /// <summary>
        /// Create new instace of placed_datum_target_feature and returns object of this class to interact with
        /// </summary>
        public static new placed_datum_target_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placed_datum_target_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "placed_datum_target_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placed_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placed_feature : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placed_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placed_feature(SdaiInstance instance) : base(instance) { }
        public placed_feature() : base(0) { }

        public static implicit operator placed_feature(SdaiInstance instance) => new placed_feature(instance);

        /// <summary>
        /// Create new instace of placed_feature and returns object of this class to interact with
        /// </summary>
        public static new placed_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placed_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "placed_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_extent : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_extent(SdaiInstance instance) : base(instance) { }
        public planar_extent() : base(0) { }

        public static implicit operator planar_extent(SdaiInstance instance) => new planar_extent(instance);

        /// <summary>
        /// Create new instace of planar_extent and returns object of this class to interact with
        /// </summary>
        public static new planar_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_extent"); Debug.Assert(inst != 0); return inst; }

        public double? size_in_x
            {
            get { return get_double("size_in_x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "size_in_x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? size_in_y
            {
            get { return get_double("size_in_y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "size_in_y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "planar_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_box : planar_extent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_box(SdaiInstance instance) : base(instance) { }
        public planar_box() : base(0) { }

        public static implicit operator planar_box(SdaiInstance instance) => new planar_box(instance);

        /// <summary>
        /// Create new instace of planar_box and returns object of this class to interact with
        /// </summary>
        public static new planar_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_box"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement placement
            {
            get { return new axis2_placement(m_instance, "placement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "planar_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_curve_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_curve_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_curve_pair(SdaiInstance instance) : base(instance) { }
        public planar_curve_pair() : base(0) { }

        public static implicit operator planar_curve_pair(SdaiInstance instance) => new planar_curve_pair(instance);

        /// <summary>
        /// Create new instace of planar_curve_pair and returns object of this class to interact with
        /// </summary>
        public static new planar_curve_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_curve_pair"); Debug.Assert(inst != 0); return inst; }

        public curve curve_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_1", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_1", ifcengine.sdaiINSTANCE, i); }
            }
        public curve curve_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_2", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_2", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "planar_curve_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_curve_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_curve_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_curve_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_curve_pair_range(SdaiInstance instance) : base(instance) { }
        public planar_curve_pair_range() : base(0) { }

        public static implicit operator planar_curve_pair_range(SdaiInstance instance) => new planar_curve_pair_range(instance);

        /// <summary>
        /// Create new instace of planar_curve_pair_range and returns object of this class to interact with
        /// </summary>
        public static new planar_curve_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_curve_pair_range"); Debug.Assert(inst != 0); return inst; }

        public trimmed_curve range_on_curve_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_curve_1", ifcengine.sdaiINSTANCE, out inst); return new trimmed_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_curve_1", ifcengine.sdaiINSTANCE, i); }
            }
        public trimmed_curve range_on_curve_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_curve_2", ifcengine.sdaiINSTANCE, out inst); return new trimmed_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_curve_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "planar_curve_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_pair(SdaiInstance instance) : base(instance) { }
        public planar_pair() : base(0) { }

        public static implicit operator planar_pair(SdaiInstance instance) => new planar_pair(instance);

        /// <summary>
        /// Create new instace of planar_pair and returns object of this class to interact with
        /// </summary>
        public static new planar_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "planar_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_pair_range(SdaiInstance instance) : base(instance) { }
        public planar_pair_range() : base(0) { }

        public static implicit operator planar_pair_range(SdaiInstance instance) => new planar_pair_range(instance);

        /// <summary>
        /// Create new instace of planar_pair_range and returns object of this class to interact with
        /// </summary>
        public static new planar_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation", 0); }
            }

        public translational_range_measure lower_limit_actual_translation_x
            {
            get { return new translational_range_measure(m_instance, "lower_limit_actual_translation_x", 0); }
            }

        public translational_range_measure upper_limit_actual_translation_x
            {
            get { return new translational_range_measure(m_instance, "upper_limit_actual_translation_x", 0); }
            }

        public translational_range_measure lower_limit_actual_translation_y
            {
            get { return new translational_range_measure(m_instance, "lower_limit_actual_translation_y", 0); }
            }

        public translational_range_measure upper_limit_actual_translation_y
            {
            get { return new translational_range_measure(m_instance, "upper_limit_actual_translation_y", 0); }
            }

        protected override TextValue WrapperEntityName() { return "planar_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_pair_value(SdaiInstance instance) : base(instance) { }
        public planar_pair_value() : base(0) { }

        public static implicit operator planar_pair_value(SdaiInstance instance) => new planar_pair_value(instance);

        /// <summary>
        /// Create new instace of planar_pair_value and returns object of this class to interact with
        /// </summary>
        public static new planar_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_translation_x
            {
            get { return get_double("actual_translation_x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_translation_x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_translation_y
            {
            get { return get_double("actual_translation_y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_translation_y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "planar_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_shape_representation(SdaiInstance instance) : base(instance) { }
        public planar_shape_representation() : base(0) { }

        public static implicit operator planar_shape_representation(SdaiInstance instance) => new planar_shape_representation(instance);

        /// <summary>
        /// Create new instace of planar_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new planar_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "planar_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane(SdaiInstance instance) : base(instance) { }
        public plane() : base(0) { }

        public static implicit operator plane(SdaiInstance instance) => new plane(instance);

        /// <summary>
        /// Create new instace of plane and returns object of this class to interact with
        /// </summary>
        public static new plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_measure_with_unit() : base(0) { }

        public static implicit operator plane_angle_measure_with_unit(SdaiInstance instance) => new plane_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_unit() : base(0) { }

        public static implicit operator plane_angle_unit(SdaiInstance instance) => new plane_angle_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plane_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plus_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plus_expression : multiple_arity_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plus_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plus_expression(SdaiInstance instance) : base(instance) { }
        public plus_expression() : base(0) { }

        public static implicit operator plus_expression(SdaiInstance instance) => new plus_expression(instance);

        /// <summary>
        /// Create new instace of plus_expression and returns object of this class to interact with
        /// </summary>
        public static new plus_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plus_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "plus_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plus_minus_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plus_minus_tolerance : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plus_minus_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plus_minus_tolerance(SdaiInstance instance) : base(instance) { }
        public plus_minus_tolerance() : base(0) { }

        public static implicit operator plus_minus_tolerance(SdaiInstance instance) => new plus_minus_tolerance(instance);

        /// <summary>
        /// Create new instace of plus_minus_tolerance and returns object of this class to interact with
        /// </summary>
        public static new plus_minus_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plus_minus_tolerance"); Debug.Assert(inst != 0); return inst; }


        public tolerance_method_definition range
            {
            get { return new tolerance_method_definition(m_instance, "range", 0); }
            }

        public dimensional_characteristic toleranced_dimension
            {
            get { return new dimensional_characteristic(m_instance, "toleranced_dimension", 0); }
            }

        protected override TextValue WrapperEntityName() { return "plus_minus_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pocket
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pocket : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pocket(SdaiInstance instance) : base(instance) { }
        public pocket() : base(0) { }

        public static implicit operator pocket(SdaiInstance instance) => new pocket(instance);

        /// <summary>
        /// Create new instace of pocket and returns object of this class to interact with
        /// </summary>
        public static new pocket Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pocket"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pocket"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pocket_bottom
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pocket_bottom : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pocket_bottom
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pocket_bottom(SdaiInstance instance) : base(instance) { }
        public pocket_bottom() : base(0) { }

        public static implicit operator pocket_bottom(SdaiInstance instance) => new pocket_bottom(instance);

        /// <summary>
        /// Create new instace of pocket_bottom and returns object of this class to interact with
        /// </summary>
        public static new pocket_bottom Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pocket_bottom"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pocket_bottom"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_curve : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_curve(SdaiInstance instance) : base(instance) { }
        public point_on_curve() : base(0) { }

        public static implicit operator point_on_curve(SdaiInstance instance) => new point_on_curve(instance);

        /// <summary>
        /// Create new instace of point_on_curve and returns object of this class to interact with
        /// </summary>
        public static new point_on_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_curve"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? point_parameter
            {
            get { return get_double("point_parameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_planar_curve_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_planar_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_planar_curve_pair(SdaiInstance instance) : base(instance) { }
        public point_on_planar_curve_pair() : base(0) { }

        public static implicit operator point_on_planar_curve_pair(SdaiInstance instance) => new point_on_planar_curve_pair(instance);

        /// <summary>
        /// Create new instace of point_on_planar_curve_pair and returns object of this class to interact with
        /// </summary>
        public static new point_on_planar_curve_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_planar_curve_pair"); Debug.Assert(inst != 0); return inst; }

        public curve pair_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pair_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pair_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_planar_curve_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_planar_curve_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_planar_curve_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_planar_curve_pair_range(SdaiInstance instance) : base(instance) { }
        public point_on_planar_curve_pair_range() : base(0) { }

        public static implicit operator point_on_planar_curve_pair_range(SdaiInstance instance) => new point_on_planar_curve_pair_range(instance);

        /// <summary>
        /// Create new instace of point_on_planar_curve_pair_range and returns object of this class to interact with
        /// </summary>
        public static new point_on_planar_curve_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_planar_curve_pair_range"); Debug.Assert(inst != 0); return inst; }

        public trimmed_curve range_on_pair_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_pair_curve", ifcengine.sdaiINSTANCE, out inst); return new trimmed_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_pair_curve", ifcengine.sdaiINSTANCE, i); }
            }

        public rotational_range_measure lower_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_yaw", 0); }
            }

        public rotational_range_measure upper_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_yaw", 0); }
            }

        public rotational_range_measure lower_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_pitch", 0); }
            }

        public rotational_range_measure upper_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_pitch", 0); }
            }

        public rotational_range_measure lower_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_roll", 0); }
            }

        public rotational_range_measure upper_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_roll", 0); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_planar_curve_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_planar_curve_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_planar_curve_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_planar_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_planar_curve_pair_value(SdaiInstance instance) : base(instance) { }
        public point_on_planar_curve_pair_value() : base(0) { }

        public static implicit operator point_on_planar_curve_pair_value(SdaiInstance instance) => new point_on_planar_curve_pair_value(instance);

        /// <summary>
        /// Create new instace of point_on_planar_curve_pair_value and returns object of this class to interact with
        /// </summary>
        public static new point_on_planar_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_planar_curve_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_curve actual_point_on_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_curve", ifcengine.sdaiINSTANCE, out inst); return new point_on_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_curve", ifcengine.sdaiINSTANCE, i); }
            }

        public spatial_rotation input_orientation
            {
            get { return new spatial_rotation(m_instance, "input_orientation", 0); }
            }
        public ypr_rotation actual_orientation { get { return (new ypr_rotationSerializer()).FromAttr(m_instance, "actual_orientation"); } }

        protected override TextValue WrapperEntityName() { return "point_on_planar_curve_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface(SdaiInstance instance) : base(instance) { }
        public point_on_surface() : base(0) { }

        public static implicit operator point_on_surface(SdaiInstance instance) => new point_on_surface(instance);

        /// <summary>
        /// Create new instace of point_on_surface and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? point_parameter_u
            {
            get { return get_double("point_parameter_u", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_u", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? point_parameter_v
            {
            get { return get_double("point_parameter_v", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_v", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface_pair(SdaiInstance instance) : base(instance) { }
        public point_on_surface_pair() : base(0) { }

        public static implicit operator point_on_surface_pair(SdaiInstance instance) => new point_on_surface_pair(instance);

        /// <summary>
        /// Create new instace of point_on_surface_pair and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface_pair"); Debug.Assert(inst != 0); return inst; }

        public surface pair_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pair_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pair_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_surface_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface_pair_range(SdaiInstance instance) : base(instance) { }
        public point_on_surface_pair_range() : base(0) { }

        public static implicit operator point_on_surface_pair_range(SdaiInstance instance) => new point_on_surface_pair_range(instance);

        /// <summary>
        /// Create new instace of point_on_surface_pair_range and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface_pair_range"); Debug.Assert(inst != 0); return inst; }

        public rectangular_trimmed_surface range_on_pair_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_pair_surface", ifcengine.sdaiINSTANCE, out inst); return new rectangular_trimmed_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_pair_surface", ifcengine.sdaiINSTANCE, i); }
            }

        public rotational_range_measure lower_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_yaw", 0); }
            }

        public rotational_range_measure upper_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_yaw", 0); }
            }

        public rotational_range_measure lower_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_pitch", 0); }
            }

        public rotational_range_measure upper_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_pitch", 0); }
            }

        public rotational_range_measure lower_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_roll", 0); }
            }

        public rotational_range_measure upper_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_roll", 0); }
            }

        protected override TextValue WrapperEntityName() { return "point_on_surface_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface_pair_value(SdaiInstance instance) : base(instance) { }
        public point_on_surface_pair_value() : base(0) { }

        public static implicit operator point_on_surface_pair_value(SdaiInstance instance) => new point_on_surface_pair_value(instance);

        /// <summary>
        /// Create new instace of point_on_surface_pair_value and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_surface actual_point_on_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_surface", ifcengine.sdaiINSTANCE, out inst); return new point_on_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_surface", ifcengine.sdaiINSTANCE, i); }
            }

        public spatial_rotation input_orientation
            {
            get { return new spatial_rotation(m_instance, "input_orientation", 0); }
            }
        public ypr_rotation actual_orientation { get { return (new ypr_rotationSerializer()).FromAttr(m_instance, "actual_orientation"); } }

        protected override TextValue WrapperEntityName() { return "point_on_surface_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_placement_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_placement_shape_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_placement_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_placement_shape_representation(SdaiInstance instance) : base(instance) { }
        public point_placement_shape_representation() : base(0) { }

        public static implicit operator point_placement_shape_representation(SdaiInstance instance) => new point_placement_shape_representation(instance);

        /// <summary>
        /// Create new instace of point_placement_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new point_placement_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_placement_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "point_placement_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_replica : point
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_replica(SdaiInstance instance) : base(instance) { }
        public point_replica() : base(0) { }

        public static implicit operator point_replica(SdaiInstance instance) => new point_replica(instance);

        /// <summary>
        /// Create new instace of point_replica and returns object of this class to interact with
        /// </summary>
        public static new point_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_replica"); Debug.Assert(inst != 0); return inst; }

        public point parent_pt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "point_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_style(SdaiInstance instance) : base(instance) { }
        public point_style() : base(0) { }

        public static implicit operator point_style(SdaiInstance instance) => new point_style(instance);

        /// <summary>
        /// Create new instace of point_style and returns object of this class to interact with
        /// </summary>
        public static new point_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        public marker_select marker
            {
            get { return new marker_select(m_instance, "marker", 0); }
            }

        public size_select marker_size
            {
            get { return new size_select(m_instance, "marker_size", 0); }
            }
        public colour marker_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "marker_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "marker_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "point_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of poly_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class poly_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of poly_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public poly_loop(SdaiInstance instance) : base(instance) { }
        public poly_loop() : base(0) { }

        public static implicit operator poly_loop(SdaiInstance instance) => new poly_loop(instance);

        /// <summary>
        /// Create new instace of poly_loop and returns object of this class to interact with
        /// </summary>
        public static new poly_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "poly_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point polygon { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "polygon"); } }
        public void put_polygon(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }
        public void put_polygon_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "poly_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polyline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polyline : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polyline(SdaiInstance instance) : base(instance) { }
        public polyline() : base(0) { }

        public static implicit operator polyline(SdaiInstance instance) => new polyline(instance);

        /// <summary>
        /// Create new instace of polyline and returns object of this class to interact with
        /// </summary>
        public static new polyline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polyline"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point points { get { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "points"); } }
        public void put_points(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }
        public void put_points_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }

        protected override TextValue WrapperEntityName() { return "polyline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of position_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class position_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of position_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public position_tolerance(SdaiInstance instance) : base(instance) { }
        public position_tolerance() : base(0) { }

        public static implicit operator position_tolerance(SdaiInstance instance) => new position_tolerance(instance);

        /// <summary>
        /// Create new instace of position_tolerance and returns object of this class to interact with
        /// </summary>
        public static new position_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "position_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "position_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of power_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class power_expression : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of power_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public power_expression(SdaiInstance instance) : base(instance) { }
        public power_expression() : base(0) { }

        public static implicit operator power_expression(SdaiInstance instance) => new power_expression(instance);

        /// <summary>
        /// Create new instace of power_expression and returns object of this class to interact with
        /// </summary>
        public static new power_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "power_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "power_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_symbol : pre_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_symbol() : base(0) { }

        public static implicit operator pre_defined_symbol(SdaiInstance instance) => new pre_defined_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_dimension_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_dimension_symbol : pre_defined_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_dimension_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_dimension_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_dimension_symbol() : base(0) { }

        public static implicit operator pre_defined_dimension_symbol(SdaiInstance instance) => new pre_defined_dimension_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_dimension_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_dimension_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_dimension_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_dimension_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_geometrical_tolerance_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_geometrical_tolerance_symbol : pre_defined_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_geometrical_tolerance_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_geometrical_tolerance_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_geometrical_tolerance_symbol() : base(0) { }

        public static implicit operator pre_defined_geometrical_tolerance_symbol(SdaiInstance instance) => new pre_defined_geometrical_tolerance_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_geometrical_tolerance_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_geometrical_tolerance_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_geometrical_tolerance_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_geometrical_tolerance_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_marker
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_marker : pre_defined_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_marker(SdaiInstance instance) : base(instance) { }
        public pre_defined_marker() : base(0) { }

        public static implicit operator pre_defined_marker(SdaiInstance instance) => new pre_defined_marker(instance);

        /// <summary>
        /// Create new instace of pre_defined_marker and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_marker Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_marker"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_marker"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_point_marker_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_point_marker_symbol : pre_defined_marker
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_point_marker_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_point_marker_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_point_marker_symbol() : base(0) { }

        public static implicit operator pre_defined_point_marker_symbol(SdaiInstance instance) => new pre_defined_point_marker_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_point_marker_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_point_marker_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_point_marker_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_point_marker_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_presentation_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_presentation_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_presentation_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_presentation_style(SdaiInstance instance) : base(instance) { }
        public pre_defined_presentation_style() : base(0) { }

        public static implicit operator pre_defined_presentation_style(SdaiInstance instance) => new pre_defined_presentation_style(instance);

        /// <summary>
        /// Create new instace of pre_defined_presentation_style and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_presentation_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_presentation_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "pre_defined_presentation_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_surface_condition_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_surface_condition_symbol : pre_defined_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_surface_condition_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_surface_condition_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_surface_condition_symbol() : base(0) { }

        public static implicit operator pre_defined_surface_condition_symbol(SdaiInstance instance) => new pre_defined_surface_condition_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_surface_condition_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_surface_condition_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_surface_condition_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_surface_condition_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_terminator_symbol : pre_defined_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_terminator_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_terminator_symbol() : base(0) { }

        public static implicit operator pre_defined_terminator_symbol(SdaiInstance instance) => new pre_defined_terminator_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_terminator_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "pre_defined_terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of precision_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class precision_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of precision_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public precision_qualifier(SdaiInstance instance) : base(instance) { }
        public precision_qualifier() : base(0) { }

        public static implicit operator precision_qualifier(SdaiInstance instance) => new precision_qualifier(instance);

        /// <summary>
        /// Create new instace of precision_qualifier and returns object of this class to interact with
        /// </summary>
        public static new precision_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "precision_qualifier"); Debug.Assert(inst != 0); return inst; }

        public IntValue? precision_value
            {
            get { return get_IntValue("precision_value", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "precision_value", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "precision_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_layer_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_layer_assignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_layer_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_layer_assignment(SdaiInstance instance) : base(instance) { }
        public presentation_layer_assignment() : base(0) { }

        public static implicit operator presentation_layer_assignment(SdaiInstance instance) => new presentation_layer_assignment(instance);

        /// <summary>
        /// Create new instace of presentation_layer_assignment and returns object of this class to interact with
        /// </summary>
        public static new presentation_layer_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_layer_assignment"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_layered_item assigned_items { get { return (new set_of_layered_itemSerializer()).FromAttr(m_instance, "assigned_items"); } }
        public void put_assigned_items(IEnumerable<layered_item> lst) { (new set_of_layered_itemSerializer()).ToSdaiAggr(lst, m_instance, "assigned_items"); }
        public void put_assigned_items_untyped(IEnumerable lst) { (new set_of_layered_itemSerializer()).ToSdaiAggr(lst, m_instance, "assigned_items"); }

        protected override TextValue WrapperEntityName() { return "presentation_layer_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_size : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_size(SdaiInstance instance) : base(instance) { }
        public presentation_size() : base(0) { }

        public static implicit operator presentation_size(SdaiInstance instance) => new presentation_size(instance);

        /// <summary>
        /// Create new instace of presentation_size and returns object of this class to interact with
        /// </summary>
        public static new presentation_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_size"); Debug.Assert(inst != 0); return inst; }


        public presentation_size_assignment_select unit
            {
            get { return new presentation_size_assignment_select(m_instance, "unit", 0); }
            }
        public planar_box size 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "size", ifcengine.sdaiINSTANCE, out inst); return new planar_box(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "size", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "presentation_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_style_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_style_assignment : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_style_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_style_assignment(SdaiInstance instance) : base(instance) { }
        public presentation_style_assignment() : base(0) { }

        public static implicit operator presentation_style_assignment(SdaiInstance instance) => new presentation_style_assignment(instance);

        /// <summary>
        /// Create new instace of presentation_style_assignment and returns object of this class to interact with
        /// </summary>
        public static new presentation_style_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_style_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_presentation_style_select styles { get { return (new set_of_presentation_style_selectSerializer()).FromAttr(m_instance, "styles"); } }
        public void put_styles(IEnumerable<presentation_style_select> lst) { (new set_of_presentation_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        public void put_styles_untyped(IEnumerable lst) { (new set_of_presentation_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }

        protected override TextValue WrapperEntityName() { return "presentation_style_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_style_by_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_style_by_context : presentation_style_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_style_by_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_style_by_context(SdaiInstance instance) : base(instance) { }
        public presentation_style_by_context() : base(0) { }

        public static implicit operator presentation_style_by_context(SdaiInstance instance) => new presentation_style_by_context(instance);

        /// <summary>
        /// Create new instace of presentation_style_by_context and returns object of this class to interact with
        /// </summary>
        public static new presentation_style_by_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_style_by_context"); Debug.Assert(inst != 0); return inst; }


        public style_context_select style_context
            {
            get { return new style_context_select(m_instance, "style_context", 0); }
            }

        protected override TextValue WrapperEntityName() { return "presentation_style_by_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_view
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_view : presentation_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_view
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_view(SdaiInstance instance) : base(instance) { }
        public presentation_view() : base(0) { }

        public static implicit operator presentation_view(SdaiInstance instance) => new presentation_view(instance);

        /// <summary>
        /// Create new instace of presentation_view and returns object of this class to interact with
        /// </summary>
        public static new presentation_view Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_view"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "presentation_view"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presented_item_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presented_item_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presented_item_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presented_item_representation(SdaiInstance instance) : base(instance) { }
        public presented_item_representation() : base(0) { }

        public static implicit operator presented_item_representation(SdaiInstance instance) => new presented_item_representation(instance);

        /// <summary>
        /// Create new instace of presented_item_representation and returns object of this class to interact with
        /// </summary>
        public static new presented_item_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presented_item_representation"); Debug.Assert(inst != 0); return inst; }


        public presentation_representation_select presentation
            {
            get { return new presentation_representation_select(m_instance, "presentation", 0); }
            }
        public presented_item item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, out inst); return new presented_item(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "presented_item_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of prismatic_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class prismatic_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of prismatic_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public prismatic_pair(SdaiInstance instance) : base(instance) { }
        public prismatic_pair() : base(0) { }

        public static implicit operator prismatic_pair(SdaiInstance instance) => new prismatic_pair(instance);

        /// <summary>
        /// Create new instace of prismatic_pair and returns object of this class to interact with
        /// </summary>
        public static new prismatic_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "prismatic_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "prismatic_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of prismatic_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class prismatic_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of prismatic_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public prismatic_pair_range(SdaiInstance instance) : base(instance) { }
        public prismatic_pair_range() : base(0) { }

        public static implicit operator prismatic_pair_range(SdaiInstance instance) => new prismatic_pair_range(instance);

        /// <summary>
        /// Create new instace of prismatic_pair_range and returns object of this class to interact with
        /// </summary>
        public static new prismatic_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "prismatic_pair_range"); Debug.Assert(inst != 0); return inst; }


        public translational_range_measure lower_limit_actual_translation
            {
            get { return new translational_range_measure(m_instance, "lower_limit_actual_translation", 0); }
            }

        public translational_range_measure upper_limit_actual_translation
            {
            get { return new translational_range_measure(m_instance, "upper_limit_actual_translation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "prismatic_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of prismatic_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class prismatic_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of prismatic_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public prismatic_pair_value(SdaiInstance instance) : base(instance) { }
        public prismatic_pair_value() : base(0) { }

        public static implicit operator prismatic_pair_value(SdaiInstance instance) => new prismatic_pair_value(instance);

        /// <summary>
        /// Create new instace of prismatic_pair_value and returns object of this class to interact with
        /// </summary>
        public static new prismatic_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "prismatic_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_translation
            {
            get { return get_double("actual_translation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_translation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "prismatic_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of process_operation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class process_operation : action_method
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of process_operation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public process_operation(SdaiInstance instance) : base(instance) { }
        public process_operation() : base(0) { }

        public static implicit operator process_operation(SdaiInstance instance) => new process_operation(instance);

        /// <summary>
        /// Create new instace of process_operation and returns object of this class to interact with
        /// </summary>
        public static new process_operation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "process_operation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "process_operation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of process_plan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class process_plan : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of process_plan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public process_plan(SdaiInstance instance) : base(instance) { }
        public process_plan() : base(0) { }

        public static implicit operator process_plan(SdaiInstance instance) => new process_plan(instance);

        /// <summary>
        /// Create new instace of process_plan and returns object of this class to interact with
        /// </summary>
        public static new process_plan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "process_plan"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "process_plan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of process_product_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class process_product_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of process_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public process_product_association(SdaiInstance instance) : base(instance) { }
        public process_product_association() : base(0) { }

        public static implicit operator process_product_association(SdaiInstance instance) => new process_product_association(instance);

        /// <summary>
        /// Create new instace of process_product_association and returns object of this class to interact with
        /// </summary>
        public static new process_product_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "process_product_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public characterized_product_definition defined_product
            {
            get { return new characterized_product_definition(m_instance, "defined_product", 0); }
            }
        public product_definition_process process 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "process", ifcengine.sdaiINSTANCE, out inst); return new product_definition_process(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "process", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "process_product_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of process_property_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class process_property_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of process_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public process_property_association(SdaiInstance instance) : base(instance) { }
        public process_property_association() : base(0) { }

        public static implicit operator process_property_association(SdaiInstance instance) => new process_property_association(instance);

        /// <summary>
        /// Create new instace of process_property_association and returns object of this class to interact with
        /// </summary>
        public static new process_property_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "process_property_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public property_process process 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "process", ifcengine.sdaiINSTANCE, out inst); return new property_process(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "process", ifcengine.sdaiINSTANCE, i); }
            }

        public property_or_shape_select property_or_shape
            {
            get { return new property_or_shape_select(m_instance, "property_or_shape", 0); }
            }

        protected override TextValue WrapperEntityName() { return "process_property_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product(SdaiInstance instance) : base(instance) { }
        public product() : base(0) { }

        public static implicit operator product(SdaiInstance instance) => new product(instance);

        /// <summary>
        /// Create new instace of product and returns object of this class to interact with
        /// </summary>
        public static new product Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public set_of_product_context frame_of_reference { get { return (new set_of_product_contextSerializer()).FromAttr(m_instance, "frame_of_reference"); } }
        public void put_frame_of_reference(IEnumerable<product_context> lst) { (new set_of_product_contextSerializer()).ToSdaiAggr(lst, m_instance, "frame_of_reference"); }
        public void put_frame_of_reference_untyped(IEnumerable lst) { (new set_of_product_contextSerializer()).ToSdaiAggr(lst, m_instance, "frame_of_reference"); }

        protected override TextValue WrapperEntityName() { return "product"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_category : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_category(SdaiInstance instance) : base(instance) { }
        public product_category() : base(0) { }

        public static implicit operator product_category(SdaiInstance instance) => new product_category(instance);

        /// <summary>
        /// Create new instace of product_category and returns object of this class to interact with
        /// </summary>
        public static new product_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_category"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue id { get { return get_string("id", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "product_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_category_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_category_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_category_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_category_relationship(SdaiInstance instance) : base(instance) { }
        public product_category_relationship() : base(0) { }

        public static implicit operator product_category_relationship(SdaiInstance instance) => new product_category_relationship(instance);

        /// <summary>
        /// Create new instace of product_category_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_category_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_category_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_category category 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "category", ifcengine.sdaiINSTANCE, out inst); return new product_category(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "category", ifcengine.sdaiINSTANCE, i); }
            }
        public product_category sub_category 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "sub_category", ifcengine.sdaiINSTANCE, out inst); return new product_category(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "sub_category", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_category_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept(SdaiInstance instance) : base(instance) { }
        public product_concept() : base(0) { }

        public static implicit operator product_concept(SdaiInstance instance) => new product_concept(instance);

        /// <summary>
        /// Create new instace of product_concept and returns object of this class to interact with
        /// </summary>
        public static new product_concept Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_concept_context market_context 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "market_context", ifcengine.sdaiINSTANCE, out inst); return new product_concept_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "market_context", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_concept"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_class : product_concept
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_class(SdaiInstance instance) : base(instance) { }
        public product_class() : base(0) { }

        public static implicit operator product_class(SdaiInstance instance) => new product_class(instance);

        /// <summary>
        /// Create new instace of product_class and returns object of this class to interact with
        /// </summary>
        public static new product_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_class"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_context : application_context_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_context(SdaiInstance instance) : base(instance) { }
        public product_concept_context() : base(0) { }

        public static implicit operator product_concept_context(SdaiInstance instance) => new product_concept_context(instance);

        /// <summary>
        /// Create new instace of product_concept_context and returns object of this class to interact with
        /// </summary>
        public static new product_concept_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue market_segment_type
            {
            get { return get_string("market_segment_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "market_segment_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "product_concept_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_association(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_association() : base(0) { }

        public static implicit operator product_concept_feature_association(SdaiInstance instance) => new product_concept_feature_association(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_association and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_concept concept 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "concept", ifcengine.sdaiINSTANCE, i); }
            }
        public product_concept_feature feature 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "feature", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_concept_feature_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_category_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_category_usage : group_assignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_category_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_category_usage(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_category_usage() : base(0) { }

        public static implicit operator product_concept_feature_category_usage(SdaiInstance instance) => new product_concept_feature_category_usage(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_category_usage and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_category_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_category_usage"); Debug.Assert(inst != 0); return inst; }

        public set_of_category_usage_item items { get { return (new set_of_category_usage_itemSerializer()).FromAttr(m_instance, "items"); } }
        public void put_items(IEnumerable<category_usage_item> lst) { (new set_of_category_usage_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public void put_items_untyped(IEnumerable lst) { (new set_of_category_usage_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue WrapperEntityName() { return "product_concept_feature_category_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_relationship(SdaiInstance instance) : base(instance) { }
        public product_concept_relationship() : base(0) { }

        public static implicit operator product_concept_relationship(SdaiInstance instance) => new product_concept_relationship(instance);

        /// <summary>
        /// Create new instace of product_concept_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_concept_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_concept relating_product_concept 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_concept", ifcengine.sdaiINSTANCE, i); }
            }
        public product_concept related_product_concept 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_product_concept", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_concept_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_context : application_context_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_context(SdaiInstance instance) : base(instance) { }
        public product_context() : base(0) { }

        public static implicit operator product_context(SdaiInstance instance) => new product_context(instance);

        /// <summary>
        /// Create new instace of product_context and returns object of this class to interact with
        /// </summary>
        public static new product_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue discipline_type
            {
            get { return get_string("discipline_type", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "discipline_type", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "product_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context : application_context_element
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context(SdaiInstance instance) : base(instance) { }
        public product_definition_context() : base(0) { }

        public static implicit operator product_definition_context(SdaiInstance instance) => new product_definition_context(instance);

        /// <summary>
        /// Create new instace of product_definition_context and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue life_cycle_stage
            {
            get { return get_string("life_cycle_stage", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "life_cycle_stage", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context_association(SdaiInstance instance) : base(instance) { }
        public product_definition_context_association() : base(0) { }

        public static implicit operator product_definition_context_association(SdaiInstance instance) => new product_definition_context_association(instance);

        /// <summary>
        /// Create new instace of product_definition_context_association and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context_association"); Debug.Assert(inst != 0); return inst; }

        public product_definition definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_context frame_of_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_context_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_context_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context_role(SdaiInstance instance) : base(instance) { }
        public product_definition_context_role() : base(0) { }

        public static implicit operator product_definition_context_role(SdaiInstance instance) => new product_definition_context_role(instance);

        /// <summary>
        /// Create new instace of product_definition_context_role and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_context_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation(SdaiInstance instance) : base(instance) { }
        public product_definition_formation() : base(0) { }

        public static implicit operator product_definition_formation(SdaiInstance instance) => new product_definition_formation(instance);

        /// <summary>
        /// Create new instace of product_definition_formation and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product of_product 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "of_product", ifcengine.sdaiINSTANCE, out inst); return new product(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "of_product", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_formation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_formation_relationship() : base(0) { }

        public static implicit operator product_definition_formation_relationship(SdaiInstance instance) => new product_definition_formation_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_formation_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition_formation relating_product_definition_formation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_definition_formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_definition_formation", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_formation related_product_definition_formation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_definition_formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_product_definition_formation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_formation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation_with_specified_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation_with_specified_source : product_definition_formation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation_with_specified_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation_with_specified_source(SdaiInstance instance) : base(instance) { }
        public product_definition_formation_with_specified_source() : base(0) { }

        public static implicit operator product_definition_formation_with_specified_source(SdaiInstance instance) => new product_definition_formation_with_specified_source(instance);

        /// <summary>
        /// Create new instace of product_definition_formation_with_specified_source and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation_with_specified_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation_with_specified_source"); Debug.Assert(inst != 0); return inst; }

        public source? make_or_buy 
            { 
            get { var str = get_string("make_or_buy", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.source_); return EnumValue<source>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<source>.FromValue(value.Value, EnumNames.source_); ifcengine.sdaiPutAttrBN(m_instance, "make_or_buy", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_formation_with_specified_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_occurrence_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_occurrence_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_occurrence_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_occurrence_relationship() : base(0) { }

        public static implicit operator product_definition_occurrence_relationship(SdaiInstance instance) => new product_definition_occurrence_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_occurrence_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_occurrence_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition occurrence 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "occurrence", ifcengine.sdaiINSTANCE, out inst); return new product_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "occurrence", ifcengine.sdaiINSTANCE, i); }
            }
        public assembly_component_usage occurrence_usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "occurrence_usage", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "occurrence_usage", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_occurrence_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_process
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_process : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_process(SdaiInstance instance) : base(instance) { }
        public product_definition_process() : base(0) { }

        public static implicit operator product_definition_process(SdaiInstance instance) => new product_definition_process(instance);

        /// <summary>
        /// Create new instace of product_definition_process and returns object of this class to interact with
        /// </summary>
        public static new product_definition_process Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_process"); Debug.Assert(inst != 0); return inst; }

        public TextValue identification
            {
            get { return get_string("identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
            }
        public set_of_process_product_association product_definitions { get { return (new set_of_process_product_associationSerializer()).FromAttr(m_instance, "product_definitions"); } }

        protected override TextValue WrapperEntityName() { return "product_definition_process"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_resource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_resource : action_resource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_resource(SdaiInstance instance) : base(instance) { }
        public product_definition_resource() : base(0) { }

        public static implicit operator product_definition_resource(SdaiInstance instance) => new product_definition_resource(instance);

        /// <summary>
        /// Create new instace of product_definition_resource and returns object of this class to interact with
        /// </summary>
        public static new product_definition_resource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_resource"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public product_definition_formation formation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition_context frame_of_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "product_definition_resource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_substitute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_substitute : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_substitute(SdaiInstance instance) : base(instance) { }
        public product_definition_substitute() : base(0) { }

        public static implicit operator product_definition_substitute(SdaiInstance instance) => new product_definition_substitute(instance);

        /// <summary>
        /// Create new instace of product_definition_substitute and returns object of this class to interact with
        /// </summary>
        public static new product_definition_substitute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_substitute"); Debug.Assert(inst != 0); return inst; }

        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public product_definition_relationship context_relationship 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_relationship", ifcengine.sdaiINSTANCE, out inst); return new product_definition_relationship(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "context_relationship", ifcengine.sdaiINSTANCE, i); }
            }
        public product_definition substitute_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "substitute_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "substitute_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue name { get { return get_string("name", ifcengine.sdaiSTRING); } }

        protected override TextValue WrapperEntityName() { return "product_definition_substitute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_identification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_identification : configuration_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_identification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_identification(SdaiInstance instance) : base(instance) { }
        public product_identification() : base(0) { }

        public static implicit operator product_identification(SdaiInstance instance) => new product_identification(instance);

        /// <summary>
        /// Create new instace of product_identification and returns object of this class to interact with
        /// </summary>
        public static new product_identification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_identification"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_identification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_process_plan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_process_plan : product_definition_process
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_process_plan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_process_plan(SdaiInstance instance) : base(instance) { }
        public product_process_plan() : base(0) { }

        public static implicit operator product_process_plan(SdaiInstance instance) => new product_process_plan(instance);

        /// <summary>
        /// Create new instace of product_process_plan and returns object of this class to interact with
        /// </summary>
        public static new product_process_plan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_process_plan"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "product_process_plan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_related_product_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_related_product_category : product_category
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_related_product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_related_product_category(SdaiInstance instance) : base(instance) { }
        public product_related_product_category() : base(0) { }

        public static implicit operator product_related_product_category(SdaiInstance instance) => new product_related_product_category(instance);

        /// <summary>
        /// Create new instace of product_related_product_category and returns object of this class to interact with
        /// </summary>
        public static new product_related_product_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_related_product_category"); Debug.Assert(inst != 0); return inst; }

        public set_of_product products { get { return (new set_of_productSerializer()).FromAttr(m_instance, "products"); } }
        public void put_products(IEnumerable<product> lst) { (new set_of_productSerializer()).ToSdaiAggr(lst, m_instance, "products"); }
        public void put_products_untyped(IEnumerable lst) { (new set_of_productSerializer()).ToSdaiAggr(lst, m_instance, "products"); }

        protected override TextValue WrapperEntityName() { return "product_related_product_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_specification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_specification : product_identification
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_specification(SdaiInstance instance) : base(instance) { }
        public product_specification() : base(0) { }

        public static implicit operator product_specification(SdaiInstance instance) => new product_specification(instance);

        /// <summary>
        /// Create new instace of product_specification and returns object of this class to interact with
        /// </summary>
        public static new product_specification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_specification"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_concept_feature_association item_concept_feature { get { return (new set_of_product_concept_feature_associationSerializer()).FromAttr(m_instance, "item_concept_feature"); } }
        public void put_item_concept_feature(IEnumerable<product_concept_feature_association> lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }
        public void put_item_concept_feature_untyped(IEnumerable lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        protected override TextValue WrapperEntityName() { return "product_specification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone_definition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone_definition(SdaiInstance instance) : base(instance) { }
        public tolerance_zone_definition() : base(0) { }

        public static implicit operator tolerance_zone_definition(SdaiInstance instance) => new tolerance_zone_definition(instance);

        /// <summary>
        /// Create new instace of tolerance_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public tolerance_zone zone 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_shape_aspect boundaries { get { return (new set_of_shape_aspectSerializer()).FromAttr(m_instance, "boundaries"); } }
        public void put_boundaries(IEnumerable<shape_aspect> lst) { (new set_of_shape_aspectSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public void put_boundaries_untyped(IEnumerable lst) { (new set_of_shape_aspectSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }

        protected override TextValue WrapperEntityName() { return "tolerance_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projected_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projected_zone_definition : tolerance_zone_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projected_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projected_zone_definition(SdaiInstance instance) : base(instance) { }
        public projected_zone_definition() : base(0) { }

        public static implicit operator projected_zone_definition(SdaiInstance instance) => new projected_zone_definition(instance);

        /// <summary>
        /// Create new instace of projected_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new projected_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projected_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect projection_end 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projection_end", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "projection_end", ifcengine.sdaiINSTANCE, i); }
            }
        public measure_with_unit projected_length 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projected_length", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "projected_length", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "projected_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projection_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projection_curve : annotation_curve_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projection_curve(SdaiInstance instance) : base(instance) { }
        public projection_curve() : base(0) { }

        public static implicit operator projection_curve(SdaiInstance instance) => new projection_curve(instance);

        /// <summary>
        /// Create new instace of projection_curve and returns object of this class to interact with
        /// </summary>
        public static new projection_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projection_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "projection_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of promissory_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class promissory_usage_occurrence : assembly_component_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of promissory_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public promissory_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public promissory_usage_occurrence() : base(0) { }

        public static implicit operator promissory_usage_occurrence(SdaiInstance instance) => new promissory_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of promissory_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new promissory_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "promissory_usage_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "promissory_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition_relationship(SdaiInstance instance) : base(instance) { }
        public property_definition_relationship() : base(0) { }

        public static implicit operator property_definition_relationship(SdaiInstance instance) => new property_definition_relationship(instance);

        /// <summary>
        /// Create new instace of property_definition_relationship and returns object of this class to interact with
        /// </summary>
        public static new property_definition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public property_definition relating_property_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_property_definition", ifcengine.sdaiINSTANCE, out inst); return new property_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_property_definition", ifcengine.sdaiINSTANCE, i); }
            }
        public property_definition related_property_definition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_property_definition", ifcengine.sdaiINSTANCE, out inst); return new property_definition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_property_definition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "property_definition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_process
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_process : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_process
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_process(SdaiInstance instance) : base(instance) { }
        public property_process() : base(0) { }

        public static implicit operator property_process(SdaiInstance instance) => new property_process(instance);

        /// <summary>
        /// Create new instace of property_process and returns object of this class to interact with
        /// </summary>
        public static new property_process Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_process"); Debug.Assert(inst != 0); return inst; }

        public TextValue identification
            {
            get { return get_string("identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
            }
        public set_of_process_property_association properties { get { return (new set_of_process_property_associationSerializer()).FromAttr(m_instance, "properties"); } }

        protected override TextValue WrapperEntityName() { return "property_process"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of qualified_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class qualified_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of qualified_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public qualified_representation_item(SdaiInstance instance) : base(instance) { }
        public qualified_representation_item() : base(0) { }

        public static implicit operator qualified_representation_item(SdaiInstance instance) => new qualified_representation_item(instance);

        /// <summary>
        /// Create new instace of qualified_representation_item and returns object of this class to interact with
        /// </summary>
        public static new qualified_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "qualified_representation_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_value_qualifier qualifiers { get { return (new set_of_value_qualifierSerializer()).FromAttr(m_instance, "qualifiers"); } }
        public void put_qualifiers(IEnumerable<value_qualifier> lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }
        public void put_qualifiers_untyped(IEnumerable lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }

        protected override TextValue WrapperEntityName() { return "qualified_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_qualifier(SdaiInstance instance) : base(instance) { }
        public uncertainty_qualifier() : base(0) { }

        public static implicit operator uncertainty_qualifier(SdaiInstance instance) => new uncertainty_qualifier(instance);

        /// <summary>
        /// Create new instace of uncertainty_qualifier and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue measure_name
            {
            get { return get_string("measure_name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "measure_name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "uncertainty_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of qualitative_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class qualitative_uncertainty : uncertainty_qualifier
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of qualitative_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public qualitative_uncertainty(SdaiInstance instance) : base(instance) { }
        public qualitative_uncertainty() : base(0) { }

        public static implicit operator qualitative_uncertainty(SdaiInstance instance) => new qualitative_uncertainty(instance);

        /// <summary>
        /// Create new instace of qualitative_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new qualitative_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "qualitative_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public TextValue uncertainty_value
            {
            get { return get_string("uncertainty_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "qualitative_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quantified_assembly_component_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quantified_assembly_component_usage : assembly_component_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quantified_assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quantified_assembly_component_usage(SdaiInstance instance) : base(instance) { }
        public quantified_assembly_component_usage() : base(0) { }

        public static implicit operator quantified_assembly_component_usage(SdaiInstance instance) => new quantified_assembly_component_usage(instance);

        /// <summary>
        /// Create new instace of quantified_assembly_component_usage and returns object of this class to interact with
        /// </summary>
        public static new quantified_assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quantified_assembly_component_usage"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit quantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "quantified_assembly_component_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_curve(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_curve() : base(0) { }

        public static implicit operator quasi_uniform_curve(SdaiInstance instance) => new quasi_uniform_curve(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "quasi_uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_surface(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_surface() : base(0) { }

        public static implicit operator quasi_uniform_surface(SdaiInstance instance) => new quasi_uniform_surface(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "quasi_uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rack_and_pinion_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rack_and_pinion_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rack_and_pinion_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rack_and_pinion_pair(SdaiInstance instance) : base(instance) { }
        public rack_and_pinion_pair() : base(0) { }

        public static implicit operator rack_and_pinion_pair(SdaiInstance instance) => new rack_and_pinion_pair(instance);

        /// <summary>
        /// Create new instace of rack_and_pinion_pair and returns object of this class to interact with
        /// </summary>
        public static new rack_and_pinion_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rack_and_pinion_pair"); Debug.Assert(inst != 0); return inst; }

        public double? pinion_radius
            {
            get { return get_double("pinion_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "pinion_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rack_and_pinion_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rack_and_pinion_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rack_and_pinion_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rack_and_pinion_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rack_and_pinion_pair_range(SdaiInstance instance) : base(instance) { }
        public rack_and_pinion_pair_range() : base(0) { }

        public static implicit operator rack_and_pinion_pair_range(SdaiInstance instance) => new rack_and_pinion_pair_range(instance);

        /// <summary>
        /// Create new instace of rack_and_pinion_pair_range and returns object of this class to interact with
        /// </summary>
        public static new rack_and_pinion_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rack_and_pinion_pair_range"); Debug.Assert(inst != 0); return inst; }


        public translational_range_measure lower_limit_rack_displacement
            {
            get { return new translational_range_measure(m_instance, "lower_limit_rack_displacement", 0); }
            }

        public translational_range_measure upper_limit_rack_displacement
            {
            get { return new translational_range_measure(m_instance, "upper_limit_rack_displacement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "rack_and_pinion_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rack_and_pinion_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rack_and_pinion_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rack_and_pinion_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rack_and_pinion_pair_value(SdaiInstance instance) : base(instance) { }
        public rack_and_pinion_pair_value() : base(0) { }

        public static implicit operator rack_and_pinion_pair_value(SdaiInstance instance) => new rack_and_pinion_pair_value(instance);

        /// <summary>
        /// Create new instace of rack_and_pinion_pair_value and returns object of this class to interact with
        /// </summary>
        public static new rack_and_pinion_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rack_and_pinion_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_displacement
            {
            get { return get_double("actual_displacement", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_displacement", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_rotation { get { return get_double("actual_rotation", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "rack_and_pinion_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of radius_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class radius_dimension : dimension_curve_directed_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of radius_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public radius_dimension(SdaiInstance instance) : base(instance) { }
        public radius_dimension() : base(0) { }

        public static implicit operator radius_dimension(SdaiInstance instance) => new radius_dimension(instance);

        /// <summary>
        /// Create new instace of radius_dimension and returns object of this class to interact with
        /// </summary>
        public static new radius_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "radius_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "radius_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public ratio_measure_with_unit() : base(0) { }

        public static implicit operator ratio_measure_with_unit(SdaiInstance instance) => new ratio_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of ratio_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ratio_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_unit(SdaiInstance instance) : base(instance) { }
        public ratio_unit() : base(0) { }

        public static implicit operator ratio_unit(SdaiInstance instance) => new ratio_unit(instance);

        /// <summary>
        /// Create new instace of ratio_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ratio_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_curve(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_curve() : base(0) { }

        public static implicit operator rational_b_spline_curve(SdaiInstance instance) => new rational_b_spline_curve(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_double weights_data { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); } }
        public void put_weights_data(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public void put_weights_data_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public array_of_double weights { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "weights"); } }

        protected override TextValue WrapperEntityName() { return "rational_b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_surface(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_surface() : base(0) { }

        public static implicit operator rational_b_spline_surface(SdaiInstance instance) => new rational_b_spline_surface(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_double weights_data { get { return (new list_of_list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); } }
        public void put_weights_data(IEnumerable<list_of_double> lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public void put_weights_data_untyped(IEnumerable lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        public array_of_array_of_double weights { get { return (new array_of_array_of_doubleSerializer()).FromAttr(m_instance, "weights"); } }

        protected override TextValue WrapperEntityName() { return "rational_b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of real_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class real_defined_function : numeric_defined_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of real_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public real_defined_function(SdaiInstance instance) : base(instance) { }
        public real_defined_function() : base(0) { }

        public static implicit operator real_defined_function(SdaiInstance instance) => new real_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "real_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of real_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class real_literal : literal_number
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of real_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public real_literal(SdaiInstance instance) : base(instance) { }
        public real_literal() : base(0) { }

        public static implicit operator real_literal(SdaiInstance instance) => new real_literal(instance);

        /// <summary>
        /// Create new instace of real_literal and returns object of this class to interact with
        /// </summary>
        public static new real_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "real_literal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "real_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of real_numeric_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class real_numeric_variable : numeric_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of real_numeric_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public real_numeric_variable(SdaiInstance instance) : base(instance) { }
        public real_numeric_variable() : base(0) { }

        public static implicit operator real_numeric_variable(SdaiInstance instance) => new real_numeric_variable(instance);

        /// <summary>
        /// Create new instace of real_numeric_variable and returns object of this class to interact with
        /// </summary>
        public static new real_numeric_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "real_numeric_variable"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "real_numeric_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_closed_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_closed_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_closed_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_closed_profile(SdaiInstance instance) : base(instance) { }
        public rectangular_closed_profile() : base(0) { }

        public static implicit operator rectangular_closed_profile(SdaiInstance instance) => new rectangular_closed_profile(instance);

        /// <summary>
        /// Create new instace of rectangular_closed_profile and returns object of this class to interact with
        /// </summary>
        public static new rectangular_closed_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_closed_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rectangular_closed_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_composite_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_composite_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_composite_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_composite_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_composite_surface() : base(0) { }

        public static implicit operator rectangular_composite_surface(SdaiInstance instance) => new rectangular_composite_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_composite_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_composite_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_composite_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_surface_patch segments { get { return (new list_of_list_of_surface_patchSerializer()).FromAttr(m_instance, "segments"); } }
        public void put_segments(IEnumerable<list_of_surface_patch> lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public void put_segments_untyped(IEnumerable lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public IntValue? n_u { get { return get_IntValue("n_u", ifcengine.sdaiINTEGER); } }
        public IntValue? n_v { get { return get_IntValue("n_v", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "rectangular_composite_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_pattern : replicate_feature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_pattern(SdaiInstance instance) : base(instance) { }
        public rectangular_pattern() : base(0) { }

        public static implicit operator rectangular_pattern(SdaiInstance instance) => new rectangular_pattern(instance);

        /// <summary>
        /// Create new instace of rectangular_pattern and returns object of this class to interact with
        /// </summary>
        public static new rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_pattern"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rectangular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_trimmed_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_trimmed_surface : bounded_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_trimmed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_trimmed_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_trimmed_surface() : base(0) { }

        public static implicit operator rectangular_trimmed_surface(SdaiInstance instance) => new rectangular_trimmed_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_trimmed_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_trimmed_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_trimmed_surface"); Debug.Assert(inst != 0); return inst; }

        public surface basis_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? u1
            {
            get { return get_double("u1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? u2
            {
            get { return get_double("u2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v1
            {
            get { return get_double("v1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? v2
            {
            get { return get_double("v2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? usense
            {
            get { return get_bool("usense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "usense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? vsense
            {
            get { return get_bool("vsense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "vsense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rectangular_trimmed_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of referenced_modified_datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class referenced_modified_datum : datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of referenced_modified_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public referenced_modified_datum(SdaiInstance instance) : base(instance) { }
        public referenced_modified_datum() : base(0) { }

        public static implicit operator referenced_modified_datum(SdaiInstance instance) => new referenced_modified_datum(instance);

        /// <summary>
        /// Create new instace of referenced_modified_datum and returns object of this class to interact with
        /// </summary>
        public static new referenced_modified_datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "referenced_modified_datum"); Debug.Assert(inst != 0); return inst; }

        public limit_condition? modifier 
            { 
            get { var str = get_string("modifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.limit_condition_); return EnumValue<limit_condition>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<limit_condition>.FromValue(value.Value, EnumNames.limit_condition_); ifcengine.sdaiPutAttrBN(m_instance, "modifier", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "referenced_modified_datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of relative_event_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class relative_event_occurrence : event_occurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of relative_event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public relative_event_occurrence(SdaiInstance instance) : base(instance) { }
        public relative_event_occurrence() : base(0) { }

        public static implicit operator relative_event_occurrence(SdaiInstance instance) => new relative_event_occurrence(instance);

        /// <summary>
        /// Create new instace of relative_event_occurrence and returns object of this class to interact with
        /// </summary>
        public static new relative_event_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "relative_event_occurrence"); Debug.Assert(inst != 0); return inst; }

        public event_occurrence base_event 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_event", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "base_event", ifcengine.sdaiINSTANCE, i); }
            }
        public time_measure_with_unit offset 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "relative_event_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rep_item_group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rep_item_group : group
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rep_item_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rep_item_group(SdaiInstance instance) : base(instance) { }
        public rep_item_group() : base(0) { }

        public static implicit operator rep_item_group(SdaiInstance instance) => new rep_item_group(instance);

        /// <summary>
        /// Create new instace of rep_item_group and returns object of this class to interact with
        /// </summary>
        public static new rep_item_group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rep_item_group"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rep_item_group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reparametrised_composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reparametrised_composite_curve_segment : composite_curve_segment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reparametrised_composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reparametrised_composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public reparametrised_composite_curve_segment() : base(0) { }

        public static implicit operator reparametrised_composite_curve_segment(SdaiInstance instance) => new reparametrised_composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of reparametrised_composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new reparametrised_composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reparametrised_composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public double? param_length
            {
            get { return get_double("param_length", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "param_length", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "reparametrised_composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of requirement_for_action_resource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class requirement_for_action_resource : action_resource_requirement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of requirement_for_action_resource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public requirement_for_action_resource(SdaiInstance instance) : base(instance) { }
        public requirement_for_action_resource() : base(0) { }

        public static implicit operator requirement_for_action_resource(SdaiInstance instance) => new requirement_for_action_resource(instance);

        /// <summary>
        /// Create new instace of requirement_for_action_resource and returns object of this class to interact with
        /// </summary>
        public static new requirement_for_action_resource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "requirement_for_action_resource"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_resource resources { get { return (new set_of_action_resourceSerializer()).FromAttr(m_instance, "resources"); } }
        public void put_resources(IEnumerable<action_resource> lst) { (new set_of_action_resourceSerializer()).ToSdaiAggr(lst, m_instance, "resources"); }
        public void put_resources_untyped(IEnumerable lst) { (new set_of_action_resourceSerializer()).ToSdaiAggr(lst, m_instance, "resources"); }

        protected override TextValue WrapperEntityName() { return "requirement_for_action_resource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resource_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resource_property : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resource_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resource_property(SdaiInstance instance) : base(instance) { }
        public resource_property() : base(0) { }

        public static implicit operator resource_property(SdaiInstance instance) => new resource_property(instance);

        /// <summary>
        /// Create new instace of resource_property and returns object of this class to interact with
        /// </summary>
        public static new resource_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resource_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        public characterized_resource_definition resource
            {
            get { return new characterized_resource_definition(m_instance, "resource", 0); }
            }

        protected override TextValue WrapperEntityName() { return "resource_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resource_property_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resource_property_representation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resource_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resource_property_representation(SdaiInstance instance) : base(instance) { }
        public resource_property_representation() : base(0) { }

        public static implicit operator resource_property_representation(SdaiInstance instance) => new resource_property_representation(instance);

        /// <summary>
        /// Create new instace of resource_property_representation and returns object of this class to interact with
        /// </summary>
        public static new resource_property_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resource_property_representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public resource_property property 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, out inst); return new resource_property(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, i); }
            }
        public representation representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, out inst); return new representation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "resource_property_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resource_requirement_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resource_requirement_type : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resource_requirement_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resource_requirement_type(SdaiInstance instance) : base(instance) { }
        public resource_requirement_type() : base(0) { }

        public static implicit operator resource_requirement_type(SdaiInstance instance) => new resource_requirement_type(instance);

        /// <summary>
        /// Create new instace of resource_requirement_type and returns object of this class to interact with
        /// </summary>
        public static new resource_requirement_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resource_requirement_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "resource_requirement_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resulting_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resulting_path : motion_link_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resulting_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resulting_path(SdaiInstance instance) : base(instance) { }
        public resulting_path() : base(0) { }

        public static implicit operator resulting_path(SdaiInstance instance) => new resulting_path(instance);

        /// <summary>
        /// Create new instace of resulting_path and returns object of this class to interact with
        /// </summary>
        public static new resulting_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resulting_path"); Debug.Assert(inst != 0); return inst; }

        public set_of_kinematic_joint controlling_joints { get { return (new set_of_kinematic_jointSerializer()).FromAttr(m_instance, "controlling_joints"); } }
        public void put_controlling_joints(IEnumerable<kinematic_joint> lst) { (new set_of_kinematic_jointSerializer()).ToSdaiAggr(lst, m_instance, "controlling_joints"); }
        public void put_controlling_joints_untyped(IEnumerable lst) { (new set_of_kinematic_jointSerializer()).ToSdaiAggr(lst, m_instance, "controlling_joints"); }

        protected override TextValue WrapperEntityName() { return "resulting_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of retention
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class retention : action
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of retention
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public retention(SdaiInstance instance) : base(instance) { }
        public retention() : base(0) { }

        public static implicit operator retention(SdaiInstance instance) => new retention(instance);

        /// <summary>
        /// Create new instace of retention and returns object of this class to interact with
        /// </summary>
        public static new retention Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "retention"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "retention"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolute_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolute_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolute_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolute_pair(SdaiInstance instance) : base(instance) { }
        public revolute_pair() : base(0) { }

        public static implicit operator revolute_pair(SdaiInstance instance) => new revolute_pair(instance);

        /// <summary>
        /// Create new instace of revolute_pair and returns object of this class to interact with
        /// </summary>
        public static new revolute_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolute_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "revolute_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolute_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolute_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolute_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolute_pair_range(SdaiInstance instance) : base(instance) { }
        public revolute_pair_range() : base(0) { }

        public static implicit operator revolute_pair_range(SdaiInstance instance) => new revolute_pair_range(instance);

        /// <summary>
        /// Create new instace of revolute_pair_range and returns object of this class to interact with
        /// </summary>
        public static new revolute_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolute_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "revolute_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolute_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolute_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolute_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolute_pair_value(SdaiInstance instance) : base(instance) { }
        public revolute_pair_value() : base(0) { }

        public static implicit operator revolute_pair_value(SdaiInstance instance) => new revolute_pair_value(instance);

        /// <summary>
        /// Create new instace of revolute_pair_value and returns object of this class to interact with
        /// </summary>
        public static new revolute_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolute_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "revolute_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_area_solid(SdaiInstance instance) : base(instance) { }
        public revolved_area_solid() : base(0) { }

        public static implicit operator revolved_area_solid(SdaiInstance instance) => new revolved_area_solid(instance);

        /// <summary>
        /// Create new instace of revolved_area_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_area_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? angle
            {
            get { return get_double("angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "revolved_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_face_solid : swept_face_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_face_solid(SdaiInstance instance) : base(instance) { }
        public revolved_face_solid() : base(0) { }

        public static implicit operator revolved_face_solid(SdaiInstance instance) => new revolved_face_solid(instance);

        /// <summary>
        /// Create new instace of revolved_face_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_face_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? angle
            {
            get { return get_double("angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "revolved_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rib
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rib : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rib
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rib(SdaiInstance instance) : base(instance) { }
        public rib() : base(0) { }

        public static implicit operator rib(SdaiInstance instance) => new rib(instance);

        /// <summary>
        /// Create new instace of rib and returns object of this class to interact with
        /// </summary>
        public static new rib Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rib"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rib"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_angular_wedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_angular_wedge : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_angular_wedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_angular_wedge(SdaiInstance instance) : base(instance) { }
        public right_angular_wedge() : base(0) { }

        public static implicit operator right_angular_wedge(SdaiInstance instance) => new right_angular_wedge(instance);

        /// <summary>
        /// Create new instace of right_angular_wedge and returns object of this class to interact with
        /// </summary>
        public static new right_angular_wedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_angular_wedge"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? x
            {
            get { return get_double("x", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y
            {
            get { return get_double("y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? z
            {
            get { return get_double("z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ltx
            {
            get { return get_double("ltx", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ltx", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_angular_wedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cone : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cone(SdaiInstance instance) : base(instance) { }
        public right_circular_cone() : base(0) { }

        public static implicit operator right_circular_cone(SdaiInstance instance) => new right_circular_cone(instance);

        /// <summary>
        /// Create new instace of right_circular_cone and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cone"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? semi_angle
            {
            get { return get_double("semi_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_circular_cone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cylinder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cylinder : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cylinder(SdaiInstance instance) : base(instance) { }
        public right_circular_cylinder() : base(0) { }

        public static implicit operator right_circular_cylinder(SdaiInstance instance) => new right_circular_cylinder(instance);

        /// <summary>
        /// Create new instace of right_circular_cylinder and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cylinder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cylinder"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? height
            {
            get { return get_double("height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "right_circular_cylinder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of role_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class role_association : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of role_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public role_association(SdaiInstance instance) : base(instance) { }
        public role_association() : base(0) { }

        public static implicit operator role_association(SdaiInstance instance) => new role_association(instance);

        /// <summary>
        /// Create new instace of role_association and returns object of this class to interact with
        /// </summary>
        public static new role_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "role_association"); Debug.Assert(inst != 0); return inst; }

        public object_role role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }
            }

        public role_select item_with_role
            {
            get { return new role_select(m_instance, "item_with_role", 0); }
            }

        protected override TextValue WrapperEntityName() { return "role_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rolling_curve_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rolling_curve_pair : planar_curve_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rolling_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rolling_curve_pair(SdaiInstance instance) : base(instance) { }
        public rolling_curve_pair() : base(0) { }

        public static implicit operator rolling_curve_pair(SdaiInstance instance) => new rolling_curve_pair(instance);

        /// <summary>
        /// Create new instace of rolling_curve_pair and returns object of this class to interact with
        /// </summary>
        public static new rolling_curve_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rolling_curve_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rolling_curve_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rolling_curve_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rolling_curve_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rolling_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rolling_curve_pair_value(SdaiInstance instance) : base(instance) { }
        public rolling_curve_pair_value() : base(0) { }

        public static implicit operator rolling_curve_pair_value(SdaiInstance instance) => new rolling_curve_pair_value(instance);

        /// <summary>
        /// Create new instace of rolling_curve_pair_value and returns object of this class to interact with
        /// </summary>
        public static new rolling_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rolling_curve_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_curve actual_point_on_curve_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_curve_1", ifcengine.sdaiINSTANCE, out inst); return new point_on_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_curve_1", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "rolling_curve_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_pair(SdaiInstance instance) : base(instance) { }
        public surface_pair() : base(0) { }

        public static implicit operator surface_pair(SdaiInstance instance) => new surface_pair(instance);

        /// <summary>
        /// Create new instace of surface_pair and returns object of this class to interact with
        /// </summary>
        public static new surface_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_pair"); Debug.Assert(inst != 0); return inst; }

        public surface surface_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_1", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_1", ifcengine.sdaiINSTANCE, i); }
            }
        public surface surface_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_2", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_2", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? orientation
            {
            get { return get_bool("orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rolling_surface_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rolling_surface_pair : surface_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rolling_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rolling_surface_pair(SdaiInstance instance) : base(instance) { }
        public rolling_surface_pair() : base(0) { }

        public static implicit operator rolling_surface_pair(SdaiInstance instance) => new rolling_surface_pair(instance);

        /// <summary>
        /// Create new instace of rolling_surface_pair and returns object of this class to interact with
        /// </summary>
        public static new rolling_surface_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rolling_surface_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rolling_surface_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rolling_surface_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rolling_surface_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rolling_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rolling_surface_pair_value(SdaiInstance instance) : base(instance) { }
        public rolling_surface_pair_value() : base(0) { }

        public static implicit operator rolling_surface_pair_value(SdaiInstance instance) => new rolling_surface_pair_value(instance);

        /// <summary>
        /// Create new instace of rolling_surface_pair_value and returns object of this class to interact with
        /// </summary>
        public static new rolling_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rolling_surface_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_surface actual_point_on_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_surface", ifcengine.sdaiINSTANCE, out inst); return new point_on_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rolling_surface_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rotation_about_direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rotation_about_direction : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rotation_about_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rotation_about_direction(SdaiInstance instance) : base(instance) { }
        public rotation_about_direction() : base(0) { }

        public static implicit operator rotation_about_direction(SdaiInstance instance) => new rotation_about_direction(instance);

        /// <summary>
        /// Create new instace of rotation_about_direction and returns object of this class to interact with
        /// </summary>
        public static new rotation_about_direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rotation_about_direction"); Debug.Assert(inst != 0); return inst; }

        public direction direction_of_axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "direction_of_axis", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "direction_of_axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? rotation_angle
            {
            get { return get_double("rotation_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "rotation_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "rotation_about_direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of round_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class round_hole : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public round_hole(SdaiInstance instance) : base(instance) { }
        public round_hole() : base(0) { }

        public static implicit operator round_hole(SdaiInstance instance) => new round_hole(instance);

        /// <summary>
        /// Create new instace of round_hole and returns object of this class to interact with
        /// </summary>
        public static new round_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "round_hole"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "round_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rounded_u_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rounded_u_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rounded_u_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rounded_u_profile(SdaiInstance instance) : base(instance) { }
        public rounded_u_profile() : base(0) { }

        public static implicit operator rounded_u_profile(SdaiInstance instance) => new rounded_u_profile(instance);

        /// <summary>
        /// Create new instace of rounded_u_profile and returns object of this class to interact with
        /// </summary>
        public static new rounded_u_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rounded_u_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "rounded_u_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of roundness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class roundness_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of roundness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public roundness_tolerance(SdaiInstance instance) : base(instance) { }
        public roundness_tolerance() : base(0) { }

        public static implicit operator roundness_tolerance(SdaiInstance instance) => new roundness_tolerance(instance);

        /// <summary>
        /// Create new instace of roundness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new roundness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "roundness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "roundness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve_swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve_swept_area_solid : swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve_swept_area_solid(SdaiInstance instance) : base(instance) { }
        public surface_curve_swept_area_solid() : base(0) { }

        public static implicit operator surface_curve_swept_area_solid(SdaiInstance instance) => new surface_curve_swept_area_solid(instance);

        /// <summary>
        /// Create new instace of surface_curve_swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new surface_curve_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve_swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? start_param
            {
            get { return get_double("start_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? end_param
            {
            get { return get_double("end_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public surface reference_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_curve_swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ruled_surface_swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ruled_surface_swept_area_solid : surface_curve_swept_area_solid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ruled_surface_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ruled_surface_swept_area_solid(SdaiInstance instance) : base(instance) { }
        public ruled_surface_swept_area_solid() : base(0) { }

        public static implicit operator ruled_surface_swept_area_solid(SdaiInstance instance) => new ruled_surface_swept_area_solid(instance);

        /// <summary>
        /// Create new instace of ruled_surface_swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new ruled_surface_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ruled_surface_swept_area_solid"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "ruled_surface_swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_definition : tolerance_zone_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_definition(SdaiInstance instance) : base(instance) { }
        public runout_zone_definition() : base(0) { }

        public static implicit operator runout_zone_definition(SdaiInstance instance) => new runout_zone_definition(instance);

        /// <summary>
        /// Create new instace of runout_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public runout_zone_orientation orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new runout_zone_orientation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "runout_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_orientation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_orientation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_orientation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_orientation(SdaiInstance instance) : base(instance) { }
        public runout_zone_orientation() : base(0) { }

        public static implicit operator runout_zone_orientation(SdaiInstance instance) => new runout_zone_orientation(instance);

        /// <summary>
        /// Create new instace of runout_zone_orientation and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_orientation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_orientation"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit angle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "angle", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "runout_zone_orientation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_orientation_reference_direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_orientation_reference_direction : runout_zone_orientation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_orientation_reference_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_orientation_reference_direction(SdaiInstance instance) : base(instance) { }
        public runout_zone_orientation_reference_direction() : base(0) { }

        public static implicit operator runout_zone_orientation_reference_direction(SdaiInstance instance) => new runout_zone_orientation_reference_direction(instance);

        /// <summary>
        /// Create new instace of runout_zone_orientation_reference_direction and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_orientation_reference_direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_orientation_reference_direction"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect_relationship orientation_defining_relationship 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation_defining_relationship", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect_relationship(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation_defining_relationship", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "runout_zone_orientation_reference_direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of screw_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class screw_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of screw_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public screw_pair(SdaiInstance instance) : base(instance) { }
        public screw_pair() : base(0) { }

        public static implicit operator screw_pair(SdaiInstance instance) => new screw_pair(instance);

        /// <summary>
        /// Create new instace of screw_pair and returns object of this class to interact with
        /// </summary>
        public static new screw_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "screw_pair"); Debug.Assert(inst != 0); return inst; }

        public double? pitch
            {
            get { return get_double("pitch", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "pitch", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "screw_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of screw_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class screw_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of screw_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public screw_pair_range(SdaiInstance instance) : base(instance) { }
        public screw_pair_range() : base(0) { }

        public static implicit operator screw_pair_range(SdaiInstance instance) => new screw_pair_range(instance);

        /// <summary>
        /// Create new instace of screw_pair_range and returns object of this class to interact with
        /// </summary>
        public static new screw_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "screw_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "screw_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of screw_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class screw_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of screw_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public screw_pair_value(SdaiInstance instance) : base(instance) { }
        public screw_pair_value() : base(0) { }

        public static implicit operator screw_pair_value(SdaiInstance instance) => new screw_pair_value(instance);

        /// <summary>
        /// Create new instace of screw_pair_value and returns object of this class to interact with
        /// </summary>
        public static new screw_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "screw_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? actual_translation { get { return get_double("actual_translation", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "screw_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of seam_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class seam_curve : surface_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of seam_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public seam_curve(SdaiInstance instance) : base(instance) { }
        public seam_curve() : base(0) { }

        public static implicit operator seam_curve(SdaiInstance instance) => new seam_curve(instance);

        /// <summary>
        /// Create new instace of seam_curve and returns object of this class to interact with
        /// </summary>
        public static new seam_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "seam_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "seam_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of seam_edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class seam_edge : oriented_edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of seam_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public seam_edge(SdaiInstance instance) : base(instance) { }
        public seam_edge() : base(0) { }

        public static implicit operator seam_edge(SdaiInstance instance) => new seam_edge(instance);

        /// <summary>
        /// Create new instace of seam_edge and returns object of this class to interact with
        /// </summary>
        public static new seam_edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "seam_edge"); Debug.Assert(inst != 0); return inst; }

        public pcurve pcurve_reference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pcurve_reference", ifcengine.sdaiINSTANCE, out inst); return new pcurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "pcurve_reference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "seam_edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification(SdaiInstance instance) : base(instance) { }
        public security_classification() : base(0) { }

        public static implicit operator security_classification(SdaiInstance instance) => new security_classification(instance);

        /// <summary>
        /// Create new instace of security_classification and returns object of this class to interact with
        /// </summary>
        public static new security_classification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "security_classification"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public security_classification_level security_level 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "security_level", ifcengine.sdaiINSTANCE, out inst); return new security_classification_level(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "security_level", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "security_classification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification_level
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification_level : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification_level
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification_level(SdaiInstance instance) : base(instance) { }
        public security_classification_level() : base(0) { }

        public static implicit operator security_classification_level(SdaiInstance instance) => new security_classification_level(instance);

        /// <summary>
        /// Create new instace of security_classification_level and returns object of this class to interact with
        /// </summary>
        public static new security_classification_level Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "security_classification_level"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "security_classification_level"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of serial_numbered_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class serial_numbered_effectivity : effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of serial_numbered_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public serial_numbered_effectivity(SdaiInstance instance) : base(instance) { }
        public serial_numbered_effectivity() : base(0) { }

        public static implicit operator serial_numbered_effectivity(SdaiInstance instance) => new serial_numbered_effectivity(instance);

        /// <summary>
        /// Create new instace of serial_numbered_effectivity and returns object of this class to interact with
        /// </summary>
        public static new serial_numbered_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "serial_numbered_effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue effectivity_start_id
            {
            get { return get_string("effectivity_start_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_start_id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue effectivity_end_id
            {
            get { return get_string("effectivity_end_id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_end_id", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "serial_numbered_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_associativity : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_associativity(SdaiInstance instance) : base(instance) { }
        public shape_aspect_associativity() : base(0) { }

        public static implicit operator shape_aspect_associativity(SdaiInstance instance) => new shape_aspect_associativity(instance);

        /// <summary>
        /// Create new instace of shape_aspect_associativity and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_associativity"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_aspect_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_deriving_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_deriving_relationship : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_deriving_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_deriving_relationship(SdaiInstance instance) : base(instance) { }
        public shape_aspect_deriving_relationship() : base(0) { }

        public static implicit operator shape_aspect_deriving_relationship(SdaiInstance instance) => new shape_aspect_deriving_relationship(instance);

        /// <summary>
        /// Create new instace of shape_aspect_deriving_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_deriving_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_deriving_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_aspect_deriving_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_transition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_transition : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_transition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_transition(SdaiInstance instance) : base(instance) { }
        public shape_aspect_transition() : base(0) { }

        public static implicit operator shape_aspect_transition(SdaiInstance instance) => new shape_aspect_transition(instance);

        /// <summary>
        /// Create new instace of shape_aspect_transition and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_transition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_transition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_aspect_transition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_defining_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_defining_relationship : shape_aspect_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_defining_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_defining_relationship(SdaiInstance instance) : base(instance) { }
        public shape_defining_relationship() : base(0) { }

        public static implicit operator shape_defining_relationship(SdaiInstance instance) => new shape_defining_relationship(instance);

        /// <summary>
        /// Create new instace of shape_defining_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_defining_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_defining_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_defining_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_definition_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_definition_representation : property_definition_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_definition_representation(SdaiInstance instance) : base(instance) { }
        public shape_definition_representation() : base(0) { }

        public static implicit operator shape_definition_representation(SdaiInstance instance) => new shape_definition_representation(instance);

        /// <summary>
        /// Create new instace of shape_definition_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_definition_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_definition_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_definition_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_dimension_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_dimension_representation : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_dimension_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_dimension_representation(SdaiInstance instance) : base(instance) { }
        public shape_dimension_representation() : base(0) { }

        public static implicit operator shape_dimension_representation(SdaiInstance instance) => new shape_dimension_representation(instance);

        /// <summary>
        /// Create new instace of shape_dimension_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_dimension_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_dimension_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_dimension_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation_relationship : representation_relationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation_relationship(SdaiInstance instance) : base(instance) { }
        public shape_representation_relationship() : base(0) { }

        public static implicit operator shape_representation_relationship(SdaiInstance instance) => new shape_representation_relationship(instance);

        /// <summary>
        /// Create new instace of shape_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation_with_parameters
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation_with_parameters : shape_representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation_with_parameters
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation_with_parameters(SdaiInstance instance) : base(instance) { }
        public shape_representation_with_parameters() : base(0) { }

        public static implicit operator shape_representation_with_parameters(SdaiInstance instance) => new shape_representation_with_parameters(instance);

        /// <summary>
        /// Create new instace of shape_representation_with_parameters and returns object of this class to interact with
        /// </summary>
        public static new shape_representation_with_parameters Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation_with_parameters"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "shape_representation_with_parameters"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_surface_model : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_surface_model(SdaiInstance instance) : base(instance) { }
        public shell_based_surface_model() : base(0) { }

        public static implicit operator shell_based_surface_model(SdaiInstance instance) => new shell_based_surface_model(instance);

        /// <summary>
        /// Create new instace of shell_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new shell_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_shell sbsm_boundary { get { return (new set_of_shellSerializer()).FromAttr(m_instance, "sbsm_boundary"); } }
        public void put_sbsm_boundary(IEnumerable<shell> lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }
        public void put_sbsm_boundary_untyped(IEnumerable lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }

        protected override TextValue WrapperEntityName() { return "shell_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_unit(SdaiInstance instance) : base(instance) { }
        public si_unit() : base(0) { }

        public static implicit operator si_unit(SdaiInstance instance) => new si_unit(instance);

        /// <summary>
        /// Create new instace of si_unit and returns object of this class to interact with
        /// </summary>
        public static new si_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_unit"); Debug.Assert(inst != 0); return inst; }

        public si_prefix? prefix 
            { 
            get { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<si_prefix>.FromValue(value.Value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public si_unit_name? name 
            { 
            get { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<si_unit_name>.FromValue(value.Value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "si_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_string_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_string_expression : string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_string_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_string_expression(SdaiInstance instance) : base(instance) { }
        public simple_string_expression() : base(0) { }

        public static implicit operator simple_string_expression(SdaiInstance instance) => new simple_string_expression(instance);


        protected override TextValue WrapperEntityName() { return "simple_string_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sin_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sin_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sin_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sin_function(SdaiInstance instance) : base(instance) { }
        public sin_function() : base(0) { }

        public static implicit operator sin_function(SdaiInstance instance) => new sin_function(instance);

        /// <summary>
        /// Create new instace of sin_function and returns object of this class to interact with
        /// </summary>
        public static new sin_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sin_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "sin_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of slash_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class slash_expression : binary_numeric_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of slash_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public slash_expression(SdaiInstance instance) : base(instance) { }
        public slash_expression() : base(0) { }

        public static implicit operator slash_expression(SdaiInstance instance) => new slash_expression(instance);

        /// <summary>
        /// Create new instace of slash_expression and returns object of this class to interact with
        /// </summary>
        public static new slash_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "slash_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "slash_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sliding_curve_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sliding_curve_pair : planar_curve_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sliding_curve_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sliding_curve_pair(SdaiInstance instance) : base(instance) { }
        public sliding_curve_pair() : base(0) { }

        public static implicit operator sliding_curve_pair(SdaiInstance instance) => new sliding_curve_pair(instance);

        /// <summary>
        /// Create new instace of sliding_curve_pair and returns object of this class to interact with
        /// </summary>
        public static new sliding_curve_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sliding_curve_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "sliding_curve_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sliding_curve_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sliding_curve_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sliding_curve_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sliding_curve_pair_value(SdaiInstance instance) : base(instance) { }
        public sliding_curve_pair_value() : base(0) { }

        public static implicit operator sliding_curve_pair_value(SdaiInstance instance) => new sliding_curve_pair_value(instance);

        /// <summary>
        /// Create new instace of sliding_curve_pair_value and returns object of this class to interact with
        /// </summary>
        public static new sliding_curve_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sliding_curve_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_curve actual_point_on_curve_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_curve_1", ifcengine.sdaiINSTANCE, out inst); return new point_on_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_curve_1", ifcengine.sdaiINSTANCE, i); }
            }
        public point_on_curve actual_point_on_curve_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_curve_2", ifcengine.sdaiINSTANCE, out inst); return new point_on_curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_curve_2", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "sliding_curve_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sliding_surface_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sliding_surface_pair : surface_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sliding_surface_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sliding_surface_pair(SdaiInstance instance) : base(instance) { }
        public sliding_surface_pair() : base(0) { }

        public static implicit operator sliding_surface_pair(SdaiInstance instance) => new sliding_surface_pair(instance);

        /// <summary>
        /// Create new instace of sliding_surface_pair and returns object of this class to interact with
        /// </summary>
        public static new sliding_surface_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sliding_surface_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "sliding_surface_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sliding_surface_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sliding_surface_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sliding_surface_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sliding_surface_pair_value(SdaiInstance instance) : base(instance) { }
        public sliding_surface_pair_value() : base(0) { }

        public static implicit operator sliding_surface_pair_value(SdaiInstance instance) => new sliding_surface_pair_value(instance);

        /// <summary>
        /// Create new instace of sliding_surface_pair_value and returns object of this class to interact with
        /// </summary>
        public static new sliding_surface_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sliding_surface_pair_value"); Debug.Assert(inst != 0); return inst; }

        public point_on_surface actual_point_on_surface_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_surface_1", ifcengine.sdaiINSTANCE, out inst); return new point_on_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_surface_1", ifcengine.sdaiINSTANCE, i); }
            }
        public point_on_surface actual_point_on_surface_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_point_on_surface_2", ifcengine.sdaiINSTANCE, out inst); return new point_on_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_point_on_surface_2", ifcengine.sdaiINSTANCE, i); }
            }
        public double? actual_rotation
            {
            get { return get_double("actual_rotation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "actual_rotation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "sliding_surface_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class slot : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public slot(SdaiInstance instance) : base(instance) { }
        public slot() : base(0) { }

        public static implicit operator slot(SdaiInstance instance) => new slot(instance);

        /// <summary>
        /// Create new instace of slot and returns object of this class to interact with
        /// </summary>
        public static new slot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "slot"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of slot_end
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class slot_end : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of slot_end
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public slot_end(SdaiInstance instance) : base(instance) { }
        public slot_end() : base(0) { }

        public static implicit operator slot_end(SdaiInstance instance) => new slot_end(instance);

        /// <summary>
        /// Create new instace of slot_end and returns object of this class to interact with
        /// </summary>
        public static new slot_end Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "slot_end"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "slot_end"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_measure_with_unit() : base(0) { }

        public static implicit operator solid_angle_measure_with_unit(SdaiInstance instance) => new solid_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_unit() : base(0) { }

        public static implicit operator solid_angle_unit(SdaiInstance instance) => new solid_angle_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "solid_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_replica : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_replica(SdaiInstance instance) : base(instance) { }
        public solid_replica() : base(0) { }

        public static implicit operator solid_replica(SdaiInstance instance) => new solid_replica(instance);

        /// <summary>
        /// Create new instace of solid_replica and returns object of this class to interact with
        /// </summary>
        public static new solid_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_replica"); Debug.Assert(inst != 0); return inst; }

        public solid_model parent_solid 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, out inst); return new solid_model(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator_3d transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "solid_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of specified_higher_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class specified_higher_usage_occurrence : assembly_component_usage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of specified_higher_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public specified_higher_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public specified_higher_usage_occurrence() : base(0) { }

        public static implicit operator specified_higher_usage_occurrence(SdaiInstance instance) => new specified_higher_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of specified_higher_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new specified_higher_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "specified_higher_usage_occurrence"); Debug.Assert(inst != 0); return inst; }

        public assembly_component_usage upper_usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "upper_usage", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "upper_usage", ifcengine.sdaiINSTANCE, i); }
            }
        public next_assembly_usage_occurrence next_usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "next_usage", ifcengine.sdaiINSTANCE, out inst); return new next_assembly_usage_occurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "next_usage", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "specified_higher_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sphere
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sphere : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sphere(SdaiInstance instance) : base(instance) { }
        public sphere() : base(0) { }

        public static implicit operator sphere(SdaiInstance instance) => new sphere(instance);

        /// <summary>
        /// Create new instace of sphere and returns object of this class to interact with
        /// </summary>
        public static new sphere Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sphere"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public point centre 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "sphere"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_pair(SdaiInstance instance) : base(instance) { }
        public spherical_pair() : base(0) { }

        public static implicit operator spherical_pair(SdaiInstance instance) => new spherical_pair(instance);

        /// <summary>
        /// Create new instace of spherical_pair and returns object of this class to interact with
        /// </summary>
        public static new spherical_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "spherical_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_pair_range(SdaiInstance instance) : base(instance) { }
        public spherical_pair_range() : base(0) { }

        public static implicit operator spherical_pair_range(SdaiInstance instance) => new spherical_pair_range(instance);

        /// <summary>
        /// Create new instace of spherical_pair_range and returns object of this class to interact with
        /// </summary>
        public static new spherical_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_yaw", 0); }
            }

        public rotational_range_measure upper_limit_yaw
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_yaw", 0); }
            }

        public rotational_range_measure lower_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_pitch", 0); }
            }

        public rotational_range_measure upper_limit_pitch
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_pitch", 0); }
            }

        public rotational_range_measure lower_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_roll", 0); }
            }

        public rotational_range_measure upper_limit_roll
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_roll", 0); }
            }

        protected override TextValue WrapperEntityName() { return "spherical_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_pair_value(SdaiInstance instance) : base(instance) { }
        public spherical_pair_value() : base(0) { }

        public static implicit operator spherical_pair_value(SdaiInstance instance) => new spherical_pair_value(instance);

        /// <summary>
        /// Create new instace of spherical_pair_value and returns object of this class to interact with
        /// </summary>
        public static new spherical_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_pair_value"); Debug.Assert(inst != 0); return inst; }


        public spatial_rotation input_orientation
            {
            get { return new spatial_rotation(m_instance, "input_orientation", 0); }
            }
        public ypr_rotation actual_orientation { get { return (new ypr_rotationSerializer()).FromAttr(m_instance, "actual_orientation"); } }

        protected override TextValue WrapperEntityName() { return "spherical_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_surface : elementary_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_surface(SdaiInstance instance) : base(instance) { }
        public spherical_surface() : base(0) { }

        public static implicit operator spherical_surface(SdaiInstance instance) => new spherical_surface(instance);

        /// <summary>
        /// Create new instace of spherical_surface and returns object of this class to interact with
        /// </summary>
        public static new spherical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "spherical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sql_mappable_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sql_mappable_defined_function : defined_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sql_mappable_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sql_mappable_defined_function(SdaiInstance instance) : base(instance) { }
        public sql_mappable_defined_function() : base(0) { }

        public static implicit operator sql_mappable_defined_function(SdaiInstance instance) => new sql_mappable_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "sql_mappable_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of square_root_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class square_root_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of square_root_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public square_root_function(SdaiInstance instance) : base(instance) { }
        public square_root_function() : base(0) { }

        public static implicit operator square_root_function(SdaiInstance instance) => new square_root_function(instance);

        /// <summary>
        /// Create new instace of square_root_function and returns object of this class to interact with
        /// </summary>
        public static new square_root_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "square_root_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "square_root_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of square_u_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class square_u_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of square_u_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public square_u_profile(SdaiInstance instance) : base(instance) { }
        public square_u_profile() : base(0) { }

        public static implicit operator square_u_profile(SdaiInstance instance) => new square_u_profile(instance);

        /// <summary>
        /// Create new instace of square_u_profile and returns object of this class to interact with
        /// </summary>
        public static new square_u_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "square_u_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "square_u_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of standard_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class standard_uncertainty : uncertainty_qualifier
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of standard_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public standard_uncertainty(SdaiInstance instance) : base(instance) { }
        public standard_uncertainty() : base(0) { }

        public static implicit operator standard_uncertainty(SdaiInstance instance) => new standard_uncertainty(instance);

        /// <summary>
        /// Create new instace of standard_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new standard_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "standard_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public double? uncertainty_value
            {
            get { return get_double("uncertainty_value", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "standard_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of straightness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class straightness_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of straightness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public straightness_tolerance(SdaiInstance instance) : base(instance) { }
        public straightness_tolerance() : base(0) { }

        public static implicit operator straightness_tolerance(SdaiInstance instance) => new straightness_tolerance(instance);

        /// <summary>
        /// Create new instace of straightness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new straightness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "straightness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "straightness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of string_defined_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class string_defined_function : defined_function
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of string_defined_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public string_defined_function(SdaiInstance instance) : base(instance) { }
        public string_defined_function() : base(0) { }

        public static implicit operator string_defined_function(SdaiInstance instance) => new string_defined_function(instance);


        protected override TextValue WrapperEntityName() { return "string_defined_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of string_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class string_literal : simple_string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of string_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public string_literal(SdaiInstance instance) : base(instance) { }
        public string_literal() : base(0) { }

        public static implicit operator string_literal(SdaiInstance instance) => new string_literal(instance);

        /// <summary>
        /// Create new instace of string_literal and returns object of this class to interact with
        /// </summary>
        public static new string_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "string_literal"); Debug.Assert(inst != 0); return inst; }

        public TextValue the_value
            {
            get { return get_string("the_value", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "string_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of string_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class string_variable : simple_string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of string_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public string_variable(SdaiInstance instance) : base(instance) { }
        public string_variable() : base(0) { }

        public static implicit operator string_variable(SdaiInstance instance) => new string_variable(instance);

        /// <summary>
        /// Create new instace of string_variable and returns object of this class to interact with
        /// </summary>
        public static new string_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "string_variable"); Debug.Assert(inst != 0); return inst; }

        public environment interpretation { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interpretation", ifcengine.sdaiINSTANCE, out inst); return new environment(inst); } }

        protected override TextValue WrapperEntityName() { return "string_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structured_dimension_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structured_dimension_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structured_dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structured_dimension_callout(SdaiInstance instance) : base(instance) { }
        public structured_dimension_callout() : base(0) { }

        public static implicit operator structured_dimension_callout(SdaiInstance instance) => new structured_dimension_callout(instance);

        /// <summary>
        /// Create new instace of structured_dimension_callout and returns object of this class to interact with
        /// </summary>
        public static new structured_dimension_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structured_dimension_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "structured_dimension_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subedge : edge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subedge(SdaiInstance instance) : base(instance) { }
        public subedge() : base(0) { }

        public static implicit operator subedge(SdaiInstance instance) => new subedge(instance);

        /// <summary>
        /// Create new instace of subedge and returns object of this class to interact with
        /// </summary>
        public static new subedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subedge"); Debug.Assert(inst != 0); return inst; }

        public edge parent_edge 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, out inst); return new edge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "subedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subface : face
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subface(SdaiInstance instance) : base(instance) { }
        public subface() : base(0) { }

        public static implicit operator subface(SdaiInstance instance) => new subface(instance);

        /// <summary>
        /// Create new instace of subface and returns object of this class to interact with
        /// </summary>
        public static new subface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subface"); Debug.Assert(inst != 0); return inst; }

        public face parent_face 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, out inst); return new face(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "subface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of substring_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class substring_expression : string_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of substring_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public substring_expression(SdaiInstance instance) : base(instance) { }
        public substring_expression() : base(0) { }

        public static implicit operator substring_expression(SdaiInstance instance) => new substring_expression(instance);

        /// <summary>
        /// Create new instace of substring_expression and returns object of this class to interact with
        /// </summary>
        public static new substring_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "substring_expression"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression operands { get { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        public generic_expression operand { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression index1 { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "index1", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }
        public generic_expression index2 { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "index2", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } }

        protected override TextValue WrapperEntityName() { return "substring_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_condition_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_condition_callout : draughting_callout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_condition_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_condition_callout(SdaiInstance instance) : base(instance) { }
        public surface_condition_callout() : base(0) { }

        public static implicit operator surface_condition_callout(SdaiInstance instance) => new surface_condition_callout(instance);

        /// <summary>
        /// Create new instace of surface_condition_callout and returns object of this class to interact with
        /// </summary>
        public static new surface_condition_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_condition_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "surface_condition_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_surface : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_surface(SdaiInstance instance) : base(instance) { }
        public swept_surface() : base(0) { }

        public static implicit operator swept_surface(SdaiInstance instance) => new swept_surface(instance);

        /// <summary>
        /// Create new instace of swept_surface and returns object of this class to interact with
        /// </summary>
        public static new swept_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_surface"); Debug.Assert(inst != 0); return inst; }

        public curve swept_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "swept_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_linear_extrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_linear_extrusion : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_linear_extrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_linear_extrusion(SdaiInstance instance) : base(instance) { }
        public surface_of_linear_extrusion() : base(0) { }

        public static implicit operator surface_of_linear_extrusion(SdaiInstance instance) => new surface_of_linear_extrusion(instance);

        /// <summary>
        /// Create new instace of surface_of_linear_extrusion and returns object of this class to interact with
        /// </summary>
        public static new surface_of_linear_extrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_linear_extrusion"); Debug.Assert(inst != 0); return inst; }

        public vector extrusion_axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_of_linear_extrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_revolution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_revolution : swept_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_revolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_revolution(SdaiInstance instance) : base(instance) { }
        public surface_of_revolution() : base(0) { }

        public static implicit operator surface_of_revolution(SdaiInstance instance) => new surface_of_revolution(instance);

        /// <summary>
        /// Create new instace of surface_of_revolution and returns object of this class to interact with
        /// </summary>
        public static new surface_of_revolution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_revolution"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement axis_position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, i); }
            }
        public line axis_line { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_line", ifcengine.sdaiINSTANCE, out inst); return new line(inst); } }

        protected override TextValue WrapperEntityName() { return "surface_of_revolution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_pair_range(SdaiInstance instance) : base(instance) { }
        public surface_pair_range() : base(0) { }

        public static implicit operator surface_pair_range(SdaiInstance instance) => new surface_pair_range(instance);

        /// <summary>
        /// Create new instace of surface_pair_range and returns object of this class to interact with
        /// </summary>
        public static new surface_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_pair_range"); Debug.Assert(inst != 0); return inst; }

        public rectangular_trimmed_surface range_on_surface_1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_surface_1", ifcengine.sdaiINSTANCE, out inst); return new rectangular_trimmed_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_surface_1", ifcengine.sdaiINSTANCE, i); }
            }
        public rectangular_trimmed_surface range_on_surface_2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "range_on_surface_2", ifcengine.sdaiINSTANCE, out inst); return new rectangular_trimmed_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "range_on_surface_2", ifcengine.sdaiINSTANCE, i); }
            }

        public rotational_range_measure lower_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_actual_rotation", 0); }
            }

        public rotational_range_measure upper_limit_actual_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_actual_rotation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_patch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_patch : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_patch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_patch(SdaiInstance instance) : base(instance) { }
        public surface_patch() : base(0) { }

        public static implicit operator surface_patch(SdaiInstance instance) => new surface_patch(instance);

        /// <summary>
        /// Create new instace of surface_patch and returns object of this class to interact with
        /// </summary>
        public static new surface_patch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_patch"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface parent_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public transition_code? u_transition 
            { 
            get { var str = get_string("u_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "u_transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public transition_code? v_transition 
            { 
            get { var str = get_string("v_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<transition_code>.FromValue(value.Value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "v_transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? u_sense
            {
            get { return get_bool("u_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "u_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? v_sense
            {
            get { return get_bool("v_sense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "v_sense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bag_of_rectangular_composite_surface using_surfaces { get { return (new bag_of_rectangular_composite_surfaceSerializer()).FromAttr(m_instance, "using_surfaces"); } }

        protected override TextValue WrapperEntityName() { return "surface_patch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_profile_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_profile_tolerance : geometric_tolerance
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_profile_tolerance(SdaiInstance instance) : base(instance) { }
        public surface_profile_tolerance() : base(0) { }

        public static implicit operator surface_profile_tolerance(SdaiInstance instance) => new surface_profile_tolerance(instance);

        /// <summary>
        /// Create new instace of surface_profile_tolerance and returns object of this class to interact with
        /// </summary>
        public static new surface_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_profile_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "surface_profile_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_rendering_properties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_rendering_properties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_rendering_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_rendering_properties(SdaiInstance instance) : base(instance) { }
        public surface_rendering_properties() : base(0) { }

        public static implicit operator surface_rendering_properties(SdaiInstance instance) => new surface_rendering_properties(instance);

        /// <summary>
        /// Create new instace of surface_rendering_properties and returns object of this class to interact with
        /// </summary>
        public static new surface_rendering_properties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_rendering_properties"); Debug.Assert(inst != 0); return inst; }

        public colour rendered_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rendered_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "rendered_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_rendering_properties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_replica : surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_replica(SdaiInstance instance) : base(instance) { }
        public surface_replica() : base(0) { }

        public static implicit operator surface_replica(SdaiInstance instance) => new surface_replica(instance);

        /// <summary>
        /// Create new instace of surface_replica and returns object of this class to interact with
        /// </summary>
        public static new surface_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_replica"); Debug.Assert(inst != 0); return inst; }

        public surface parent_surface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new surface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
            }
        public cartesian_transformation_operator_3d transformation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_side_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_side_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_side_style(SdaiInstance instance) : base(instance) { }
        public surface_side_style() : base(0) { }

        public static implicit operator surface_side_style(SdaiInstance instance) => new surface_side_style(instance);

        /// <summary>
        /// Create new instace of surface_side_style and returns object of this class to interact with
        /// </summary>
        public static new surface_side_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_side_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public set_of_surface_style_element_select styles { get { return (new set_of_surface_style_element_selectSerializer()).FromAttr(m_instance, "styles"); } }
        public void put_styles(IEnumerable<surface_style_element_select> lst) { (new set_of_surface_style_element_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        public void put_styles_untyped(IEnumerable lst) { (new set_of_surface_style_element_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }

        protected override TextValue WrapperEntityName() { return "surface_side_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_boundary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_boundary : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_boundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_boundary(SdaiInstance instance) : base(instance) { }
        public surface_style_boundary() : base(0) { }

        public static implicit operator surface_style_boundary(SdaiInstance instance) => new surface_style_boundary(instance);

        /// <summary>
        /// Create new instace of surface_style_boundary and returns object of this class to interact with
        /// </summary>
        public static new surface_style_boundary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_boundary"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render style_of_boundary
            {
            get { return new curve_or_render(m_instance, "style_of_boundary", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_boundary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_control_grid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_control_grid : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_control_grid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_control_grid(SdaiInstance instance) : base(instance) { }
        public surface_style_control_grid() : base(0) { }

        public static implicit operator surface_style_control_grid(SdaiInstance instance) => new surface_style_control_grid(instance);

        /// <summary>
        /// Create new instace of surface_style_control_grid and returns object of this class to interact with
        /// </summary>
        public static new surface_style_control_grid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_control_grid"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render style_of_control_grid
            {
            get { return new curve_or_render(m_instance, "style_of_control_grid", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_control_grid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_fill_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_fill_area : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_fill_area(SdaiInstance instance) : base(instance) { }
        public surface_style_fill_area() : base(0) { }

        public static implicit operator surface_style_fill_area(SdaiInstance instance) => new surface_style_fill_area(instance);

        /// <summary>
        /// Create new instace of surface_style_fill_area and returns object of this class to interact with
        /// </summary>
        public static new surface_style_fill_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_fill_area"); Debug.Assert(inst != 0); return inst; }

        public fill_area_style fill_area 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_area", ifcengine.sdaiINSTANCE, out inst); return new fill_area_style(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "fill_area", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_fill_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_parameter_line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_parameter_line : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_parameter_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_parameter_line(SdaiInstance instance) : base(instance) { }
        public surface_style_parameter_line() : base(0) { }

        public static implicit operator surface_style_parameter_line(SdaiInstance instance) => new surface_style_parameter_line(instance);

        /// <summary>
        /// Create new instace of surface_style_parameter_line and returns object of this class to interact with
        /// </summary>
        public static new surface_style_parameter_line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_parameter_line"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render style_of_parameter_lines
            {
            get { return new curve_or_render(m_instance, "style_of_parameter_lines", 0); }
            }
        public set_of_direction_count_select direction_counts { get { return (new set_of_direction_count_selectSerializer()).FromAttr(m_instance, "direction_counts"); } }
        public void put_direction_counts(IEnumerable<direction_count_select> lst) { (new set_of_direction_count_selectSerializer()).ToSdaiAggr(lst, m_instance, "direction_counts"); }
        public void put_direction_counts_untyped(IEnumerable lst) { (new set_of_direction_count_selectSerializer()).ToSdaiAggr(lst, m_instance, "direction_counts"); }

        protected override TextValue WrapperEntityName() { return "surface_style_parameter_line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient(SdaiInstance instance) => new surface_style_reflectance_ambient(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient"); Debug.Assert(inst != 0); return inst; }

        public double? ambient_reflectance
            {
            get { return get_double("ambient_reflectance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ambient_reflectance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_reflectance_ambient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient_diffuse : surface_style_reflectance_ambient
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient_diffuse(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient_diffuse() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient_diffuse(SdaiInstance instance) => new surface_style_reflectance_ambient_diffuse(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient_diffuse and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient_diffuse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse"); Debug.Assert(inst != 0); return inst; }

        public double? diffuse_reflectance
            {
            get { return get_double("diffuse_reflectance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "diffuse_reflectance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_reflectance_ambient_diffuse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse_specular
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient_diffuse_specular : surface_style_reflectance_ambient_diffuse
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse_specular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient_diffuse_specular() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance) => new surface_style_reflectance_ambient_diffuse_specular(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient_diffuse_specular and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient_diffuse_specular Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse_specular"); Debug.Assert(inst != 0); return inst; }

        public double? specular_reflectance
            {
            get { return get_double("specular_reflectance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "specular_reflectance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? specular_exponent
            {
            get { return get_double("specular_exponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "specular_exponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public colour specular_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "specular_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "specular_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_reflectance_ambient_diffuse_specular"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_rendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_rendering : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_rendering(SdaiInstance instance) : base(instance) { }
        public surface_style_rendering() : base(0) { }

        public static implicit operator surface_style_rendering(SdaiInstance instance) => new surface_style_rendering(instance);

        /// <summary>
        /// Create new instace of surface_style_rendering and returns object of this class to interact with
        /// </summary>
        public static new surface_style_rendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_rendering"); Debug.Assert(inst != 0); return inst; }

        public shading_surface_method? rendering_method 
            { 
            get { var str = get_string("rendering_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shading_surface_method_); return EnumValue<shading_surface_method>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<shading_surface_method>.FromValue(value.Value, EnumNames.shading_surface_method_); ifcengine.sdaiPutAttrBN(m_instance, "rendering_method", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public colour surface_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "surface_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_rendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_rendering_with_properties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_rendering_with_properties : surface_style_rendering
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_rendering_with_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_rendering_with_properties(SdaiInstance instance) : base(instance) { }
        public surface_style_rendering_with_properties() : base(0) { }

        public static implicit operator surface_style_rendering_with_properties(SdaiInstance instance) => new surface_style_rendering_with_properties(instance);

        /// <summary>
        /// Create new instace of surface_style_rendering_with_properties and returns object of this class to interact with
        /// </summary>
        public static new surface_style_rendering_with_properties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_rendering_with_properties"); Debug.Assert(inst != 0); return inst; }

        public set_of_rendering_properties_select properties { get { return (new set_of_rendering_properties_selectSerializer()).FromAttr(m_instance, "properties"); } }
        public void put_properties(IEnumerable<rendering_properties_select> lst) { (new set_of_rendering_properties_selectSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }
        public void put_properties_untyped(IEnumerable lst) { (new set_of_rendering_properties_selectSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }

        protected override TextValue WrapperEntityName() { return "surface_style_rendering_with_properties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_segmentation_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_segmentation_curve : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_segmentation_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_segmentation_curve(SdaiInstance instance) : base(instance) { }
        public surface_style_segmentation_curve() : base(0) { }

        public static implicit operator surface_style_segmentation_curve(SdaiInstance instance) => new surface_style_segmentation_curve(instance);

        /// <summary>
        /// Create new instace of surface_style_segmentation_curve and returns object of this class to interact with
        /// </summary>
        public static new surface_style_segmentation_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_segmentation_curve"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render style_of_segmentation_curve
            {
            get { return new curve_or_render(m_instance, "style_of_segmentation_curve", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_segmentation_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_silhouette
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_silhouette : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_silhouette
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_silhouette(SdaiInstance instance) : base(instance) { }
        public surface_style_silhouette() : base(0) { }

        public static implicit operator surface_style_silhouette(SdaiInstance instance) => new surface_style_silhouette(instance);

        /// <summary>
        /// Create new instace of surface_style_silhouette and returns object of this class to interact with
        /// </summary>
        public static new surface_style_silhouette Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_silhouette"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render style_of_silhouette
            {
            get { return new curve_or_render(m_instance, "style_of_silhouette", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_silhouette"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_transparent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_transparent : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_transparent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_transparent(SdaiInstance instance) : base(instance) { }
        public surface_style_transparent() : base(0) { }

        public static implicit operator surface_style_transparent(SdaiInstance instance) => new surface_style_transparent(instance);

        /// <summary>
        /// Create new instace of surface_style_transparent and returns object of this class to interact with
        /// </summary>
        public static new surface_style_transparent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_transparent"); Debug.Assert(inst != 0); return inst; }

        public double? transparency
            {
            get { return get_double("transparency", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "transparency", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_transparent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_usage : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_usage(SdaiInstance instance) : base(instance) { }
        public surface_style_usage() : base(0) { }

        public static implicit operator surface_style_usage(SdaiInstance instance) => new surface_style_usage(instance);

        /// <summary>
        /// Create new instace of surface_style_usage and returns object of this class to interact with
        /// </summary>
        public static new surface_style_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_usage"); Debug.Assert(inst != 0); return inst; }

        public surface_side? side 
            { 
            get { var str = get_string("side", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.surface_side_); return EnumValue<surface_side>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<surface_side>.FromValue(value.Value, EnumNames.surface_side_); ifcengine.sdaiPutAttrBN(m_instance, "side", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public surface_side_style_select style
            {
            get { return new surface_side_style_select(m_instance, "style", 0); }
            }

        protected override TextValue WrapperEntityName() { return "surface_style_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_texture_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_texture_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_texture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_texture_representation(SdaiInstance instance) : base(instance) { }
        public surface_texture_representation() : base(0) { }

        public static implicit operator surface_texture_representation(SdaiInstance instance) => new surface_texture_representation(instance);

        /// <summary>
        /// Create new instace of surface_texture_representation and returns object of this class to interact with
        /// </summary>
        public static new surface_texture_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_texture_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "surface_texture_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_disk_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_disk_solid : solid_model
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_disk_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_disk_solid(SdaiInstance instance) : base(instance) { }
        public swept_disk_solid() : base(0) { }

        public static implicit operator swept_disk_solid(SdaiInstance instance) => new swept_disk_solid(instance);

        /// <summary>
        /// Create new instace of swept_disk_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_disk_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_disk_solid"); Debug.Assert(inst != 0); return inst; }

        public curve directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? radius
            {
            get { return get_double("radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? inner_radius
            {
            get { return get_double("inner_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "inner_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? start_param
            {
            get { return get_double("start_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? end_param
            {
            get { return get_double("end_param", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "swept_disk_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_colour : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_colour(SdaiInstance instance) : base(instance) { }
        public symbol_colour() : base(0) { }

        public static implicit operator symbol_colour(SdaiInstance instance) => new symbol_colour(instance);

        /// <summary>
        /// Create new instace of symbol_colour and returns object of this class to interact with
        /// </summary>
        public static new symbol_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_colour"); Debug.Assert(inst != 0); return inst; }

        public colour colour_of_symbol 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "colour_of_symbol", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "colour_of_symbol", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "symbol_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_representation_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_representation_map : representation_map
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_representation_map(SdaiInstance instance) : base(instance) { }
        public symbol_representation_map() : base(0) { }

        public static implicit operator symbol_representation_map(SdaiInstance instance) => new symbol_representation_map(instance);

        /// <summary>
        /// Create new instace of symbol_representation_map and returns object of this class to interact with
        /// </summary>
        public static new symbol_representation_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_representation_map"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "symbol_representation_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_style(SdaiInstance instance) : base(instance) { }
        public symbol_style() : base(0) { }

        public static implicit operator symbol_style(SdaiInstance instance) => new symbol_style(instance);

        /// <summary>
        /// Create new instace of symbol_style and returns object of this class to interact with
        /// </summary>
        public static new symbol_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        public symbol_style_select style_of_symbol
            {
            get { return new symbol_style_select(m_instance, "style_of_symbol", 0); }
            }

        protected override TextValue WrapperEntityName() { return "symbol_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_target
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_target : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_target(SdaiInstance instance) : base(instance) { }
        public symbol_target() : base(0) { }

        public static implicit operator symbol_target(SdaiInstance instance) => new symbol_target(instance);

        /// <summary>
        /// Create new instace of symbol_target and returns object of this class to interact with
        /// </summary>
        public static new symbol_target Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_target"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement placement
            {
            get { return new axis2_placement(m_instance, "placement", 0); }
            }
        public double? x_scale
            {
            get { return get_double("x_scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "x_scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? y_scale
            {
            get { return get_double("y_scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "y_scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "symbol_target"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symmetric_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symmetric_shape_aspect : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symmetric_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symmetric_shape_aspect(SdaiInstance instance) : base(instance) { }
        public symmetric_shape_aspect() : base(0) { }

        public static implicit operator symmetric_shape_aspect(SdaiInstance instance) => new symmetric_shape_aspect(instance);

        /// <summary>
        /// Create new instace of symmetric_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new symmetric_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symmetric_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship basis_relationships { get { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "basis_relationships"); } }

        protected override TextValue WrapperEntityName() { return "symmetric_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symmetry_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symmetry_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symmetry_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symmetry_tolerance(SdaiInstance instance) : base(instance) { }
        public symmetry_tolerance() : base(0) { }

        public static implicit operator symmetry_tolerance(SdaiInstance instance) => new symmetry_tolerance(instance);

        /// <summary>
        /// Create new instace of symmetry_tolerance and returns object of this class to interact with
        /// </summary>
        public static new symmetry_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symmetry_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "symmetry_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tactile_appearance_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tactile_appearance_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tactile_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tactile_appearance_representation(SdaiInstance instance) : base(instance) { }
        public tactile_appearance_representation() : base(0) { }

        public static implicit operator tactile_appearance_representation(SdaiInstance instance) => new tactile_appearance_representation(instance);

        /// <summary>
        /// Create new instace of tactile_appearance_representation and returns object of this class to interact with
        /// </summary>
        public static new tactile_appearance_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tactile_appearance_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "tactile_appearance_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tan_function
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tan_function : unary_function_call
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tan_function
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tan_function(SdaiInstance instance) : base(instance) { }
        public tan_function() : base(0) { }

        public static implicit operator tan_function(SdaiInstance instance) => new tan_function(instance);

        /// <summary>
        /// Create new instace of tan_function and returns object of this class to interact with
        /// </summary>
        public static new tan_function Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tan_function"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "tan_function"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tangent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tangent : derived_shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tangent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tangent(SdaiInstance instance) : base(instance) { }
        public tangent() : base(0) { }

        public static implicit operator tangent(SdaiInstance instance) => new tangent(instance);

        /// <summary>
        /// Create new instace of tangent and returns object of this class to interact with
        /// </summary>
        public static new tangent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tangent"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "tangent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of taper
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class taper : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of taper
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public taper(SdaiInstance instance) : base(instance) { }
        public taper() : base(0) { }

        public static implicit operator taper(SdaiInstance instance) => new taper(instance);

        /// <summary>
        /// Create new instace of taper and returns object of this class to interact with
        /// </summary>
        public static new taper Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "taper"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "taper"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tee_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tee_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tee_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tee_profile(SdaiInstance instance) : base(instance) { }
        public tee_profile() : base(0) { }

        public static implicit operator tee_profile(SdaiInstance instance) => new tee_profile(instance);

        /// <summary>
        /// Create new instace of tee_profile and returns object of this class to interact with
        /// </summary>
        public static new tee_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tee_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "tee_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_associated_curves
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_associated_curves : text_literal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_associated_curves(SdaiInstance instance) : base(instance) { }
        public text_literal_with_associated_curves() : base(0) { }

        public static implicit operator text_literal_with_associated_curves(SdaiInstance instance) => new text_literal_with_associated_curves(instance);

        /// <summary>
        /// Create new instace of text_literal_with_associated_curves and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_associated_curves"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve associated_curves { get { return (new set_of_curveSerializer()).FromAttr(m_instance, "associated_curves"); } }
        public void put_associated_curves(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }
        public void put_associated_curves_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }

        protected override TextValue WrapperEntityName() { return "text_literal_with_associated_curves"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_blanking_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_blanking_box : text_literal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_blanking_box(SdaiInstance instance) : base(instance) { }
        public text_literal_with_blanking_box() : base(0) { }

        public static implicit operator text_literal_with_blanking_box(SdaiInstance instance) => new text_literal_with_blanking_box(instance);

        /// <summary>
        /// Create new instace of text_literal_with_blanking_box and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_blanking_box"); Debug.Assert(inst != 0); return inst; }

        public planar_box blanking 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, out inst); return new planar_box(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "text_literal_with_blanking_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_extent : text_literal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_extent(SdaiInstance instance) : base(instance) { }
        public text_literal_with_extent() : base(0) { }

        public static implicit operator text_literal_with_extent(SdaiInstance instance) => new text_literal_with_extent(instance);

        /// <summary>
        /// Create new instace of text_literal_with_extent and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_extent"); Debug.Assert(inst != 0); return inst; }

        public planar_extent extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, out inst); return new planar_extent(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "text_literal_with_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_string_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_string_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_string_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_string_representation(SdaiInstance instance) : base(instance) { }
        public text_string_representation() : base(0) { }

        public static implicit operator text_string_representation(SdaiInstance instance) => new text_string_representation(instance);

        /// <summary>
        /// Create new instace of text_string_representation and returns object of this class to interact with
        /// </summary>
        public static new text_string_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_string_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "text_string_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style(SdaiInstance instance) : base(instance) { }
        public text_style() : base(0) { }

        public static implicit operator text_style(SdaiInstance instance) => new text_style(instance);

        /// <summary>
        /// Create new instace of text_style and returns object of this class to interact with
        /// </summary>
        public static new text_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        public character_style_select character_appearance
            {
            get { return new character_style_select(m_instance, "character_appearance", 0); }
            }

        protected override TextValue WrapperEntityName() { return "text_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_for_defined_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_for_defined_font : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_for_defined_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_for_defined_font(SdaiInstance instance) : base(instance) { }
        public text_style_for_defined_font() : base(0) { }

        public static implicit operator text_style_for_defined_font(SdaiInstance instance) => new text_style_for_defined_font(instance);

        /// <summary>
        /// Create new instace of text_style_for_defined_font and returns object of this class to interact with
        /// </summary>
        public static new text_style_for_defined_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_for_defined_font"); Debug.Assert(inst != 0); return inst; }

        public colour text_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "text_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "text_colour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "text_style_for_defined_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_box_characteristics
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_box_characteristics : text_style
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_box_characteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_box_characteristics(SdaiInstance instance) : base(instance) { }
        public text_style_with_box_characteristics() : base(0) { }

        public static implicit operator text_style_with_box_characteristics(SdaiInstance instance) => new text_style_with_box_characteristics(instance);

        /// <summary>
        /// Create new instace of text_style_with_box_characteristics and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_box_characteristics Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_box_characteristics"); Debug.Assert(inst != 0); return inst; }

        public set_of_box_characteristic_select characteristics { get { return (new set_of_box_characteristic_selectSerializer()).FromAttr(m_instance, "characteristics"); } }
        public void put_characteristics(IEnumerable<box_characteristic_select> lst) { (new set_of_box_characteristic_selectSerializer()).ToSdaiAggr(lst, m_instance, "characteristics"); }
        public void put_characteristics_untyped(IEnumerable lst) { (new set_of_box_characteristic_selectSerializer()).ToSdaiAggr(lst, m_instance, "characteristics"); }

        protected override TextValue WrapperEntityName() { return "text_style_with_box_characteristics"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_mirror
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_mirror : text_style
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_mirror
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_mirror(SdaiInstance instance) : base(instance) { }
        public text_style_with_mirror() : base(0) { }

        public static implicit operator text_style_with_mirror(SdaiInstance instance) => new text_style_with_mirror(instance);

        /// <summary>
        /// Create new instace of text_style_with_mirror and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_mirror Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_mirror"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement mirror_placement
            {
            get { return new axis2_placement(m_instance, "mirror_placement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "text_style_with_mirror"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_spacing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_spacing : text_style
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_spacing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_spacing(SdaiInstance instance) : base(instance) { }
        public text_style_with_spacing() : base(0) { }

        public static implicit operator text_style_with_spacing(SdaiInstance instance) => new text_style_with_spacing(instance);

        /// <summary>
        /// Create new instace of text_style_with_spacing and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_spacing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_spacing"); Debug.Assert(inst != 0); return inst; }


        public character_spacing_select character_spacing
            {
            get { return new character_spacing_select(m_instance, "character_spacing", 0); }
            }

        protected override TextValue WrapperEntityName() { return "text_style_with_spacing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_measure_with_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_measure_with_unit(SdaiInstance instance) => new thermodynamic_temperature_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "thermodynamic_temperature_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_unit(SdaiInstance instance) => new thermodynamic_temperature_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "thermodynamic_temperature_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thread
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thread : feature_definition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thread
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thread(SdaiInstance instance) : base(instance) { }
        public thread() : base(0) { }

        public static implicit operator thread(SdaiInstance instance) => new thread(instance);

        /// <summary>
        /// Create new instace of thread and returns object of this class to interact with
        /// </summary>
        public static new thread Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thread"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "thread"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval(SdaiInstance instance) : base(instance) { }
        public time_interval() : base(0) { }

        public static implicit operator time_interval(SdaiInstance instance) => new time_interval(instance);

        /// <summary>
        /// Create new instace of time_interval and returns object of this class to interact with
        /// </summary>
        public static new time_interval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "time_interval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_based_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_based_effectivity : effectivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_based_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_based_effectivity(SdaiInstance instance) : base(instance) { }
        public time_interval_based_effectivity() : base(0) { }

        public static implicit operator time_interval_based_effectivity(SdaiInstance instance) => new time_interval_based_effectivity(instance);

        /// <summary>
        /// Create new instace of time_interval_based_effectivity and returns object of this class to interact with
        /// </summary>
        public static new time_interval_based_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_based_effectivity"); Debug.Assert(inst != 0); return inst; }

        public time_interval effectivity_period 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effectivity_period", ifcengine.sdaiINSTANCE, out inst); return new time_interval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "effectivity_period", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "time_interval_based_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_role : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_role(SdaiInstance instance) : base(instance) { }
        public time_interval_role() : base(0) { }

        public static implicit operator time_interval_role(SdaiInstance instance) => new time_interval_role(instance);

        /// <summary>
        /// Create new instace of time_interval_role and returns object of this class to interact with
        /// </summary>
        public static new time_interval_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "time_interval_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_with_bounds
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_with_bounds : time_interval
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_with_bounds
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_with_bounds(SdaiInstance instance) : base(instance) { }
        public time_interval_with_bounds() : base(0) { }

        public static implicit operator time_interval_with_bounds(SdaiInstance instance) => new time_interval_with_bounds(instance);

        /// <summary>
        /// Create new instace of time_interval_with_bounds and returns object of this class to interact with
        /// </summary>
        public static new time_interval_with_bounds Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_with_bounds"); Debug.Assert(inst != 0); return inst; }


        public date_time_or_event_occurrence primary_bound
            {
            get { return new date_time_or_event_occurrence(m_instance, "primary_bound", 0); }
            }

        public date_time_or_event_occurrence secondary_bound
            {
            get { return new date_time_or_event_occurrence(m_instance, "secondary_bound", 0); }
            }
        public time_measure_with_unit duration 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "duration", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "duration", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "time_interval_with_bounds"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public time_measure_with_unit() : base(0) { }

        public static implicit operator time_measure_with_unit(SdaiInstance instance) => new time_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of time_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new time_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "time_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_unit : named_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_unit(SdaiInstance instance) : base(instance) { }
        public time_unit() : base(0) { }

        public static implicit operator time_unit(SdaiInstance instance) => new time_unit(instance);

        /// <summary>
        /// Create new instace of time_unit and returns object of this class to interact with
        /// </summary>
        public static new time_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "time_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_value : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_value(SdaiInstance instance) : base(instance) { }
        public tolerance_value() : base(0) { }

        public static implicit operator tolerance_value(SdaiInstance instance) => new tolerance_value(instance);

        /// <summary>
        /// Create new instace of tolerance_value and returns object of this class to interact with
        /// </summary>
        public static new tolerance_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_value"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit lower_bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "lower_bound", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "lower_bound", ifcengine.sdaiINSTANCE, i); }
            }
        public measure_with_unit upper_bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "upper_bound", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "upper_bound", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "tolerance_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone(SdaiInstance instance) : base(instance) { }
        public tolerance_zone() : base(0) { }

        public static implicit operator tolerance_zone(SdaiInstance instance) => new tolerance_zone(instance);

        /// <summary>
        /// Create new instace of tolerance_zone and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone"); Debug.Assert(inst != 0); return inst; }

        public set_of_geometric_tolerance defining_tolerance { get { return (new set_of_geometric_toleranceSerializer()).FromAttr(m_instance, "defining_tolerance"); } }
        public void put_defining_tolerance(IEnumerable<geometric_tolerance> lst) { (new set_of_geometric_toleranceSerializer()).ToSdaiAggr(lst, m_instance, "defining_tolerance"); }
        public void put_defining_tolerance_untyped(IEnumerable lst) { (new set_of_geometric_toleranceSerializer()).ToSdaiAggr(lst, m_instance, "defining_tolerance"); }
        public tolerance_zone_form form 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "form", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone_form(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "form", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "tolerance_zone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone_form
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone_form : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone_form
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone_form(SdaiInstance instance) : base(instance) { }
        public tolerance_zone_form() : base(0) { }

        public static implicit operator tolerance_zone_form(SdaiInstance instance) => new tolerance_zone_form(instance);

        /// <summary>
        /// Create new instace of tolerance_zone_form and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone_form Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone_form"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "tolerance_zone_form"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of torus
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class torus : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of torus
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public torus(SdaiInstance instance) : base(instance) { }
        public torus() : base(0) { }

        public static implicit operator torus(SdaiInstance instance) => new torus(instance);

        /// <summary>
        /// Create new instace of torus and returns object of this class to interact with
        /// </summary>
        public static new torus Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "torus"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? major_radius
            {
            get { return get_double("major_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? minor_radius
            {
            get { return get_double("minor_radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "torus"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of total_runout_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class total_runout_tolerance : geometric_tolerance_with_datum_reference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of total_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public total_runout_tolerance(SdaiInstance instance) : base(instance) { }
        public total_runout_tolerance() : base(0) { }

        public static implicit operator total_runout_tolerance(SdaiInstance instance) => new total_runout_tolerance(instance);

        /// <summary>
        /// Create new instace of total_runout_tolerance and returns object of this class to interact with
        /// </summary>
        public static new total_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "total_runout_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "total_runout_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of trimmed_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class trimmed_curve : bounded_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of trimmed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public trimmed_curve(SdaiInstance instance) : base(instance) { }
        public trimmed_curve() : base(0) { }

        public static implicit operator trimmed_curve(SdaiInstance instance) => new trimmed_curve(instance);

        /// <summary>
        /// Create new instace of trimmed_curve and returns object of this class to interact with
        /// </summary>
        public static new trimmed_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "trimmed_curve"); Debug.Assert(inst != 0); return inst; }

        public curve basis_curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_trimming_select trim_1 { get { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_1"); } }
        public void put_trim_1(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        public void put_trim_1_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        public set_of_trimming_select trim_2 { get { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_2"); } }
        public void put_trim_2(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        public void put_trim_2_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        public bool? sense_agreement
            {
            get { return get_bool("sense_agreement", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "sense_agreement", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public trimming_preference? master_representation 
            { 
            get { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.trimming_preference_); return EnumValue<trimming_preference>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<trimming_preference>.FromValue(value.Value, EnumNames.trimming_preference_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "trimmed_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of two_direction_repeat_factor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class two_direction_repeat_factor : one_direction_repeat_factor
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of two_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public two_direction_repeat_factor(SdaiInstance instance) : base(instance) { }
        public two_direction_repeat_factor() : base(0) { }

        public static implicit operator two_direction_repeat_factor(SdaiInstance instance) => new two_direction_repeat_factor(instance);

        /// <summary>
        /// Create new instace of two_direction_repeat_factor and returns object of this class to interact with
        /// </summary>
        public static new two_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "two_direction_repeat_factor"); Debug.Assert(inst != 0); return inst; }

        public vector second_repeat_factor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "second_repeat_factor", ifcengine.sdaiINSTANCE, out inst); return new vector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "second_repeat_factor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "two_direction_repeat_factor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of type_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class type_qualifier : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of type_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public type_qualifier(SdaiInstance instance) : base(instance) { }
        public type_qualifier() : base(0) { }

        public static implicit operator type_qualifier(SdaiInstance instance) => new type_qualifier(instance);

        /// <summary>
        /// Create new instace of type_qualifier and returns object of this class to interact with
        /// </summary>
        public static new type_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "type_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "type_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_generic_expression : generic_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_generic_expression(SdaiInstance instance) : base(instance) { }
        public unary_generic_expression() : base(0) { }

        public static implicit operator unary_generic_expression(SdaiInstance instance) => new unary_generic_expression(instance);

        public generic_expression operand 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "unary_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_assigned_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_assigned_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_assigned_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_assigned_representation(SdaiInstance instance) : base(instance) { }
        public uncertainty_assigned_representation() : base(0) { }

        public static implicit operator uncertainty_assigned_representation(SdaiInstance instance) => new uncertainty_assigned_representation(instance);

        /// <summary>
        /// Create new instace of uncertainty_assigned_representation and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_assigned_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_assigned_representation"); Debug.Assert(inst != 0); return inst; }

        public set_of_uncertainty_measure_with_unit uncertainty { get { return (new set_of_uncertainty_measure_with_unitSerializer()).FromAttr(m_instance, "uncertainty"); } }
        public void put_uncertainty(IEnumerable<uncertainty_measure_with_unit> lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }
        public void put_uncertainty_untyped(IEnumerable lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }

        protected override TextValue WrapperEntityName() { return "uncertainty_assigned_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public uncertainty_measure_with_unit() : base(0) { }

        public static implicit operator uncertainty_measure_with_unit(SdaiInstance instance) => new uncertainty_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of uncertainty_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_measure_with_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "uncertainty_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unconstrained_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unconstrained_pair : kinematic_pair
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unconstrained_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unconstrained_pair(SdaiInstance instance) : base(instance) { }
        public unconstrained_pair() : base(0) { }

        public static implicit operator unconstrained_pair(SdaiInstance instance) => new unconstrained_pair(instance);

        /// <summary>
        /// Create new instace of unconstrained_pair and returns object of this class to interact with
        /// </summary>
        public static new unconstrained_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "unconstrained_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "unconstrained_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unconstrained_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unconstrained_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unconstrained_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unconstrained_pair_value(SdaiInstance instance) : base(instance) { }
        public unconstrained_pair_value() : base(0) { }

        public static implicit operator unconstrained_pair_value(SdaiInstance instance) => new unconstrained_pair_value(instance);

        /// <summary>
        /// Create new instace of unconstrained_pair_value and returns object of this class to interact with
        /// </summary>
        public static new unconstrained_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "unconstrained_pair_value"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d actual_placement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "actual_placement", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "actual_placement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "unconstrained_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_curve : b_spline_curve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_curve(SdaiInstance instance) : base(instance) { }
        public uniform_curve() : base(0) { }

        public static implicit operator uniform_curve(SdaiInstance instance) => new uniform_curve(instance);

        /// <summary>
        /// Create new instace of uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_surface : b_spline_surface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_surface(SdaiInstance instance) : base(instance) { }
        public uniform_surface() : base(0) { }

        public static implicit operator uniform_surface(SdaiInstance instance) => new uniform_surface(instance);

        /// <summary>
        /// Create new instace of uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of universal_pair_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class universal_pair_range : simple_pair_range
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of universal_pair_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public universal_pair_range(SdaiInstance instance) : base(instance) { }
        public universal_pair_range() : base(0) { }

        public static implicit operator universal_pair_range(SdaiInstance instance) => new universal_pair_range(instance);

        /// <summary>
        /// Create new instace of universal_pair_range and returns object of this class to interact with
        /// </summary>
        public static new universal_pair_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "universal_pair_range"); Debug.Assert(inst != 0); return inst; }


        public rotational_range_measure lower_limit_first_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_first_rotation", 0); }
            }

        public rotational_range_measure upper_limit_first_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_first_rotation", 0); }
            }

        public rotational_range_measure lower_limit_second_rotation
            {
            get { return new rotational_range_measure(m_instance, "lower_limit_second_rotation", 0); }
            }

        public rotational_range_measure upper_limit_second_rotation
            {
            get { return new rotational_range_measure(m_instance, "upper_limit_second_rotation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "universal_pair_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of universal_pair_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class universal_pair_value : pair_value
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of universal_pair_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public universal_pair_value(SdaiInstance instance) : base(instance) { }
        public universal_pair_value() : base(0) { }

        public static implicit operator universal_pair_value(SdaiInstance instance) => new universal_pair_value(instance);

        /// <summary>
        /// Create new instace of universal_pair_value and returns object of this class to interact with
        /// </summary>
        public static new universal_pair_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "universal_pair_value"); Debug.Assert(inst != 0); return inst; }

        public double? first_rotation_angle
            {
            get { return get_double("first_rotation_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "first_rotation_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? second_rotation_angle
            {
            get { return get_double("second_rotation_angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "second_rotation_angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "universal_pair_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of value_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class value_range : compound_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of value_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public value_range(SdaiInstance instance) : base(instance) { }
        public value_range() : base(0) { }

        public static implicit operator value_range(SdaiInstance instance) => new value_range(instance);

        /// <summary>
        /// Create new instace of value_range and returns object of this class to interact with
        /// </summary>
        public static new value_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "value_range"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "value_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of value_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class value_representation_item : representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of value_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public value_representation_item(SdaiInstance instance) : base(instance) { }
        public value_representation_item() : base(0) { }

        public static implicit operator value_representation_item(SdaiInstance instance) => new value_representation_item(instance);

        /// <summary>
        /// Create new instace of value_representation_item and returns object of this class to interact with
        /// </summary>
        public static new value_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "value_representation_item"); Debug.Assert(inst != 0); return inst; }


        public measure_value value_component
            {
            get { return new measure_value(m_instance, "value_component", 0); }
            }

        protected override TextValue WrapperEntityName() { return "value_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class variable : generic_variable
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public variable(SdaiInstance instance) : base(instance) { }
        public variable() : base(0) { }

        public static implicit operator variable(SdaiInstance instance) => new variable(instance);


        protected override TextValue WrapperEntityName() { return "variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of variable_semantics
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class variable_semantics : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of variable_semantics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public variable_semantics(SdaiInstance instance) : base(instance) { }
        public variable_semantics() : base(0) { }

        public static implicit operator variable_semantics(SdaiInstance instance) => new variable_semantics(instance);


        protected override TextValue WrapperEntityName() { return "variable_semantics"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vector : geometric_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vector(SdaiInstance instance) : base(instance) { }
        public vector() : base(0) { }

        public static implicit operator vector(SdaiInstance instance) => new vector(instance);

        /// <summary>
        /// Create new instace of vector and returns object of this class to interact with
        /// </summary>
        public static new vector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vector"); Debug.Assert(inst != 0); return inst; }

        public direction orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? magnitude
            {
            get { return get_double("magnitude", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "magnitude", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "vector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vector_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vector_style : pre_defined_terminator_symbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vector_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vector_style(SdaiInstance instance) : base(instance) { }
        public vector_style() : base(0) { }

        public static implicit operator vector_style(SdaiInstance instance) => new vector_style(instance);

        /// <summary>
        /// Create new instace of vector_style and returns object of this class to interact with
        /// </summary>
        public static new vector_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vector_style"); Debug.Assert(inst != 0); return inst; }


        public curve_font_or_scaled_curve_font_select curve_font
            {
            get { return new curve_font_or_scaled_curve_font_select(m_instance, "curve_font", 0); }
            }

        public size_select curve_width
            {
            get { return new size_select(m_instance, "curve_width", 0); }
            }
        public colour curve_colour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, out inst); return new colour(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, i); }
            }
        public set_of_founded_item_select users { get { return (new set_of_founded_item_selectSerializer()).FromAttr(m_instance, "users"); } }

        protected override TextValue WrapperEntityName() { return "vector_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vee_profile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vee_profile : shape_aspect
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vee_profile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vee_profile(SdaiInstance instance) : base(instance) { }
        public vee_profile() : base(0) { }

        public static implicit operator vee_profile(SdaiInstance instance) => new vee_profile(instance);

        /// <summary>
        /// Create new instace of vee_profile and returns object of this class to interact with
        /// </summary>
        public static new vee_profile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vee_profile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "vee_profile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of versioned_action_request
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class versioned_action_request : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of versioned_action_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public versioned_action_request(SdaiInstance instance) : base(instance) { }
        public versioned_action_request() : base(0) { }

        public static implicit operator versioned_action_request(SdaiInstance instance) => new versioned_action_request(instance);

        /// <summary>
        /// Create new instace of versioned_action_request and returns object of this class to interact with
        /// </summary>
        public static new versioned_action_request Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "versioned_action_request"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue version
            {
            get { return get_string("version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "version", ifcengine.sdaiSTRING, value); }
            }
        public TextValue purpose
            {
            get { return get_string("purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "versioned_action_request"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of versioned_action_request_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class versioned_action_request_relationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of versioned_action_request_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public versioned_action_request_relationship(SdaiInstance instance) : base(instance) { }
        public versioned_action_request_relationship() : base(0) { }

        public static implicit operator versioned_action_request_relationship(SdaiInstance instance) => new versioned_action_request_relationship(instance);

        /// <summary>
        /// Create new instace of versioned_action_request_relationship and returns object of this class to interact with
        /// </summary>
        public static new versioned_action_request_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "versioned_action_request_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue id
            {
            get { return get_string("id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue name
            {
            get { return get_string("name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue description
            {
            get { return get_string("description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
            }
        public versioned_action_request relating_versioned_action_request 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_versioned_action_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "relating_versioned_action_request", ifcengine.sdaiINSTANCE, i); }
            }
        public versioned_action_request related_versioned_action_request 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_versioned_action_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "related_versioned_action_request", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "versioned_action_request_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex : topological_representation_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex(SdaiInstance instance) : base(instance) { }
        public vertex() : base(0) { }

        public static implicit operator vertex(SdaiInstance instance) => new vertex(instance);

        /// <summary>
        /// Create new instace of vertex and returns object of this class to interact with
        /// </summary>
        public static new vertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "vertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_loop : loop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_loop(SdaiInstance instance) : base(instance) { }
        public vertex_loop() : base(0) { }

        public static implicit operator vertex_loop(SdaiInstance instance) => new vertex_loop(instance);

        /// <summary>
        /// Create new instace of vertex_loop and returns object of this class to interact with
        /// </summary>
        public static new vertex_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_loop"); Debug.Assert(inst != 0); return inst; }

        public vertex loop_vertex 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, out inst); return new vertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "vertex_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_point : vertex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_point(SdaiInstance instance) : base(instance) { }
        public vertex_point() : base(0) { }

        public static implicit operator vertex_point(SdaiInstance instance) => new vertex_point(instance);

        /// <summary>
        /// Create new instace of vertex_point and returns object of this class to interact with
        /// </summary>
        public static new vertex_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_point"); Debug.Assert(inst != 0); return inst; }

        public point vertex_geometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, out inst); return new point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? dim { get { return get_IntValue("dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "vertex_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of view_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class view_volume : founded_item
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of view_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public view_volume(SdaiInstance instance) : base(instance) { }
        public view_volume() : base(0) { }

        public static implicit operator view_volume(SdaiInstance instance) => new view_volume(instance);

        /// <summary>
        /// Create new instace of view_volume and returns object of this class to interact with
        /// </summary>
        public static new view_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "view_volume"); Debug.Assert(inst != 0); return inst; }

        public central_or_parallel? projection_type 
            { 
            get { var str = get_string("projection_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.central_or_parallel_); return EnumValue<central_or_parallel>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<central_or_parallel>.FromValue(value.Value, EnumNames.central_or_parallel_); ifcengine.sdaiPutAttrBN(m_instance, "projection_type", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public cartesian_point projection_point 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projection_point", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "projection_point", ifcengine.sdaiINSTANCE, i); }
            }
        public double? view_plane_distance
            {
            get { return get_double("view_plane_distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "view_plane_distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? front_plane_distance
            {
            get { return get_double("front_plane_distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "front_plane_distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? front_plane_clipping
            {
            get { return get_bool("front_plane_clipping", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "front_plane_clipping", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public double? back_plane_distance
            {
            get { return get_double("back_plane_distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "back_plane_distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? back_plane_clipping
            {
            get { return get_bool("back_plane_clipping", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "back_plane_clipping", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? view_volume_sides_clipping
            {
            get { return get_bool("view_volume_sides_clipping", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "view_volume_sides_clipping", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public planar_box view_window 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, out inst); return new planar_box(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "view_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of visual_appearance_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class visual_appearance_representation : representation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of visual_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public visual_appearance_representation(SdaiInstance instance) : base(instance) { }
        public visual_appearance_representation() : base(0) { }

        public static implicit operator visual_appearance_representation(SdaiInstance instance) => new visual_appearance_representation(instance);

        /// <summary>
        /// Create new instace of visual_appearance_representation and returns object of this class to interact with
        /// </summary>
        public static new visual_appearance_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "visual_appearance_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "visual_appearance_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_measure_with_unit : measure_with_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public volume_measure_with_unit() : base(0) { }

        public static implicit operator volume_measure_with_unit(SdaiInstance instance) => new volume_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of volume_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "volume_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_unit : derived_unit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_unit(SdaiInstance instance) : base(instance) { }
        public volume_unit() : base(0) { }

        public static implicit operator volume_unit(SdaiInstance instance) => new volume_unit(instance);

        /// <summary>
        /// Create new instace of volume_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "volume_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of xor_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class xor_expression : binary_boolean_expression
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of xor_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public xor_expression(SdaiInstance instance) : base(instance) { }
        public xor_expression() : base(0) { }

        public static implicit operator xor_expression(SdaiInstance instance) => new xor_expression(instance);

        /// <summary>
        /// Create new instace of xor_expression and returns object of this class to interact with
        /// </summary>
        public static new xor_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "xor_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "xor_expression"; }
    };

}

